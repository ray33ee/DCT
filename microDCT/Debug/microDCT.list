
microDCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007904  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007ae4  08007ae4  00008ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc4  08007bc4  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007bc4  08007bc4  00008bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bcc  08007bcc  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bcc  08007bcc  00008bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bd0  08007bd0  00008bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007bd4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000068  08007c3c  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08007c3c  00009474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0d2  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000352a  00000000  00000000  0002316a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00026698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000126a  00000000  00000000  00027e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a996  00000000  00000000  000290b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ddd1  00000000  00000000  00053a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117681  00000000  00000000  00071819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188e9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd0  00000000  00000000  00188ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0018fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007acc 	.word	0x08007acc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08007acc 	.word	0x08007acc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005b4:	b0b8      	sub	sp, #224	@ 0xe0
 80005b6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 fa95 	bl	8001ae6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f924 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fba2 	bl	8000d08 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005c4:	f000 fa90 	bl	8000ae8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80005c8:	f000 fb52 	bl	8000c70 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005cc:	f000 fa36 	bl	8000a3c <MX_I2C1_Init>
  MX_ADC2_Init();
 80005d0:	f000 f966 	bl	80008a0 <MX_ADC2_Init>
  MX_ADC5_Init();
 80005d4:	f000 f9cc 	bl	8000970 <MX_ADC5_Init>
  MX_RNG_Init();
 80005d8:	f000 fa70 	bl	8000abc <MX_RNG_Init>
  MX_TIM3_Init();
 80005dc:	f000 fafa 	bl	8000bd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 80005e0:	487f      	ldr	r0, [pc, #508]	@ (80007e0 <main+0x230>)
 80005e2:	f004 fc3b 	bl	8004e5c <HAL_TIM_Base_Start>

  const uint32_t call_stack_size = 100;
 80005e6:	2364      	movs	r3, #100	@ 0x64
 80005e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  const uint32_t operand_stack_size = 100;
 80005ec:	2364      	movs	r3, #100	@ 0x64
 80005ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  uint32_t call_stack[call_stack_size];
 80005f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80005f6:	3b01      	subs	r3, #1
 80005f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80005fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000600:	2200      	movs	r2, #0
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	f04f 0200 	mov.w	r2, #0
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	014b      	lsls	r3, r1, #5
 8000612:	6839      	ldr	r1, [r7, #0]
 8000614:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8000618:	6839      	ldr	r1, [r7, #0]
 800061a:	014a      	lsls	r2, r1, #5
 800061c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000620:	2200      	movs	r2, #0
 8000622:	469a      	mov	sl, r3
 8000624:	4693      	mov	fp, r2
 8000626:	f04f 0200 	mov.w	r2, #0
 800062a:	f04f 0300 	mov.w	r3, #0
 800062e:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000632:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000636:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800063a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	3307      	adds	r3, #7
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	ebad 0d03 	sub.w	sp, sp, r3
 800064a:	ab04      	add	r3, sp, #16
 800064c:	3303      	adds	r3, #3
 800064e:	089b      	lsrs	r3, r3, #2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t operand_stack[operand_stack_size];
 8000656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800065a:	3b01      	subs	r3, #1
 800065c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000664:	2200      	movs	r2, #0
 8000666:	4698      	mov	r8, r3
 8000668:	4691      	mov	r9, r2
 800066a:	f04f 0200 	mov.w	r2, #0
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000676:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800067a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800067e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000682:	2200      	movs	r2, #0
 8000684:	461c      	mov	r4, r3
 8000686:	4615      	mov	r5, r2
 8000688:	f04f 0200 	mov.w	r2, #0
 800068c:	f04f 0300 	mov.w	r3, #0
 8000690:	016b      	lsls	r3, r5, #5
 8000692:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000696:	0162      	lsls	r2, r4, #5
 8000698:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	3307      	adds	r3, #7
 80006a0:	08db      	lsrs	r3, r3, #3
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	ebad 0d03 	sub.w	sp, sp, r3
 80006a8:	ab04      	add	r3, sp, #16
 80006aa:	3303      	adds	r3, #3
 80006ac:	089b      	lsrs	r3, r3, #2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  uint8_t buff[100];

  buff[0] = 0xf6;
 80006b4:	23f6      	movs	r3, #246	@ 0xf6
 80006b6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

  uint8_t rom[29] = {42, 6, 0, 0, 0, 200, 41, 0, 0, 0, 0, 60, 100, 0, 0, 0, 23, 60, 2, 0, 0, 0, 1, 203, 43, 0, 0, 0, 0, };
 80006ba:	4b4a      	ldr	r3, [pc, #296]	@ (80007e4 <main+0x234>)
 80006bc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80006c0:	461d      	mov	r5, r3
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006ca:	c407      	stmia	r4!, {r0, r1, r2}
 80006cc:	7023      	strb	r3, [r4, #0]

  vm_init(&vm_state, call_stack, operand_stack, call_stack_size, operand_stack_size, rom, sizeof(rom));
 80006ce:	231d      	movs	r3, #29
 80006d0:	9302      	str	r3, [sp, #8]
 80006d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80006e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80006e6:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 80006ea:	483f      	ldr	r0, [pc, #252]	@ (80007e8 <main+0x238>)
 80006ec:	f001 f9a4 	bl	8001a38 <vm_init>

  printf("POinter size: %i\n", sizeof(void*));
 80006f0:	2104      	movs	r1, #4
 80006f2:	483e      	ldr	r0, [pc, #248]	@ (80007ec <main+0x23c>)
 80006f4:	f006 fb7c 	bl	8006df0 <iprintf>

  rng_global_init();
 80006f8:	f000 fb62 	bl	8000dc0 <rng_global_init>

  printf("rng: %i\n", rng_global_next32());
 80006fc:	f000 fb74 	bl	8000de8 <rng_global_next32>
 8000700:	4603      	mov	r3, r0
 8000702:	4619      	mov	r1, r3
 8000704:	483a      	ldr	r0, [pc, #232]	@ (80007f0 <main+0x240>)
 8000706:	f006 fb73 	bl	8006df0 <iprintf>
  printf("rng: %i\n", rng_global_next32());
 800070a:	f000 fb6d 	bl	8000de8 <rng_global_next32>
 800070e:	4603      	mov	r3, r0
 8000710:	4619      	mov	r1, r3
 8000712:	4837      	ldr	r0, [pc, #220]	@ (80007f0 <main+0x240>)
 8000714:	f006 fb6c 	bl	8006df0 <iprintf>
  printf("rng: %i\n", rng_global_next32());
 8000718:	f000 fb66 	bl	8000de8 <rng_global_next32>
 800071c:	4603      	mov	r3, r0
 800071e:	4619      	mov	r1, r3
 8000720:	4833      	ldr	r0, [pc, #204]	@ (80007f0 <main+0x240>)
 8000722:	f006 fb65 	bl	8006df0 <iprintf>
  printf("rng: %i\n", rng_global_next32());
 8000726:	f000 fb5f 	bl	8000de8 <rng_global_next32>
 800072a:	4603      	mov	r3, r0
 800072c:	4619      	mov	r1, r3
 800072e:	4830      	ldr	r0, [pc, #192]	@ (80007f0 <main+0x240>)
 8000730:	f006 fb5e 	bl	8006df0 <iprintf>

  struct SOFT_I2C_HANDLE h2i2c;

  soft_i2c_init(&h2i2c, GPIOA, GPIO_PIN_10, GPIOC, GPIO_PIN_4, 10, 4);
 8000734:	f107 0010 	add.w	r0, r7, #16
 8000738:	2304      	movs	r3, #4
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	230a      	movs	r3, #10
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2310      	movs	r3, #16
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <main+0x244>)
 8000746:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800074a:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800074e:	f000 fb6f 	bl	8000e30 <soft_i2c_init>

  uint8_t who_am_i = 0x4F;
 8000752:	234f      	movs	r3, #79	@ 0x4f
 8000754:	73fb      	strb	r3, [r7, #15]

  //soft_i2c_start(&h2i2c);

  int r = soft_i2c_transmit(&h2i2c, 0x3c, &who_am_i, 1);
 8000756:	f107 020f 	add.w	r2, r7, #15
 800075a:	f107 0010 	add.w	r0, r7, #16
 800075e:	2301      	movs	r3, #1
 8000760:	213c      	movs	r1, #60	@ 0x3c
 8000762:	f000 fc6a 	bl	800103a <soft_i2c_transmit>
 8000766:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4

  int r1 = soft_i2c_receive(&h2i2c, 0x3c, &who_am_i, 1);
 800076a:	f107 020f 	add.w	r2, r7, #15
 800076e:	f107 0010 	add.w	r0, r7, #16
 8000772:	2301      	movs	r3, #1
 8000774:	213c      	movs	r1, #60	@ 0x3c
 8000776:	f000 fca8 	bl	80010ca <soft_i2c_receive>
 800077a:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

  printf("Soft i2c %i\n", who_am_i);
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	4619      	mov	r1, r3
 8000782:	481d      	ldr	r0, [pc, #116]	@ (80007f8 <main+0x248>)
 8000784:	f006 fb34 	bl	8006df0 <iprintf>
  soft_i2c_stop(&h2i2c);

  printf("i2c: %i\n", r);
  printf("i2c: %i\n", b);*/

  HAL_StatusTypeDef reta = HAL_I2C_Master_Transmit(&hi2c1, 0x3c, &who_am_i, 1, 10);
 8000788:	f107 020f 	add.w	r2, r7, #15
 800078c:	230a      	movs	r3, #10
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	213c      	movs	r1, #60	@ 0x3c
 8000794:	4819      	ldr	r0, [pc, #100]	@ (80007fc <main+0x24c>)
 8000796:	f002 fd03 	bl	80031a0 <HAL_I2C_Master_Transmit>
 800079a:	4603      	mov	r3, r0
 800079c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

  HAL_StatusTypeDef retb = HAL_I2C_Master_Receive(&hi2c1, 0x3d, &who_am_i, 1, 10);
 80007a0:	f107 020f 	add.w	r2, r7, #15
 80007a4:	230a      	movs	r3, #10
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	213d      	movs	r1, #61	@ 0x3d
 80007ac:	4813      	ldr	r0, [pc, #76]	@ (80007fc <main+0x24c>)
 80007ae:	f002 fe0f 	bl	80033d0 <HAL_I2C_Master_Receive>
 80007b2:	4603      	mov	r3, r0
 80007b4:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae



  printf("main i2c: %i\n", reta);
 80007b8:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80007bc:	4619      	mov	r1, r3
 80007be:	4810      	ldr	r0, [pc, #64]	@ (8000800 <main+0x250>)
 80007c0:	f006 fb16 	bl	8006df0 <iprintf>
  printf("main i2c: %i\n", retb);
 80007c4:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80007c8:	4619      	mov	r1, r3
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <main+0x250>)
 80007cc:	f006 fb10 	bl	8006df0 <iprintf>
  printf("whoami: %i\n", who_am_i);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	4619      	mov	r1, r3
 80007d4:	480b      	ldr	r0, [pc, #44]	@ (8000804 <main+0x254>)
 80007d6:	f006 fb0b 	bl	8006df0 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007da:	bf00      	nop
 80007dc:	e7fd      	b.n	80007da <main+0x22a>
 80007de:	bf00      	nop
 80007e0:	20000210 	.word	0x20000210
 80007e4:	08007b30 	.word	0x08007b30
 80007e8:	200002f0 	.word	0x200002f0
 80007ec:	08007ae4 	.word	0x08007ae4
 80007f0:	08007af8 	.word	0x08007af8
 80007f4:	48000800 	.word	0x48000800
 80007f8:	08007b04 	.word	0x08007b04
 80007fc:	2000015c 	.word	0x2000015c
 8000800:	08007b14 	.word	0x08007b14
 8000804:	08007b24 	.word	0x08007b24

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	@ 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2238      	movs	r2, #56	@ 0x38
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f006 fbd4 	bl	8006fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800082e:	f003 fa03 	bl	8003c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000836:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2340      	movs	r3, #64	@ 0x40
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000848:	2301      	movs	r3, #1
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800084c:	230c      	movs	r3, #12
 800084e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000854:	2304      	movs	r3, #4
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0318 	add.w	r3, r7, #24
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fa9d 	bl	8003da0 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800086c:	f000 fa88 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	2303      	movs	r3, #3
 8000876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2103      	movs	r1, #3
 8000888:	4618      	mov	r0, r3
 800088a:	f003 fd9b 	bl	80043c4 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000894:	f000 fa74 	bl	8000d80 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3750      	adds	r7, #80	@ 0x50
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2220      	movs	r2, #32
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f006 fb89 	bl	8006fc4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008b4:	4a2b      	ldr	r2, [pc, #172]	@ (8000964 <MX_ADC2_Init+0xc4>)
 80008b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008b8:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008c0:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c6:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80008cc:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d2:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d8:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008da:	2204      	movs	r2, #4
 80008dc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_ADC2_Init+0xc0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_ADC2_Init+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_ADC2_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_ADC2_Init+0xc0>)
 800090e:	2200      	movs	r2, #0
 8000910:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_ADC2_Init+0xc0>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800091a:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_ADC2_Init+0xc0>)
 800091c:	f001 fb2a 	bl	8001f74 <HAL_ADC_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000926:	f000 fa2b 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_ADC2_Init+0xc8>)
 800092c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092e:	2306      	movs	r3, #6
 8000930:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <MX_ADC2_Init+0xcc>)
 8000938:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093a:	2304      	movs	r3, #4
 800093c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	@ (8000960 <MX_ADC2_Init+0xc0>)
 8000948:	f001 fcd0 	bl	80022ec <HAL_ADC_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000952:	f000 fa15 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000084 	.word	0x20000084
 8000964:	50000100 	.word	0x50000100
 8000968:	0c900008 	.word	0x0c900008
 800096c:	407f0000 	.word	0x407f0000

08000970 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2220      	movs	r2, #32
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f006 fb21 	bl	8006fc4 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000982:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 8000984:	4a2b      	ldr	r2, [pc, #172]	@ (8000a34 <MX_ADC5_Init+0xc4>)
 8000986:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000988:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 800098a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800098e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000990:	4b27      	ldr	r3, [pc, #156]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800099c:	4b24      	ldr	r3, [pc, #144]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009aa:	2204      	movs	r2, #4
 80009ac:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009bc:	2201      	movs	r2, #1
 80009be:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c8:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80009d4:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80009ea:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 80009ec:	f001 fac2 	bl	8001f74 <HAL_ADC_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80009f6:	f000 f9c3 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_ADC5_Init+0xc8>)
 80009fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fe:	2306      	movs	r3, #6
 8000a00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a06:	237f      	movs	r3, #127	@ 0x7f
 8000a08:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <MX_ADC5_Init+0xc0>)
 8000a18:	f001 fc68 	bl	80022ec <HAL_ADC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000a22:	f000 f9ad 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000f0 	.word	0x200000f0
 8000a34:	50000600 	.word	0x50000600
 8000a38:	04300002 	.word	0x04300002

08000a3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab4 <MX_I2C1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B17DB6;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab8 <MX_I2C1_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a76:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a78:	f002 faf6 	bl	8003068 <HAL_I2C_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a82:	f000 f97d 	bl	8000d80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a8a:	f003 f83d 	bl	8003b08 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 f974 	bl	8000d80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a9c:	f003 f87f 	bl	8003b9e <HAL_I2CEx_ConfigDigitalFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 f96b 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000015c 	.word	0x2000015c
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	20b17db6 	.word	0x20b17db6

08000abc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <MX_RNG_Init+0x24>)
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <MX_RNG_Init+0x28>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_RNG_Init+0x24>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_RNG_Init+0x24>)
 8000ace:	f004 f8e3 	bl	8004c98 <HAL_RNG_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000ad8:	f000 f952 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200001b0 	.word	0x200001b0
 8000ae4:	50060800 	.word	0x50060800

08000ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	@ 0x38
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
 8000b16:	615a      	str	r2, [r3, #20]
 8000b18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3333;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b30:	f640 5205 	movw	r2, #3333	@ 0xd05
 8000b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b42:	4823      	ldr	r0, [pc, #140]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b44:	f004 f933 	bl	8004dae <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b4e:	f000 f917 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481c      	ldr	r0, [pc, #112]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b60:	f004 fb62 	bl	8005228 <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b6a:	f000 f909 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b6e:	4818      	ldr	r0, [pc, #96]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b70:	f004 f9e4 	bl	8004f3c <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b7a:	f000 f901 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b8e:	f005 f8db 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b98:	f000 f8f2 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9c:	2360      	movs	r3, #96	@ 0x60
 8000b9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000bb4:	f004 fa24 	bl	8005000 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bbe:	f000 f8df 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bc2:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <MX_TIM2_Init+0xe8>)
 8000bc4:	f000 fdb6 	bl	8001734 <HAL_TIM_MspPostInit>

}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	@ 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200001c4 	.word	0x200001c4

08000bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <MX_TIM3_Init+0x94>)
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c6c <MX_TIM3_Init+0x98>)
 8000bf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_TIM3_Init+0x94>)
 8000bfa:	225f      	movs	r2, #95	@ 0x5f
 8000bfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_TIM3_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c04:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_TIM3_Init+0x94>)
 8000c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_TIM3_Init+0x94>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_TIM3_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c18:	4813      	ldr	r0, [pc, #76]	@ (8000c68 <MX_TIM3_Init+0x94>)
 8000c1a:	f004 f8c8 	bl	8004dae <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c24:	f000 f8ac 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	4619      	mov	r1, r3
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <MX_TIM3_Init+0x94>)
 8000c36:	f004 faf7 	bl	8005228 <HAL_TIM_ConfigClockSource>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c40:	f000 f89e 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_TIM3_Init+0x94>)
 8000c52:	f005 f879 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c5c:	f000 f890 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	3720      	adds	r7, #32
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000210 	.word	0x20000210
 8000c6c:	40000400 	.word	0x40000400

08000c70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c74:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c76:	4a23      	ldr	r2, [pc, #140]	@ (8000d04 <MX_USART2_UART_Init+0x94>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb8:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000cba:	f005 f8db 	bl	8005e74 <HAL_UART_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f000 f85c 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000ccc:	f005 ff04 	bl	8006ad8 <HAL_UARTEx_SetTxFifoThreshold>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd6:	f000 f853 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4808      	ldr	r0, [pc, #32]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000cde:	f005 ff39 	bl	8006b54 <HAL_UARTEx_SetRxFifoThreshold>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce8:	f000 f84a 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <MX_USART2_UART_Init+0x90>)
 8000cee:	f005 feba 	bl	8006a66 <HAL_UARTEx_DisableFifoMode>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf8:	f000 f842 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000025c 	.word	0x2000025c
 8000d04:	40004400 	.word	0x40004400

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	4a1a      	ldr	r2, [pc, #104]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d32:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	4a0e      	ldr	r2, [pc, #56]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a08      	ldr	r2, [pc, #32]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_GPIO_Init+0x74>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <misc_delay_us>:
 */

#include "misc.h"

void misc_delay_us(uint16_t us)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <misc_delay_us+0x30>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8000d9e:	bf00      	nop
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <misc_delay_us+0x30>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d3f9      	bcc.n	8000da0 <misc_delay_us+0x14>
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000210 	.word	0x20000210

08000dc0 <rng_global_init>:
#include "rng.h"

struct RNG_State GLOBAL_RNG_STATE;

/* Initialise the rng state with a seed from the RNG peripheral */
void rng_global_init() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	if (HAL_RNG_GenerateRandomNumber(&hrng, &(GLOBAL_RNG_STATE._state)) != HAL_OK) {
 8000dc4:	4906      	ldr	r1, [pc, #24]	@ (8000de0 <rng_global_init+0x20>)
 8000dc6:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <rng_global_init+0x24>)
 8000dc8:	f003 ff9b 	bl	8004d02 <HAL_RNG_GenerateRandomNumber>
		//error
	}

	//Zero is a fixed point so we map it to 1 instead
	if (GLOBAL_RNG_STATE._state == 0) {
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <rng_global_init+0x20>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <rng_global_init+0x1a>
		GLOBAL_RNG_STATE._state = 1;
 8000dd4:	4b02      	ldr	r3, [pc, #8]	@ (8000de0 <rng_global_init+0x20>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
	}
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000031c 	.word	0x2000031c
 8000de4:	200001b0 	.word	0x200001b0

08000de8 <rng_global_next32>:
		GLOBAL_RNG_STATE._state = seed;
	}
}

/* Use xorshift32 to generate the next seed */
uint32_t rng_global_next32() {
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state << 13;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <rng_global_next32+0x44>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <rng_global_next32+0x44>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	035b      	lsls	r3, r3, #13
 8000df6:	4053      	eors	r3, r2
 8000df8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e2c <rng_global_next32+0x44>)
 8000dfa:	6013      	str	r3, [r2, #0]
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state >> 17;
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <rng_global_next32+0x44>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <rng_global_next32+0x44>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	0c5b      	lsrs	r3, r3, #17
 8000e06:	4053      	eors	r3, r2
 8000e08:	4a08      	ldr	r2, [pc, #32]	@ (8000e2c <rng_global_next32+0x44>)
 8000e0a:	6013      	str	r3, [r2, #0]
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state << 5;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <rng_global_next32+0x44>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <rng_global_next32+0x44>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	4053      	eors	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <rng_global_next32+0x44>)
 8000e1a:	6013      	str	r3, [r2, #0]
	return GLOBAL_RNG_STATE._state;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <rng_global_next32+0x44>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	2000031c 	.word	0x2000031c

08000e30 <soft_i2c_init>:

#define HOLD_TIME (2) //t_{HD;STA}
#define SCL_HIGH_TIME (1) //t_{HD;STA}

/* Set soft SDA and SCL to open drain outputs */
void soft_i2c_init(struct SOFT_I2C_HANDLE* i2c_handle, GPIO_TypeDef *sda_port, uint16_t sda_pin, GPIO_TypeDef *scl_port, uint16_t scl_pin, uint32_t sda_pos, uint32_t scl_pos) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	80fb      	strh	r3, [r7, #6]
	i2c_handle->SDA_GPIO_port = sda_port;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	601a      	str	r2, [r3, #0]
	i2c_handle->SDA_GPIO_pin = sda_pin;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	88fa      	ldrh	r2, [r7, #6]
 8000e4a:	809a      	strh	r2, [r3, #4]
	i2c_handle->SCL_GPIO_port = scl_port;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	609a      	str	r2, [r3, #8]
	i2c_handle->SCL_GPIO_pin = scl_pin;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	8c3a      	ldrh	r2, [r7, #32]
 8000e56:	819a      	strh	r2, [r3, #12]

	i2c_handle->SDA_GPIO_POS = sda_pos;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e5c:	615a      	str	r2, [r3, #20]
	i2c_handle->SCL_GPIO_POS = scl_pos;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e62:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_pin, GPIO_PIN_SET);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6898      	ldr	r0, [r3, #8]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	899b      	ldrh	r3, [r3, #12]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f002 f8e2 	bl	8003038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_pin, GPIO_PIN_SET);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	889b      	ldrh	r3, [r3, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f002 f8da 	bl	8003038 <HAL_GPIO_WritePin>
	// Set SCL to an output
	soft_i2c_output(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_POS);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4610      	mov	r0, r2
 8000e90:	f000 fa46 	bl	8001320 <soft_i2c_output>
	// Set SDA to an output
	soft_i2c_output(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_POS);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	f000 fa3e 	bl	8001320 <soft_i2c_output>
	uint32_t temp;

	/* Configure SDA as High frequency, no-pullup output open drain

	/* Configure the IO Speed */
	temp = sda_port->OSPEEDR;
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	617b      	str	r3, [r7, #20]
	temp &= ~(GPIO_OSPEEDR_OSPEED0 << (sda_pos * 2U));
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]
	temp |= (GPIO_SPEED_FREQ_HIGH << (sda_pos * 2U));
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]
	sda_port->OSPEEDR = temp;
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	609a      	str	r2, [r3, #8]

	/* Configure the IO Output Type */
	temp = sda_port->OTYPER;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
	temp &= ~(GPIO_OTYPER_OT0 << sda_pos) ;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
	temp |= (((GPIO_MODE_OUTPUT_OD & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << sda_pos);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]
	sda_port->OTYPER = temp;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	605a      	str	r2, [r3, #4]

	/* Activate the Pull-up or Pull down resistor for the current IO */
	temp = sda_port->PUPDR;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	617b      	str	r3, [r7, #20]
	temp &= ~(GPIO_PUPDR_PUPD0 << (sda_pos * 2U));
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
	temp |= ((GPIO_NOPULL) << (sda_pos * 2U));
	sda_port->PUPDR = temp;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	60da      	str	r2, [r3, #12]

	/* Configure SCL as High frequency, no-pullup output open drain

	/* Configure the IO Speed */
	temp = scl_port->OSPEEDR;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	617b      	str	r3, [r7, #20]
	temp &= ~(GPIO_OSPEEDR_OSPEED0 << (scl_pos * 2U));
 8000f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	617b      	str	r3, [r7, #20]
	temp |= (GPIO_SPEED_FREQ_HIGH << (scl_pos * 2U));
 8000f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2202      	movs	r2, #2
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]
	scl_port->OSPEEDR = temp;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	609a      	str	r2, [r3, #8]

	/* Configure the IO Output Type */
	temp = scl_port->OTYPER;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	617b      	str	r3, [r7, #20]
	temp &= ~(GPIO_OTYPER_OT0 << scl_pos) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	617b      	str	r3, [r7, #20]
	temp |= (((GPIO_MODE_OUTPUT_OD & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << scl_pos);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
	scl_port->OTYPER = temp;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	605a      	str	r2, [r3, #4]

	/* Activate the Pull-up or Pull down resistor for the current IO */
	temp = sda_port->PUPDR;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	617b      	str	r3, [r7, #20]
	temp &= ~(GPIO_PUPDR_PUPD0 << (scl_pos * 2U));
 8000f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4013      	ands	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]
	temp |= ((GPIO_NOPULL) << (scl_pos * 2U));
	scl_port->PUPDR = temp;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	60da      	str	r2, [r3, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <soft_i2c_start>:

/* Create the start condition */
void soft_i2c_start(struct SOFT_I2C_HANDLE* i2c_handle) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

	soft_i2c_high(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_pin);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4610      	mov	r0, r2
 8000fac:	f000 f9da 	bl	8001364 <soft_i2c_high>
	soft_i2c_high(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_pin);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	899b      	ldrh	r3, [r3, #12]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f000 f9d2 	bl	8001364 <soft_i2c_high>

	misc_delay_us(HOLD_TIME);
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff fee3 	bl	8000d8c <misc_delay_us>

	//Bring SDA low to initiate a start condition
	soft_i2c_low(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_pin);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	889b      	ldrh	r3, [r3, #4]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	f000 f9d6 	bl	8001382 <soft_i2c_low>

	//Wait the hold time
	misc_delay_us(HOLD_TIME);
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f7ff fed8 	bl	8000d8c <misc_delay_us>

	//Then set SCL low to prepare for the first clock pulse
	soft_i2c_low(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_pin);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	899b      	ldrh	r3, [r3, #12]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	f000 f9cb 	bl	8001382 <soft_i2c_low>

}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <soft_i2c_stop>:

/* Create the stop condition */
void soft_i2c_stop(struct SOFT_I2C_HANDLE* i2c_handle) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

	soft_i2c_low(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_pin);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	889b      	ldrh	r3, [r3, #4]
 8001004:	4619      	mov	r1, r3
 8001006:	4610      	mov	r0, r2
 8001008:	f000 f9bb 	bl	8001382 <soft_i2c_low>
	soft_i2c_high(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_pin);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	899b      	ldrh	r3, [r3, #12]
 8001014:	4619      	mov	r1, r3
 8001016:	4610      	mov	r0, r2
 8001018:	f000 f9a4 	bl	8001364 <soft_i2c_high>

	misc_delay_us(HOLD_TIME);
 800101c:	2002      	movs	r0, #2
 800101e:	f7ff feb5 	bl	8000d8c <misc_delay_us>

	soft_i2c_high(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_pin);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	889b      	ldrh	r3, [r3, #4]
 800102a:	4619      	mov	r1, r3
 800102c:	4610      	mov	r0, r2
 800102e:	f000 f999 	bl	8001364 <soft_i2c_high>

}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <soft_i2c_transmit>:

int soft_i2c_transmit(struct SOFT_I2C_HANDLE* i2c_handle, uint8_t address, uint8_t* data, uint32_t length) {
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	460b      	mov	r3, r1
 8001048:	72fb      	strb	r3, [r7, #11]
	soft_i2c_output(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_POS);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4619      	mov	r1, r3
 8001054:	4610      	mov	r0, r2
 8001056:	f000 f963 	bl	8001320 <soft_i2c_output>
	soft_i2c_output(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_POS);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	4619      	mov	r1, r3
 8001064:	4610      	mov	r0, r2
 8001066:	f000 f95b 	bl	8001320 <soft_i2c_output>

	//Create START condition
	soft_i2c_start(i2c_handle);
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff ff94 	bl	8000f98 <soft_i2c_start>

	//Send address
	if (soft_i2c_transmit_byte(i2c_handle, address) != GPIO_PIN_RESET) {
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	4619      	mov	r1, r3
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f000 f876 	bl	8001166 <soft_i2c_transmit_byte>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <soft_i2c_transmit+0x4c>
		//NACK
		return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	e01d      	b.n	80010c2 <soft_i2c_transmit+0x88>
	}

	for (int i = 0; i < length; i++) {
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e012      	b.n	80010b2 <soft_i2c_transmit+0x78>
		if (soft_i2c_transmit_byte(i2c_handle, data[i]) != GPIO_PIN_RESET) {
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 f865 	bl	8001166 <soft_i2c_transmit_byte>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <soft_i2c_transmit+0x72>
			//NACK
			return -1*i-2;
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	f06f 0301 	mvn.w	r3, #1
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	e00a      	b.n	80010c2 <soft_i2c_transmit+0x88>
	for (int i = 0; i < length; i++) {
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d8e8      	bhi.n	800108c <soft_i2c_transmit+0x52>
	}




	soft_i2c_stop(i2c_handle);
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f7ff ff9a 	bl	8000ff4 <soft_i2c_stop>

	return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <soft_i2c_receive>:

int soft_i2c_receive(struct SOFT_I2C_HANDLE* i2c_handle, uint8_t address, uint8_t* data, uint32_t length) {
 80010ca:	b590      	push	{r4, r7, lr}
 80010cc:	b087      	sub	sp, #28
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	460b      	mov	r3, r1
 80010d8:	72fb      	strb	r3, [r7, #11]
	soft_i2c_output(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_POS);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4610      	mov	r0, r2
 80010e6:	f000 f91b 	bl	8001320 <soft_i2c_output>
	soft_i2c_output(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_POS);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f000 f913 	bl	8001320 <soft_i2c_output>

	//Create START condition
	soft_i2c_start(i2c_handle);
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff ff4c 	bl	8000f98 <soft_i2c_start>

	//Send address
	if (soft_i2c_transmit_byte(i2c_handle, address | 1) != GPIO_PIN_RESET) {
 8001100:	7afb      	ldrb	r3, [r7, #11]
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4619      	mov	r1, r3
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 f82b 	bl	8001166 <soft_i2c_transmit_byte>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <soft_i2c_receive+0x52>
		//NACK
		return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e020      	b.n	800115e <soft_i2c_receive+0x94>
	}

	for (int i = 0; i < length; i++) {
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e016      	b.n	8001150 <soft_i2c_receive+0x86>
		GPIO_PinState ack;
		if (i == length - 1) {
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	d102      	bne.n	8001132 <soft_i2c_receive+0x68>
			ack = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	74fb      	strb	r3, [r7, #19]
 8001130:	e001      	b.n	8001136 <soft_i2c_receive+0x6c>
		} else {
			ack = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	74fb      	strb	r3, [r7, #19]
		}

		data[i] = soft_i2c_receive_byte(i2c_handle, ack);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	18d4      	adds	r4, r2, r3
 800113c:	7cfb      	ldrb	r3, [r7, #19]
 800113e:	4619      	mov	r1, r3
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f000 f872 	bl	800122a <soft_i2c_receive_byte>
 8001146:	4603      	mov	r3, r0
 8001148:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < length; i++) {
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8e4      	bhi.n	8001122 <soft_i2c_receive+0x58>
	}

	soft_i2c_stop(i2c_handle);
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff ff4b 	bl	8000ff4 <soft_i2c_stop>




}
 800115e:	4618      	mov	r0, r3
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}

08001166 <soft_i2c_transmit_byte>:

GPIO_PinState soft_i2c_transmit_byte(struct SOFT_I2C_HANDLE* i2c_handle, uint8_t byte) {
 8001166:	b580      	push	{r7, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]

	for (int i = 0; i < 8; i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e00e      	b.n	8001196 <soft_i2c_transmit_byte+0x30>
		uint8_t bit = byte & 0b10000000;
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800117e:	72bb      	strb	r3, [r7, #10]

		soft_i2c_transmit_bit(i2c_handle, bit);
 8001180:	7abb      	ldrb	r3, [r7, #10]
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f82b 	bl	80011e0 <soft_i2c_transmit_bit>

		byte <<= 1;
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 8; i++) {
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b07      	cmp	r3, #7
 800119a:	dded      	ble.n	8001178 <soft_i2c_transmit_byte+0x12>
	}

	soft_i2c_input(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_POS);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4610      	mov	r0, r2
 80011a8:	f000 f8a0 	bl	80012ec <soft_i2c_input>

	GPIO_PinState ack = soft_i2c_receive_bit(i2c_handle);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f877 	bl	80012a0 <soft_i2c_receive_bit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	72fb      	strb	r3, [r7, #11]

	soft_i2c_low(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_pin);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	889b      	ldrh	r3, [r3, #4]
 80011be:	4619      	mov	r1, r3
 80011c0:	4610      	mov	r0, r2
 80011c2:	f000 f8de 	bl	8001382 <soft_i2c_low>

	soft_i2c_output(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_POS);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f000 f8a5 	bl	8001320 <soft_i2c_output>

	return ack;
 80011d6:	7afb      	ldrb	r3, [r7, #11]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <soft_i2c_transmit_bit>:

/* Send a single data bit */
void soft_i2c_transmit_bit(struct SOFT_I2C_HANDLE* i2c_handle, GPIO_PinState value) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
	// Set or Reset SDA based on value
	soft_i2c_write(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_pin, value);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	889b      	ldrh	r3, [r3, #4]
 80011f4:	78fa      	ldrb	r2, [r7, #3]
 80011f6:	4619      	mov	r1, r3
 80011f8:	f000 f8d2 	bl	80013a0 <soft_i2c_write>
	//Clock SCL
	soft_i2c_high(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_pin);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	899b      	ldrh	r3, [r3, #12]
 8001204:	4619      	mov	r1, r3
 8001206:	4610      	mov	r0, r2
 8001208:	f000 f8ac 	bl	8001364 <soft_i2c_high>
	misc_delay_us(SCL_HIGH_TIME);
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fdbd 	bl	8000d8c <misc_delay_us>
	soft_i2c_low(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_pin);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	899b      	ldrh	r3, [r3, #12]
 800121a:	4619      	mov	r1, r3
 800121c:	4610      	mov	r0, r2
 800121e:	f000 f8b0 	bl	8001382 <soft_i2c_low>

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <soft_i2c_receive_byte>:

uint8_t soft_i2c_receive_byte(struct SOFT_I2C_HANDLE* i2c_handle, GPIO_PinState ack) {
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	70fb      	strb	r3, [r7, #3]

	soft_i2c_input(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_POS);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	4619      	mov	r1, r3
 8001240:	4610      	mov	r0, r2
 8001242:	f000 f853 	bl	80012ec <soft_i2c_input>

	uint8_t rec = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]

	for (int i = 7; i >= 0; i--) {
 800124a:	2307      	movs	r3, #7
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	e012      	b.n	8001276 <soft_i2c_receive_byte+0x4c>
		if (soft_i2c_receive_bit(i2c_handle) != GPIO_PIN_RESET) {
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f825 	bl	80012a0 <soft_i2c_receive_bit>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d009      	beq.n	8001270 <soft_i2c_receive_byte+0x46>
			rec |= 1 << i;
 800125c:	2201      	movs	r2, #1
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	b25a      	sxtb	r2, r3
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	4313      	orrs	r3, r2
 800126c:	b25b      	sxtb	r3, r3
 800126e:	73fb      	strb	r3, [r7, #15]
	for (int i = 7; i >= 0; i--) {
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	3b01      	subs	r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	dae9      	bge.n	8001250 <soft_i2c_receive_byte+0x26>
		}
	}

	soft_i2c_output(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_POS);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4619      	mov	r1, r3
 8001286:	4610      	mov	r0, r2
 8001288:	f000 f84a 	bl	8001320 <soft_i2c_output>

	soft_i2c_transmit_bit(i2c_handle, ack);
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffa5 	bl	80011e0 <soft_i2c_transmit_bit>

	return rec;
 8001296:	7bfb      	ldrb	r3, [r7, #15]

}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <soft_i2c_receive_bit>:

/* Receive a single data bit */
GPIO_PinState soft_i2c_receive_bit(struct SOFT_I2C_HANDLE* i2c_handle) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	soft_i2c_high(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_pin);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	899b      	ldrh	r3, [r3, #12]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4610      	mov	r0, r2
 80012b4:	f000 f856 	bl	8001364 <soft_i2c_high>

	//Read SDA
	GPIO_PinState value = soft_i2c_read(i2c_handle->SDA_GPIO_port, i2c_handle->SDA_GPIO_pin);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	889b      	ldrh	r3, [r3, #4]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f000 f884 	bl	80013d0 <soft_i2c_read>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]

	//Clock SCL
	misc_delay_us(SCL_HIGH_TIME);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fd5d 	bl	8000d8c <misc_delay_us>
	soft_i2c_low(i2c_handle->SCL_GPIO_port, i2c_handle->SCL_GPIO_pin);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	899b      	ldrh	r3, [r3, #12]
 80012da:	4619      	mov	r1, r3
 80012dc:	4610      	mov	r0, r2
 80012de:	f000 f850 	bl	8001382 <soft_i2c_low>

	return value;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <soft_i2c_input>:

/* Set the GPIO pin as an input */
void soft_i2c_input(GPIO_TypeDef *GPIO_port, uint32_t position) {
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]

	uint32_t temp;

	/* Configure IO Direction mode as Output Open drain */
	temp = GPIO_port->MODER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	60fb      	str	r3, [r7, #12]
	temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
	temp |= ((GPIO_MODE_INPUT & GPIO_MODE) << (position * 2U));
	GPIO_port->MODER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <soft_i2c_output>:

/* Set the GPIO pin as an open drain output */
void soft_i2c_output(GPIO_TypeDef *GPIOx, uint32_t position) {
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]

	uint32_t temp;

	/* Configure IO Direction mode as Output Open drain */
	temp = GPIOx->MODER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60fb      	str	r3, [r7, #12]
	temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4013      	ands	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
	temp |= ((GPIO_MODE_OUTPUT_OD & GPIO_MODE) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2201      	movs	r2, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
	GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	601a      	str	r2, [r3, #0]

}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <soft_i2c_high>:

/* Set an output pin as high */
void soft_i2c_high(GPIO_TypeDef *GPIO_port, uint16_t GPIO_pin) {
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
	GPIO_port->BSRR = (uint32_t)GPIO_pin;
 8001370:	887a      	ldrh	r2, [r7, #2]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	619a      	str	r2, [r3, #24]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <soft_i2c_low>:

/* Reset an output pin as low */
void soft_i2c_low(GPIO_TypeDef *GPIO_port, uint16_t GPIO_pin) {
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	807b      	strh	r3, [r7, #2]
	GPIO_port->BRR = (uint32_t)GPIO_pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <soft_i2c_write>:

/* Set or reset pin */
void soft_i2c_write(GPIO_TypeDef *GPIO_port, uint16_t GPIO_pin, GPIO_PinState value) {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
	if (value == GPIO_PIN_RESET) {
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d103      	bne.n	80013be <soft_i2c_write+0x1e>
		GPIO_port->BRR = (uint32_t)GPIO_pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	629a      	str	r2, [r3, #40]	@ 0x28
	} else {
		GPIO_port->BSRR = (uint32_t)GPIO_pin;
	}
}
 80013bc:	e002      	b.n	80013c4 <soft_i2c_write+0x24>
		GPIO_port->BSRR = (uint32_t)GPIO_pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	619a      	str	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <soft_i2c_read>:

/* Read an input pin */
GPIO_PinState soft_i2c_read(GPIO_TypeDef *GPIO_port, uint16_t GPIO_pin) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
	if ((GPIO_port->IDR & GPIO_pin) != 0x00U) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <soft_i2c_read+0x1c>
		return GPIO_PIN_SET;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <soft_i2c_read+0x1e>
	}
	else {
		return GPIO_PIN_RESET;
 80013ec:	2300      	movs	r3, #0
	}
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_MspInit+0x44>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001406:	4a0e      	ldr	r2, [pc, #56]	@ (8001440 <HAL_MspInit+0x44>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6613      	str	r3, [r2, #96]	@ 0x60
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <HAL_MspInit+0x44>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_MspInit+0x44>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <HAL_MspInit+0x44>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001424:	6593      	str	r3, [r2, #88]	@ 0x58
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_MspInit+0x44>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001432:	f002 fca5 	bl	8003d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0a0      	sub	sp, #128	@ 0x80
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	2254      	movs	r2, #84	@ 0x54
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f005 fdad 	bl	8006fc4 <memset>
  if(hadc->Instance==ADC2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a3c      	ldr	r2, [pc, #240]	@ (8001560 <HAL_ADC_MspInit+0x11c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d135      	bne.n	80014e0 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001474:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001478:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800147a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800147e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f003 f9b9 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001490:	f7ff fc76 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001494:	4b33      	ldr	r3, [pc, #204]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	4a32      	ldr	r2, [pc, #200]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 800149a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800149e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a0:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014c4:	23c0      	movs	r3, #192	@ 0xc0
 80014c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c8:	2303      	movs	r3, #3
 80014ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014da:	f001 fc2b 	bl	8002d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80014de:	e03a      	b.n	8001556 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC5)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a20      	ldr	r2, [pc, #128]	@ (8001568 <HAL_ADC_MspInit+0x124>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d135      	bne.n	8001556 <HAL_ADC_MspInit+0x112>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80014f4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 f97e 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_ADC_MspInit+0xc6>
      Error_Handler();
 8001506:	f7ff fc3b 	bl	8000d80 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a15      	ldr	r2, [pc, #84]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a0f      	ldr	r2, [pc, #60]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <HAL_ADC_MspInit+0x120>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800153a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800153e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001540:	2303      	movs	r3, #3
 8001542:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800154c:	4619      	mov	r1, r3
 800154e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001552:	f001 fbef 	bl	8002d34 <HAL_GPIO_Init>
}
 8001556:	bf00      	nop
 8001558:	3780      	adds	r7, #128	@ 0x80
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	50000100 	.word	0x50000100
 8001564:	40021000 	.word	0x40021000
 8001568:	50000600 	.word	0x50000600

0800156c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0a0      	sub	sp, #128	@ 0x80
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	2254      	movs	r2, #84	@ 0x54
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f005 fd19 	bl	8006fc4 <memset>
  if(hi2c->Instance==I2C1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a30      	ldr	r2, [pc, #192]	@ (8001658 <HAL_I2C_MspInit+0xec>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d159      	bne.n	8001650 <HAL_I2C_MspInit+0xe4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800159c:	2340      	movs	r3, #64	@ 0x40
 800159e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a4:	f107 0318 	add.w	r3, r7, #24
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 f927 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015b4:	f7ff fbe4 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b28      	ldr	r3, [pc, #160]	@ (800165c <HAL_I2C_MspInit+0xf0>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	4a27      	ldr	r2, [pc, #156]	@ (800165c <HAL_I2C_MspInit+0xf0>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c4:	4b25      	ldr	r3, [pc, #148]	@ (800165c <HAL_I2C_MspInit+0xf0>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <HAL_I2C_MspInit+0xf0>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d4:	4a21      	ldr	r2, [pc, #132]	@ (800165c <HAL_I2C_MspInit+0xf0>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015dc:	4b1f      	ldr	r3, [pc, #124]	@ (800165c <HAL_I2C_MspInit+0xf0>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ee:	2312      	movs	r3, #18
 80015f0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015fa:	2304      	movs	r3, #4
 80015fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001602:	4619      	mov	r1, r3
 8001604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001608:	f001 fb94 	bl	8002d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001614:	2301      	movs	r3, #1
 8001616:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161c:	2304      	movs	r3, #4
 800161e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001624:	4619      	mov	r1, r3
 8001626:	480e      	ldr	r0, [pc, #56]	@ (8001660 <HAL_I2C_MspInit+0xf4>)
 8001628:	f001 fb84 	bl	8002d34 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <HAL_I2C_MspInit+0xf8>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4a0c      	ldr	r2, [pc, #48]	@ (8001664 <HAL_I2C_MspInit+0xf8>)
 8001632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001636:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <HAL_I2C_MspInit+0xf0>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163c:	4a07      	ldr	r2, [pc, #28]	@ (800165c <HAL_I2C_MspInit+0xf0>)
 800163e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001642:	6593      	str	r3, [r2, #88]	@ 0x58
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <HAL_I2C_MspInit+0xf0>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001650:	bf00      	nop
 8001652:	3780      	adds	r7, #128	@ 0x80
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40005400 	.word	0x40005400
 800165c:	40021000 	.word	0x40021000
 8001660:	48000400 	.word	0x48000400
 8001664:	40010000 	.word	0x40010000

08001668 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b098      	sub	sp, #96	@ 0x60
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2254      	movs	r2, #84	@ 0x54
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f005 fca3 	bl	8006fc4 <memset>
  if(hrng->Instance==RNG)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a11      	ldr	r2, [pc, #68]	@ (80016c8 <HAL_RNG_MspInit+0x60>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d11b      	bne.n	80016c0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001688:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800168c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 800168e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001692:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4618      	mov	r0, r3
 800169a:	f003 f8af 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80016a4:	f7ff fb6c 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <HAL_RNG_MspInit+0x64>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ac:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <HAL_RNG_MspInit+0x64>)
 80016ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_RNG_MspInit+0x64>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80016c0:	bf00      	nop
 80016c2:	3760      	adds	r7, #96	@ 0x60
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	50060800 	.word	0x50060800
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016e0:	d10c      	bne.n	80016fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_TIM_Base_MspInit+0x5c>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	4a11      	ldr	r2, [pc, #68]	@ (800172c <HAL_TIM_Base_MspInit+0x5c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <HAL_TIM_Base_MspInit+0x5c>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016fa:	e010      	b.n	800171e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_TIM_Base_MspInit+0x60>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10b      	bne.n	800171e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_TIM_Base_MspInit+0x5c>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170a:	4a08      	ldr	r2, [pc, #32]	@ (800172c <HAL_TIM_Base_MspInit+0x5c>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6593      	str	r3, [r2, #88]	@ 0x58
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_TIM_Base_MspInit+0x5c>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40000400 	.word	0x40000400

08001734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001754:	d11c      	bne.n	8001790 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <HAL_TIM_MspPostInit+0x64>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	4a0f      	ldr	r2, [pc, #60]	@ (8001798 <HAL_TIM_MspPostInit+0x64>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <HAL_TIM_MspPostInit+0x64>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800176e:	2320      	movs	r3, #32
 8001770:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800177e:	2301      	movs	r3, #1
 8001780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4619      	mov	r1, r3
 8001788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178c:	f001 fad2 	bl	8002d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b09e      	sub	sp, #120	@ 0x78
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2254      	movs	r2, #84	@ 0x54
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f005 fc01 	bl	8006fc4 <memset>
  if(huart->Instance==USART2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001844 <HAL_UART_MspInit+0xa8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d136      	bne.n	800183a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 f80f 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e4:	f7ff facc 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <HAL_UART_MspInit+0xac>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	4a16      	ldr	r2, [pc, #88]	@ (8001848 <HAL_UART_MspInit+0xac>)
 80017ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <HAL_UART_MspInit+0xac>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_UART_MspInit+0xac>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001804:	4a10      	ldr	r2, [pc, #64]	@ (8001848 <HAL_UART_MspInit+0xac>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180c:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <HAL_UART_MspInit+0xac>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001818:	230c      	movs	r3, #12
 800181a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001828:	2307      	movs	r3, #7
 800182a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001836:	f001 fa7d 	bl	8002d34 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800183a:	bf00      	nop
 800183c:	3778      	adds	r7, #120	@ 0x78
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40004400 	.word	0x40004400
 8001848:	40021000 	.word	0x40021000

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <NMI_Handler+0x4>

08001854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <MemManage_Handler+0x4>

08001864 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <UsageFault_Handler+0x4>

08001874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a2:	f000 f973 	bl	8001b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e00a      	b.n	80018d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018bc:	f3af 8000 	nop.w
 80018c0:	4601      	mov	r1, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	b2ca      	uxtb	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbf0      	blt.n	80018bc <_read+0x12>
  }

  return len;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e009      	b.n	800190a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	60ba      	str	r2, [r7, #8]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f888 	bl	8001a14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	dbf1      	blt.n	80018f6 <_write+0x12>
  }
  return len;
 8001912:	687b      	ldr	r3, [r7, #4]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_close>:

int _close(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001944:	605a      	str	r2, [r3, #4]
  return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_isatty>:

int _isatty(int file)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f005 fb54 	bl	8007060 <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20020000 	.word	0x20020000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	20000320 	.word	0x20000320
 80019ec:	20000478 	.word	0x20000478

080019f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001a1c:	1d39      	adds	r1, r7, #4
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	2201      	movs	r2, #1
 8001a24:	4803      	ldr	r0, [pc, #12]	@ (8001a34 <__io_putchar+0x20>)
 8001a26:	f004 fa75 	bl	8005f14 <HAL_UART_Transmit>
  return ch;
 8001a2a:	687b      	ldr	r3, [r7, #4]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	2000025c 	.word	0x2000025c

08001a38 <vm_init>:
		uint32_t* _call_stack,
		uint32_t* _operand_stack,
		uint32_t _call_stack_size,
		uint32_t _operand_stack_size,
		uint8_t* _rom,
		uint32_t _rom_size) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
	state->call_stack = _call_stack;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	601a      	str	r2, [r3, #0]
	state->operand_stack = _operand_stack;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	605a      	str	r2, [r3, #4]
	state->call_stack_size = _call_stack_size;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	609a      	str	r2, [r3, #8]
	state->operand_stack_size = _operand_stack_size;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	60da      	str	r2, [r3, #12]
	state->rom = _rom;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	611a      	str	r2, [r3, #16]
	state->rom_size = _rom_size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a3a      	ldr	r2, [r7, #32]
 8001a68:	615a      	str	r2, [r3, #20]
	state->pc = 0;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
	state->bp = 0;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28
	state->csp = -1;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	621a      	str	r2, [r3, #32]
	state->osp = -1;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24



}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a94:	480d      	ldr	r0, [pc, #52]	@ (8001acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a98:	f7ff ffaa 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	@ (8001ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	@ (8001ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad8 <LoopForever+0xe>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae0 <LoopForever+0x16>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f005 fad3 	bl	800706c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ac6:	f7fe fd73 	bl	80005b0 <main>

08001aca <LoopForever>:

LoopForever:
    b LoopForever
 8001aca:	e7fe      	b.n	8001aca <LoopForever>
  ldr   r0, =_estack
 8001acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ad8:	08007bd4 	.word	0x08007bd4
  ldr r2, =_sbss
 8001adc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ae0:	20000474 	.word	0x20000474

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>

08001ae6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f001 f8ed 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 f80e 	bl	8001b18 <HAL_InitTick>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	e001      	b.n	8001b0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b08:	f7ff fc78 	bl	80013fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b0c:	79fb      	ldrb	r3, [r7, #7]

}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b24:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_InitTick+0x68>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d022      	beq.n	8001b72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b2c:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <HAL_InitTick+0x6c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <HAL_InitTick+0x68>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 f8ea 	bl	8002d1a <HAL_SYSTICK_Config>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10f      	bne.n	8001b6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	d809      	bhi.n	8001b66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b52:	2200      	movs	r2, #0
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5a:	f001 f8c4 	bl	8002ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <HAL_InitTick+0x70>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e007      	b.n	8001b76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	e004      	b.n	8001b76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e001      	b.n	8001b76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_IncTick+0x1c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <HAL_IncTick+0x20>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a03      	ldr	r2, [pc, #12]	@ (8001ba8 <HAL_IncTick+0x1c>)
 8001b9c:	6013      	str	r3, [r2, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	20000324 	.word	0x20000324
 8001bac:	20000008 	.word	0x20000008

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000324 	.word	0x20000324

08001bc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3360      	adds	r3, #96	@ 0x60
 8001c42:	461a      	mov	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <LL_ADC_SetOffset+0x44>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c68:	bf00      	nop
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	03fff000 	.word	0x03fff000

08001c78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3360      	adds	r3, #96	@ 0x60
 8001c86:	461a      	mov	r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3360      	adds	r3, #96	@ 0x60
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cce:	bf00      	nop
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b087      	sub	sp, #28
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3360      	adds	r3, #96	@ 0x60
 8001cea:	461a      	mov	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3360      	adds	r3, #96	@ 0x60
 8001d20:	461a      	mov	r2, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	615a      	str	r2, [r3, #20]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3330      	adds	r3, #48	@ 0x30
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	4413      	add	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	211f      	movs	r1, #31
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	401a      	ands	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0e9b      	lsrs	r3, r3, #26
 8001da4:	f003 011f 	and.w	r1, r3, #31
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	431a      	orrs	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3314      	adds	r3, #20
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	0e5b      	lsrs	r3, r3, #25
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	0d1b      	lsrs	r3, r3, #20
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	2107      	movs	r1, #7
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	401a      	ands	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	0d1b      	lsrs	r3, r3, #20
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e0e:	bf00      	nop
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0318 	and.w	r3, r3, #24
 8001e3e:	4908      	ldr	r1, [pc, #32]	@ (8001e60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e40:	40d9      	lsrs	r1, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	400b      	ands	r3, r1
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	0007ffff 	.word	0x0007ffff

08001e64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6093      	str	r3, [r2, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e9c:	d101      	bne.n	8001ea2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ec0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ec4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001eec:	d101      	bne.n	8001ef2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_IsEnabled+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_IsEnabled+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d101      	bne.n	8001f64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b089      	sub	sp, #36	@ 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e1a9      	b.n	80022e2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fa51 	bl	8001444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff67 	bl	8001e88 <LL_ADC_IsDeepPowerDownEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d004      	beq.n	8001fca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff4d 	bl	8001e64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff82 	bl	8001ed8 <LL_ADC_IsInternalRegulatorEnabled>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff66 	bl	8001eb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe4:	4b9c      	ldr	r3, [pc, #624]	@ (8002258 <HAL_ADC_Init+0x2e4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	4a9c      	ldr	r2, [pc, #624]	@ (800225c <HAL_ADC_Init+0x2e8>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ff8:	e002      	b.n	8002000 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff64 	bl	8001ed8 <LL_ADC_IsInternalRegulatorEnabled>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	f043 0210 	orr.w	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff75 	bl	8001f26 <LL_ADC_REG_IsConversionOngoing>
 800203c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 8142 	bne.w	80022d0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 813e 	bne.w	80022d0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002058:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800205c:	f043 0202 	orr.w	r2, r3, #2
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff49 	bl	8001f00 <LL_ADC_IsEnabled>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d141      	bne.n	80020f8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800207c:	d004      	beq.n	8002088 <HAL_ADC_Init+0x114>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a77      	ldr	r2, [pc, #476]	@ (8002260 <HAL_ADC_Init+0x2ec>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d10f      	bne.n	80020a8 <HAL_ADC_Init+0x134>
 8002088:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800208c:	f7ff ff38 	bl	8001f00 <LL_ADC_IsEnabled>
 8002090:	4604      	mov	r4, r0
 8002092:	4873      	ldr	r0, [pc, #460]	@ (8002260 <HAL_ADC_Init+0x2ec>)
 8002094:	f7ff ff34 	bl	8001f00 <LL_ADC_IsEnabled>
 8002098:	4603      	mov	r3, r0
 800209a:	4323      	orrs	r3, r4
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e012      	b.n	80020ce <HAL_ADC_Init+0x15a>
 80020a8:	486e      	ldr	r0, [pc, #440]	@ (8002264 <HAL_ADC_Init+0x2f0>)
 80020aa:	f7ff ff29 	bl	8001f00 <LL_ADC_IsEnabled>
 80020ae:	4604      	mov	r4, r0
 80020b0:	486d      	ldr	r0, [pc, #436]	@ (8002268 <HAL_ADC_Init+0x2f4>)
 80020b2:	f7ff ff25 	bl	8001f00 <LL_ADC_IsEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	431c      	orrs	r4, r3
 80020ba:	486c      	ldr	r0, [pc, #432]	@ (800226c <HAL_ADC_Init+0x2f8>)
 80020bc:	f7ff ff20 	bl	8001f00 <LL_ADC_IsEnabled>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4323      	orrs	r3, r4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020da:	d004      	beq.n	80020e6 <HAL_ADC_Init+0x172>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a5f      	ldr	r2, [pc, #380]	@ (8002260 <HAL_ADC_Init+0x2ec>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_Init+0x176>
 80020e6:	4a62      	ldr	r2, [pc, #392]	@ (8002270 <HAL_ADC_Init+0x2fc>)
 80020e8:	e000      	b.n	80020ec <HAL_ADC_Init+0x178>
 80020ea:	4a62      	ldr	r2, [pc, #392]	@ (8002274 <HAL_ADC_Init+0x300>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4619      	mov	r1, r3
 80020f2:	4610      	mov	r0, r2
 80020f4:	f7ff fd68 	bl	8001bc8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7f5b      	ldrb	r3, [r3, #29]
 80020fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002102:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002108:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800210e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002116:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002122:	2b01      	cmp	r3, #1
 8002124:	d106      	bne.n	8002134 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	3b01      	subs	r3, #1
 800212c:	045b      	lsls	r3, r3, #17
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d009      	beq.n	8002150 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	4b48      	ldr	r3, [pc, #288]	@ (8002278 <HAL_ADC_Init+0x304>)
 8002158:	4013      	ands	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	69b9      	ldr	r1, [r7, #24]
 8002160:	430b      	orrs	r3, r1
 8002162:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fee4 	bl	8001f4c <LL_ADC_INJ_IsConversionOngoing>
 8002184:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d17f      	bne.n	800228c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d17c      	bne.n	800228c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002196:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800219e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021ae:	f023 0302 	bic.w	r3, r3, #2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d017      	beq.n	80021f4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6911      	ldr	r1, [r2, #16]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80021f2:	e013      	b.n	800221c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002202:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002214:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002218:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002222:	2b01      	cmp	r3, #1
 8002224:	d12a      	bne.n	800227c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002242:	4311      	orrs	r1, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002248:	430a      	orrs	r2, r1
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	611a      	str	r2, [r3, #16]
 8002256:	e019      	b.n	800228c <HAL_ADC_Init+0x318>
 8002258:	20000000 	.word	0x20000000
 800225c:	053e2d63 	.word	0x053e2d63
 8002260:	50000100 	.word	0x50000100
 8002264:	50000400 	.word	0x50000400
 8002268:	50000500 	.word	0x50000500
 800226c:	50000600 	.word	0x50000600
 8002270:	50000300 	.word	0x50000300
 8002274:	50000700 	.word	0x50000700
 8002278:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d10c      	bne.n	80022ae <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f023 010f 	bic.w	r1, r3, #15
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	1e5a      	subs	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ac:	e007      	b.n	80022be <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 020f 	bic.w	r2, r2, #15
 80022bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c2:	f023 0303 	bic.w	r3, r3, #3
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022ce:	e007      	b.n	80022e0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d4:	f043 0210 	orr.w	r2, r3, #16
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd90      	pop	{r4, r7, pc}
 80022ea:	bf00      	nop

080022ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b0b6      	sub	sp, #216	@ 0xd8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x24>
 800230a:	2302      	movs	r3, #2
 800230c:	f000 bc13 	b.w	8002b36 <HAL_ADC_ConfigChannel+0x84a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fe02 	bl	8001f26 <LL_ADC_REG_IsConversionOngoing>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 83f3 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	f7ff fd18 	bl	8001d6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fdf0 	bl	8001f26 <LL_ADC_REG_IsConversionOngoing>
 8002346:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fdfc 	bl	8001f4c <LL_ADC_INJ_IsConversionOngoing>
 8002354:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002358:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800235c:	2b00      	cmp	r3, #0
 800235e:	f040 81d9 	bne.w	8002714 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 81d4 	bne.w	8002714 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002374:	d10f      	bne.n	8002396 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	4619      	mov	r1, r3
 8002382:	f7ff fd1f 	bl	8001dc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fcd9 	bl	8001d46 <LL_ADC_SetSamplingTimeCommonConfig>
 8002394:	e00e      	b.n	80023b4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f7ff fd0e 	bl	8001dc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fcc9 	bl	8001d46 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	08db      	lsrs	r3, r3, #3
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d022      	beq.n	800241c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80023e6:	f7ff fc23 	bl	8001c30 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6919      	ldr	r1, [r3, #16]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f7ff fc6f 	bl	8001cda <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002408:	2b01      	cmp	r3, #1
 800240a:	d102      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x126>
 800240c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002410:	e000      	b.n	8002414 <HAL_ADC_ConfigChannel+0x128>
 8002412:	2300      	movs	r3, #0
 8002414:	461a      	mov	r2, r3
 8002416:	f7ff fc7b 	bl	8001d10 <LL_ADC_SetOffsetSaturation>
 800241a:	e17b      	b.n	8002714 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fc28 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x15c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fc1d 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	f003 021f 	and.w	r2, r3, #31
 8002446:	e01e      	b.n	8002486 <HAL_ADC_ConfigChannel+0x19a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fc12 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800246a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800246e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e004      	b.n	8002484 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800247a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248e:	2b00      	cmp	r3, #0
 8002490:	d105      	bne.n	800249e <HAL_ADC_ConfigChannel+0x1b2>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	0e9b      	lsrs	r3, r3, #26
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	e018      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x1e4>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80024b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80024ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80024c2:	2320      	movs	r3, #32
 80024c4:	e004      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80024c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fbe1 	bl	8001ca4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fbc5 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_ADC_ConfigChannel+0x222>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fbba 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	e01e      	b.n	800254c <HAL_ADC_ConfigChannel+0x260>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2101      	movs	r1, #1
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fbaf 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800252c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e004      	b.n	800254a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x278>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	e018      	b.n	8002596 <HAL_ADC_ConfigChannel+0x2aa>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002578:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800257c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002580:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002588:	2320      	movs	r3, #32
 800258a:	e004      	b.n	8002596 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800258c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002596:	429a      	cmp	r2, r3
 8002598:	d106      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	2101      	movs	r1, #1
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb7e 	bl	8001ca4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fb62 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x2e8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2102      	movs	r1, #2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fb57 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	f003 021f 	and.w	r2, r3, #31
 80025d2:	e01e      	b.n	8002612 <HAL_ADC_ConfigChannel+0x326>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2102      	movs	r1, #2
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fb4c 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80025f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80025fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e004      	b.n	8002610 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002606:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261a:	2b00      	cmp	r3, #0
 800261c:	d105      	bne.n	800262a <HAL_ADC_ConfigChannel+0x33e>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	0e9b      	lsrs	r3, r3, #26
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	e016      	b.n	8002658 <HAL_ADC_ConfigChannel+0x36c>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800263c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800263e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e004      	b.n	8002658 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800264e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2200      	movs	r2, #0
 8002662:	2102      	movs	r1, #2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fb1d 	bl	8001ca4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2103      	movs	r1, #3
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fb01 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x3aa>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2103      	movs	r1, #3
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff faf6 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	e017      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x3da>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2103      	movs	r1, #3
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff faeb 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 80026a2:	4603      	mov	r3, r0
 80026a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80026ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026b0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80026b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80026b8:	2320      	movs	r3, #32
 80026ba:	e003      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80026bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_ADC_ConfigChannel+0x3f2>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	e011      	b.n	8002702 <HAL_ADC_ConfigChannel+0x416>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80026ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80026f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80026f6:	2320      	movs	r3, #32
 80026f8:	e003      	b.n	8002702 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80026fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002702:	429a      	cmp	r2, r3
 8002704:	d106      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	2103      	movs	r1, #3
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fac8 	bl	8001ca4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fbf1 	bl	8001f00 <LL_ADC_IsEnabled>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 813d 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	461a      	mov	r2, r3
 8002734:	f7ff fb72 	bl	8001e1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4aa2      	ldr	r2, [pc, #648]	@ (80029c8 <HAL_ADC_ConfigChannel+0x6dc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	f040 812e 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <HAL_ADC_ConfigChannel+0x480>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2b09      	cmp	r3, #9
 8002762:	bf94      	ite	ls
 8002764:	2301      	movls	r3, #1
 8002766:	2300      	movhi	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	e019      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x4b4>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800277a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800277c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800277e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002784:	2320      	movs	r3, #32
 8002786:	e003      	b.n	8002790 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002788:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2b09      	cmp	r3, #9
 8002798:	bf94      	ite	ls
 800279a:	2301      	movls	r3, #1
 800279c:	2300      	movhi	r3, #0
 800279e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d079      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d107      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x4d4>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	069b      	lsls	r3, r3, #26
 80027ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027be:	e015      	b.n	80027ec <HAL_ADC_ConfigChannel+0x500>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80027d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e003      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80027dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	069b      	lsls	r3, r3, #26
 80027e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_ADC_ConfigChannel+0x520>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	3301      	adds	r3, #1
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	e017      	b.n	800283c <HAL_ADC_ConfigChannel+0x550>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800281a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800281c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800281e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	ea42 0103 	orr.w	r1, r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x576>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0e9b      	lsrs	r3, r3, #26
 8002852:	3301      	adds	r3, #1
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	051b      	lsls	r3, r3, #20
 8002860:	e018      	b.n	8002894 <HAL_ADC_ConfigChannel+0x5a8>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800287a:	2320      	movs	r3, #32
 800287c:	e003      	b.n	8002886 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800287e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002894:	430b      	orrs	r3, r1
 8002896:	e07e      	b.n	8002996 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x5c8>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	3301      	adds	r3, #1
 80028ac:	069b      	lsls	r3, r3, #26
 80028ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028b2:	e015      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x5f4>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80028c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80028cc:	2320      	movs	r3, #32
 80028ce:	e003      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80028d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	069b      	lsls	r3, r3, #26
 80028dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x614>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	e017      	b.n	8002930 <HAL_ADC_ConfigChannel+0x644>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	61fb      	str	r3, [r7, #28]
  return result;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002918:	2320      	movs	r3, #32
 800291a:	e003      	b.n	8002924 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	ea42 0103 	orr.w	r1, r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10d      	bne.n	800295c <HAL_ADC_ConfigChannel+0x670>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0e9b      	lsrs	r3, r3, #26
 8002946:	3301      	adds	r3, #1
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	3b1e      	subs	r3, #30
 8002954:	051b      	lsls	r3, r3, #20
 8002956:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800295a:	e01b      	b.n	8002994 <HAL_ADC_ConfigChannel+0x6a8>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	613b      	str	r3, [r7, #16]
  return result;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002974:	2320      	movs	r3, #32
 8002976:	e003      	b.n	8002980 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f003 021f 	and.w	r2, r3, #31
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	3b1e      	subs	r3, #30
 800298e:	051b      	lsls	r3, r3, #20
 8002990:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002994:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800299a:	4619      	mov	r1, r3
 800299c:	f7ff fa12 	bl	8001dc4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_ADC_ConfigChannel+0x6e0>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80be 	beq.w	8002b2a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029b6:	d004      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x6d6>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a04      	ldr	r2, [pc, #16]	@ (80029d0 <HAL_ADC_ConfigChannel+0x6e4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10a      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x6ec>
 80029c2:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <HAL_ADC_ConfigChannel+0x6e8>)
 80029c4:	e009      	b.n	80029da <HAL_ADC_ConfigChannel+0x6ee>
 80029c6:	bf00      	nop
 80029c8:	407f0000 	.word	0x407f0000
 80029cc:	80080000 	.word	0x80080000
 80029d0:	50000100 	.word	0x50000100
 80029d4:	50000300 	.word	0x50000300
 80029d8:	4b59      	ldr	r3, [pc, #356]	@ (8002b40 <HAL_ADC_ConfigChannel+0x854>)
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f91a 	bl	8001c14 <LL_ADC_GetCommonPathInternalCh>
 80029e0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a56      	ldr	r2, [pc, #344]	@ (8002b44 <HAL_ADC_ConfigChannel+0x858>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_ADC_ConfigChannel+0x70c>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a55      	ldr	r2, [pc, #340]	@ (8002b48 <HAL_ADC_ConfigChannel+0x85c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d13a      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d134      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a0c:	d005      	beq.n	8002a1a <HAL_ADC_ConfigChannel+0x72e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a4e      	ldr	r2, [pc, #312]	@ (8002b4c <HAL_ADC_ConfigChannel+0x860>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	f040 8085 	bne.w	8002b24 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a22:	d004      	beq.n	8002a2e <HAL_ADC_ConfigChannel+0x742>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a49      	ldr	r2, [pc, #292]	@ (8002b50 <HAL_ADC_ConfigChannel+0x864>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x746>
 8002a2e:	4a49      	ldr	r2, [pc, #292]	@ (8002b54 <HAL_ADC_ConfigChannel+0x868>)
 8002a30:	e000      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x748>
 8002a32:	4a43      	ldr	r2, [pc, #268]	@ (8002b40 <HAL_ADC_ConfigChannel+0x854>)
 8002a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f7ff f8d5 	bl	8001bee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a44:	4b44      	ldr	r3, [pc, #272]	@ (8002b58 <HAL_ADC_ConfigChannel+0x86c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	4a44      	ldr	r2, [pc, #272]	@ (8002b5c <HAL_ADC_ConfigChannel+0x870>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a5e:	e002      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f9      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a6c:	e05a      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a3b      	ldr	r2, [pc, #236]	@ (8002b60 <HAL_ADC_ConfigChannel+0x874>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d125      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11f      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a31      	ldr	r2, [pc, #196]	@ (8002b50 <HAL_ADC_ConfigChannel+0x864>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d104      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x7ac>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a34      	ldr	r2, [pc, #208]	@ (8002b64 <HAL_ADC_ConfigChannel+0x878>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d047      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aa0:	d004      	beq.n	8002aac <HAL_ADC_ConfigChannel+0x7c0>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b50 <HAL_ADC_ConfigChannel+0x864>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x7c4>
 8002aac:	4a29      	ldr	r2, [pc, #164]	@ (8002b54 <HAL_ADC_ConfigChannel+0x868>)
 8002aae:	e000      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x7c6>
 8002ab0:	4a23      	ldr	r2, [pc, #140]	@ (8002b40 <HAL_ADC_ConfigChannel+0x854>)
 8002ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f7ff f896 	bl	8001bee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ac2:	e031      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a27      	ldr	r2, [pc, #156]	@ (8002b68 <HAL_ADC_ConfigChannel+0x87c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12d      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d127      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_ADC_ConfigChannel+0x864>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d022      	beq.n	8002b2a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aec:	d004      	beq.n	8002af8 <HAL_ADC_ConfigChannel+0x80c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <HAL_ADC_ConfigChannel+0x864>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x810>
 8002af8:	4a16      	ldr	r2, [pc, #88]	@ (8002b54 <HAL_ADC_ConfigChannel+0x868>)
 8002afa:	e000      	b.n	8002afe <HAL_ADC_ConfigChannel+0x812>
 8002afc:	4a10      	ldr	r2, [pc, #64]	@ (8002b40 <HAL_ADC_ConfigChannel+0x854>)
 8002afe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b06:	4619      	mov	r1, r3
 8002b08:	4610      	mov	r0, r2
 8002b0a:	f7ff f870 	bl	8001bee <LL_ADC_SetCommonPathInternalCh>
 8002b0e:	e00c      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b22:	e002      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b24:	bf00      	nop
 8002b26:	e000      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b32:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	37d8      	adds	r7, #216	@ 0xd8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	50000700 	.word	0x50000700
 8002b44:	c3210000 	.word	0xc3210000
 8002b48:	90c00010 	.word	0x90c00010
 8002b4c:	50000600 	.word	0x50000600
 8002b50:	50000100 	.word	0x50000100
 8002b54:	50000300 	.word	0x50000300
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	053e2d63 	.word	0x053e2d63
 8002b60:	c7520000 	.word	0xc7520000
 8002b64:	50000500 	.word	0x50000500
 8002b68:	cb840000 	.word	0xcb840000

08002b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9e:	4a04      	ldr	r2, [pc, #16]	@ (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	60d3      	str	r3, [r2, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb8:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <__NVIC_GetPriorityGrouping+0x18>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 0307 	and.w	r3, r3, #7
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	@ (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	@ (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	@ 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff47 	bl	8002b6c <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf4:	f7ff ff5e 	bl	8002bb4 <__NVIC_GetPriorityGrouping>
 8002cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7ff ff90 	bl	8002c24 <NVIC_EncodePriority>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff5f 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffb2 	bl	8002c8c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d42:	e15a      	b.n	8002ffa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 814c 	beq.w	8002ff4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d005      	beq.n	8002d74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d130      	bne.n	8002dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002daa:	2201      	movs	r2, #1
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 0201 	and.w	r2, r3, #1
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d017      	beq.n	8002e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2203      	movs	r2, #3
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d123      	bne.n	8002e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	08da      	lsrs	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3208      	adds	r2, #8
 8002e60:	6939      	ldr	r1, [r7, #16]
 8002e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0203 	and.w	r2, r3, #3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80a6 	beq.w	8002ff4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea8:	4b5b      	ldr	r3, [pc, #364]	@ (8003018 <HAL_GPIO_Init+0x2e4>)
 8002eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eac:	4a5a      	ldr	r2, [pc, #360]	@ (8003018 <HAL_GPIO_Init+0x2e4>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002eb4:	4b58      	ldr	r3, [pc, #352]	@ (8003018 <HAL_GPIO_Init+0x2e4>)
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec0:	4a56      	ldr	r2, [pc, #344]	@ (800301c <HAL_GPIO_Init+0x2e8>)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002eea:	d01f      	beq.n	8002f2c <HAL_GPIO_Init+0x1f8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a4c      	ldr	r2, [pc, #304]	@ (8003020 <HAL_GPIO_Init+0x2ec>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d019      	beq.n	8002f28 <HAL_GPIO_Init+0x1f4>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a4b      	ldr	r2, [pc, #300]	@ (8003024 <HAL_GPIO_Init+0x2f0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d013      	beq.n	8002f24 <HAL_GPIO_Init+0x1f0>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a4a      	ldr	r2, [pc, #296]	@ (8003028 <HAL_GPIO_Init+0x2f4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00d      	beq.n	8002f20 <HAL_GPIO_Init+0x1ec>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a49      	ldr	r2, [pc, #292]	@ (800302c <HAL_GPIO_Init+0x2f8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <HAL_GPIO_Init+0x1e8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a48      	ldr	r2, [pc, #288]	@ (8003030 <HAL_GPIO_Init+0x2fc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_GPIO_Init+0x1e4>
 8002f14:	2305      	movs	r3, #5
 8002f16:	e00a      	b.n	8002f2e <HAL_GPIO_Init+0x1fa>
 8002f18:	2306      	movs	r3, #6
 8002f1a:	e008      	b.n	8002f2e <HAL_GPIO_Init+0x1fa>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	e006      	b.n	8002f2e <HAL_GPIO_Init+0x1fa>
 8002f20:	2303      	movs	r3, #3
 8002f22:	e004      	b.n	8002f2e <HAL_GPIO_Init+0x1fa>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e002      	b.n	8002f2e <HAL_GPIO_Init+0x1fa>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_GPIO_Init+0x1fa>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	f002 0203 	and.w	r2, r2, #3
 8002f34:	0092      	lsls	r2, r2, #2
 8002f36:	4093      	lsls	r3, r2
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f3e:	4937      	ldr	r1, [pc, #220]	@ (800301c <HAL_GPIO_Init+0x2e8>)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	3302      	adds	r3, #2
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f4c:	4b39      	ldr	r3, [pc, #228]	@ (8003034 <HAL_GPIO_Init+0x300>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f70:	4a30      	ldr	r2, [pc, #192]	@ (8003034 <HAL_GPIO_Init+0x300>)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f76:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <HAL_GPIO_Init+0x300>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f9a:	4a26      	ldr	r2, [pc, #152]	@ (8003034 <HAL_GPIO_Init+0x300>)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002fa0:	4b24      	ldr	r3, [pc, #144]	@ (8003034 <HAL_GPIO_Init+0x300>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003034 <HAL_GPIO_Init+0x300>)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fca:	4b1a      	ldr	r3, [pc, #104]	@ (8003034 <HAL_GPIO_Init+0x300>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fee:	4a11      	ldr	r2, [pc, #68]	@ (8003034 <HAL_GPIO_Init+0x300>)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	f47f ae9d 	bne.w	8002d44 <HAL_GPIO_Init+0x10>
  }
}
 800300a:	bf00      	nop
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40021000 	.word	0x40021000
 800301c:	40010000 	.word	0x40010000
 8003020:	48000400 	.word	0x48000400
 8003024:	48000800 	.word	0x48000800
 8003028:	48000c00 	.word	0x48000c00
 800302c:	48001000 	.word	0x48001000
 8003030:	48001400 	.word	0x48001400
 8003034:	40010400 	.word	0x40010400

08003038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
 8003044:	4613      	mov	r3, r2
 8003046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003054:	e002      	b.n	800305c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e08d      	b.n	8003196 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fa6c 	bl	800156c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	@ 0x24
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d107      	bne.n	80030e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e006      	b.n	80030f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80030ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d108      	bne.n	800310a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	e007      	b.n	800311a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003118:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800312c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800313c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69d9      	ldr	r1, [r3, #28]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	461a      	mov	r2, r3
 80031ac:	460b      	mov	r3, r1
 80031ae:	817b      	strh	r3, [r7, #10]
 80031b0:	4613      	mov	r3, r2
 80031b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b20      	cmp	r3, #32
 80031be:	f040 80fd 	bne.w	80033bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_I2C_Master_Transmit+0x30>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e0f6      	b.n	80033be <HAL_I2C_Master_Transmit+0x21e>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031d8:	f7fe fcea 	bl	8001bb0 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2319      	movs	r3, #25
 80031e4:	2201      	movs	r2, #1
 80031e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fa0a 	bl	8003604 <I2C_WaitOnFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0e1      	b.n	80033be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2221      	movs	r2, #33	@ 0x21
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2210      	movs	r2, #16
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	893a      	ldrh	r2, [r7, #8]
 800321a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	2bff      	cmp	r3, #255	@ 0xff
 800322a:	d906      	bls.n	800323a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	22ff      	movs	r2, #255	@ 0xff
 8003230:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003232:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e007      	b.n	800324a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003244:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003248:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	d024      	beq.n	800329c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003286:	b2db      	uxtb	r3, r3
 8003288:	3301      	adds	r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	8979      	ldrh	r1, [r7, #10]
 800328e:	4b4e      	ldr	r3, [pc, #312]	@ (80033c8 <HAL_I2C_Master_Transmit+0x228>)
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fc05 	bl	8003aa4 <I2C_TransferConfig>
 800329a:	e066      	b.n	800336a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	8979      	ldrh	r1, [r7, #10]
 80032a4:	4b48      	ldr	r3, [pc, #288]	@ (80033c8 <HAL_I2C_Master_Transmit+0x228>)
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fbfa 	bl	8003aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032b0:	e05b      	b.n	800336a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	6a39      	ldr	r1, [r7, #32]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f9fd 	bl	80036b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e07b      	b.n	80033be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	781a      	ldrb	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d034      	beq.n	800336a <HAL_I2C_Master_Transmit+0x1ca>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	d130      	bne.n	800336a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	2200      	movs	r2, #0
 8003310:	2180      	movs	r1, #128	@ 0x80
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f976 	bl	8003604 <I2C_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e04d      	b.n	80033be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	2bff      	cmp	r3, #255	@ 0xff
 800332a:	d90e      	bls.n	800334a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	22ff      	movs	r2, #255	@ 0xff
 8003330:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003336:	b2da      	uxtb	r2, r3
 8003338:	8979      	ldrh	r1, [r7, #10]
 800333a:	2300      	movs	r3, #0
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fbae 	bl	8003aa4 <I2C_TransferConfig>
 8003348:	e00f      	b.n	800336a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	b2da      	uxtb	r2, r3
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	2300      	movs	r3, #0
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fb9d 	bl	8003aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d19e      	bne.n	80032b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	6a39      	ldr	r1, [r7, #32]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f9e3 	bl	8003744 <I2C_WaitOnSTOPFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e01a      	b.n	80033be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2220      	movs	r2, #32
 800338e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <HAL_I2C_Master_Transmit+0x22c>)
 800339c:	400b      	ands	r3, r1
 800339e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	80002000 	.word	0x80002000
 80033cc:	fe00e800 	.word	0xfe00e800

080033d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	461a      	mov	r2, r3
 80033dc:	460b      	mov	r3, r1
 80033de:	817b      	strh	r3, [r7, #10]
 80033e0:	4613      	mov	r3, r2
 80033e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	f040 80db 	bne.w	80035a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_I2C_Master_Receive+0x30>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e0d4      	b.n	80035aa <HAL_I2C_Master_Receive+0x1da>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003408:	f7fe fbd2 	bl	8001bb0 <HAL_GetTick>
 800340c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2319      	movs	r3, #25
 8003414:	2201      	movs	r2, #1
 8003416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f8f2 	bl	8003604 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0bf      	b.n	80035aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2222      	movs	r2, #34	@ 0x22
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2210      	movs	r2, #16
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	893a      	ldrh	r2, [r7, #8]
 800344a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	2bff      	cmp	r3, #255	@ 0xff
 800345a:	d90e      	bls.n	800347a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	22ff      	movs	r2, #255	@ 0xff
 8003460:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003466:	b2da      	uxtb	r2, r3
 8003468:	8979      	ldrh	r1, [r7, #10]
 800346a:	4b52      	ldr	r3, [pc, #328]	@ (80035b4 <HAL_I2C_Master_Receive+0x1e4>)
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fb16 	bl	8003aa4 <I2C_TransferConfig>
 8003478:	e06d      	b.n	8003556 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003488:	b2da      	uxtb	r2, r3
 800348a:	8979      	ldrh	r1, [r7, #10]
 800348c:	4b49      	ldr	r3, [pc, #292]	@ (80035b4 <HAL_I2C_Master_Receive+0x1e4>)
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 fb05 	bl	8003aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800349a:	e05c      	b.n	8003556 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	6a39      	ldr	r1, [r7, #32]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f993 	bl	80037cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e07c      	b.n	80035aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d034      	beq.n	8003556 <HAL_I2C_Master_Receive+0x186>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d130      	bne.n	8003556 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	@ 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f880 	bl	8003604 <I2C_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e04d      	b.n	80035aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	2bff      	cmp	r3, #255	@ 0xff
 8003516:	d90e      	bls.n	8003536 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	22ff      	movs	r2, #255	@ 0xff
 800351c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003522:	b2da      	uxtb	r2, r3
 8003524:	8979      	ldrh	r1, [r7, #10]
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fab8 	bl	8003aa4 <I2C_TransferConfig>
 8003534:	e00f      	b.n	8003556 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003544:	b2da      	uxtb	r2, r3
 8003546:	8979      	ldrh	r1, [r7, #10]
 8003548:	2300      	movs	r3, #0
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 faa7 	bl	8003aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d19d      	bne.n	800349c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	6a39      	ldr	r1, [r7, #32]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f8ed 	bl	8003744 <I2C_WaitOnSTOPFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e01a      	b.n	80035aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2220      	movs	r2, #32
 800357a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6859      	ldr	r1, [r3, #4]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <HAL_I2C_Master_Receive+0x1e8>)
 8003588:	400b      	ands	r3, r1
 800358a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	80002400 	.word	0x80002400
 80035b8:	fe00e800 	.word	0xfe00e800

080035bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d103      	bne.n	80035da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d007      	beq.n	80035f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	619a      	str	r2, [r3, #24]
  }
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003614:	e03b      	b.n	800368e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f962 	bl	80038e4 <I2C_IsErrorOccurred>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e041      	b.n	80036ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d02d      	beq.n	800368e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fe fabd 	bl	8001bb0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d122      	bne.n	800368e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	429a      	cmp	r2, r3
 8003664:	d113      	bne.n	800368e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e00f      	b.n	80036ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699a      	ldr	r2, [r3, #24]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d0b4      	beq.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036c2:	e033      	b.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f90b 	bl	80038e4 <I2C_IsErrorOccurred>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e031      	b.n	800373c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d025      	beq.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e0:	f7fe fa66 	bl	8001bb0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d11a      	bne.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d013      	beq.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e007      	b.n	800373c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d1c4      	bne.n	80036c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003750:	e02f      	b.n	80037b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f8c4 	bl	80038e4 <I2C_IsErrorOccurred>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e02d      	b.n	80037c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003766:	f7fe fa23 	bl	8001bb0 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	d302      	bcc.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11a      	bne.n	80037b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d013      	beq.n	80037b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f043 0220 	orr.w	r2, r3, #32
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e007      	b.n	80037c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d1c8      	bne.n	8003752 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037dc:	e071      	b.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f87e 	bl	80038e4 <I2C_IsErrorOccurred>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d13b      	bne.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d138      	bne.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b04      	cmp	r3, #4
 8003812:	d105      	bne.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b10      	cmp	r3, #16
 800382c:	d121      	bne.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2210      	movs	r2, #16
 8003834:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2204      	movs	r2, #4
 800383a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2220      	movs	r2, #32
 8003842:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003850:	400b      	ands	r3, r1
 8003852:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	75fb      	strb	r3, [r7, #23]
 8003870:	e002      	b.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003878:	f7fe f99a 	bl	8001bb0 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	d302      	bcc.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d119      	bne.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d116      	bne.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d00f      	beq.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d002      	beq.n	80038d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d083      	beq.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	fe00e800 	.word	0xfe00e800

080038e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	@ 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	d068      	beq.n	80039e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2210      	movs	r2, #16
 8003916:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003918:	e049      	b.n	80039ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d045      	beq.n	80039ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003922:	f7fe f945 	bl	8001bb0 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <I2C_IsErrorOccurred+0x54>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d13a      	bne.n	80039ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003942:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800394a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800395a:	d121      	bne.n	80039a0 <I2C_IsErrorOccurred+0xbc>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003962:	d01d      	beq.n	80039a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	2b20      	cmp	r3, #32
 8003968:	d01a      	beq.n	80039a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003978:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800397a:	f7fe f919 	bl	8001bb0 <HAL_GetTick>
 800397e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003980:	e00e      	b.n	80039a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003982:	f7fe f915 	bl	8001bb0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b19      	cmp	r3, #25
 800398e:	d907      	bls.n	80039a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f043 0320 	orr.w	r3, r3, #32
 8003996:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800399e:	e006      	b.n	80039ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d1e9      	bne.n	8003982 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d003      	beq.n	80039c4 <I2C_IsErrorOccurred+0xe0>
 80039bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0aa      	beq.n	800391a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2220      	movs	r2, #32
 80039d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f043 0308 	orr.w	r3, r3, #8
 8003a1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f043 0302 	orr.w	r3, r3, #2
 8003a3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01c      	beq.n	8003a92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff fdaf 	bl	80035bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <I2C_IsErrorOccurred+0x1bc>)
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3728      	adds	r7, #40	@ 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	fe00e800 	.word	0xfe00e800

08003aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	817b      	strh	r3, [r7, #10]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003abc:	7a7b      	ldrb	r3, [r7, #9]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ac4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ad2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	0d5b      	lsrs	r3, r3, #21
 8003ade:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ae2:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <I2C_TransferConfig+0x60>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	ea02 0103 	and.w	r1, r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	03ff63ff 	.word	0x03ff63ff

08003b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d138      	bne.n	8003b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e032      	b.n	8003b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	@ 0x24
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d139      	bne.n	8003c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e033      	b.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2224      	movs	r2, #36	@ 0x24
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d141      	bne.n	8003cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c46:	4b4b      	ldr	r3, [pc, #300]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c52:	d131      	bne.n	8003cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c54:	4b47      	ldr	r3, [pc, #284]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c5a:	4a46      	ldr	r2, [pc, #280]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c64:	4b43      	ldr	r3, [pc, #268]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c6c:	4a41      	ldr	r2, [pc, #260]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c74:	4b40      	ldr	r3, [pc, #256]	@ (8003d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2232      	movs	r2, #50	@ 0x32
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8003d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	0c9b      	lsrs	r3, r3, #18
 8003c86:	3301      	adds	r3, #1
 8003c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c8a:	e002      	b.n	8003c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c92:	4b38      	ldr	r3, [pc, #224]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9e:	d102      	bne.n	8003ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f2      	bne.n	8003c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ca6:	4b33      	ldr	r3, [pc, #204]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cb2:	d158      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e057      	b.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003cc8:	e04d      	b.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd0:	d141      	bne.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cd2:	4b28      	ldr	r3, [pc, #160]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cde:	d131      	bne.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ce0:	4b24      	ldr	r3, [pc, #144]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ce6:	4a23      	ldr	r2, [pc, #140]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cf0:	4b20      	ldr	r3, [pc, #128]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d00:	4b1d      	ldr	r3, [pc, #116]	@ (8003d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2232      	movs	r2, #50	@ 0x32
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	0c9b      	lsrs	r3, r3, #18
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d16:	e002      	b.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d1e:	4b15      	ldr	r3, [pc, #84]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d2a:	d102      	bne.n	8003d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f2      	bne.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d32:	4b10      	ldr	r3, [pc, #64]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3e:	d112      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e011      	b.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d54:	e007      	b.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d56:	4b07      	ldr	r3, [pc, #28]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d5e:	4a05      	ldr	r2, [pc, #20]	@ (8003d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40007000 	.word	0x40007000
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	431bde83 	.word	0x431bde83

08003d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d84:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a04      	ldr	r2, [pc, #16]	@ (8003d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d8e:	6093      	str	r3, [r2, #8]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40007000 	.word	0x40007000

08003da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e2fe      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d075      	beq.n	8003eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dbe:	4b97      	ldr	r3, [pc, #604]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc8:	4b94      	ldr	r3, [pc, #592]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	d102      	bne.n	8003dde <HAL_RCC_OscConfig+0x3e>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d002      	beq.n	8003de4 <HAL_RCC_OscConfig+0x44>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d10b      	bne.n	8003dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	4b8d      	ldr	r3, [pc, #564]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d05b      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x108>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d157      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e2d9      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e04:	d106      	bne.n	8003e14 <HAL_RCC_OscConfig+0x74>
 8003e06:	4b85      	ldr	r3, [pc, #532]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a84      	ldr	r2, [pc, #528]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e01d      	b.n	8003e50 <HAL_RCC_OscConfig+0xb0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x98>
 8003e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7e      	ldr	r2, [pc, #504]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7b      	ldr	r2, [pc, #492]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0xb0>
 8003e38:	4b78      	ldr	r3, [pc, #480]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a77      	ldr	r2, [pc, #476]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b75      	ldr	r3, [pc, #468]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a74      	ldr	r2, [pc, #464]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d013      	beq.n	8003e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd feaa 	bl	8001bb0 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fd fea6 	bl	8001bb0 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	@ 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e29e      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e72:	4b6a      	ldr	r3, [pc, #424]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0xc0>
 8003e7e:	e014      	b.n	8003eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fd fe96 	bl	8001bb0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fd fe92 	bl	8001bb0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	@ 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e28a      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e9a:	4b60      	ldr	r3, [pc, #384]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0xe8>
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d075      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb6:	4b59      	ldr	r3, [pc, #356]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec0:	4b56      	ldr	r3, [pc, #344]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b0c      	cmp	r3, #12
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x136>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d002      	beq.n	8003edc <HAL_RCC_OscConfig+0x13c>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d11f      	bne.n	8003f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003edc:	4b4f      	ldr	r3, [pc, #316]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x154>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e25d      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef4:	4b49      	ldr	r3, [pc, #292]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	4946      	ldr	r1, [pc, #280]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f08:	4b45      	ldr	r3, [pc, #276]	@ (8004020 <HAL_RCC_OscConfig+0x280>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fd fe03 	bl	8001b18 <HAL_InitTick>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d043      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e249      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d023      	beq.n	8003f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f24:	4b3d      	ldr	r3, [pc, #244]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a3c      	ldr	r2, [pc, #240]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd fe3e 	bl	8001bb0 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f38:	f7fd fe3a 	bl	8001bb0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e232      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4a:	4b34      	ldr	r3, [pc, #208]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f56:	4b31      	ldr	r3, [pc, #196]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	061b      	lsls	r3, r3, #24
 8003f64:	492d      	ldr	r1, [pc, #180]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
 8003f6a:	e01a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fe1a 	bl	8001bb0 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f80:	f7fd fe16 	bl	8001bb0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e20e      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f92:	4b22      	ldr	r3, [pc, #136]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x1e0>
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d041      	beq.n	8004032 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01c      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb6:	4b19      	ldr	r3, [pc, #100]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fbc:	4a17      	ldr	r2, [pc, #92]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc6:	f7fd fdf3 	bl	8001bb0 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fce:	f7fd fdef 	bl	8001bb0 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e1e7      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0ef      	beq.n	8003fce <HAL_RCC_OscConfig+0x22e>
 8003fee:	e020      	b.n	8004032 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff6:	4a09      	ldr	r2, [pc, #36]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fd fdd6 	bl	8001bb0 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004006:	e00d      	b.n	8004024 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004008:	f7fd fdd2 	bl	8001bb0 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d906      	bls.n	8004024 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e1ca      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004024:	4b8c      	ldr	r3, [pc, #560]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1ea      	bne.n	8004008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80a6 	beq.w	800418c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004040:	2300      	movs	r3, #0
 8004042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004044:	4b84      	ldr	r3, [pc, #528]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_RCC_OscConfig+0x2b4>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x2b6>
 8004054:	2300      	movs	r3, #0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00d      	beq.n	8004076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	4b7f      	ldr	r3, [pc, #508]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800405c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405e:	4a7e      	ldr	r2, [pc, #504]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004064:	6593      	str	r3, [r2, #88]	@ 0x58
 8004066:	4b7c      	ldr	r3, [pc, #496]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004072:	2301      	movs	r3, #1
 8004074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004076:	4b79      	ldr	r3, [pc, #484]	@ (800425c <HAL_RCC_OscConfig+0x4bc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d118      	bne.n	80040b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004082:	4b76      	ldr	r3, [pc, #472]	@ (800425c <HAL_RCC_OscConfig+0x4bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a75      	ldr	r2, [pc, #468]	@ (800425c <HAL_RCC_OscConfig+0x4bc>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7fd fd8f 	bl	8001bb0 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004096:	f7fd fd8b 	bl	8001bb0 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e183      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a8:	4b6c      	ldr	r3, [pc, #432]	@ (800425c <HAL_RCC_OscConfig+0x4bc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d108      	bne.n	80040ce <HAL_RCC_OscConfig+0x32e>
 80040bc:	4b66      	ldr	r3, [pc, #408]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c2:	4a65      	ldr	r2, [pc, #404]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040cc:	e024      	b.n	8004118 <HAL_RCC_OscConfig+0x378>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	d110      	bne.n	80040f8 <HAL_RCC_OscConfig+0x358>
 80040d6:	4b60      	ldr	r3, [pc, #384]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040de:	f043 0304 	orr.w	r3, r3, #4
 80040e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040f6:	e00f      	b.n	8004118 <HAL_RCC_OscConfig+0x378>
 80040f8:	4b57      	ldr	r3, [pc, #348]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fe:	4a56      	ldr	r2, [pc, #344]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004108:	4b53      	ldr	r3, [pc, #332]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410e:	4a52      	ldr	r2, [pc, #328]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004110:	f023 0304 	bic.w	r3, r3, #4
 8004114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d016      	beq.n	800414e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fd fd46 	bl	8001bb0 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004126:	e00a      	b.n	800413e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004128:	f7fd fd42 	bl	8001bb0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e138      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413e:	4b46      	ldr	r3, [pc, #280]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ed      	beq.n	8004128 <HAL_RCC_OscConfig+0x388>
 800414c:	e015      	b.n	800417a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414e:	f7fd fd2f 	bl	8001bb0 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004154:	e00a      	b.n	800416c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fd fd2b 	bl	8001bb0 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004164:	4293      	cmp	r3, r2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e121      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800416c:	4b3a      	ldr	r3, [pc, #232]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1ed      	bne.n	8004156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800417a:	7ffb      	ldrb	r3, [r7, #31]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d105      	bne.n	800418c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004180:	4b35      	ldr	r3, [pc, #212]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004184:	4a34      	ldr	r2, [pc, #208]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800418a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d03c      	beq.n	8004212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01c      	beq.n	80041da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fd fcfe 	bl	8001bb0 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041b8:	f7fd fcfa 	bl	8001bb0 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0f2      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041ca:	4b23      	ldr	r3, [pc, #140]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0ef      	beq.n	80041b8 <HAL_RCC_OscConfig+0x418>
 80041d8:	e01b      	b.n	8004212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041da:	4b1f      	ldr	r3, [pc, #124]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fd fce1 	bl	8001bb0 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041f2:	f7fd fcdd 	bl	8001bb0 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e0d5      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004204:	4b14      	ldr	r3, [pc, #80]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1ef      	bne.n	80041f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 80c9 	beq.w	80043ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800421c:	4b0e      	ldr	r3, [pc, #56]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b0c      	cmp	r3, #12
 8004226:	f000 8083 	beq.w	8004330 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d15e      	bne.n	80042f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004232:	4b09      	ldr	r3, [pc, #36]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a08      	ldr	r2, [pc, #32]	@ (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800423c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd fcb7 	bl	8001bb0 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004244:	e00c      	b.n	8004260 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004246:	f7fd fcb3 	bl	8001bb0 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d905      	bls.n	8004260 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e0ab      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
 8004258:	40021000 	.word	0x40021000
 800425c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004260:	4b55      	ldr	r3, [pc, #340]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ec      	bne.n	8004246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800426c:	4b52      	ldr	r3, [pc, #328]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	4b52      	ldr	r3, [pc, #328]	@ (80043bc <HAL_RCC_OscConfig+0x61c>)
 8004272:	4013      	ands	r3, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6a11      	ldr	r1, [r2, #32]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800427c:	3a01      	subs	r2, #1
 800427e:	0112      	lsls	r2, r2, #4
 8004280:	4311      	orrs	r1, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004286:	0212      	lsls	r2, r2, #8
 8004288:	4311      	orrs	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800428e:	0852      	lsrs	r2, r2, #1
 8004290:	3a01      	subs	r2, #1
 8004292:	0552      	lsls	r2, r2, #21
 8004294:	4311      	orrs	r1, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800429a:	0852      	lsrs	r2, r2, #1
 800429c:	3a01      	subs	r2, #1
 800429e:	0652      	lsls	r2, r2, #25
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042a6:	06d2      	lsls	r2, r2, #27
 80042a8:	430a      	orrs	r2, r1
 80042aa:	4943      	ldr	r1, [pc, #268]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b0:	4b41      	ldr	r3, [pc, #260]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a40      	ldr	r2, [pc, #256]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 80042b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042bc:	4b3e      	ldr	r3, [pc, #248]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a3d      	ldr	r2, [pc, #244]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fd fc72 	bl	8001bb0 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd fc6e 	bl	8001bb0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e066      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e2:	4b35      	ldr	r3, [pc, #212]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x530>
 80042ee:	e05e      	b.n	80043ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f0:	4b31      	ldr	r3, [pc, #196]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a30      	ldr	r2, [pc, #192]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 80042f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fd fc58 	bl	8001bb0 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004304:	f7fd fc54 	bl	8001bb0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e04c      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004316:	4b28      	ldr	r3, [pc, #160]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004322:	4b25      	ldr	r3, [pc, #148]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	4924      	ldr	r1, [pc, #144]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 8004328:	4b25      	ldr	r3, [pc, #148]	@ (80043c0 <HAL_RCC_OscConfig+0x620>)
 800432a:	4013      	ands	r3, r2
 800432c:	60cb      	str	r3, [r1, #12]
 800432e:	e03e      	b.n	80043ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e039      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800433c:	4b1e      	ldr	r3, [pc, #120]	@ (80043b8 <HAL_RCC_OscConfig+0x618>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0203 	and.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	429a      	cmp	r2, r3
 800434e:	d12c      	bne.n	80043aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	3b01      	subs	r3, #1
 800435c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d123      	bne.n	80043aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d11b      	bne.n	80043aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d113      	bne.n	80043aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	3b01      	subs	r3, #1
 8004390:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d109      	bne.n	80043aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	3b01      	subs	r3, #1
 80043a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000
 80043bc:	019f800c 	.word	0x019f800c
 80043c0:	feeefffc 	.word	0xfeeefffc

080043c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e11e      	b.n	800461a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b91      	ldr	r3, [pc, #580]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d910      	bls.n	800440c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b8e      	ldr	r3, [pc, #568]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 020f 	bic.w	r2, r3, #15
 80043f2:	498c      	ldr	r1, [pc, #560]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b8a      	ldr	r3, [pc, #552]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e106      	b.n	800461a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d073      	beq.n	8004500 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d129      	bne.n	8004474 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004420:	4b81      	ldr	r3, [pc, #516]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0f4      	b.n	800461a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004430:	f000 f99e 	bl	8004770 <RCC_GetSysClockFreqFromPLLSource>
 8004434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4a7c      	ldr	r2, [pc, #496]	@ (800462c <HAL_RCC_ClockConfig+0x268>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d93f      	bls.n	80044be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800443e:	4b7a      	ldr	r3, [pc, #488]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004452:	2b00      	cmp	r3, #0
 8004454:	d033      	beq.n	80044be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800445a:	2b00      	cmp	r3, #0
 800445c:	d12f      	bne.n	80044be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800445e:	4b72      	ldr	r3, [pc, #456]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004466:	4a70      	ldr	r2, [pc, #448]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 8004468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800446c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800446e:	2380      	movs	r3, #128	@ 0x80
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	e024      	b.n	80044be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d107      	bne.n	800448c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800447c:	4b6a      	ldr	r3, [pc, #424]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0c6      	b.n	800461a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800448c:	4b66      	ldr	r3, [pc, #408]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0be      	b.n	800461a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800449c:	f000 f8ce 	bl	800463c <HAL_RCC_GetSysClockFreq>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4a61      	ldr	r2, [pc, #388]	@ (800462c <HAL_RCC_ClockConfig+0x268>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d909      	bls.n	80044be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044b2:	4a5d      	ldr	r2, [pc, #372]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80044b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80044ba:	2380      	movs	r3, #128	@ 0x80
 80044bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044be:	4b5a      	ldr	r3, [pc, #360]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4957      	ldr	r1, [pc, #348]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d0:	f7fd fb6e 	bl	8001bb0 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d8:	f7fd fb6a 	bl	8001bb0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e095      	b.n	800461a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 020c 	and.w	r2, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1eb      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d023      	beq.n	8004554 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004518:	4b43      	ldr	r3, [pc, #268]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a42      	ldr	r2, [pc, #264]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 800451e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004522:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004530:	4b3d      	ldr	r3, [pc, #244]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004538:	4a3b      	ldr	r2, [pc, #236]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 800453a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800453e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004540:	4b39      	ldr	r3, [pc, #228]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4936      	ldr	r1, [pc, #216]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
 8004552:	e008      	b.n	8004566 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b80      	cmp	r3, #128	@ 0x80
 8004558:	d105      	bne.n	8004566 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800455a:	4b33      	ldr	r3, [pc, #204]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4a32      	ldr	r2, [pc, #200]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 8004560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004564:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004566:	4b2f      	ldr	r3, [pc, #188]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d21d      	bcs.n	80045b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004574:	4b2b      	ldr	r3, [pc, #172]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f023 020f 	bic.w	r2, r3, #15
 800457c:	4929      	ldr	r1, [pc, #164]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004584:	f7fd fb14 	bl	8001bb0 <HAL_GetTick>
 8004588:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458c:	f7fd fb10 	bl	8001bb0 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e03b      	b.n	800461a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a2:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <HAL_RCC_ClockConfig+0x260>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d1ed      	bne.n	800458c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4917      	ldr	r1, [pc, #92]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045da:	4b13      	ldr	r3, [pc, #76]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	490f      	ldr	r1, [pc, #60]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045ee:	f000 f825 	bl	800463c <HAL_RCC_GetSysClockFreq>
 80045f2:	4602      	mov	r2, r0
 80045f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004628 <HAL_RCC_ClockConfig+0x264>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	490c      	ldr	r1, [pc, #48]	@ (8004630 <HAL_RCC_ClockConfig+0x26c>)
 8004600:	5ccb      	ldrb	r3, [r1, r3]
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	fa22 f303 	lsr.w	r3, r2, r3
 800460a:	4a0a      	ldr	r2, [pc, #40]	@ (8004634 <HAL_RCC_ClockConfig+0x270>)
 800460c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800460e:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <HAL_RCC_ClockConfig+0x274>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fd fa80 	bl	8001b18 <HAL_InitTick>
 8004618:	4603      	mov	r3, r0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40022000 	.word	0x40022000
 8004628:	40021000 	.word	0x40021000
 800462c:	04c4b400 	.word	0x04c4b400
 8004630:	08007b50 	.word	0x08007b50
 8004634:	20000000 	.word	0x20000000
 8004638:	20000004 	.word	0x20000004

0800463c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004642:	4b2c      	ldr	r3, [pc, #176]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d102      	bne.n	8004654 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800464e:	4b2a      	ldr	r3, [pc, #168]	@ (80046f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	e047      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004654:	4b27      	ldr	r3, [pc, #156]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b08      	cmp	r3, #8
 800465e:	d102      	bne.n	8004666 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004660:	4b26      	ldr	r3, [pc, #152]	@ (80046fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	e03e      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004666:	4b23      	ldr	r3, [pc, #140]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d136      	bne.n	80046e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004672:	4b20      	ldr	r3, [pc, #128]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800467c:	4b1d      	ldr	r3, [pc, #116]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	3301      	adds	r3, #1
 8004688:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b03      	cmp	r3, #3
 800468e:	d10c      	bne.n	80046aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004690:	4a1a      	ldr	r2, [pc, #104]	@ (80046fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	4a16      	ldr	r2, [pc, #88]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800469a:	68d2      	ldr	r2, [r2, #12]
 800469c:	0a12      	lsrs	r2, r2, #8
 800469e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	617b      	str	r3, [r7, #20]
      break;
 80046a8:	e00c      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046aa:	4a13      	ldr	r2, [pc, #76]	@ (80046f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	4a10      	ldr	r2, [pc, #64]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b4:	68d2      	ldr	r2, [r2, #12]
 80046b6:	0a12      	lsrs	r2, r2, #8
 80046b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046bc:	fb02 f303 	mul.w	r3, r2, r3
 80046c0:	617b      	str	r3, [r7, #20]
      break;
 80046c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046c4:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	0e5b      	lsrs	r3, r3, #25
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	3301      	adds	r3, #1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	e001      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046e4:	693b      	ldr	r3, [r7, #16]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	00f42400 	.word	0x00f42400
 80046fc:	02dc6c00 	.word	0x02dc6c00

08004700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004704:	4b03      	ldr	r3, [pc, #12]	@ (8004714 <HAL_RCC_GetHCLKFreq+0x14>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000000 	.word	0x20000000

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800471c:	f7ff fff0 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b06      	ldr	r3, [pc, #24]	@ (800473c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4904      	ldr	r1, [pc, #16]	@ (8004740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	08007b60 	.word	0x08007b60

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004748:	f7ff ffda 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	0adb      	lsrs	r3, r3, #11
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4904      	ldr	r1, [pc, #16]	@ (800476c <HAL_RCC_GetPCLK2Freq+0x28>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40021000 	.word	0x40021000
 800476c:	08007b60 	.word	0x08007b60

08004770 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004776:	4b1e      	ldr	r3, [pc, #120]	@ (80047f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004780:	4b1b      	ldr	r3, [pc, #108]	@ (80047f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d10c      	bne.n	80047ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004794:	4a17      	ldr	r2, [pc, #92]	@ (80047f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	4a14      	ldr	r2, [pc, #80]	@ (80047f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800479e:	68d2      	ldr	r2, [r2, #12]
 80047a0:	0a12      	lsrs	r2, r2, #8
 80047a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	617b      	str	r3, [r7, #20]
    break;
 80047ac:	e00c      	b.n	80047c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047ae:	4a12      	ldr	r2, [pc, #72]	@ (80047f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	4a0e      	ldr	r2, [pc, #56]	@ (80047f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047b8:	68d2      	ldr	r2, [r2, #12]
 80047ba:	0a12      	lsrs	r2, r2, #8
 80047bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	617b      	str	r3, [r7, #20]
    break;
 80047c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047c8:	4b09      	ldr	r3, [pc, #36]	@ (80047f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	0e5b      	lsrs	r3, r3, #25
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	3301      	adds	r3, #1
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047e2:	687b      	ldr	r3, [r7, #4]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40021000 	.word	0x40021000
 80047f4:	02dc6c00 	.word	0x02dc6c00
 80047f8:	00f42400 	.word	0x00f42400

080047fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004804:	2300      	movs	r3, #0
 8004806:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004808:	2300      	movs	r3, #0
 800480a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8098 	beq.w	800494a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481e:	4b43      	ldr	r3, [pc, #268]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10d      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	4b40      	ldr	r3, [pc, #256]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482e:	4a3f      	ldr	r2, [pc, #252]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004834:	6593      	str	r3, [r2, #88]	@ 0x58
 8004836:	4b3d      	ldr	r3, [pc, #244]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004842:	2301      	movs	r3, #1
 8004844:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004846:	4b3a      	ldr	r3, [pc, #232]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a39      	ldr	r2, [pc, #228]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004850:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004852:	f7fd f9ad 	bl	8001bb0 <HAL_GetTick>
 8004856:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004858:	e009      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7fd f9a9 	bl	8001bb0 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d902      	bls.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	74fb      	strb	r3, [r7, #19]
        break;
 800486c:	e005      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800486e:	4b30      	ldr	r3, [pc, #192]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ef      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d159      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004880:	4b2a      	ldr	r3, [pc, #168]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800488a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01e      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	429a      	cmp	r2, r3
 800489a:	d019      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800489c:	4b23      	ldr	r3, [pc, #140]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048a8:	4b20      	ldr	r3, [pc, #128]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ae:	4a1f      	ldr	r2, [pc, #124]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048b8:	4b1c      	ldr	r3, [pc, #112]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048be:	4a1b      	ldr	r2, [pc, #108]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048c8:	4a18      	ldr	r2, [pc, #96]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048da:	f7fd f969 	bl	8001bb0 <HAL_GetTick>
 80048de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e0:	e00b      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fd f965 	bl	8001bb0 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d902      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	74fb      	strb	r3, [r7, #19]
            break;
 80048f8:	e006      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fa:	4b0c      	ldr	r3, [pc, #48]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ec      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800490e:	4b07      	ldr	r3, [pc, #28]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004914:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800491c:	4903      	ldr	r1, [pc, #12]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004924:	e008      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	74bb      	strb	r3, [r7, #18]
 800492a:	e005      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800492c:	40021000 	.word	0x40021000
 8004930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	7cfb      	ldrb	r3, [r7, #19]
 8004936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004938:	7c7b      	ldrb	r3, [r7, #17]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d105      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493e:	4ba7      	ldr	r3, [pc, #668]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004942:	4aa6      	ldr	r2, [pc, #664]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004948:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004956:	4ba1      	ldr	r3, [pc, #644]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495c:	f023 0203 	bic.w	r2, r3, #3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	499d      	ldr	r1, [pc, #628]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004978:	4b98      	ldr	r3, [pc, #608]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	f023 020c 	bic.w	r2, r3, #12
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	4995      	ldr	r1, [pc, #596]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800499a:	4b90      	ldr	r3, [pc, #576]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	498c      	ldr	r1, [pc, #560]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049bc:	4b87      	ldr	r3, [pc, #540]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	4984      	ldr	r1, [pc, #528]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049de:	4b7f      	ldr	r3, [pc, #508]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	497b      	ldr	r1, [pc, #492]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a00:	4b76      	ldr	r3, [pc, #472]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	4973      	ldr	r1, [pc, #460]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a22:	4b6e      	ldr	r3, [pc, #440]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	496a      	ldr	r1, [pc, #424]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a44:	4b65      	ldr	r3, [pc, #404]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	4962      	ldr	r1, [pc, #392]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a66:	4b5d      	ldr	r3, [pc, #372]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	4959      	ldr	r1, [pc, #356]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a88:	4b54      	ldr	r3, [pc, #336]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a8e:	f023 0203 	bic.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a96:	4951      	ldr	r1, [pc, #324]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	4948      	ldr	r1, [pc, #288]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d015      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004acc:	4b43      	ldr	r3, [pc, #268]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	4940      	ldr	r1, [pc, #256]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aea:	d105      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aec:	4b3b      	ldr	r3, [pc, #236]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a3a      	ldr	r2, [pc, #232]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004af6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d015      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b04:	4b35      	ldr	r3, [pc, #212]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b12:	4932      	ldr	r1, [pc, #200]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b22:	d105      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b24:	4b2d      	ldr	r3, [pc, #180]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4a2c      	ldr	r2, [pc, #176]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b2e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d015      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b3c:	4b27      	ldr	r3, [pc, #156]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4a:	4924      	ldr	r1, [pc, #144]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b5a:	d105      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4a1e      	ldr	r2, [pc, #120]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d015      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b74:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b82:	4916      	ldr	r1, [pc, #88]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b92:	d105      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b94:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4a10      	ldr	r2, [pc, #64]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d019      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	4908      	ldr	r1, [pc, #32]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bca:	d109      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bcc:	4b03      	ldr	r3, [pc, #12]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4a02      	ldr	r2, [pc, #8]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd6:	60d3      	str	r3, [r2, #12]
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d015      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bec:	4b29      	ldr	r3, [pc, #164]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfa:	4926      	ldr	r1, [pc, #152]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c0a:	d105      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c0c:	4b21      	ldr	r3, [pc, #132]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a20      	ldr	r2, [pc, #128]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d015      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c24:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c32:	4918      	ldr	r1, [pc, #96]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c42:	d105      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c44:	4b13      	ldr	r3, [pc, #76]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a12      	ldr	r2, [pc, #72]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d015      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c6a:	490a      	ldr	r1, [pc, #40]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a04      	ldr	r2, [pc, #16]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c88:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000

08004c98 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e027      	b.n	8004cfa <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	7a5b      	ldrb	r3, [r3, #9]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fc fcd4 	bl	8001668 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 0108 	bic.w	r1, r3, #8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0204 	orr.w	r2, r2, #4
 8004cea:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7a1b      	ldrb	r3, [r3, #8]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_RNG_GenerateRandomNumber+0x1a>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e044      	b.n	8004da6 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7a5b      	ldrb	r3, [r3, #9]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d133      	bne.n	8004d94 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d32:	f7fc ff3d 	bl	8001bb0 <HAL_GetTick>
 8004d36:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d38:	e018      	b.n	8004d6c <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d3a:	f7fc ff39 	bl	8001bb0 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d911      	bls.n	8004d6c <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d00a      	beq.n	8004d6c <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e01c      	b.n	8004da6 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d1df      	bne.n	8004d3a <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	725a      	strb	r2, [r3, #9]
 8004d92:	e004      	b.n	8004d9e <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2204      	movs	r2, #4
 8004d98:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	721a      	strb	r2, [r3, #8]

  return status;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e049      	b.n	8004e54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7fc fc7b 	bl	80016d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4619      	mov	r1, r3
 8004dec:	4610      	mov	r0, r2
 8004dee:	f000 fb31 	bl	8005454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d001      	beq.n	8004e74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e04c      	b.n	8004f0e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a26      	ldr	r2, [pc, #152]	@ (8004f1c <HAL_TIM_Base_Start+0xc0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d022      	beq.n	8004ecc <HAL_TIM_Base_Start+0x70>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e8e:	d01d      	beq.n	8004ecc <HAL_TIM_Base_Start+0x70>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a22      	ldr	r2, [pc, #136]	@ (8004f20 <HAL_TIM_Base_Start+0xc4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <HAL_TIM_Base_Start+0x70>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a21      	ldr	r2, [pc, #132]	@ (8004f24 <HAL_TIM_Base_Start+0xc8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <HAL_TIM_Base_Start+0x70>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f28 <HAL_TIM_Base_Start+0xcc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <HAL_TIM_Base_Start+0x70>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f2c <HAL_TIM_Base_Start+0xd0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_TIM_Base_Start+0x70>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f30 <HAL_TIM_Base_Start+0xd4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_TIM_Base_Start+0x70>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f34 <HAL_TIM_Base_Start+0xd8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d115      	bne.n	8004ef8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	4b19      	ldr	r3, [pc, #100]	@ (8004f38 <HAL_TIM_Base_Start+0xdc>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d015      	beq.n	8004f0a <HAL_TIM_Base_Start+0xae>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee4:	d011      	beq.n	8004f0a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef6:	e008      	b.n	8004f0a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e000      	b.n	8004f0c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40000c00 	.word	0x40000c00
 8004f2c:	40013400 	.word	0x40013400
 8004f30:	40014000 	.word	0x40014000
 8004f34:	40015000 	.word	0x40015000
 8004f38:	00010007 	.word	0x00010007

08004f3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e049      	b.n	8004fe2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f841 	bl	8004fea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f000 fa6a 	bl	8005454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800501a:	2302      	movs	r3, #2
 800501c:	e0ff      	b.n	800521e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b14      	cmp	r3, #20
 800502a:	f200 80f0 	bhi.w	800520e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800502e:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005089 	.word	0x08005089
 8005038:	0800520f 	.word	0x0800520f
 800503c:	0800520f 	.word	0x0800520f
 8005040:	0800520f 	.word	0x0800520f
 8005044:	080050c9 	.word	0x080050c9
 8005048:	0800520f 	.word	0x0800520f
 800504c:	0800520f 	.word	0x0800520f
 8005050:	0800520f 	.word	0x0800520f
 8005054:	0800510b 	.word	0x0800510b
 8005058:	0800520f 	.word	0x0800520f
 800505c:	0800520f 	.word	0x0800520f
 8005060:	0800520f 	.word	0x0800520f
 8005064:	0800514b 	.word	0x0800514b
 8005068:	0800520f 	.word	0x0800520f
 800506c:	0800520f 	.word	0x0800520f
 8005070:	0800520f 	.word	0x0800520f
 8005074:	0800518d 	.word	0x0800518d
 8005078:	0800520f 	.word	0x0800520f
 800507c:	0800520f 	.word	0x0800520f
 8005080:	0800520f 	.word	0x0800520f
 8005084:	080051cd 	.word	0x080051cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fa94 	bl	80055bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0208 	orr.w	r2, r2, #8
 80050a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0204 	bic.w	r2, r2, #4
 80050b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6999      	ldr	r1, [r3, #24]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	619a      	str	r2, [r3, #24]
      break;
 80050c6:	e0a5      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fb0e 	bl	80056f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6999      	ldr	r1, [r3, #24]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	021a      	lsls	r2, r3, #8
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	619a      	str	r2, [r3, #24]
      break;
 8005108:	e084      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fb81 	bl	8005818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0208 	orr.w	r2, r2, #8
 8005124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0204 	bic.w	r2, r2, #4
 8005134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69d9      	ldr	r1, [r3, #28]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	61da      	str	r2, [r3, #28]
      break;
 8005148:	e064      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fbf3 	bl	800593c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69d9      	ldr	r1, [r3, #28]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	021a      	lsls	r2, r3, #8
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	61da      	str	r2, [r3, #28]
      break;
 800518a:	e043      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fc66 	bl	8005a64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0204 	bic.w	r2, r2, #4
 80051b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80051ca:	e023      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fcb0 	bl	8005b38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800520c:	e002      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	75fb      	strb	r3, [r7, #23]
      break;
 8005212:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop

08005228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_TIM_ConfigClockSource+0x1c>
 8005240:	2302      	movs	r3, #2
 8005242:	e0f6      	b.n	8005432 <HAL_TIM_ConfigClockSource+0x20a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005262:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800526e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a6f      	ldr	r2, [pc, #444]	@ (800543c <HAL_TIM_ConfigClockSource+0x214>)
 800527e:	4293      	cmp	r3, r2
 8005280:	f000 80c1 	beq.w	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 8005284:	4a6d      	ldr	r2, [pc, #436]	@ (800543c <HAL_TIM_ConfigClockSource+0x214>)
 8005286:	4293      	cmp	r3, r2
 8005288:	f200 80c6 	bhi.w	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 800528c:	4a6c      	ldr	r2, [pc, #432]	@ (8005440 <HAL_TIM_ConfigClockSource+0x218>)
 800528e:	4293      	cmp	r3, r2
 8005290:	f000 80b9 	beq.w	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 8005294:	4a6a      	ldr	r2, [pc, #424]	@ (8005440 <HAL_TIM_ConfigClockSource+0x218>)
 8005296:	4293      	cmp	r3, r2
 8005298:	f200 80be 	bhi.w	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 800529c:	4a69      	ldr	r2, [pc, #420]	@ (8005444 <HAL_TIM_ConfigClockSource+0x21c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	f000 80b1 	beq.w	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 80052a4:	4a67      	ldr	r2, [pc, #412]	@ (8005444 <HAL_TIM_ConfigClockSource+0x21c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	f200 80b6 	bhi.w	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 80052ac:	4a66      	ldr	r2, [pc, #408]	@ (8005448 <HAL_TIM_ConfigClockSource+0x220>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	f000 80a9 	beq.w	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 80052b4:	4a64      	ldr	r2, [pc, #400]	@ (8005448 <HAL_TIM_ConfigClockSource+0x220>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	f200 80ae 	bhi.w	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 80052bc:	4a63      	ldr	r2, [pc, #396]	@ (800544c <HAL_TIM_ConfigClockSource+0x224>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	f000 80a1 	beq.w	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 80052c4:	4a61      	ldr	r2, [pc, #388]	@ (800544c <HAL_TIM_ConfigClockSource+0x224>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	f200 80a6 	bhi.w	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 80052cc:	4a60      	ldr	r2, [pc, #384]	@ (8005450 <HAL_TIM_ConfigClockSource+0x228>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	f000 8099 	beq.w	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 80052d4:	4a5e      	ldr	r2, [pc, #376]	@ (8005450 <HAL_TIM_ConfigClockSource+0x228>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	f200 809e 	bhi.w	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 80052dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80052e0:	f000 8091 	beq.w	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 80052e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80052e8:	f200 8096 	bhi.w	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 80052ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052f0:	f000 8089 	beq.w	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 80052f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052f8:	f200 808e 	bhi.w	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 80052fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005300:	d03e      	beq.n	8005380 <HAL_TIM_ConfigClockSource+0x158>
 8005302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005306:	f200 8087 	bhi.w	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800530e:	f000 8086 	beq.w	800541e <HAL_TIM_ConfigClockSource+0x1f6>
 8005312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005316:	d87f      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 8005318:	2b70      	cmp	r3, #112	@ 0x70
 800531a:	d01a      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0x12a>
 800531c:	2b70      	cmp	r3, #112	@ 0x70
 800531e:	d87b      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 8005320:	2b60      	cmp	r3, #96	@ 0x60
 8005322:	d050      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x19e>
 8005324:	2b60      	cmp	r3, #96	@ 0x60
 8005326:	d877      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 8005328:	2b50      	cmp	r3, #80	@ 0x50
 800532a:	d03c      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0x17e>
 800532c:	2b50      	cmp	r3, #80	@ 0x50
 800532e:	d873      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 8005330:	2b40      	cmp	r3, #64	@ 0x40
 8005332:	d058      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x1be>
 8005334:	2b40      	cmp	r3, #64	@ 0x40
 8005336:	d86f      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 8005338:	2b30      	cmp	r3, #48	@ 0x30
 800533a:	d064      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 800533c:	2b30      	cmp	r3, #48	@ 0x30
 800533e:	d86b      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 8005340:	2b20      	cmp	r3, #32
 8005342:	d060      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 8005344:	2b20      	cmp	r3, #32
 8005346:	d867      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d05c      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 800534c:	2b10      	cmp	r3, #16
 800534e:	d05a      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x1de>
 8005350:	e062      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005362:	f000 fcd1 	bl	8005d08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	609a      	str	r2, [r3, #8]
      break;
 800537e:	e04f      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005390:	f000 fcba 	bl	8005d08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053a2:	609a      	str	r2, [r3, #8]
      break;
 80053a4:	e03c      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b2:	461a      	mov	r2, r3
 80053b4:	f000 fc2c 	bl	8005c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2150      	movs	r1, #80	@ 0x50
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fc85 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 80053c4:	e02c      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d2:	461a      	mov	r2, r3
 80053d4:	f000 fc4b 	bl	8005c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2160      	movs	r1, #96	@ 0x60
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fc75 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 80053e4:	e01c      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f2:	461a      	mov	r2, r3
 80053f4:	f000 fc0c 	bl	8005c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2140      	movs	r1, #64	@ 0x40
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fc65 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005404:	e00c      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f000 fc5c 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005416:	e003      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	73fb      	strb	r3, [r7, #15]
      break;
 800541c:	e000      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800541e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	00100070 	.word	0x00100070
 8005440:	00100060 	.word	0x00100060
 8005444:	00100050 	.word	0x00100050
 8005448:	00100040 	.word	0x00100040
 800544c:	00100030 	.word	0x00100030
 8005450:	00100020 	.word	0x00100020

08005454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a4c      	ldr	r2, [pc, #304]	@ (8005598 <TIM_Base_SetConfig+0x144>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d017      	beq.n	800549c <TIM_Base_SetConfig+0x48>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005472:	d013      	beq.n	800549c <TIM_Base_SetConfig+0x48>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a49      	ldr	r2, [pc, #292]	@ (800559c <TIM_Base_SetConfig+0x148>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00f      	beq.n	800549c <TIM_Base_SetConfig+0x48>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a48      	ldr	r2, [pc, #288]	@ (80055a0 <TIM_Base_SetConfig+0x14c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00b      	beq.n	800549c <TIM_Base_SetConfig+0x48>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a47      	ldr	r2, [pc, #284]	@ (80055a4 <TIM_Base_SetConfig+0x150>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <TIM_Base_SetConfig+0x48>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a46      	ldr	r2, [pc, #280]	@ (80055a8 <TIM_Base_SetConfig+0x154>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_Base_SetConfig+0x48>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a45      	ldr	r2, [pc, #276]	@ (80055ac <TIM_Base_SetConfig+0x158>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d108      	bne.n	80054ae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a39      	ldr	r2, [pc, #228]	@ (8005598 <TIM_Base_SetConfig+0x144>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d023      	beq.n	80054fe <TIM_Base_SetConfig+0xaa>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054bc:	d01f      	beq.n	80054fe <TIM_Base_SetConfig+0xaa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a36      	ldr	r2, [pc, #216]	@ (800559c <TIM_Base_SetConfig+0x148>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01b      	beq.n	80054fe <TIM_Base_SetConfig+0xaa>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a35      	ldr	r2, [pc, #212]	@ (80055a0 <TIM_Base_SetConfig+0x14c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d017      	beq.n	80054fe <TIM_Base_SetConfig+0xaa>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a34      	ldr	r2, [pc, #208]	@ (80055a4 <TIM_Base_SetConfig+0x150>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <TIM_Base_SetConfig+0xaa>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a33      	ldr	r2, [pc, #204]	@ (80055a8 <TIM_Base_SetConfig+0x154>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00f      	beq.n	80054fe <TIM_Base_SetConfig+0xaa>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a33      	ldr	r2, [pc, #204]	@ (80055b0 <TIM_Base_SetConfig+0x15c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00b      	beq.n	80054fe <TIM_Base_SetConfig+0xaa>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a32      	ldr	r2, [pc, #200]	@ (80055b4 <TIM_Base_SetConfig+0x160>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d007      	beq.n	80054fe <TIM_Base_SetConfig+0xaa>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a31      	ldr	r2, [pc, #196]	@ (80055b8 <TIM_Base_SetConfig+0x164>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d003      	beq.n	80054fe <TIM_Base_SetConfig+0xaa>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2c      	ldr	r2, [pc, #176]	@ (80055ac <TIM_Base_SetConfig+0x158>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d108      	bne.n	8005510 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a18      	ldr	r2, [pc, #96]	@ (8005598 <TIM_Base_SetConfig+0x144>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d013      	beq.n	8005564 <TIM_Base_SetConfig+0x110>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a1a      	ldr	r2, [pc, #104]	@ (80055a8 <TIM_Base_SetConfig+0x154>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00f      	beq.n	8005564 <TIM_Base_SetConfig+0x110>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a1a      	ldr	r2, [pc, #104]	@ (80055b0 <TIM_Base_SetConfig+0x15c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00b      	beq.n	8005564 <TIM_Base_SetConfig+0x110>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a19      	ldr	r2, [pc, #100]	@ (80055b4 <TIM_Base_SetConfig+0x160>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d007      	beq.n	8005564 <TIM_Base_SetConfig+0x110>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a18      	ldr	r2, [pc, #96]	@ (80055b8 <TIM_Base_SetConfig+0x164>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_Base_SetConfig+0x110>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a13      	ldr	r2, [pc, #76]	@ (80055ac <TIM_Base_SetConfig+0x158>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d103      	bne.n	800556c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b01      	cmp	r3, #1
 800557c:	d105      	bne.n	800558a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	611a      	str	r2, [r3, #16]
  }
}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40012c00 	.word	0x40012c00
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40013400 	.word	0x40013400
 80055ac:	40015000 	.word	0x40015000
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40014400 	.word	0x40014400
 80055b8:	40014800 	.word	0x40014800

080055bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f023 0201 	bic.w	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0303 	bic.w	r3, r3, #3
 80055f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 0302 	bic.w	r3, r3, #2
 8005608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a30      	ldr	r2, [pc, #192]	@ (80056d8 <TIM_OC1_SetConfig+0x11c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <TIM_OC1_SetConfig+0x88>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a2f      	ldr	r2, [pc, #188]	@ (80056dc <TIM_OC1_SetConfig+0x120>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00f      	beq.n	8005644 <TIM_OC1_SetConfig+0x88>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a2e      	ldr	r2, [pc, #184]	@ (80056e0 <TIM_OC1_SetConfig+0x124>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00b      	beq.n	8005644 <TIM_OC1_SetConfig+0x88>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a2d      	ldr	r2, [pc, #180]	@ (80056e4 <TIM_OC1_SetConfig+0x128>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_OC1_SetConfig+0x88>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a2c      	ldr	r2, [pc, #176]	@ (80056e8 <TIM_OC1_SetConfig+0x12c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC1_SetConfig+0x88>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a2b      	ldr	r2, [pc, #172]	@ (80056ec <TIM_OC1_SetConfig+0x130>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d10c      	bne.n	800565e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0308 	bic.w	r3, r3, #8
 800564a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 0304 	bic.w	r3, r3, #4
 800565c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a1d      	ldr	r2, [pc, #116]	@ (80056d8 <TIM_OC1_SetConfig+0x11c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <TIM_OC1_SetConfig+0xd2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1c      	ldr	r2, [pc, #112]	@ (80056dc <TIM_OC1_SetConfig+0x120>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00f      	beq.n	800568e <TIM_OC1_SetConfig+0xd2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1b      	ldr	r2, [pc, #108]	@ (80056e0 <TIM_OC1_SetConfig+0x124>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00b      	beq.n	800568e <TIM_OC1_SetConfig+0xd2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a1a      	ldr	r2, [pc, #104]	@ (80056e4 <TIM_OC1_SetConfig+0x128>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d007      	beq.n	800568e <TIM_OC1_SetConfig+0xd2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a19      	ldr	r2, [pc, #100]	@ (80056e8 <TIM_OC1_SetConfig+0x12c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_OC1_SetConfig+0xd2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a18      	ldr	r2, [pc, #96]	@ (80056ec <TIM_OC1_SetConfig+0x130>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d111      	bne.n	80056b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800569c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	621a      	str	r2, [r3, #32]
}
 80056cc:	bf00      	nop
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40013400 	.word	0x40013400
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800
 80056ec:	40015000 	.word	0x40015000

080056f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f023 0210 	bic.w	r2, r3, #16
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800572a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0320 	bic.w	r3, r3, #32
 800573e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a2c      	ldr	r2, [pc, #176]	@ (8005800 <TIM_OC2_SetConfig+0x110>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <TIM_OC2_SetConfig+0x74>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a2b      	ldr	r2, [pc, #172]	@ (8005804 <TIM_OC2_SetConfig+0x114>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_OC2_SetConfig+0x74>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a2a      	ldr	r2, [pc, #168]	@ (8005808 <TIM_OC2_SetConfig+0x118>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d10d      	bne.n	8005780 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800577e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1f      	ldr	r2, [pc, #124]	@ (8005800 <TIM_OC2_SetConfig+0x110>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d013      	beq.n	80057b0 <TIM_OC2_SetConfig+0xc0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1e      	ldr	r2, [pc, #120]	@ (8005804 <TIM_OC2_SetConfig+0x114>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00f      	beq.n	80057b0 <TIM_OC2_SetConfig+0xc0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a1e      	ldr	r2, [pc, #120]	@ (800580c <TIM_OC2_SetConfig+0x11c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00b      	beq.n	80057b0 <TIM_OC2_SetConfig+0xc0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a1d      	ldr	r2, [pc, #116]	@ (8005810 <TIM_OC2_SetConfig+0x120>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d007      	beq.n	80057b0 <TIM_OC2_SetConfig+0xc0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005814 <TIM_OC2_SetConfig+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_OC2_SetConfig+0xc0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a17      	ldr	r2, [pc, #92]	@ (8005808 <TIM_OC2_SetConfig+0x118>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d113      	bne.n	80057d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40013400 	.word	0x40013400
 8005808:	40015000 	.word	0x40015000
 800580c:	40014000 	.word	0x40014000
 8005810:	40014400 	.word	0x40014400
 8005814:	40014800 	.word	0x40014800

08005818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800584a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0303 	bic.w	r3, r3, #3
 8005852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2b      	ldr	r2, [pc, #172]	@ (8005924 <TIM_OC3_SetConfig+0x10c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <TIM_OC3_SetConfig+0x72>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2a      	ldr	r2, [pc, #168]	@ (8005928 <TIM_OC3_SetConfig+0x110>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_OC3_SetConfig+0x72>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a29      	ldr	r2, [pc, #164]	@ (800592c <TIM_OC3_SetConfig+0x114>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10d      	bne.n	80058a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005924 <TIM_OC3_SetConfig+0x10c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <TIM_OC3_SetConfig+0xbe>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <TIM_OC3_SetConfig+0x110>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00f      	beq.n	80058d6 <TIM_OC3_SetConfig+0xbe>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005930 <TIM_OC3_SetConfig+0x118>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00b      	beq.n	80058d6 <TIM_OC3_SetConfig+0xbe>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005934 <TIM_OC3_SetConfig+0x11c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d007      	beq.n	80058d6 <TIM_OC3_SetConfig+0xbe>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005938 <TIM_OC3_SetConfig+0x120>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_OC3_SetConfig+0xbe>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a16      	ldr	r2, [pc, #88]	@ (800592c <TIM_OC3_SetConfig+0x114>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d113      	bne.n	80058fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40013400 	.word	0x40013400
 800592c:	40015000 	.word	0x40015000
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400
 8005938:	40014800 	.word	0x40014800

0800593c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	021b      	lsls	r3, r3, #8
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800598a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	031b      	lsls	r3, r3, #12
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a4c <TIM_OC4_SetConfig+0x110>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d007      	beq.n	80059b0 <TIM_OC4_SetConfig+0x74>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005a50 <TIM_OC4_SetConfig+0x114>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_OC4_SetConfig+0x74>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005a54 <TIM_OC4_SetConfig+0x118>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10d      	bne.n	80059cc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	031b      	lsls	r3, r3, #12
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a1f      	ldr	r2, [pc, #124]	@ (8005a4c <TIM_OC4_SetConfig+0x110>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <TIM_OC4_SetConfig+0xc0>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a50 <TIM_OC4_SetConfig+0x114>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00f      	beq.n	80059fc <TIM_OC4_SetConfig+0xc0>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1e      	ldr	r2, [pc, #120]	@ (8005a58 <TIM_OC4_SetConfig+0x11c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00b      	beq.n	80059fc <TIM_OC4_SetConfig+0xc0>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a5c <TIM_OC4_SetConfig+0x120>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d007      	beq.n	80059fc <TIM_OC4_SetConfig+0xc0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005a60 <TIM_OC4_SetConfig+0x124>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_OC4_SetConfig+0xc0>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a17      	ldr	r2, [pc, #92]	@ (8005a54 <TIM_OC4_SetConfig+0x118>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d113      	bne.n	8005a24 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	019b      	lsls	r3, r3, #6
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	019b      	lsls	r3, r3, #6
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40013400 	.word	0x40013400
 8005a54:	40015000 	.word	0x40015000
 8005a58:	40014000 	.word	0x40014000
 8005a5c:	40014400 	.word	0x40014400
 8005a60:	40014800 	.word	0x40014800

08005a64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005aa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	041b      	lsls	r3, r3, #16
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a19      	ldr	r2, [pc, #100]	@ (8005b20 <TIM_OC5_SetConfig+0xbc>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <TIM_OC5_SetConfig+0x82>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a18      	ldr	r2, [pc, #96]	@ (8005b24 <TIM_OC5_SetConfig+0xc0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00f      	beq.n	8005ae6 <TIM_OC5_SetConfig+0x82>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a17      	ldr	r2, [pc, #92]	@ (8005b28 <TIM_OC5_SetConfig+0xc4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00b      	beq.n	8005ae6 <TIM_OC5_SetConfig+0x82>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a16      	ldr	r2, [pc, #88]	@ (8005b2c <TIM_OC5_SetConfig+0xc8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d007      	beq.n	8005ae6 <TIM_OC5_SetConfig+0x82>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a15      	ldr	r2, [pc, #84]	@ (8005b30 <TIM_OC5_SetConfig+0xcc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_OC5_SetConfig+0x82>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a14      	ldr	r2, [pc, #80]	@ (8005b34 <TIM_OC5_SetConfig+0xd0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d109      	bne.n	8005afa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40013400 	.word	0x40013400
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	40014400 	.word	0x40014400
 8005b30:	40014800 	.word	0x40014800
 8005b34:	40015000 	.word	0x40015000

08005b38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	051b      	lsls	r3, r3, #20
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8005bf8 <TIM_OC6_SetConfig+0xc0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <TIM_OC6_SetConfig+0x84>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a19      	ldr	r2, [pc, #100]	@ (8005bfc <TIM_OC6_SetConfig+0xc4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00f      	beq.n	8005bbc <TIM_OC6_SetConfig+0x84>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a18      	ldr	r2, [pc, #96]	@ (8005c00 <TIM_OC6_SetConfig+0xc8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <TIM_OC6_SetConfig+0x84>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a17      	ldr	r2, [pc, #92]	@ (8005c04 <TIM_OC6_SetConfig+0xcc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <TIM_OC6_SetConfig+0x84>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a16      	ldr	r2, [pc, #88]	@ (8005c08 <TIM_OC6_SetConfig+0xd0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_OC6_SetConfig+0x84>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a15      	ldr	r2, [pc, #84]	@ (8005c0c <TIM_OC6_SetConfig+0xd4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d109      	bne.n	8005bd0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	029b      	lsls	r3, r3, #10
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40012c00 	.word	0x40012c00
 8005bfc:	40013400 	.word	0x40013400
 8005c00:	40014000 	.word	0x40014000
 8005c04:	40014400 	.word	0x40014400
 8005c08:	40014800 	.word	0x40014800
 8005c0c:	40015000 	.word	0x40015000

08005c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f023 0201 	bic.w	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 030a 	bic.w	r3, r3, #10
 8005c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b087      	sub	sp, #28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f023 0210 	bic.w	r2, r3, #16
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	031b      	lsls	r3, r3, #12
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005caa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f043 0307 	orr.w	r3, r3, #7
 8005cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	021a      	lsls	r2, r3, #8
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	609a      	str	r2, [r3, #8]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e074      	b.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a34      	ldr	r2, [pc, #208]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d009      	beq.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a33      	ldr	r2, [pc, #204]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d004      	beq.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a31      	ldr	r2, [pc, #196]	@ (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d108      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005da4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a21      	ldr	r2, [pc, #132]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d022      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de0:	d01d      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d018      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00e      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a15      	ldr	r2, [pc, #84]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a18      	ldr	r2, [pc, #96]	@ (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d004      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a11      	ldr	r2, [pc, #68]	@ (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d10c      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40013400 	.word	0x40013400
 8005e60:	40015000 	.word	0x40015000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40014000 	.word	0x40014000

08005e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e042      	b.n	8005f0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7fb fc7f 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2224      	movs	r2, #36	@ 0x24
 8005ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fbb2 	bl	8006628 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f8b3 	bl	8006030 <UART_SetConfig>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e01b      	b.n	8005f0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fc31 	bl	800676c <UART_CheckIdleState>
 8005f0a:	4603      	mov	r3, r0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	@ 0x28
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	d17b      	bne.n	8006026 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_UART_Transmit+0x26>
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e074      	b.n	8006028 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2221      	movs	r2, #33	@ 0x21
 8005f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f4e:	f7fb fe2f 	bl	8001bb0 <HAL_GetTick>
 8005f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6c:	d108      	bne.n	8005f80 <HAL_UART_Transmit+0x6c>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e003      	b.n	8005f88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f88:	e030      	b.n	8005fec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2200      	movs	r2, #0
 8005f92:	2180      	movs	r1, #128	@ 0x80
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 fc93 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e03d      	b.n	8006028 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e007      	b.n	8005fda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1c8      	bne.n	8005f8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2200      	movs	r2, #0
 8006000:	2140      	movs	r1, #64	@ 0x40
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fc5c 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e006      	b.n	8006028 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e000      	b.n	8006028 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
  }
}
 8006028:	4618      	mov	r0, r3
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006034:	b08c      	sub	sp, #48	@ 0x30
 8006036:	af00      	add	r7, sp, #0
 8006038:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	431a      	orrs	r2, r3
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	431a      	orrs	r2, r3
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	4313      	orrs	r3, r2
 8006056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4baa      	ldr	r3, [pc, #680]	@ (8006308 <UART_SetConfig+0x2d8>)
 8006060:	4013      	ands	r3, r2
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	6812      	ldr	r2, [r2, #0]
 8006066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006068:	430b      	orrs	r3, r1
 800606a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a9f      	ldr	r2, [pc, #636]	@ (800630c <UART_SetConfig+0x2dc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d004      	beq.n	800609c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006098:	4313      	orrs	r3, r2
 800609a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80060a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060b0:	430b      	orrs	r3, r1
 80060b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ba:	f023 010f 	bic.w	r1, r3, #15
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a90      	ldr	r2, [pc, #576]	@ (8006310 <UART_SetConfig+0x2e0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d125      	bne.n	8006120 <UART_SetConfig+0xf0>
 80060d4:	4b8f      	ldr	r3, [pc, #572]	@ (8006314 <UART_SetConfig+0x2e4>)
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d81a      	bhi.n	8006118 <UART_SetConfig+0xe8>
 80060e2:	a201      	add	r2, pc, #4	@ (adr r2, 80060e8 <UART_SetConfig+0xb8>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	080060f9 	.word	0x080060f9
 80060ec:	08006109 	.word	0x08006109
 80060f0:	08006101 	.word	0x08006101
 80060f4:	08006111 	.word	0x08006111
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fe:	e116      	b.n	800632e <UART_SetConfig+0x2fe>
 8006100:	2302      	movs	r3, #2
 8006102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006106:	e112      	b.n	800632e <UART_SetConfig+0x2fe>
 8006108:	2304      	movs	r3, #4
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800610e:	e10e      	b.n	800632e <UART_SetConfig+0x2fe>
 8006110:	2308      	movs	r3, #8
 8006112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006116:	e10a      	b.n	800632e <UART_SetConfig+0x2fe>
 8006118:	2310      	movs	r3, #16
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611e:	e106      	b.n	800632e <UART_SetConfig+0x2fe>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a7c      	ldr	r2, [pc, #496]	@ (8006318 <UART_SetConfig+0x2e8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d138      	bne.n	800619c <UART_SetConfig+0x16c>
 800612a:	4b7a      	ldr	r3, [pc, #488]	@ (8006314 <UART_SetConfig+0x2e4>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006130:	f003 030c 	and.w	r3, r3, #12
 8006134:	2b0c      	cmp	r3, #12
 8006136:	d82d      	bhi.n	8006194 <UART_SetConfig+0x164>
 8006138:	a201      	add	r2, pc, #4	@ (adr r2, 8006140 <UART_SetConfig+0x110>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006175 	.word	0x08006175
 8006144:	08006195 	.word	0x08006195
 8006148:	08006195 	.word	0x08006195
 800614c:	08006195 	.word	0x08006195
 8006150:	08006185 	.word	0x08006185
 8006154:	08006195 	.word	0x08006195
 8006158:	08006195 	.word	0x08006195
 800615c:	08006195 	.word	0x08006195
 8006160:	0800617d 	.word	0x0800617d
 8006164:	08006195 	.word	0x08006195
 8006168:	08006195 	.word	0x08006195
 800616c:	08006195 	.word	0x08006195
 8006170:	0800618d 	.word	0x0800618d
 8006174:	2300      	movs	r3, #0
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800617a:	e0d8      	b.n	800632e <UART_SetConfig+0x2fe>
 800617c:	2302      	movs	r3, #2
 800617e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006182:	e0d4      	b.n	800632e <UART_SetConfig+0x2fe>
 8006184:	2304      	movs	r3, #4
 8006186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800618a:	e0d0      	b.n	800632e <UART_SetConfig+0x2fe>
 800618c:	2308      	movs	r3, #8
 800618e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006192:	e0cc      	b.n	800632e <UART_SetConfig+0x2fe>
 8006194:	2310      	movs	r3, #16
 8006196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800619a:	e0c8      	b.n	800632e <UART_SetConfig+0x2fe>
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a5e      	ldr	r2, [pc, #376]	@ (800631c <UART_SetConfig+0x2ec>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d125      	bne.n	80061f2 <UART_SetConfig+0x1c2>
 80061a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006314 <UART_SetConfig+0x2e4>)
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80061b0:	2b30      	cmp	r3, #48	@ 0x30
 80061b2:	d016      	beq.n	80061e2 <UART_SetConfig+0x1b2>
 80061b4:	2b30      	cmp	r3, #48	@ 0x30
 80061b6:	d818      	bhi.n	80061ea <UART_SetConfig+0x1ba>
 80061b8:	2b20      	cmp	r3, #32
 80061ba:	d00a      	beq.n	80061d2 <UART_SetConfig+0x1a2>
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d814      	bhi.n	80061ea <UART_SetConfig+0x1ba>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <UART_SetConfig+0x19a>
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d008      	beq.n	80061da <UART_SetConfig+0x1aa>
 80061c8:	e00f      	b.n	80061ea <UART_SetConfig+0x1ba>
 80061ca:	2300      	movs	r3, #0
 80061cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d0:	e0ad      	b.n	800632e <UART_SetConfig+0x2fe>
 80061d2:	2302      	movs	r3, #2
 80061d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d8:	e0a9      	b.n	800632e <UART_SetConfig+0x2fe>
 80061da:	2304      	movs	r3, #4
 80061dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e0:	e0a5      	b.n	800632e <UART_SetConfig+0x2fe>
 80061e2:	2308      	movs	r3, #8
 80061e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e8:	e0a1      	b.n	800632e <UART_SetConfig+0x2fe>
 80061ea:	2310      	movs	r3, #16
 80061ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f0:	e09d      	b.n	800632e <UART_SetConfig+0x2fe>
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a4a      	ldr	r2, [pc, #296]	@ (8006320 <UART_SetConfig+0x2f0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d125      	bne.n	8006248 <UART_SetConfig+0x218>
 80061fc:	4b45      	ldr	r3, [pc, #276]	@ (8006314 <UART_SetConfig+0x2e4>)
 80061fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006202:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006206:	2bc0      	cmp	r3, #192	@ 0xc0
 8006208:	d016      	beq.n	8006238 <UART_SetConfig+0x208>
 800620a:	2bc0      	cmp	r3, #192	@ 0xc0
 800620c:	d818      	bhi.n	8006240 <UART_SetConfig+0x210>
 800620e:	2b80      	cmp	r3, #128	@ 0x80
 8006210:	d00a      	beq.n	8006228 <UART_SetConfig+0x1f8>
 8006212:	2b80      	cmp	r3, #128	@ 0x80
 8006214:	d814      	bhi.n	8006240 <UART_SetConfig+0x210>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <UART_SetConfig+0x1f0>
 800621a:	2b40      	cmp	r3, #64	@ 0x40
 800621c:	d008      	beq.n	8006230 <UART_SetConfig+0x200>
 800621e:	e00f      	b.n	8006240 <UART_SetConfig+0x210>
 8006220:	2300      	movs	r3, #0
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006226:	e082      	b.n	800632e <UART_SetConfig+0x2fe>
 8006228:	2302      	movs	r3, #2
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622e:	e07e      	b.n	800632e <UART_SetConfig+0x2fe>
 8006230:	2304      	movs	r3, #4
 8006232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006236:	e07a      	b.n	800632e <UART_SetConfig+0x2fe>
 8006238:	2308      	movs	r3, #8
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623e:	e076      	b.n	800632e <UART_SetConfig+0x2fe>
 8006240:	2310      	movs	r3, #16
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006246:	e072      	b.n	800632e <UART_SetConfig+0x2fe>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a35      	ldr	r2, [pc, #212]	@ (8006324 <UART_SetConfig+0x2f4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d12a      	bne.n	80062a8 <UART_SetConfig+0x278>
 8006252:	4b30      	ldr	r3, [pc, #192]	@ (8006314 <UART_SetConfig+0x2e4>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800625c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006260:	d01a      	beq.n	8006298 <UART_SetConfig+0x268>
 8006262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006266:	d81b      	bhi.n	80062a0 <UART_SetConfig+0x270>
 8006268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626c:	d00c      	beq.n	8006288 <UART_SetConfig+0x258>
 800626e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006272:	d815      	bhi.n	80062a0 <UART_SetConfig+0x270>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <UART_SetConfig+0x250>
 8006278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800627c:	d008      	beq.n	8006290 <UART_SetConfig+0x260>
 800627e:	e00f      	b.n	80062a0 <UART_SetConfig+0x270>
 8006280:	2300      	movs	r3, #0
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006286:	e052      	b.n	800632e <UART_SetConfig+0x2fe>
 8006288:	2302      	movs	r3, #2
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628e:	e04e      	b.n	800632e <UART_SetConfig+0x2fe>
 8006290:	2304      	movs	r3, #4
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006296:	e04a      	b.n	800632e <UART_SetConfig+0x2fe>
 8006298:	2308      	movs	r3, #8
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629e:	e046      	b.n	800632e <UART_SetConfig+0x2fe>
 80062a0:	2310      	movs	r3, #16
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a6:	e042      	b.n	800632e <UART_SetConfig+0x2fe>
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a17      	ldr	r2, [pc, #92]	@ (800630c <UART_SetConfig+0x2dc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d13a      	bne.n	8006328 <UART_SetConfig+0x2f8>
 80062b2:	4b18      	ldr	r3, [pc, #96]	@ (8006314 <UART_SetConfig+0x2e4>)
 80062b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80062bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062c0:	d01a      	beq.n	80062f8 <UART_SetConfig+0x2c8>
 80062c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062c6:	d81b      	bhi.n	8006300 <UART_SetConfig+0x2d0>
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062cc:	d00c      	beq.n	80062e8 <UART_SetConfig+0x2b8>
 80062ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062d2:	d815      	bhi.n	8006300 <UART_SetConfig+0x2d0>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <UART_SetConfig+0x2b0>
 80062d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062dc:	d008      	beq.n	80062f0 <UART_SetConfig+0x2c0>
 80062de:	e00f      	b.n	8006300 <UART_SetConfig+0x2d0>
 80062e0:	2300      	movs	r3, #0
 80062e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062e6:	e022      	b.n	800632e <UART_SetConfig+0x2fe>
 80062e8:	2302      	movs	r3, #2
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ee:	e01e      	b.n	800632e <UART_SetConfig+0x2fe>
 80062f0:	2304      	movs	r3, #4
 80062f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f6:	e01a      	b.n	800632e <UART_SetConfig+0x2fe>
 80062f8:	2308      	movs	r3, #8
 80062fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062fe:	e016      	b.n	800632e <UART_SetConfig+0x2fe>
 8006300:	2310      	movs	r3, #16
 8006302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006306:	e012      	b.n	800632e <UART_SetConfig+0x2fe>
 8006308:	cfff69f3 	.word	0xcfff69f3
 800630c:	40008000 	.word	0x40008000
 8006310:	40013800 	.word	0x40013800
 8006314:	40021000 	.word	0x40021000
 8006318:	40004400 	.word	0x40004400
 800631c:	40004800 	.word	0x40004800
 8006320:	40004c00 	.word	0x40004c00
 8006324:	40005000 	.word	0x40005000
 8006328:	2310      	movs	r3, #16
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4aae      	ldr	r2, [pc, #696]	@ (80065ec <UART_SetConfig+0x5bc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	f040 8097 	bne.w	8006468 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800633a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800633e:	2b08      	cmp	r3, #8
 8006340:	d823      	bhi.n	800638a <UART_SetConfig+0x35a>
 8006342:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <UART_SetConfig+0x318>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	0800636d 	.word	0x0800636d
 800634c:	0800638b 	.word	0x0800638b
 8006350:	08006375 	.word	0x08006375
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800637b 	.word	0x0800637b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	0800638b 	.word	0x0800638b
 8006364:	0800638b 	.word	0x0800638b
 8006368:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800636c:	f7fe f9d4 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8006370:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006372:	e010      	b.n	8006396 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b9e      	ldr	r3, [pc, #632]	@ (80065f0 <UART_SetConfig+0x5c0>)
 8006376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006378:	e00d      	b.n	8006396 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fe f95f 	bl	800463c <HAL_RCC_GetSysClockFreq>
 800637e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006380:	e009      	b.n	8006396 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006388:	e005      	b.n	8006396 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006394:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8130 	beq.w	80065fe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a2:	4a94      	ldr	r2, [pc, #592]	@ (80065f4 <UART_SetConfig+0x5c4>)
 80063a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4413      	add	r3, r2
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d305      	bcc.n	80063ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d903      	bls.n	80063d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063d4:	e113      	b.n	80065fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	2200      	movs	r2, #0
 80063da:	60bb      	str	r3, [r7, #8]
 80063dc:	60fa      	str	r2, [r7, #12]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	4a84      	ldr	r2, [pc, #528]	@ (80065f4 <UART_SetConfig+0x5c4>)
 80063e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2200      	movs	r2, #0
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063f8:	f7f9 ff62 	bl	80002c0 <__aeabi_uldivmod>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4610      	mov	r0, r2
 8006402:	4619      	mov	r1, r3
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	020b      	lsls	r3, r1, #8
 800640e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006412:	0202      	lsls	r2, r0, #8
 8006414:	6979      	ldr	r1, [r7, #20]
 8006416:	6849      	ldr	r1, [r1, #4]
 8006418:	0849      	lsrs	r1, r1, #1
 800641a:	2000      	movs	r0, #0
 800641c:	460c      	mov	r4, r1
 800641e:	4605      	mov	r5, r0
 8006420:	eb12 0804 	adds.w	r8, r2, r4
 8006424:	eb43 0905 	adc.w	r9, r3, r5
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	469a      	mov	sl, r3
 8006430:	4693      	mov	fp, r2
 8006432:	4652      	mov	r2, sl
 8006434:	465b      	mov	r3, fp
 8006436:	4640      	mov	r0, r8
 8006438:	4649      	mov	r1, r9
 800643a:	f7f9 ff41 	bl	80002c0 <__aeabi_uldivmod>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4613      	mov	r3, r2
 8006444:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800644c:	d308      	bcc.n	8006460 <UART_SetConfig+0x430>
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006454:	d204      	bcs.n	8006460 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6a3a      	ldr	r2, [r7, #32]
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	e0ce      	b.n	80065fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006466:	e0ca      	b.n	80065fe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006470:	d166      	bne.n	8006540 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006472:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006476:	2b08      	cmp	r3, #8
 8006478:	d827      	bhi.n	80064ca <UART_SetConfig+0x49a>
 800647a:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <UART_SetConfig+0x450>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	080064a5 	.word	0x080064a5
 8006484:	080064ad 	.word	0x080064ad
 8006488:	080064b5 	.word	0x080064b5
 800648c:	080064cb 	.word	0x080064cb
 8006490:	080064bb 	.word	0x080064bb
 8006494:	080064cb 	.word	0x080064cb
 8006498:	080064cb 	.word	0x080064cb
 800649c:	080064cb 	.word	0x080064cb
 80064a0:	080064c3 	.word	0x080064c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a4:	f7fe f938 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 80064a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064aa:	e014      	b.n	80064d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ac:	f7fe f94a 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 80064b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064b2:	e010      	b.n	80064d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b4:	4b4e      	ldr	r3, [pc, #312]	@ (80065f0 <UART_SetConfig+0x5c0>)
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064b8:	e00d      	b.n	80064d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ba:	f7fe f8bf 	bl	800463c <HAL_RCC_GetSysClockFreq>
 80064be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064c0:	e009      	b.n	80064d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064c8:	e005      	b.n	80064d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8090 	beq.w	80065fe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e2:	4a44      	ldr	r2, [pc, #272]	@ (80065f4 <UART_SetConfig+0x5c4>)
 80064e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064e8:	461a      	mov	r2, r3
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80064f0:	005a      	lsls	r2, r3, #1
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	085b      	lsrs	r3, r3, #1
 80064f8:	441a      	add	r2, r3
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006502:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	2b0f      	cmp	r3, #15
 8006508:	d916      	bls.n	8006538 <UART_SetConfig+0x508>
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006510:	d212      	bcs.n	8006538 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	b29b      	uxth	r3, r3
 8006516:	f023 030f 	bic.w	r3, r3, #15
 800651a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	b29a      	uxth	r2, r3
 8006528:	8bfb      	ldrh	r3, [r7, #30]
 800652a:	4313      	orrs	r3, r2
 800652c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	8bfa      	ldrh	r2, [r7, #30]
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	e062      	b.n	80065fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800653e:	e05e      	b.n	80065fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006540:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006544:	2b08      	cmp	r3, #8
 8006546:	d828      	bhi.n	800659a <UART_SetConfig+0x56a>
 8006548:	a201      	add	r2, pc, #4	@ (adr r2, 8006550 <UART_SetConfig+0x520>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006575 	.word	0x08006575
 8006554:	0800657d 	.word	0x0800657d
 8006558:	08006585 	.word	0x08006585
 800655c:	0800659b 	.word	0x0800659b
 8006560:	0800658b 	.word	0x0800658b
 8006564:	0800659b 	.word	0x0800659b
 8006568:	0800659b 	.word	0x0800659b
 800656c:	0800659b 	.word	0x0800659b
 8006570:	08006593 	.word	0x08006593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006574:	f7fe f8d0 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8006578:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800657a:	e014      	b.n	80065a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800657c:	f7fe f8e2 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8006580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006582:	e010      	b.n	80065a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006584:	4b1a      	ldr	r3, [pc, #104]	@ (80065f0 <UART_SetConfig+0x5c0>)
 8006586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006588:	e00d      	b.n	80065a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800658a:	f7fe f857 	bl	800463c <HAL_RCC_GetSysClockFreq>
 800658e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006590:	e009      	b.n	80065a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006598:	e005      	b.n	80065a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065a4:	bf00      	nop
    }

    if (pclk != 0U)
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d028      	beq.n	80065fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b0:	4a10      	ldr	r2, [pc, #64]	@ (80065f4 <UART_SetConfig+0x5c4>)
 80065b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065b6:	461a      	mov	r2, r3
 80065b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	441a      	add	r2, r3
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	2b0f      	cmp	r3, #15
 80065d4:	d910      	bls.n	80065f8 <UART_SetConfig+0x5c8>
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065dc:	d20c      	bcs.n	80065f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60da      	str	r2, [r3, #12]
 80065e8:	e009      	b.n	80065fe <UART_SetConfig+0x5ce>
 80065ea:	bf00      	nop
 80065ec:	40008000 	.word	0x40008000
 80065f0:	00f42400 	.word	0x00f42400
 80065f4:	08007b68 	.word	0x08007b68
      }
      else
      {
        ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2201      	movs	r2, #1
 8006602:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2201      	movs	r2, #1
 800660a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2200      	movs	r2, #0
 8006612:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2200      	movs	r2, #0
 8006618:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800661a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800661e:	4618      	mov	r0, r3
 8006620:	3730      	adds	r7, #48	@ 0x30
 8006622:	46bd      	mov	sp, r7
 8006624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	f003 0310 	and.w	r3, r3, #16
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01a      	beq.n	800673e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006726:	d10a      	bne.n	800673e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
  }
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b098      	sub	sp, #96	@ 0x60
 8006770:	af02      	add	r7, sp, #8
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800677c:	f7fb fa18 	bl	8001bb0 <HAL_GetTick>
 8006780:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b08      	cmp	r3, #8
 800678e:	d12f      	bne.n	80067f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006790:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006798:	2200      	movs	r2, #0
 800679a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f88e 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d022      	beq.n	80067f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067be:	653b      	str	r3, [r7, #80]	@ 0x50
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e6      	bne.n	80067aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e063      	b.n	80068b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d149      	bne.n	8006892 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006806:	2200      	movs	r2, #0
 8006808:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f857 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d03c      	beq.n	8006892 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	623b      	str	r3, [r7, #32]
   return(result);
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800682c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006836:	633b      	str	r3, [r7, #48]	@ 0x30
 8006838:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800683c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e6      	bne.n	8006818 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	60fb      	str	r3, [r7, #12]
   return(result);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800686a:	61fa      	str	r2, [r7, #28]
 800686c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	69b9      	ldr	r1, [r7, #24]
 8006870:	69fa      	ldr	r2, [r7, #28]
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	617b      	str	r3, [r7, #20]
   return(result);
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e5      	bne.n	800684a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e012      	b.n	80068b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3758      	adds	r7, #88	@ 0x58
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	4613      	mov	r3, r2
 80068ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d0:	e04f      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d04b      	beq.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068da:	f7fb f969 	bl	8001bb0 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d302      	bcc.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e04e      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d037      	beq.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b80      	cmp	r3, #128	@ 0x80
 8006906:	d034      	beq.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b40      	cmp	r3, #64	@ 0x40
 800690c:	d031      	beq.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b08      	cmp	r3, #8
 800691a:	d110      	bne.n	800693e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2208      	movs	r2, #8
 8006922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f838 	bl	800699a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2208      	movs	r2, #8
 800692e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e029      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800694c:	d111      	bne.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f81e 	bl	800699a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e00f      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4013      	ands	r3, r2
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	429a      	cmp	r2, r3
 8006980:	bf0c      	ite	eq
 8006982:	2301      	moveq	r3, #1
 8006984:	2300      	movne	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	429a      	cmp	r2, r3
 800698e:	d0a0      	beq.n	80068d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800699a:	b480      	push	{r7}
 800699c:	b095      	sub	sp, #84	@ 0x54
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e6      	bne.n	80069a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3308      	adds	r3, #8
 80069da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	f023 0301 	bic.w	r3, r3, #1
 80069ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a00:	e841 2300 	strex	r3, r2, [r1]
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e3      	bne.n	80069d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d118      	bne.n	8006a46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f023 0310 	bic.w	r3, r3, #16
 8006a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6979      	ldr	r1, [r7, #20]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e6      	bne.n	8006a14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a5a:	bf00      	nop
 8006a5c:	3754      	adds	r7, #84	@ 0x54
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_UARTEx_DisableFifoMode+0x16>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e027      	b.n	8006acc <HAL_UARTEx_DisableFifoMode+0x66>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2224      	movs	r2, #36	@ 0x24
 8006a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006aaa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e02d      	b.n	8006b4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2224      	movs	r2, #36	@ 0x24
 8006afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0201 	bic.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f84f 	bl	8006bd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e02d      	b.n	8006bc8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2224      	movs	r2, #36	@ 0x24
 8006b78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f811 	bl	8006bd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d108      	bne.n	8006bf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bf0:	e031      	b.n	8006c56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bf2:	2308      	movs	r3, #8
 8006bf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	0e5b      	lsrs	r3, r3, #25
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	0f5b      	lsrs	r3, r3, #29
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	7b3a      	ldrb	r2, [r7, #12]
 8006c1e:	4911      	ldr	r1, [pc, #68]	@ (8006c64 <UARTEx_SetNbDataToProcess+0x94>)
 8006c20:	5c8a      	ldrb	r2, [r1, r2]
 8006c22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c26:	7b3a      	ldrb	r2, [r7, #12]
 8006c28:	490f      	ldr	r1, [pc, #60]	@ (8006c68 <UARTEx_SetNbDataToProcess+0x98>)
 8006c2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	7b7a      	ldrb	r2, [r7, #13]
 8006c3c:	4909      	ldr	r1, [pc, #36]	@ (8006c64 <UARTEx_SetNbDataToProcess+0x94>)
 8006c3e:	5c8a      	ldrb	r2, [r1, r2]
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c44:	7b7a      	ldrb	r2, [r7, #13]
 8006c46:	4908      	ldr	r1, [pc, #32]	@ (8006c68 <UARTEx_SetNbDataToProcess+0x98>)
 8006c48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	08007b80 	.word	0x08007b80
 8006c68:	08007b88 	.word	0x08007b88

08006c6c <std>:
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	4604      	mov	r4, r0
 8006c72:	e9c0 3300 	strd	r3, r3, [r0]
 8006c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c7a:	6083      	str	r3, [r0, #8]
 8006c7c:	8181      	strh	r1, [r0, #12]
 8006c7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c80:	81c2      	strh	r2, [r0, #14]
 8006c82:	6183      	str	r3, [r0, #24]
 8006c84:	4619      	mov	r1, r3
 8006c86:	2208      	movs	r2, #8
 8006c88:	305c      	adds	r0, #92	@ 0x5c
 8006c8a:	f000 f99b 	bl	8006fc4 <memset>
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <std+0x58>)
 8006c90:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c92:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc8 <std+0x5c>)
 8006c94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ccc <std+0x60>)
 8006c98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <std+0x64>)
 8006c9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <std+0x68>)
 8006ca0:	6224      	str	r4, [r4, #32]
 8006ca2:	429c      	cmp	r4, r3
 8006ca4:	d006      	beq.n	8006cb4 <std+0x48>
 8006ca6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006caa:	4294      	cmp	r4, r2
 8006cac:	d002      	beq.n	8006cb4 <std+0x48>
 8006cae:	33d0      	adds	r3, #208	@ 0xd0
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d105      	bne.n	8006cc0 <std+0x54>
 8006cb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cbc:	f000 b9fa 	b.w	80070b4 <__retarget_lock_init_recursive>
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	bf00      	nop
 8006cc4:	08006e15 	.word	0x08006e15
 8006cc8:	08006e37 	.word	0x08006e37
 8006ccc:	08006e6f 	.word	0x08006e6f
 8006cd0:	08006e93 	.word	0x08006e93
 8006cd4:	20000328 	.word	0x20000328

08006cd8 <stdio_exit_handler>:
 8006cd8:	4a02      	ldr	r2, [pc, #8]	@ (8006ce4 <stdio_exit_handler+0xc>)
 8006cda:	4903      	ldr	r1, [pc, #12]	@ (8006ce8 <stdio_exit_handler+0x10>)
 8006cdc:	4803      	ldr	r0, [pc, #12]	@ (8006cec <stdio_exit_handler+0x14>)
 8006cde:	f000 b869 	b.w	8006db4 <_fwalk_sglue>
 8006ce2:	bf00      	nop
 8006ce4:	2000000c 	.word	0x2000000c
 8006ce8:	08007955 	.word	0x08007955
 8006cec:	2000001c 	.word	0x2000001c

08006cf0 <cleanup_stdio>:
 8006cf0:	6841      	ldr	r1, [r0, #4]
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d24 <cleanup_stdio+0x34>)
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	d001      	beq.n	8006d00 <cleanup_stdio+0x10>
 8006cfc:	f000 fe2a 	bl	8007954 <_fflush_r>
 8006d00:	68a1      	ldr	r1, [r4, #8]
 8006d02:	4b09      	ldr	r3, [pc, #36]	@ (8006d28 <cleanup_stdio+0x38>)
 8006d04:	4299      	cmp	r1, r3
 8006d06:	d002      	beq.n	8006d0e <cleanup_stdio+0x1e>
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 fe23 	bl	8007954 <_fflush_r>
 8006d0e:	68e1      	ldr	r1, [r4, #12]
 8006d10:	4b06      	ldr	r3, [pc, #24]	@ (8006d2c <cleanup_stdio+0x3c>)
 8006d12:	4299      	cmp	r1, r3
 8006d14:	d004      	beq.n	8006d20 <cleanup_stdio+0x30>
 8006d16:	4620      	mov	r0, r4
 8006d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1c:	f000 be1a 	b.w	8007954 <_fflush_r>
 8006d20:	bd10      	pop	{r4, pc}
 8006d22:	bf00      	nop
 8006d24:	20000328 	.word	0x20000328
 8006d28:	20000390 	.word	0x20000390
 8006d2c:	200003f8 	.word	0x200003f8

08006d30 <global_stdio_init.part.0>:
 8006d30:	b510      	push	{r4, lr}
 8006d32:	4b0b      	ldr	r3, [pc, #44]	@ (8006d60 <global_stdio_init.part.0+0x30>)
 8006d34:	4c0b      	ldr	r4, [pc, #44]	@ (8006d64 <global_stdio_init.part.0+0x34>)
 8006d36:	4a0c      	ldr	r2, [pc, #48]	@ (8006d68 <global_stdio_init.part.0+0x38>)
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2104      	movs	r1, #4
 8006d40:	f7ff ff94 	bl	8006c6c <std>
 8006d44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d48:	2201      	movs	r2, #1
 8006d4a:	2109      	movs	r1, #9
 8006d4c:	f7ff ff8e 	bl	8006c6c <std>
 8006d50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d54:	2202      	movs	r2, #2
 8006d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5a:	2112      	movs	r1, #18
 8006d5c:	f7ff bf86 	b.w	8006c6c <std>
 8006d60:	20000460 	.word	0x20000460
 8006d64:	20000328 	.word	0x20000328
 8006d68:	08006cd9 	.word	0x08006cd9

08006d6c <__sfp_lock_acquire>:
 8006d6c:	4801      	ldr	r0, [pc, #4]	@ (8006d74 <__sfp_lock_acquire+0x8>)
 8006d6e:	f000 b9a2 	b.w	80070b6 <__retarget_lock_acquire_recursive>
 8006d72:	bf00      	nop
 8006d74:	20000469 	.word	0x20000469

08006d78 <__sfp_lock_release>:
 8006d78:	4801      	ldr	r0, [pc, #4]	@ (8006d80 <__sfp_lock_release+0x8>)
 8006d7a:	f000 b99d 	b.w	80070b8 <__retarget_lock_release_recursive>
 8006d7e:	bf00      	nop
 8006d80:	20000469 	.word	0x20000469

08006d84 <__sinit>:
 8006d84:	b510      	push	{r4, lr}
 8006d86:	4604      	mov	r4, r0
 8006d88:	f7ff fff0 	bl	8006d6c <__sfp_lock_acquire>
 8006d8c:	6a23      	ldr	r3, [r4, #32]
 8006d8e:	b11b      	cbz	r3, 8006d98 <__sinit+0x14>
 8006d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d94:	f7ff bff0 	b.w	8006d78 <__sfp_lock_release>
 8006d98:	4b04      	ldr	r3, [pc, #16]	@ (8006dac <__sinit+0x28>)
 8006d9a:	6223      	str	r3, [r4, #32]
 8006d9c:	4b04      	ldr	r3, [pc, #16]	@ (8006db0 <__sinit+0x2c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f5      	bne.n	8006d90 <__sinit+0xc>
 8006da4:	f7ff ffc4 	bl	8006d30 <global_stdio_init.part.0>
 8006da8:	e7f2      	b.n	8006d90 <__sinit+0xc>
 8006daa:	bf00      	nop
 8006dac:	08006cf1 	.word	0x08006cf1
 8006db0:	20000460 	.word	0x20000460

08006db4 <_fwalk_sglue>:
 8006db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db8:	4607      	mov	r7, r0
 8006dba:	4688      	mov	r8, r1
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8006dc8:	d505      	bpl.n	8006dd6 <_fwalk_sglue+0x22>
 8006dca:	6824      	ldr	r4, [r4, #0]
 8006dcc:	2c00      	cmp	r4, #0
 8006dce:	d1f7      	bne.n	8006dc0 <_fwalk_sglue+0xc>
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd6:	89ab      	ldrh	r3, [r5, #12]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d907      	bls.n	8006dec <_fwalk_sglue+0x38>
 8006ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006de0:	3301      	adds	r3, #1
 8006de2:	d003      	beq.n	8006dec <_fwalk_sglue+0x38>
 8006de4:	4629      	mov	r1, r5
 8006de6:	4638      	mov	r0, r7
 8006de8:	47c0      	blx	r8
 8006dea:	4306      	orrs	r6, r0
 8006dec:	3568      	adds	r5, #104	@ 0x68
 8006dee:	e7e9      	b.n	8006dc4 <_fwalk_sglue+0x10>

08006df0 <iprintf>:
 8006df0:	b40f      	push	{r0, r1, r2, r3}
 8006df2:	b507      	push	{r0, r1, r2, lr}
 8006df4:	4906      	ldr	r1, [pc, #24]	@ (8006e10 <iprintf+0x20>)
 8006df6:	ab04      	add	r3, sp, #16
 8006df8:	6808      	ldr	r0, [r1, #0]
 8006dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dfe:	6881      	ldr	r1, [r0, #8]
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	f000 fa7d 	bl	8007300 <_vfiprintf_r>
 8006e06:	b003      	add	sp, #12
 8006e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e0c:	b004      	add	sp, #16
 8006e0e:	4770      	bx	lr
 8006e10:	20000018 	.word	0x20000018

08006e14 <__sread>:
 8006e14:	b510      	push	{r4, lr}
 8006e16:	460c      	mov	r4, r1
 8006e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1c:	f000 f8fc 	bl	8007018 <_read_r>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	bfab      	itete	ge
 8006e24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e26:	89a3      	ldrhlt	r3, [r4, #12]
 8006e28:	181b      	addge	r3, r3, r0
 8006e2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e2e:	bfac      	ite	ge
 8006e30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e32:	81a3      	strhlt	r3, [r4, #12]
 8006e34:	bd10      	pop	{r4, pc}

08006e36 <__swrite>:
 8006e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3a:	461f      	mov	r7, r3
 8006e3c:	898b      	ldrh	r3, [r1, #12]
 8006e3e:	05db      	lsls	r3, r3, #23
 8006e40:	4605      	mov	r5, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	4616      	mov	r6, r2
 8006e46:	d505      	bpl.n	8006e54 <__swrite+0x1e>
 8006e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f000 f8d0 	bl	8006ff4 <_lseek_r>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	4632      	mov	r2, r6
 8006e62:	463b      	mov	r3, r7
 8006e64:	4628      	mov	r0, r5
 8006e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6a:	f000 b8e7 	b.w	800703c <_write_r>

08006e6e <__sseek>:
 8006e6e:	b510      	push	{r4, lr}
 8006e70:	460c      	mov	r4, r1
 8006e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e76:	f000 f8bd 	bl	8006ff4 <_lseek_r>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	bf15      	itete	ne
 8006e80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e8a:	81a3      	strheq	r3, [r4, #12]
 8006e8c:	bf18      	it	ne
 8006e8e:	81a3      	strhne	r3, [r4, #12]
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <__sclose>:
 8006e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e96:	f000 b89d 	b.w	8006fd4 <_close_r>

08006e9a <__swbuf_r>:
 8006e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9c:	460e      	mov	r6, r1
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	b118      	cbz	r0, 8006eac <__swbuf_r+0x12>
 8006ea4:	6a03      	ldr	r3, [r0, #32]
 8006ea6:	b90b      	cbnz	r3, 8006eac <__swbuf_r+0x12>
 8006ea8:	f7ff ff6c 	bl	8006d84 <__sinit>
 8006eac:	69a3      	ldr	r3, [r4, #24]
 8006eae:	60a3      	str	r3, [r4, #8]
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	071a      	lsls	r2, r3, #28
 8006eb4:	d501      	bpl.n	8006eba <__swbuf_r+0x20>
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	b943      	cbnz	r3, 8006ecc <__swbuf_r+0x32>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f000 f82b 	bl	8006f18 <__swsetup_r>
 8006ec2:	b118      	cbz	r0, 8006ecc <__swbuf_r+0x32>
 8006ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ec8:	4638      	mov	r0, r7
 8006eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	6922      	ldr	r2, [r4, #16]
 8006ed0:	1a98      	subs	r0, r3, r2
 8006ed2:	6963      	ldr	r3, [r4, #20]
 8006ed4:	b2f6      	uxtb	r6, r6
 8006ed6:	4283      	cmp	r3, r0
 8006ed8:	4637      	mov	r7, r6
 8006eda:	dc05      	bgt.n	8006ee8 <__swbuf_r+0x4e>
 8006edc:	4621      	mov	r1, r4
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 fd38 	bl	8007954 <_fflush_r>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d1ed      	bne.n	8006ec4 <__swbuf_r+0x2a>
 8006ee8:	68a3      	ldr	r3, [r4, #8]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	60a3      	str	r3, [r4, #8]
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	6022      	str	r2, [r4, #0]
 8006ef4:	701e      	strb	r6, [r3, #0]
 8006ef6:	6962      	ldr	r2, [r4, #20]
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d004      	beq.n	8006f08 <__swbuf_r+0x6e>
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	07db      	lsls	r3, r3, #31
 8006f02:	d5e1      	bpl.n	8006ec8 <__swbuf_r+0x2e>
 8006f04:	2e0a      	cmp	r6, #10
 8006f06:	d1df      	bne.n	8006ec8 <__swbuf_r+0x2e>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 fd22 	bl	8007954 <_fflush_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d0d9      	beq.n	8006ec8 <__swbuf_r+0x2e>
 8006f14:	e7d6      	b.n	8006ec4 <__swbuf_r+0x2a>
	...

08006f18 <__swsetup_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4b29      	ldr	r3, [pc, #164]	@ (8006fc0 <__swsetup_r+0xa8>)
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	460c      	mov	r4, r1
 8006f22:	b118      	cbz	r0, 8006f2c <__swsetup_r+0x14>
 8006f24:	6a03      	ldr	r3, [r0, #32]
 8006f26:	b90b      	cbnz	r3, 8006f2c <__swsetup_r+0x14>
 8006f28:	f7ff ff2c 	bl	8006d84 <__sinit>
 8006f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f30:	0719      	lsls	r1, r3, #28
 8006f32:	d422      	bmi.n	8006f7a <__swsetup_r+0x62>
 8006f34:	06da      	lsls	r2, r3, #27
 8006f36:	d407      	bmi.n	8006f48 <__swsetup_r+0x30>
 8006f38:	2209      	movs	r2, #9
 8006f3a:	602a      	str	r2, [r5, #0]
 8006f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f40:	81a3      	strh	r3, [r4, #12]
 8006f42:	f04f 30ff 	mov.w	r0, #4294967295
 8006f46:	e033      	b.n	8006fb0 <__swsetup_r+0x98>
 8006f48:	0758      	lsls	r0, r3, #29
 8006f4a:	d512      	bpl.n	8006f72 <__swsetup_r+0x5a>
 8006f4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f4e:	b141      	cbz	r1, 8006f62 <__swsetup_r+0x4a>
 8006f50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f54:	4299      	cmp	r1, r3
 8006f56:	d002      	beq.n	8006f5e <__swsetup_r+0x46>
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f000 f8af 	bl	80070bc <_free_r>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6063      	str	r3, [r4, #4]
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	f043 0308 	orr.w	r3, r3, #8
 8006f78:	81a3      	strh	r3, [r4, #12]
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	b94b      	cbnz	r3, 8006f92 <__swsetup_r+0x7a>
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f88:	d003      	beq.n	8006f92 <__swsetup_r+0x7a>
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f000 fd2f 	bl	80079f0 <__smakebuf_r>
 8006f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f96:	f013 0201 	ands.w	r2, r3, #1
 8006f9a:	d00a      	beq.n	8006fb2 <__swsetup_r+0x9a>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	60a2      	str	r2, [r4, #8]
 8006fa0:	6962      	ldr	r2, [r4, #20]
 8006fa2:	4252      	negs	r2, r2
 8006fa4:	61a2      	str	r2, [r4, #24]
 8006fa6:	6922      	ldr	r2, [r4, #16]
 8006fa8:	b942      	cbnz	r2, 8006fbc <__swsetup_r+0xa4>
 8006faa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fae:	d1c5      	bne.n	8006f3c <__swsetup_r+0x24>
 8006fb0:	bd38      	pop	{r3, r4, r5, pc}
 8006fb2:	0799      	lsls	r1, r3, #30
 8006fb4:	bf58      	it	pl
 8006fb6:	6962      	ldrpl	r2, [r4, #20]
 8006fb8:	60a2      	str	r2, [r4, #8]
 8006fba:	e7f4      	b.n	8006fa6 <__swsetup_r+0x8e>
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	e7f7      	b.n	8006fb0 <__swsetup_r+0x98>
 8006fc0:	20000018 	.word	0x20000018

08006fc4 <memset>:
 8006fc4:	4402      	add	r2, r0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d100      	bne.n	8006fce <memset+0xa>
 8006fcc:	4770      	bx	lr
 8006fce:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd2:	e7f9      	b.n	8006fc8 <memset+0x4>

08006fd4 <_close_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d06      	ldr	r5, [pc, #24]	@ (8006ff0 <_close_r+0x1c>)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	602b      	str	r3, [r5, #0]
 8006fe0:	f7fa fc9c 	bl	800191c <_close>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_close_r+0x1a>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_close_r+0x1a>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	20000464 	.word	0x20000464

08006ff4 <_lseek_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d07      	ldr	r5, [pc, #28]	@ (8007014 <_lseek_r+0x20>)
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	4608      	mov	r0, r1
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	602a      	str	r2, [r5, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	f7fa fcb1 	bl	800196a <_lseek>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_lseek_r+0x1e>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_lseek_r+0x1e>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	20000464 	.word	0x20000464

08007018 <_read_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d07      	ldr	r5, [pc, #28]	@ (8007038 <_read_r+0x20>)
 800701c:	4604      	mov	r4, r0
 800701e:	4608      	mov	r0, r1
 8007020:	4611      	mov	r1, r2
 8007022:	2200      	movs	r2, #0
 8007024:	602a      	str	r2, [r5, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	f7fa fc3f 	bl	80018aa <_read>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_read_r+0x1e>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	b103      	cbz	r3, 8007036 <_read_r+0x1e>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	20000464 	.word	0x20000464

0800703c <_write_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d07      	ldr	r5, [pc, #28]	@ (800705c <_write_r+0x20>)
 8007040:	4604      	mov	r4, r0
 8007042:	4608      	mov	r0, r1
 8007044:	4611      	mov	r1, r2
 8007046:	2200      	movs	r2, #0
 8007048:	602a      	str	r2, [r5, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	f7fa fc4a 	bl	80018e4 <_write>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_write_r+0x1e>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	b103      	cbz	r3, 800705a <_write_r+0x1e>
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	20000464 	.word	0x20000464

08007060 <__errno>:
 8007060:	4b01      	ldr	r3, [pc, #4]	@ (8007068 <__errno+0x8>)
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	20000018 	.word	0x20000018

0800706c <__libc_init_array>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4d0d      	ldr	r5, [pc, #52]	@ (80070a4 <__libc_init_array+0x38>)
 8007070:	4c0d      	ldr	r4, [pc, #52]	@ (80070a8 <__libc_init_array+0x3c>)
 8007072:	1b64      	subs	r4, r4, r5
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	2600      	movs	r6, #0
 8007078:	42a6      	cmp	r6, r4
 800707a:	d109      	bne.n	8007090 <__libc_init_array+0x24>
 800707c:	4d0b      	ldr	r5, [pc, #44]	@ (80070ac <__libc_init_array+0x40>)
 800707e:	4c0c      	ldr	r4, [pc, #48]	@ (80070b0 <__libc_init_array+0x44>)
 8007080:	f000 fd24 	bl	8007acc <_init>
 8007084:	1b64      	subs	r4, r4, r5
 8007086:	10a4      	asrs	r4, r4, #2
 8007088:	2600      	movs	r6, #0
 800708a:	42a6      	cmp	r6, r4
 800708c:	d105      	bne.n	800709a <__libc_init_array+0x2e>
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	f855 3b04 	ldr.w	r3, [r5], #4
 8007094:	4798      	blx	r3
 8007096:	3601      	adds	r6, #1
 8007098:	e7ee      	b.n	8007078 <__libc_init_array+0xc>
 800709a:	f855 3b04 	ldr.w	r3, [r5], #4
 800709e:	4798      	blx	r3
 80070a0:	3601      	adds	r6, #1
 80070a2:	e7f2      	b.n	800708a <__libc_init_array+0x1e>
 80070a4:	08007bcc 	.word	0x08007bcc
 80070a8:	08007bcc 	.word	0x08007bcc
 80070ac:	08007bcc 	.word	0x08007bcc
 80070b0:	08007bd0 	.word	0x08007bd0

080070b4 <__retarget_lock_init_recursive>:
 80070b4:	4770      	bx	lr

080070b6 <__retarget_lock_acquire_recursive>:
 80070b6:	4770      	bx	lr

080070b8 <__retarget_lock_release_recursive>:
 80070b8:	4770      	bx	lr
	...

080070bc <_free_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4605      	mov	r5, r0
 80070c0:	2900      	cmp	r1, #0
 80070c2:	d041      	beq.n	8007148 <_free_r+0x8c>
 80070c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c8:	1f0c      	subs	r4, r1, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	bfb8      	it	lt
 80070ce:	18e4      	addlt	r4, r4, r3
 80070d0:	f000 f8e0 	bl	8007294 <__malloc_lock>
 80070d4:	4a1d      	ldr	r2, [pc, #116]	@ (800714c <_free_r+0x90>)
 80070d6:	6813      	ldr	r3, [r2, #0]
 80070d8:	b933      	cbnz	r3, 80070e8 <_free_r+0x2c>
 80070da:	6063      	str	r3, [r4, #4]
 80070dc:	6014      	str	r4, [r2, #0]
 80070de:	4628      	mov	r0, r5
 80070e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e4:	f000 b8dc 	b.w	80072a0 <__malloc_unlock>
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	d908      	bls.n	80070fe <_free_r+0x42>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	1821      	adds	r1, r4, r0
 80070f0:	428b      	cmp	r3, r1
 80070f2:	bf01      	itttt	eq
 80070f4:	6819      	ldreq	r1, [r3, #0]
 80070f6:	685b      	ldreq	r3, [r3, #4]
 80070f8:	1809      	addeq	r1, r1, r0
 80070fa:	6021      	streq	r1, [r4, #0]
 80070fc:	e7ed      	b.n	80070da <_free_r+0x1e>
 80070fe:	461a      	mov	r2, r3
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	b10b      	cbz	r3, 8007108 <_free_r+0x4c>
 8007104:	42a3      	cmp	r3, r4
 8007106:	d9fa      	bls.n	80070fe <_free_r+0x42>
 8007108:	6811      	ldr	r1, [r2, #0]
 800710a:	1850      	adds	r0, r2, r1
 800710c:	42a0      	cmp	r0, r4
 800710e:	d10b      	bne.n	8007128 <_free_r+0x6c>
 8007110:	6820      	ldr	r0, [r4, #0]
 8007112:	4401      	add	r1, r0
 8007114:	1850      	adds	r0, r2, r1
 8007116:	4283      	cmp	r3, r0
 8007118:	6011      	str	r1, [r2, #0]
 800711a:	d1e0      	bne.n	80070de <_free_r+0x22>
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	6053      	str	r3, [r2, #4]
 8007122:	4408      	add	r0, r1
 8007124:	6010      	str	r0, [r2, #0]
 8007126:	e7da      	b.n	80070de <_free_r+0x22>
 8007128:	d902      	bls.n	8007130 <_free_r+0x74>
 800712a:	230c      	movs	r3, #12
 800712c:	602b      	str	r3, [r5, #0]
 800712e:	e7d6      	b.n	80070de <_free_r+0x22>
 8007130:	6820      	ldr	r0, [r4, #0]
 8007132:	1821      	adds	r1, r4, r0
 8007134:	428b      	cmp	r3, r1
 8007136:	bf04      	itt	eq
 8007138:	6819      	ldreq	r1, [r3, #0]
 800713a:	685b      	ldreq	r3, [r3, #4]
 800713c:	6063      	str	r3, [r4, #4]
 800713e:	bf04      	itt	eq
 8007140:	1809      	addeq	r1, r1, r0
 8007142:	6021      	streq	r1, [r4, #0]
 8007144:	6054      	str	r4, [r2, #4]
 8007146:	e7ca      	b.n	80070de <_free_r+0x22>
 8007148:	bd38      	pop	{r3, r4, r5, pc}
 800714a:	bf00      	nop
 800714c:	20000470 	.word	0x20000470

08007150 <sbrk_aligned>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	4e0f      	ldr	r6, [pc, #60]	@ (8007190 <sbrk_aligned+0x40>)
 8007154:	460c      	mov	r4, r1
 8007156:	6831      	ldr	r1, [r6, #0]
 8007158:	4605      	mov	r5, r0
 800715a:	b911      	cbnz	r1, 8007162 <sbrk_aligned+0x12>
 800715c:	f000 fca6 	bl	8007aac <_sbrk_r>
 8007160:	6030      	str	r0, [r6, #0]
 8007162:	4621      	mov	r1, r4
 8007164:	4628      	mov	r0, r5
 8007166:	f000 fca1 	bl	8007aac <_sbrk_r>
 800716a:	1c43      	adds	r3, r0, #1
 800716c:	d103      	bne.n	8007176 <sbrk_aligned+0x26>
 800716e:	f04f 34ff 	mov.w	r4, #4294967295
 8007172:	4620      	mov	r0, r4
 8007174:	bd70      	pop	{r4, r5, r6, pc}
 8007176:	1cc4      	adds	r4, r0, #3
 8007178:	f024 0403 	bic.w	r4, r4, #3
 800717c:	42a0      	cmp	r0, r4
 800717e:	d0f8      	beq.n	8007172 <sbrk_aligned+0x22>
 8007180:	1a21      	subs	r1, r4, r0
 8007182:	4628      	mov	r0, r5
 8007184:	f000 fc92 	bl	8007aac <_sbrk_r>
 8007188:	3001      	adds	r0, #1
 800718a:	d1f2      	bne.n	8007172 <sbrk_aligned+0x22>
 800718c:	e7ef      	b.n	800716e <sbrk_aligned+0x1e>
 800718e:	bf00      	nop
 8007190:	2000046c 	.word	0x2000046c

08007194 <_malloc_r>:
 8007194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007198:	1ccd      	adds	r5, r1, #3
 800719a:	f025 0503 	bic.w	r5, r5, #3
 800719e:	3508      	adds	r5, #8
 80071a0:	2d0c      	cmp	r5, #12
 80071a2:	bf38      	it	cc
 80071a4:	250c      	movcc	r5, #12
 80071a6:	2d00      	cmp	r5, #0
 80071a8:	4606      	mov	r6, r0
 80071aa:	db01      	blt.n	80071b0 <_malloc_r+0x1c>
 80071ac:	42a9      	cmp	r1, r5
 80071ae:	d904      	bls.n	80071ba <_malloc_r+0x26>
 80071b0:	230c      	movs	r3, #12
 80071b2:	6033      	str	r3, [r6, #0]
 80071b4:	2000      	movs	r0, #0
 80071b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007290 <_malloc_r+0xfc>
 80071be:	f000 f869 	bl	8007294 <__malloc_lock>
 80071c2:	f8d8 3000 	ldr.w	r3, [r8]
 80071c6:	461c      	mov	r4, r3
 80071c8:	bb44      	cbnz	r4, 800721c <_malloc_r+0x88>
 80071ca:	4629      	mov	r1, r5
 80071cc:	4630      	mov	r0, r6
 80071ce:	f7ff ffbf 	bl	8007150 <sbrk_aligned>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	4604      	mov	r4, r0
 80071d6:	d158      	bne.n	800728a <_malloc_r+0xf6>
 80071d8:	f8d8 4000 	ldr.w	r4, [r8]
 80071dc:	4627      	mov	r7, r4
 80071de:	2f00      	cmp	r7, #0
 80071e0:	d143      	bne.n	800726a <_malloc_r+0xd6>
 80071e2:	2c00      	cmp	r4, #0
 80071e4:	d04b      	beq.n	800727e <_malloc_r+0xea>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	4639      	mov	r1, r7
 80071ea:	4630      	mov	r0, r6
 80071ec:	eb04 0903 	add.w	r9, r4, r3
 80071f0:	f000 fc5c 	bl	8007aac <_sbrk_r>
 80071f4:	4581      	cmp	r9, r0
 80071f6:	d142      	bne.n	800727e <_malloc_r+0xea>
 80071f8:	6821      	ldr	r1, [r4, #0]
 80071fa:	1a6d      	subs	r5, r5, r1
 80071fc:	4629      	mov	r1, r5
 80071fe:	4630      	mov	r0, r6
 8007200:	f7ff ffa6 	bl	8007150 <sbrk_aligned>
 8007204:	3001      	adds	r0, #1
 8007206:	d03a      	beq.n	800727e <_malloc_r+0xea>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	442b      	add	r3, r5
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	f8d8 3000 	ldr.w	r3, [r8]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	bb62      	cbnz	r2, 8007270 <_malloc_r+0xdc>
 8007216:	f8c8 7000 	str.w	r7, [r8]
 800721a:	e00f      	b.n	800723c <_malloc_r+0xa8>
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	1b52      	subs	r2, r2, r5
 8007220:	d420      	bmi.n	8007264 <_malloc_r+0xd0>
 8007222:	2a0b      	cmp	r2, #11
 8007224:	d917      	bls.n	8007256 <_malloc_r+0xc2>
 8007226:	1961      	adds	r1, r4, r5
 8007228:	42a3      	cmp	r3, r4
 800722a:	6025      	str	r5, [r4, #0]
 800722c:	bf18      	it	ne
 800722e:	6059      	strne	r1, [r3, #4]
 8007230:	6863      	ldr	r3, [r4, #4]
 8007232:	bf08      	it	eq
 8007234:	f8c8 1000 	streq.w	r1, [r8]
 8007238:	5162      	str	r2, [r4, r5]
 800723a:	604b      	str	r3, [r1, #4]
 800723c:	4630      	mov	r0, r6
 800723e:	f000 f82f 	bl	80072a0 <__malloc_unlock>
 8007242:	f104 000b 	add.w	r0, r4, #11
 8007246:	1d23      	adds	r3, r4, #4
 8007248:	f020 0007 	bic.w	r0, r0, #7
 800724c:	1ac2      	subs	r2, r0, r3
 800724e:	bf1c      	itt	ne
 8007250:	1a1b      	subne	r3, r3, r0
 8007252:	50a3      	strne	r3, [r4, r2]
 8007254:	e7af      	b.n	80071b6 <_malloc_r+0x22>
 8007256:	6862      	ldr	r2, [r4, #4]
 8007258:	42a3      	cmp	r3, r4
 800725a:	bf0c      	ite	eq
 800725c:	f8c8 2000 	streq.w	r2, [r8]
 8007260:	605a      	strne	r2, [r3, #4]
 8007262:	e7eb      	b.n	800723c <_malloc_r+0xa8>
 8007264:	4623      	mov	r3, r4
 8007266:	6864      	ldr	r4, [r4, #4]
 8007268:	e7ae      	b.n	80071c8 <_malloc_r+0x34>
 800726a:	463c      	mov	r4, r7
 800726c:	687f      	ldr	r7, [r7, #4]
 800726e:	e7b6      	b.n	80071de <_malloc_r+0x4a>
 8007270:	461a      	mov	r2, r3
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	42a3      	cmp	r3, r4
 8007276:	d1fb      	bne.n	8007270 <_malloc_r+0xdc>
 8007278:	2300      	movs	r3, #0
 800727a:	6053      	str	r3, [r2, #4]
 800727c:	e7de      	b.n	800723c <_malloc_r+0xa8>
 800727e:	230c      	movs	r3, #12
 8007280:	6033      	str	r3, [r6, #0]
 8007282:	4630      	mov	r0, r6
 8007284:	f000 f80c 	bl	80072a0 <__malloc_unlock>
 8007288:	e794      	b.n	80071b4 <_malloc_r+0x20>
 800728a:	6005      	str	r5, [r0, #0]
 800728c:	e7d6      	b.n	800723c <_malloc_r+0xa8>
 800728e:	bf00      	nop
 8007290:	20000470 	.word	0x20000470

08007294 <__malloc_lock>:
 8007294:	4801      	ldr	r0, [pc, #4]	@ (800729c <__malloc_lock+0x8>)
 8007296:	f7ff bf0e 	b.w	80070b6 <__retarget_lock_acquire_recursive>
 800729a:	bf00      	nop
 800729c:	20000468 	.word	0x20000468

080072a0 <__malloc_unlock>:
 80072a0:	4801      	ldr	r0, [pc, #4]	@ (80072a8 <__malloc_unlock+0x8>)
 80072a2:	f7ff bf09 	b.w	80070b8 <__retarget_lock_release_recursive>
 80072a6:	bf00      	nop
 80072a8:	20000468 	.word	0x20000468

080072ac <__sfputc_r>:
 80072ac:	6893      	ldr	r3, [r2, #8]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	b410      	push	{r4}
 80072b4:	6093      	str	r3, [r2, #8]
 80072b6:	da08      	bge.n	80072ca <__sfputc_r+0x1e>
 80072b8:	6994      	ldr	r4, [r2, #24]
 80072ba:	42a3      	cmp	r3, r4
 80072bc:	db01      	blt.n	80072c2 <__sfputc_r+0x16>
 80072be:	290a      	cmp	r1, #10
 80072c0:	d103      	bne.n	80072ca <__sfputc_r+0x1e>
 80072c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072c6:	f7ff bde8 	b.w	8006e9a <__swbuf_r>
 80072ca:	6813      	ldr	r3, [r2, #0]
 80072cc:	1c58      	adds	r0, r3, #1
 80072ce:	6010      	str	r0, [r2, #0]
 80072d0:	7019      	strb	r1, [r3, #0]
 80072d2:	4608      	mov	r0, r1
 80072d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072d8:	4770      	bx	lr

080072da <__sfputs_r>:
 80072da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072dc:	4606      	mov	r6, r0
 80072de:	460f      	mov	r7, r1
 80072e0:	4614      	mov	r4, r2
 80072e2:	18d5      	adds	r5, r2, r3
 80072e4:	42ac      	cmp	r4, r5
 80072e6:	d101      	bne.n	80072ec <__sfputs_r+0x12>
 80072e8:	2000      	movs	r0, #0
 80072ea:	e007      	b.n	80072fc <__sfputs_r+0x22>
 80072ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f0:	463a      	mov	r2, r7
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7ff ffda 	bl	80072ac <__sfputc_r>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d1f3      	bne.n	80072e4 <__sfputs_r+0xa>
 80072fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007300 <_vfiprintf_r>:
 8007300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	460d      	mov	r5, r1
 8007306:	b09d      	sub	sp, #116	@ 0x74
 8007308:	4614      	mov	r4, r2
 800730a:	4698      	mov	r8, r3
 800730c:	4606      	mov	r6, r0
 800730e:	b118      	cbz	r0, 8007318 <_vfiprintf_r+0x18>
 8007310:	6a03      	ldr	r3, [r0, #32]
 8007312:	b90b      	cbnz	r3, 8007318 <_vfiprintf_r+0x18>
 8007314:	f7ff fd36 	bl	8006d84 <__sinit>
 8007318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800731a:	07d9      	lsls	r1, r3, #31
 800731c:	d405      	bmi.n	800732a <_vfiprintf_r+0x2a>
 800731e:	89ab      	ldrh	r3, [r5, #12]
 8007320:	059a      	lsls	r2, r3, #22
 8007322:	d402      	bmi.n	800732a <_vfiprintf_r+0x2a>
 8007324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007326:	f7ff fec6 	bl	80070b6 <__retarget_lock_acquire_recursive>
 800732a:	89ab      	ldrh	r3, [r5, #12]
 800732c:	071b      	lsls	r3, r3, #28
 800732e:	d501      	bpl.n	8007334 <_vfiprintf_r+0x34>
 8007330:	692b      	ldr	r3, [r5, #16]
 8007332:	b99b      	cbnz	r3, 800735c <_vfiprintf_r+0x5c>
 8007334:	4629      	mov	r1, r5
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff fdee 	bl	8006f18 <__swsetup_r>
 800733c:	b170      	cbz	r0, 800735c <_vfiprintf_r+0x5c>
 800733e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007340:	07dc      	lsls	r4, r3, #31
 8007342:	d504      	bpl.n	800734e <_vfiprintf_r+0x4e>
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	b01d      	add	sp, #116	@ 0x74
 800734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734e:	89ab      	ldrh	r3, [r5, #12]
 8007350:	0598      	lsls	r0, r3, #22
 8007352:	d4f7      	bmi.n	8007344 <_vfiprintf_r+0x44>
 8007354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007356:	f7ff feaf 	bl	80070b8 <__retarget_lock_release_recursive>
 800735a:	e7f3      	b.n	8007344 <_vfiprintf_r+0x44>
 800735c:	2300      	movs	r3, #0
 800735e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007360:	2320      	movs	r3, #32
 8007362:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007366:	f8cd 800c 	str.w	r8, [sp, #12]
 800736a:	2330      	movs	r3, #48	@ 0x30
 800736c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800751c <_vfiprintf_r+0x21c>
 8007370:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007374:	f04f 0901 	mov.w	r9, #1
 8007378:	4623      	mov	r3, r4
 800737a:	469a      	mov	sl, r3
 800737c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007380:	b10a      	cbz	r2, 8007386 <_vfiprintf_r+0x86>
 8007382:	2a25      	cmp	r2, #37	@ 0x25
 8007384:	d1f9      	bne.n	800737a <_vfiprintf_r+0x7a>
 8007386:	ebba 0b04 	subs.w	fp, sl, r4
 800738a:	d00b      	beq.n	80073a4 <_vfiprintf_r+0xa4>
 800738c:	465b      	mov	r3, fp
 800738e:	4622      	mov	r2, r4
 8007390:	4629      	mov	r1, r5
 8007392:	4630      	mov	r0, r6
 8007394:	f7ff ffa1 	bl	80072da <__sfputs_r>
 8007398:	3001      	adds	r0, #1
 800739a:	f000 80a7 	beq.w	80074ec <_vfiprintf_r+0x1ec>
 800739e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073a0:	445a      	add	r2, fp
 80073a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80073a4:	f89a 3000 	ldrb.w	r3, [sl]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 809f 	beq.w	80074ec <_vfiprintf_r+0x1ec>
 80073ae:	2300      	movs	r3, #0
 80073b0:	f04f 32ff 	mov.w	r2, #4294967295
 80073b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073b8:	f10a 0a01 	add.w	sl, sl, #1
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	9307      	str	r3, [sp, #28]
 80073c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80073c6:	4654      	mov	r4, sl
 80073c8:	2205      	movs	r2, #5
 80073ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ce:	4853      	ldr	r0, [pc, #332]	@ (800751c <_vfiprintf_r+0x21c>)
 80073d0:	f7f8 ff26 	bl	8000220 <memchr>
 80073d4:	9a04      	ldr	r2, [sp, #16]
 80073d6:	b9d8      	cbnz	r0, 8007410 <_vfiprintf_r+0x110>
 80073d8:	06d1      	lsls	r1, r2, #27
 80073da:	bf44      	itt	mi
 80073dc:	2320      	movmi	r3, #32
 80073de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e2:	0713      	lsls	r3, r2, #28
 80073e4:	bf44      	itt	mi
 80073e6:	232b      	movmi	r3, #43	@ 0x2b
 80073e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073ec:	f89a 3000 	ldrb.w	r3, [sl]
 80073f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f2:	d015      	beq.n	8007420 <_vfiprintf_r+0x120>
 80073f4:	9a07      	ldr	r2, [sp, #28]
 80073f6:	4654      	mov	r4, sl
 80073f8:	2000      	movs	r0, #0
 80073fa:	f04f 0c0a 	mov.w	ip, #10
 80073fe:	4621      	mov	r1, r4
 8007400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007404:	3b30      	subs	r3, #48	@ 0x30
 8007406:	2b09      	cmp	r3, #9
 8007408:	d94b      	bls.n	80074a2 <_vfiprintf_r+0x1a2>
 800740a:	b1b0      	cbz	r0, 800743a <_vfiprintf_r+0x13a>
 800740c:	9207      	str	r2, [sp, #28]
 800740e:	e014      	b.n	800743a <_vfiprintf_r+0x13a>
 8007410:	eba0 0308 	sub.w	r3, r0, r8
 8007414:	fa09 f303 	lsl.w	r3, r9, r3
 8007418:	4313      	orrs	r3, r2
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	46a2      	mov	sl, r4
 800741e:	e7d2      	b.n	80073c6 <_vfiprintf_r+0xc6>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	1d19      	adds	r1, r3, #4
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	9103      	str	r1, [sp, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	bfbb      	ittet	lt
 800742c:	425b      	neglt	r3, r3
 800742e:	f042 0202 	orrlt.w	r2, r2, #2
 8007432:	9307      	strge	r3, [sp, #28]
 8007434:	9307      	strlt	r3, [sp, #28]
 8007436:	bfb8      	it	lt
 8007438:	9204      	strlt	r2, [sp, #16]
 800743a:	7823      	ldrb	r3, [r4, #0]
 800743c:	2b2e      	cmp	r3, #46	@ 0x2e
 800743e:	d10a      	bne.n	8007456 <_vfiprintf_r+0x156>
 8007440:	7863      	ldrb	r3, [r4, #1]
 8007442:	2b2a      	cmp	r3, #42	@ 0x2a
 8007444:	d132      	bne.n	80074ac <_vfiprintf_r+0x1ac>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	1d1a      	adds	r2, r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9203      	str	r2, [sp, #12]
 800744e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007452:	3402      	adds	r4, #2
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800752c <_vfiprintf_r+0x22c>
 800745a:	7821      	ldrb	r1, [r4, #0]
 800745c:	2203      	movs	r2, #3
 800745e:	4650      	mov	r0, sl
 8007460:	f7f8 fede 	bl	8000220 <memchr>
 8007464:	b138      	cbz	r0, 8007476 <_vfiprintf_r+0x176>
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	eba0 000a 	sub.w	r0, r0, sl
 800746c:	2240      	movs	r2, #64	@ 0x40
 800746e:	4082      	lsls	r2, r0
 8007470:	4313      	orrs	r3, r2
 8007472:	3401      	adds	r4, #1
 8007474:	9304      	str	r3, [sp, #16]
 8007476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800747a:	4829      	ldr	r0, [pc, #164]	@ (8007520 <_vfiprintf_r+0x220>)
 800747c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007480:	2206      	movs	r2, #6
 8007482:	f7f8 fecd 	bl	8000220 <memchr>
 8007486:	2800      	cmp	r0, #0
 8007488:	d03f      	beq.n	800750a <_vfiprintf_r+0x20a>
 800748a:	4b26      	ldr	r3, [pc, #152]	@ (8007524 <_vfiprintf_r+0x224>)
 800748c:	bb1b      	cbnz	r3, 80074d6 <_vfiprintf_r+0x1d6>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	3307      	adds	r3, #7
 8007492:	f023 0307 	bic.w	r3, r3, #7
 8007496:	3308      	adds	r3, #8
 8007498:	9303      	str	r3, [sp, #12]
 800749a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749c:	443b      	add	r3, r7
 800749e:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a0:	e76a      	b.n	8007378 <_vfiprintf_r+0x78>
 80074a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a6:	460c      	mov	r4, r1
 80074a8:	2001      	movs	r0, #1
 80074aa:	e7a8      	b.n	80073fe <_vfiprintf_r+0xfe>
 80074ac:	2300      	movs	r3, #0
 80074ae:	3401      	adds	r4, #1
 80074b0:	9305      	str	r3, [sp, #20]
 80074b2:	4619      	mov	r1, r3
 80074b4:	f04f 0c0a 	mov.w	ip, #10
 80074b8:	4620      	mov	r0, r4
 80074ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074be:	3a30      	subs	r2, #48	@ 0x30
 80074c0:	2a09      	cmp	r2, #9
 80074c2:	d903      	bls.n	80074cc <_vfiprintf_r+0x1cc>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0c6      	beq.n	8007456 <_vfiprintf_r+0x156>
 80074c8:	9105      	str	r1, [sp, #20]
 80074ca:	e7c4      	b.n	8007456 <_vfiprintf_r+0x156>
 80074cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d0:	4604      	mov	r4, r0
 80074d2:	2301      	movs	r3, #1
 80074d4:	e7f0      	b.n	80074b8 <_vfiprintf_r+0x1b8>
 80074d6:	ab03      	add	r3, sp, #12
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	462a      	mov	r2, r5
 80074dc:	4b12      	ldr	r3, [pc, #72]	@ (8007528 <_vfiprintf_r+0x228>)
 80074de:	a904      	add	r1, sp, #16
 80074e0:	4630      	mov	r0, r6
 80074e2:	f3af 8000 	nop.w
 80074e6:	4607      	mov	r7, r0
 80074e8:	1c78      	adds	r0, r7, #1
 80074ea:	d1d6      	bne.n	800749a <_vfiprintf_r+0x19a>
 80074ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074ee:	07d9      	lsls	r1, r3, #31
 80074f0:	d405      	bmi.n	80074fe <_vfiprintf_r+0x1fe>
 80074f2:	89ab      	ldrh	r3, [r5, #12]
 80074f4:	059a      	lsls	r2, r3, #22
 80074f6:	d402      	bmi.n	80074fe <_vfiprintf_r+0x1fe>
 80074f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074fa:	f7ff fddd 	bl	80070b8 <__retarget_lock_release_recursive>
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	065b      	lsls	r3, r3, #25
 8007502:	f53f af1f 	bmi.w	8007344 <_vfiprintf_r+0x44>
 8007506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007508:	e71e      	b.n	8007348 <_vfiprintf_r+0x48>
 800750a:	ab03      	add	r3, sp, #12
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	462a      	mov	r2, r5
 8007510:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <_vfiprintf_r+0x228>)
 8007512:	a904      	add	r1, sp, #16
 8007514:	4630      	mov	r0, r6
 8007516:	f000 f879 	bl	800760c <_printf_i>
 800751a:	e7e4      	b.n	80074e6 <_vfiprintf_r+0x1e6>
 800751c:	08007b90 	.word	0x08007b90
 8007520:	08007b9a 	.word	0x08007b9a
 8007524:	00000000 	.word	0x00000000
 8007528:	080072db 	.word	0x080072db
 800752c:	08007b96 	.word	0x08007b96

08007530 <_printf_common>:
 8007530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	4616      	mov	r6, r2
 8007536:	4698      	mov	r8, r3
 8007538:	688a      	ldr	r2, [r1, #8]
 800753a:	690b      	ldr	r3, [r1, #16]
 800753c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007540:	4293      	cmp	r3, r2
 8007542:	bfb8      	it	lt
 8007544:	4613      	movlt	r3, r2
 8007546:	6033      	str	r3, [r6, #0]
 8007548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800754c:	4607      	mov	r7, r0
 800754e:	460c      	mov	r4, r1
 8007550:	b10a      	cbz	r2, 8007556 <_printf_common+0x26>
 8007552:	3301      	adds	r3, #1
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	0699      	lsls	r1, r3, #26
 800755a:	bf42      	ittt	mi
 800755c:	6833      	ldrmi	r3, [r6, #0]
 800755e:	3302      	addmi	r3, #2
 8007560:	6033      	strmi	r3, [r6, #0]
 8007562:	6825      	ldr	r5, [r4, #0]
 8007564:	f015 0506 	ands.w	r5, r5, #6
 8007568:	d106      	bne.n	8007578 <_printf_common+0x48>
 800756a:	f104 0a19 	add.w	sl, r4, #25
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	6832      	ldr	r2, [r6, #0]
 8007572:	1a9b      	subs	r3, r3, r2
 8007574:	42ab      	cmp	r3, r5
 8007576:	dc26      	bgt.n	80075c6 <_printf_common+0x96>
 8007578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800757c:	6822      	ldr	r2, [r4, #0]
 800757e:	3b00      	subs	r3, #0
 8007580:	bf18      	it	ne
 8007582:	2301      	movne	r3, #1
 8007584:	0692      	lsls	r2, r2, #26
 8007586:	d42b      	bmi.n	80075e0 <_printf_common+0xb0>
 8007588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800758c:	4641      	mov	r1, r8
 800758e:	4638      	mov	r0, r7
 8007590:	47c8      	blx	r9
 8007592:	3001      	adds	r0, #1
 8007594:	d01e      	beq.n	80075d4 <_printf_common+0xa4>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	6922      	ldr	r2, [r4, #16]
 800759a:	f003 0306 	and.w	r3, r3, #6
 800759e:	2b04      	cmp	r3, #4
 80075a0:	bf02      	ittt	eq
 80075a2:	68e5      	ldreq	r5, [r4, #12]
 80075a4:	6833      	ldreq	r3, [r6, #0]
 80075a6:	1aed      	subeq	r5, r5, r3
 80075a8:	68a3      	ldr	r3, [r4, #8]
 80075aa:	bf0c      	ite	eq
 80075ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b0:	2500      	movne	r5, #0
 80075b2:	4293      	cmp	r3, r2
 80075b4:	bfc4      	itt	gt
 80075b6:	1a9b      	subgt	r3, r3, r2
 80075b8:	18ed      	addgt	r5, r5, r3
 80075ba:	2600      	movs	r6, #0
 80075bc:	341a      	adds	r4, #26
 80075be:	42b5      	cmp	r5, r6
 80075c0:	d11a      	bne.n	80075f8 <_printf_common+0xc8>
 80075c2:	2000      	movs	r0, #0
 80075c4:	e008      	b.n	80075d8 <_printf_common+0xa8>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4652      	mov	r2, sl
 80075ca:	4641      	mov	r1, r8
 80075cc:	4638      	mov	r0, r7
 80075ce:	47c8      	blx	r9
 80075d0:	3001      	adds	r0, #1
 80075d2:	d103      	bne.n	80075dc <_printf_common+0xac>
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075dc:	3501      	adds	r5, #1
 80075de:	e7c6      	b.n	800756e <_printf_common+0x3e>
 80075e0:	18e1      	adds	r1, r4, r3
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	2030      	movs	r0, #48	@ 0x30
 80075e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ea:	4422      	add	r2, r4
 80075ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075f4:	3302      	adds	r3, #2
 80075f6:	e7c7      	b.n	8007588 <_printf_common+0x58>
 80075f8:	2301      	movs	r3, #1
 80075fa:	4622      	mov	r2, r4
 80075fc:	4641      	mov	r1, r8
 80075fe:	4638      	mov	r0, r7
 8007600:	47c8      	blx	r9
 8007602:	3001      	adds	r0, #1
 8007604:	d0e6      	beq.n	80075d4 <_printf_common+0xa4>
 8007606:	3601      	adds	r6, #1
 8007608:	e7d9      	b.n	80075be <_printf_common+0x8e>
	...

0800760c <_printf_i>:
 800760c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	7e0f      	ldrb	r7, [r1, #24]
 8007612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007614:	2f78      	cmp	r7, #120	@ 0x78
 8007616:	4691      	mov	r9, r2
 8007618:	4680      	mov	r8, r0
 800761a:	460c      	mov	r4, r1
 800761c:	469a      	mov	sl, r3
 800761e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007622:	d807      	bhi.n	8007634 <_printf_i+0x28>
 8007624:	2f62      	cmp	r7, #98	@ 0x62
 8007626:	d80a      	bhi.n	800763e <_printf_i+0x32>
 8007628:	2f00      	cmp	r7, #0
 800762a:	f000 80d2 	beq.w	80077d2 <_printf_i+0x1c6>
 800762e:	2f58      	cmp	r7, #88	@ 0x58
 8007630:	f000 80b9 	beq.w	80077a6 <_printf_i+0x19a>
 8007634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800763c:	e03a      	b.n	80076b4 <_printf_i+0xa8>
 800763e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007642:	2b15      	cmp	r3, #21
 8007644:	d8f6      	bhi.n	8007634 <_printf_i+0x28>
 8007646:	a101      	add	r1, pc, #4	@ (adr r1, 800764c <_printf_i+0x40>)
 8007648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800764c:	080076a5 	.word	0x080076a5
 8007650:	080076b9 	.word	0x080076b9
 8007654:	08007635 	.word	0x08007635
 8007658:	08007635 	.word	0x08007635
 800765c:	08007635 	.word	0x08007635
 8007660:	08007635 	.word	0x08007635
 8007664:	080076b9 	.word	0x080076b9
 8007668:	08007635 	.word	0x08007635
 800766c:	08007635 	.word	0x08007635
 8007670:	08007635 	.word	0x08007635
 8007674:	08007635 	.word	0x08007635
 8007678:	080077b9 	.word	0x080077b9
 800767c:	080076e3 	.word	0x080076e3
 8007680:	08007773 	.word	0x08007773
 8007684:	08007635 	.word	0x08007635
 8007688:	08007635 	.word	0x08007635
 800768c:	080077db 	.word	0x080077db
 8007690:	08007635 	.word	0x08007635
 8007694:	080076e3 	.word	0x080076e3
 8007698:	08007635 	.word	0x08007635
 800769c:	08007635 	.word	0x08007635
 80076a0:	0800777b 	.word	0x0800777b
 80076a4:	6833      	ldr	r3, [r6, #0]
 80076a6:	1d1a      	adds	r2, r3, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6032      	str	r2, [r6, #0]
 80076ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076b4:	2301      	movs	r3, #1
 80076b6:	e09d      	b.n	80077f4 <_printf_i+0x1e8>
 80076b8:	6833      	ldr	r3, [r6, #0]
 80076ba:	6820      	ldr	r0, [r4, #0]
 80076bc:	1d19      	adds	r1, r3, #4
 80076be:	6031      	str	r1, [r6, #0]
 80076c0:	0606      	lsls	r6, r0, #24
 80076c2:	d501      	bpl.n	80076c8 <_printf_i+0xbc>
 80076c4:	681d      	ldr	r5, [r3, #0]
 80076c6:	e003      	b.n	80076d0 <_printf_i+0xc4>
 80076c8:	0645      	lsls	r5, r0, #25
 80076ca:	d5fb      	bpl.n	80076c4 <_printf_i+0xb8>
 80076cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	da03      	bge.n	80076dc <_printf_i+0xd0>
 80076d4:	232d      	movs	r3, #45	@ 0x2d
 80076d6:	426d      	negs	r5, r5
 80076d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076dc:	4859      	ldr	r0, [pc, #356]	@ (8007844 <_printf_i+0x238>)
 80076de:	230a      	movs	r3, #10
 80076e0:	e011      	b.n	8007706 <_printf_i+0xfa>
 80076e2:	6821      	ldr	r1, [r4, #0]
 80076e4:	6833      	ldr	r3, [r6, #0]
 80076e6:	0608      	lsls	r0, r1, #24
 80076e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80076ec:	d402      	bmi.n	80076f4 <_printf_i+0xe8>
 80076ee:	0649      	lsls	r1, r1, #25
 80076f0:	bf48      	it	mi
 80076f2:	b2ad      	uxthmi	r5, r5
 80076f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80076f6:	4853      	ldr	r0, [pc, #332]	@ (8007844 <_printf_i+0x238>)
 80076f8:	6033      	str	r3, [r6, #0]
 80076fa:	bf14      	ite	ne
 80076fc:	230a      	movne	r3, #10
 80076fe:	2308      	moveq	r3, #8
 8007700:	2100      	movs	r1, #0
 8007702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007706:	6866      	ldr	r6, [r4, #4]
 8007708:	60a6      	str	r6, [r4, #8]
 800770a:	2e00      	cmp	r6, #0
 800770c:	bfa2      	ittt	ge
 800770e:	6821      	ldrge	r1, [r4, #0]
 8007710:	f021 0104 	bicge.w	r1, r1, #4
 8007714:	6021      	strge	r1, [r4, #0]
 8007716:	b90d      	cbnz	r5, 800771c <_printf_i+0x110>
 8007718:	2e00      	cmp	r6, #0
 800771a:	d04b      	beq.n	80077b4 <_printf_i+0x1a8>
 800771c:	4616      	mov	r6, r2
 800771e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007722:	fb03 5711 	mls	r7, r3, r1, r5
 8007726:	5dc7      	ldrb	r7, [r0, r7]
 8007728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800772c:	462f      	mov	r7, r5
 800772e:	42bb      	cmp	r3, r7
 8007730:	460d      	mov	r5, r1
 8007732:	d9f4      	bls.n	800771e <_printf_i+0x112>
 8007734:	2b08      	cmp	r3, #8
 8007736:	d10b      	bne.n	8007750 <_printf_i+0x144>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	07df      	lsls	r7, r3, #31
 800773c:	d508      	bpl.n	8007750 <_printf_i+0x144>
 800773e:	6923      	ldr	r3, [r4, #16]
 8007740:	6861      	ldr	r1, [r4, #4]
 8007742:	4299      	cmp	r1, r3
 8007744:	bfde      	ittt	le
 8007746:	2330      	movle	r3, #48	@ 0x30
 8007748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800774c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007750:	1b92      	subs	r2, r2, r6
 8007752:	6122      	str	r2, [r4, #16]
 8007754:	f8cd a000 	str.w	sl, [sp]
 8007758:	464b      	mov	r3, r9
 800775a:	aa03      	add	r2, sp, #12
 800775c:	4621      	mov	r1, r4
 800775e:	4640      	mov	r0, r8
 8007760:	f7ff fee6 	bl	8007530 <_printf_common>
 8007764:	3001      	adds	r0, #1
 8007766:	d14a      	bne.n	80077fe <_printf_i+0x1f2>
 8007768:	f04f 30ff 	mov.w	r0, #4294967295
 800776c:	b004      	add	sp, #16
 800776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f043 0320 	orr.w	r3, r3, #32
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	4833      	ldr	r0, [pc, #204]	@ (8007848 <_printf_i+0x23c>)
 800777c:	2778      	movs	r7, #120	@ 0x78
 800777e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	6831      	ldr	r1, [r6, #0]
 8007786:	061f      	lsls	r7, r3, #24
 8007788:	f851 5b04 	ldr.w	r5, [r1], #4
 800778c:	d402      	bmi.n	8007794 <_printf_i+0x188>
 800778e:	065f      	lsls	r7, r3, #25
 8007790:	bf48      	it	mi
 8007792:	b2ad      	uxthmi	r5, r5
 8007794:	6031      	str	r1, [r6, #0]
 8007796:	07d9      	lsls	r1, r3, #31
 8007798:	bf44      	itt	mi
 800779a:	f043 0320 	orrmi.w	r3, r3, #32
 800779e:	6023      	strmi	r3, [r4, #0]
 80077a0:	b11d      	cbz	r5, 80077aa <_printf_i+0x19e>
 80077a2:	2310      	movs	r3, #16
 80077a4:	e7ac      	b.n	8007700 <_printf_i+0xf4>
 80077a6:	4827      	ldr	r0, [pc, #156]	@ (8007844 <_printf_i+0x238>)
 80077a8:	e7e9      	b.n	800777e <_printf_i+0x172>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	f023 0320 	bic.w	r3, r3, #32
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	e7f6      	b.n	80077a2 <_printf_i+0x196>
 80077b4:	4616      	mov	r6, r2
 80077b6:	e7bd      	b.n	8007734 <_printf_i+0x128>
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	6825      	ldr	r5, [r4, #0]
 80077bc:	6961      	ldr	r1, [r4, #20]
 80077be:	1d18      	adds	r0, r3, #4
 80077c0:	6030      	str	r0, [r6, #0]
 80077c2:	062e      	lsls	r6, r5, #24
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	d501      	bpl.n	80077cc <_printf_i+0x1c0>
 80077c8:	6019      	str	r1, [r3, #0]
 80077ca:	e002      	b.n	80077d2 <_printf_i+0x1c6>
 80077cc:	0668      	lsls	r0, r5, #25
 80077ce:	d5fb      	bpl.n	80077c8 <_printf_i+0x1bc>
 80077d0:	8019      	strh	r1, [r3, #0]
 80077d2:	2300      	movs	r3, #0
 80077d4:	6123      	str	r3, [r4, #16]
 80077d6:	4616      	mov	r6, r2
 80077d8:	e7bc      	b.n	8007754 <_printf_i+0x148>
 80077da:	6833      	ldr	r3, [r6, #0]
 80077dc:	1d1a      	adds	r2, r3, #4
 80077de:	6032      	str	r2, [r6, #0]
 80077e0:	681e      	ldr	r6, [r3, #0]
 80077e2:	6862      	ldr	r2, [r4, #4]
 80077e4:	2100      	movs	r1, #0
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7f8 fd1a 	bl	8000220 <memchr>
 80077ec:	b108      	cbz	r0, 80077f2 <_printf_i+0x1e6>
 80077ee:	1b80      	subs	r0, r0, r6
 80077f0:	6060      	str	r0, [r4, #4]
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	2300      	movs	r3, #0
 80077f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077fc:	e7aa      	b.n	8007754 <_printf_i+0x148>
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	4632      	mov	r2, r6
 8007802:	4649      	mov	r1, r9
 8007804:	4640      	mov	r0, r8
 8007806:	47d0      	blx	sl
 8007808:	3001      	adds	r0, #1
 800780a:	d0ad      	beq.n	8007768 <_printf_i+0x15c>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	079b      	lsls	r3, r3, #30
 8007810:	d413      	bmi.n	800783a <_printf_i+0x22e>
 8007812:	68e0      	ldr	r0, [r4, #12]
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	4298      	cmp	r0, r3
 8007818:	bfb8      	it	lt
 800781a:	4618      	movlt	r0, r3
 800781c:	e7a6      	b.n	800776c <_printf_i+0x160>
 800781e:	2301      	movs	r3, #1
 8007820:	4632      	mov	r2, r6
 8007822:	4649      	mov	r1, r9
 8007824:	4640      	mov	r0, r8
 8007826:	47d0      	blx	sl
 8007828:	3001      	adds	r0, #1
 800782a:	d09d      	beq.n	8007768 <_printf_i+0x15c>
 800782c:	3501      	adds	r5, #1
 800782e:	68e3      	ldr	r3, [r4, #12]
 8007830:	9903      	ldr	r1, [sp, #12]
 8007832:	1a5b      	subs	r3, r3, r1
 8007834:	42ab      	cmp	r3, r5
 8007836:	dcf2      	bgt.n	800781e <_printf_i+0x212>
 8007838:	e7eb      	b.n	8007812 <_printf_i+0x206>
 800783a:	2500      	movs	r5, #0
 800783c:	f104 0619 	add.w	r6, r4, #25
 8007840:	e7f5      	b.n	800782e <_printf_i+0x222>
 8007842:	bf00      	nop
 8007844:	08007ba1 	.word	0x08007ba1
 8007848:	08007bb2 	.word	0x08007bb2

0800784c <__sflush_r>:
 800784c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007854:	0716      	lsls	r6, r2, #28
 8007856:	4605      	mov	r5, r0
 8007858:	460c      	mov	r4, r1
 800785a:	d454      	bmi.n	8007906 <__sflush_r+0xba>
 800785c:	684b      	ldr	r3, [r1, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	dc02      	bgt.n	8007868 <__sflush_r+0x1c>
 8007862:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	dd48      	ble.n	80078fa <__sflush_r+0xae>
 8007868:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800786a:	2e00      	cmp	r6, #0
 800786c:	d045      	beq.n	80078fa <__sflush_r+0xae>
 800786e:	2300      	movs	r3, #0
 8007870:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007874:	682f      	ldr	r7, [r5, #0]
 8007876:	6a21      	ldr	r1, [r4, #32]
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	d030      	beq.n	80078de <__sflush_r+0x92>
 800787c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	0759      	lsls	r1, r3, #29
 8007882:	d505      	bpl.n	8007890 <__sflush_r+0x44>
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	1ad2      	subs	r2, r2, r3
 8007888:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800788a:	b10b      	cbz	r3, 8007890 <__sflush_r+0x44>
 800788c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	2300      	movs	r3, #0
 8007892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007894:	6a21      	ldr	r1, [r4, #32]
 8007896:	4628      	mov	r0, r5
 8007898:	47b0      	blx	r6
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	d106      	bne.n	80078ae <__sflush_r+0x62>
 80078a0:	6829      	ldr	r1, [r5, #0]
 80078a2:	291d      	cmp	r1, #29
 80078a4:	d82b      	bhi.n	80078fe <__sflush_r+0xb2>
 80078a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007950 <__sflush_r+0x104>)
 80078a8:	410a      	asrs	r2, r1
 80078aa:	07d6      	lsls	r6, r2, #31
 80078ac:	d427      	bmi.n	80078fe <__sflush_r+0xb2>
 80078ae:	2200      	movs	r2, #0
 80078b0:	6062      	str	r2, [r4, #4]
 80078b2:	04d9      	lsls	r1, r3, #19
 80078b4:	6922      	ldr	r2, [r4, #16]
 80078b6:	6022      	str	r2, [r4, #0]
 80078b8:	d504      	bpl.n	80078c4 <__sflush_r+0x78>
 80078ba:	1c42      	adds	r2, r0, #1
 80078bc:	d101      	bne.n	80078c2 <__sflush_r+0x76>
 80078be:	682b      	ldr	r3, [r5, #0]
 80078c0:	b903      	cbnz	r3, 80078c4 <__sflush_r+0x78>
 80078c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80078c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078c6:	602f      	str	r7, [r5, #0]
 80078c8:	b1b9      	cbz	r1, 80078fa <__sflush_r+0xae>
 80078ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078ce:	4299      	cmp	r1, r3
 80078d0:	d002      	beq.n	80078d8 <__sflush_r+0x8c>
 80078d2:	4628      	mov	r0, r5
 80078d4:	f7ff fbf2 	bl	80070bc <_free_r>
 80078d8:	2300      	movs	r3, #0
 80078da:	6363      	str	r3, [r4, #52]	@ 0x34
 80078dc:	e00d      	b.n	80078fa <__sflush_r+0xae>
 80078de:	2301      	movs	r3, #1
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b0      	blx	r6
 80078e4:	4602      	mov	r2, r0
 80078e6:	1c50      	adds	r0, r2, #1
 80078e8:	d1c9      	bne.n	800787e <__sflush_r+0x32>
 80078ea:	682b      	ldr	r3, [r5, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0c6      	beq.n	800787e <__sflush_r+0x32>
 80078f0:	2b1d      	cmp	r3, #29
 80078f2:	d001      	beq.n	80078f8 <__sflush_r+0xac>
 80078f4:	2b16      	cmp	r3, #22
 80078f6:	d11e      	bne.n	8007936 <__sflush_r+0xea>
 80078f8:	602f      	str	r7, [r5, #0]
 80078fa:	2000      	movs	r0, #0
 80078fc:	e022      	b.n	8007944 <__sflush_r+0xf8>
 80078fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007902:	b21b      	sxth	r3, r3
 8007904:	e01b      	b.n	800793e <__sflush_r+0xf2>
 8007906:	690f      	ldr	r7, [r1, #16]
 8007908:	2f00      	cmp	r7, #0
 800790a:	d0f6      	beq.n	80078fa <__sflush_r+0xae>
 800790c:	0793      	lsls	r3, r2, #30
 800790e:	680e      	ldr	r6, [r1, #0]
 8007910:	bf08      	it	eq
 8007912:	694b      	ldreq	r3, [r1, #20]
 8007914:	600f      	str	r7, [r1, #0]
 8007916:	bf18      	it	ne
 8007918:	2300      	movne	r3, #0
 800791a:	eba6 0807 	sub.w	r8, r6, r7
 800791e:	608b      	str	r3, [r1, #8]
 8007920:	f1b8 0f00 	cmp.w	r8, #0
 8007924:	dde9      	ble.n	80078fa <__sflush_r+0xae>
 8007926:	6a21      	ldr	r1, [r4, #32]
 8007928:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800792a:	4643      	mov	r3, r8
 800792c:	463a      	mov	r2, r7
 800792e:	4628      	mov	r0, r5
 8007930:	47b0      	blx	r6
 8007932:	2800      	cmp	r0, #0
 8007934:	dc08      	bgt.n	8007948 <__sflush_r+0xfc>
 8007936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800793a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007948:	4407      	add	r7, r0
 800794a:	eba8 0800 	sub.w	r8, r8, r0
 800794e:	e7e7      	b.n	8007920 <__sflush_r+0xd4>
 8007950:	dfbffffe 	.word	0xdfbffffe

08007954 <_fflush_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	690b      	ldr	r3, [r1, #16]
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	b913      	cbnz	r3, 8007964 <_fflush_r+0x10>
 800795e:	2500      	movs	r5, #0
 8007960:	4628      	mov	r0, r5
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	b118      	cbz	r0, 800796e <_fflush_r+0x1a>
 8007966:	6a03      	ldr	r3, [r0, #32]
 8007968:	b90b      	cbnz	r3, 800796e <_fflush_r+0x1a>
 800796a:	f7ff fa0b 	bl	8006d84 <__sinit>
 800796e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0f3      	beq.n	800795e <_fflush_r+0xa>
 8007976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007978:	07d0      	lsls	r0, r2, #31
 800797a:	d404      	bmi.n	8007986 <_fflush_r+0x32>
 800797c:	0599      	lsls	r1, r3, #22
 800797e:	d402      	bmi.n	8007986 <_fflush_r+0x32>
 8007980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007982:	f7ff fb98 	bl	80070b6 <__retarget_lock_acquire_recursive>
 8007986:	4628      	mov	r0, r5
 8007988:	4621      	mov	r1, r4
 800798a:	f7ff ff5f 	bl	800784c <__sflush_r>
 800798e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007990:	07da      	lsls	r2, r3, #31
 8007992:	4605      	mov	r5, r0
 8007994:	d4e4      	bmi.n	8007960 <_fflush_r+0xc>
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	059b      	lsls	r3, r3, #22
 800799a:	d4e1      	bmi.n	8007960 <_fflush_r+0xc>
 800799c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800799e:	f7ff fb8b 	bl	80070b8 <__retarget_lock_release_recursive>
 80079a2:	e7dd      	b.n	8007960 <_fflush_r+0xc>

080079a4 <__swhatbuf_r>:
 80079a4:	b570      	push	{r4, r5, r6, lr}
 80079a6:	460c      	mov	r4, r1
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	2900      	cmp	r1, #0
 80079ae:	b096      	sub	sp, #88	@ 0x58
 80079b0:	4615      	mov	r5, r2
 80079b2:	461e      	mov	r6, r3
 80079b4:	da0d      	bge.n	80079d2 <__swhatbuf_r+0x2e>
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079bc:	f04f 0100 	mov.w	r1, #0
 80079c0:	bf14      	ite	ne
 80079c2:	2340      	movne	r3, #64	@ 0x40
 80079c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079c8:	2000      	movs	r0, #0
 80079ca:	6031      	str	r1, [r6, #0]
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	b016      	add	sp, #88	@ 0x58
 80079d0:	bd70      	pop	{r4, r5, r6, pc}
 80079d2:	466a      	mov	r2, sp
 80079d4:	f000 f848 	bl	8007a68 <_fstat_r>
 80079d8:	2800      	cmp	r0, #0
 80079da:	dbec      	blt.n	80079b6 <__swhatbuf_r+0x12>
 80079dc:	9901      	ldr	r1, [sp, #4]
 80079de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079e6:	4259      	negs	r1, r3
 80079e8:	4159      	adcs	r1, r3
 80079ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079ee:	e7eb      	b.n	80079c8 <__swhatbuf_r+0x24>

080079f0 <__smakebuf_r>:
 80079f0:	898b      	ldrh	r3, [r1, #12]
 80079f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079f4:	079d      	lsls	r5, r3, #30
 80079f6:	4606      	mov	r6, r0
 80079f8:	460c      	mov	r4, r1
 80079fa:	d507      	bpl.n	8007a0c <__smakebuf_r+0x1c>
 80079fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	6123      	str	r3, [r4, #16]
 8007a04:	2301      	movs	r3, #1
 8007a06:	6163      	str	r3, [r4, #20]
 8007a08:	b003      	add	sp, #12
 8007a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a0c:	ab01      	add	r3, sp, #4
 8007a0e:	466a      	mov	r2, sp
 8007a10:	f7ff ffc8 	bl	80079a4 <__swhatbuf_r>
 8007a14:	9f00      	ldr	r7, [sp, #0]
 8007a16:	4605      	mov	r5, r0
 8007a18:	4639      	mov	r1, r7
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f7ff fbba 	bl	8007194 <_malloc_r>
 8007a20:	b948      	cbnz	r0, 8007a36 <__smakebuf_r+0x46>
 8007a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a26:	059a      	lsls	r2, r3, #22
 8007a28:	d4ee      	bmi.n	8007a08 <__smakebuf_r+0x18>
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	f043 0302 	orr.w	r3, r3, #2
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	e7e2      	b.n	80079fc <__smakebuf_r+0xc>
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	6020      	str	r0, [r4, #0]
 8007a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3e:	81a3      	strh	r3, [r4, #12]
 8007a40:	9b01      	ldr	r3, [sp, #4]
 8007a42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a46:	b15b      	cbz	r3, 8007a60 <__smakebuf_r+0x70>
 8007a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	f000 f81d 	bl	8007a8c <_isatty_r>
 8007a52:	b128      	cbz	r0, 8007a60 <__smakebuf_r+0x70>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	f023 0303 	bic.w	r3, r3, #3
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	81a3      	strh	r3, [r4, #12]
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	431d      	orrs	r5, r3
 8007a64:	81a5      	strh	r5, [r4, #12]
 8007a66:	e7cf      	b.n	8007a08 <__smakebuf_r+0x18>

08007a68 <_fstat_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d07      	ldr	r5, [pc, #28]	@ (8007a88 <_fstat_r+0x20>)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	4611      	mov	r1, r2
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	f7f9 ff5d 	bl	8001934 <_fstat>
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	d102      	bne.n	8007a84 <_fstat_r+0x1c>
 8007a7e:	682b      	ldr	r3, [r5, #0]
 8007a80:	b103      	cbz	r3, 8007a84 <_fstat_r+0x1c>
 8007a82:	6023      	str	r3, [r4, #0]
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	bf00      	nop
 8007a88:	20000464 	.word	0x20000464

08007a8c <_isatty_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4d06      	ldr	r5, [pc, #24]	@ (8007aa8 <_isatty_r+0x1c>)
 8007a90:	2300      	movs	r3, #0
 8007a92:	4604      	mov	r4, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	f7f9 ff5c 	bl	8001954 <_isatty>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_isatty_r+0x1a>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_isatty_r+0x1a>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	20000464 	.word	0x20000464

08007aac <_sbrk_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d06      	ldr	r5, [pc, #24]	@ (8007ac8 <_sbrk_r+0x1c>)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	602b      	str	r3, [r5, #0]
 8007ab8:	f7f9 ff64 	bl	8001984 <_sbrk>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d102      	bne.n	8007ac6 <_sbrk_r+0x1a>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	b103      	cbz	r3, 8007ac6 <_sbrk_r+0x1a>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	20000464 	.word	0x20000464

08007acc <_init>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	bf00      	nop
 8007ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad2:	bc08      	pop	{r3}
 8007ad4:	469e      	mov	lr, r3
 8007ad6:	4770      	bx	lr

08007ad8 <_fini>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	bf00      	nop
 8007adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ade:	bc08      	pop	{r3}
 8007ae0:	469e      	mov	lr, r3
 8007ae2:	4770      	bx	lr
