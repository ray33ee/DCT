
microDCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000708c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800726c  0800726c  0000826c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800734c  0800734c  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  0800734c  0800734c  0000834c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007354  08007354  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007354  08007354  00008354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007358  08007358  00008358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800735c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000068  080073c4  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  080073c4  00009410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017de5  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c92  00000000  00000000  00020e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  00023b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001151  00000000  00000000  00025130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bdf  00000000  00000000  00026281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acb0  00000000  00000000  0004fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116c2c  00000000  00000000  0006ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018173c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000679c  00000000  00000000  00181780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00187f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007254 	.word	0x08007254

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08007254 	.word	0x08007254

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <__io_putchar+0x20>)
 80005c2:	f005 f80d 	bl	80055e0 <HAL_UART_Transmit>
  return ch;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200001fc 	.word	0x200001fc

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005d8:	b094      	sub	sp, #80	@ 0x50
 80005da:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f001 fb91 	bl	8001d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f88a 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 faa4 	bl	8000b30 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005e8:	f000 f9e0 	bl	80009ac <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 fa54 	bl	8000a98 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005f0:	f000 f99c 	bl	800092c <MX_I2C1_Init>
  MX_ADC2_Init();
 80005f4:	f000 f8cc 	bl	8000790 <MX_ADC2_Init>
  MX_ADC5_Init();
 80005f8:	f000 f932 	bl	8000860 <MX_ADC5_Init>
  /* USER CODE BEGIN 2 */

  const uint32_t call_stack_size = 100;
 80005fc:	2364      	movs	r3, #100	@ 0x64
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const uint32_t operand_stack_size = 100;
 8000600:	2364      	movs	r3, #100	@ 0x64
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38

  uint32_t call_stack[call_stack_size];
 8000604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000606:	3b01      	subs	r3, #1
 8000608:	637b      	str	r3, [r7, #52]	@ 0x34
 800060a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800060c:	2200      	movs	r2, #0
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	014b      	lsls	r3, r1, #5
 800061e:	6839      	ldr	r1, [r7, #0]
 8000620:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8000624:	6839      	ldr	r1, [r7, #0]
 8000626:	014a      	lsls	r2, r1, #5
 8000628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800062a:	2200      	movs	r2, #0
 800062c:	469a      	mov	sl, r3
 800062e:	4693      	mov	fp, r2
 8000630:	f04f 0200 	mov.w	r2, #0
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800063c:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000640:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	3307      	adds	r3, #7
 800064a:	08db      	lsrs	r3, r3, #3
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	ebad 0d03 	sub.w	sp, sp, r3
 8000652:	ab04      	add	r3, sp, #16
 8000654:	3303      	adds	r3, #3
 8000656:	089b      	lsrs	r3, r3, #2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t operand_stack[operand_stack_size];
 800065c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800065e:	3b01      	subs	r3, #1
 8000660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000664:	2200      	movs	r2, #0
 8000666:	4698      	mov	r8, r3
 8000668:	4691      	mov	r9, r2
 800066a:	f04f 0200 	mov.w	r2, #0
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000676:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800067a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800067e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000680:	2200      	movs	r2, #0
 8000682:	461c      	mov	r4, r3
 8000684:	4615      	mov	r5, r2
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	016b      	lsls	r3, r5, #5
 8000690:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000694:	0162      	lsls	r2, r4, #5
 8000696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	3307      	adds	r3, #7
 800069c:	08db      	lsrs	r3, r3, #3
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	ebad 0d03 	sub.w	sp, sp, r3
 80006a4:	ab04      	add	r3, sp, #16
 80006a6:	3303      	adds	r3, #3
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint8_t rom[29] = {42, 6, 0, 0, 0, 200, 41, 0, 0, 0, 0, 60, 100, 0, 0, 0, 23, 60, 2, 0, 0, 0, 1, 203, 43, 0, 0, 0, 0, };
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <main+0x118>)
 80006b0:	f107 0408 	add.w	r4, r7, #8
 80006b4:	461d      	mov	r5, r3
 80006b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006be:	c407      	stmia	r4!, {r0, r1, r2}
 80006c0:	7023      	strb	r3, [r4, #0]

  vm_init(&vm_state, call_stack, operand_stack, call_stack_size, operand_stack_size, rom, sizeof(rom));
 80006c2:	231d      	movs	r3, #29
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80006d6:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <main+0x11c>)
 80006d8:	f000 fd6e 	bl	80011b8 <vm_init>

  printf("POinter size: %i\n", sizeof(void*));
 80006dc:	2104      	movs	r1, #4
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <main+0x120>)
 80006e0:	f005 feec 	bl	80064bc <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  vm_execute(&vm_state);
 80006e4:	4802      	ldr	r0, [pc, #8]	@ (80006f0 <main+0x11c>)
 80006e6:	f000 fd95 	bl	8001214 <vm_execute>
 80006ea:	e7fb      	b.n	80006e4 <main+0x110>
 80006ec:	08007280 	.word	0x08007280
 80006f0:	20000290 	.word	0x20000290
 80006f4:	0800726c 	.word	0x0800726c

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	2238      	movs	r2, #56	@ 0x38
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f006 f820 	bl	800674c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800071a:	2000      	movs	r0, #0
 800071c:	f002 feee 	bl	80034fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2340      	movs	r3, #64	@ 0x40
 800072c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000736:	2304      	movs	r3, #4
 8000738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800073a:	2355      	movs	r3, #85	@ 0x55
 800073c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	4618      	mov	r0, r3
 8000750:	f002 ff88 	bl	8003664 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800075a:	f000 fa25 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2303      	movs	r3, #3
 8000764:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2104      	movs	r1, #4
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fa86 	bl	8003c88 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000782:	f000 fa11 	bl	8000ba8 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2220      	movs	r2, #32
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f005 ffd5 	bl	800674c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000854 <MX_ADC2_Init+0xc4>)
 80007a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007b0:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b6:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80007bc:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c2:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c8:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007dc:	2201      	movs	r2, #1
 80007de:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007f4:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_ADC2_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000802:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_ADC2_Init+0xc0>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800080a:	4811      	ldr	r0, [pc, #68]	@ (8000850 <MX_ADC2_Init+0xc0>)
 800080c:	f001 fce2 	bl	80021d4 <HAL_ADC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000816:	f000 f9c7 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_ADC2_Init+0xc8>)
 800081c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081e:	2306      	movs	r3, #6
 8000820:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <MX_ADC2_Init+0xcc>)
 8000828:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082a:	2304      	movs	r3, #4
 800082c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	@ (8000850 <MX_ADC2_Init+0xc0>)
 8000838:	f001 fe88 	bl	800254c <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000842:	f000 f9b1 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000084 	.word	0x20000084
 8000854:	50000100 	.word	0x50000100
 8000858:	0c900008 	.word	0x0c900008
 800085c:	407f0000 	.word	0x407f0000

08000860 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2220      	movs	r2, #32
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f005 ff6d 	bl	800674c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000872:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <MX_ADC5_Init+0xc0>)
 8000874:	4a2b      	ldr	r2, [pc, #172]	@ (8000924 <MX_ADC5_Init+0xc4>)
 8000876:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000878:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <MX_ADC5_Init+0xc0>)
 800087a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800087e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000880:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <MX_ADC5_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000886:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <MX_ADC5_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800088c:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <MX_ADC5_Init+0xc0>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000892:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <MX_ADC5_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000898:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_ADC5_Init+0xc0>)
 800089a:	2204      	movs	r2, #4
 800089c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_ADC5_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_ADC5_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_ADC5_Init+0xc0>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_ADC5_Init+0xc0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_ADC5_Init+0xc0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_ADC5_Init+0xc0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_ADC5_Init+0xc0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_ADC5_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_ADC5_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80008da:	4811      	ldr	r0, [pc, #68]	@ (8000920 <MX_ADC5_Init+0xc0>)
 80008dc:	f001 fc7a 	bl	80021d4 <HAL_ADC_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80008e6:	f000 f95f 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <MX_ADC5_Init+0xc8>)
 80008ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ee:	2306      	movs	r3, #6
 80008f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f6:	237f      	movs	r3, #127	@ 0x7f
 80008f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008fa:	2304      	movs	r3, #4
 80008fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <MX_ADC5_Init+0xc0>)
 8000908:	f001 fe20 	bl	800254c <HAL_ADC_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000912:	f000 f949 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000f0 	.word	0x200000f0
 8000924:	50000600 	.word	0x50000600
 8000928:	04300002 	.word	0x04300002

0800092c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_I2C1_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000938:	4a1b      	ldr	r2, [pc, #108]	@ (80009a8 <MX_I2C1_Init+0x7c>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000944:	2201      	movs	r2, #1
 8000946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000968:	f002 fc96 	bl	8003298 <HAL_I2C_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000972:	f000 f919 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000976:	2100      	movs	r1, #0
 8000978:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800097a:	f002 fd28 	bl	80033ce <HAL_I2CEx_ConfigAnalogFilter>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000984:	f000 f910 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800098c:	f002 fd6a 	bl	8003464 <HAL_I2CEx_ConfigDigitalFilter>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 f907 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000015c 	.word	0x2000015c
 80009a4:	40005400 	.word	0x40005400
 80009a8:	40b285c2 	.word	0x40b285c2

080009ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	@ 0x38
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 80009e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3333;
 80009f2:	4b28      	ldr	r3, [pc, #160]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 80009f4:	f640 5205 	movw	r2, #3333	@ 0xd05
 80009f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a00:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a06:	4823      	ldr	r0, [pc, #140]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 8000a08:	f003 fda8 	bl	800455c <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a12:	f000 f8c9 	bl	8000ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481c      	ldr	r0, [pc, #112]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 8000a24:	f003 ff66 	bl	80048f4 <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a2e:	f000 f8bb 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a32:	4818      	ldr	r0, [pc, #96]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 8000a34:	f003 fde9 	bl	800460a <HAL_TIM_PWM_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a3e:	f000 f8b3 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4810      	ldr	r0, [pc, #64]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 8000a52:	f004 fcdf 	bl	8005414 <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a5c:	f000 f8a4 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a60:	2360      	movs	r3, #96	@ 0x60
 8000a62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	4807      	ldr	r0, [pc, #28]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 8000a78:	f003 fe28 	bl	80046cc <HAL_TIM_PWM_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a82:	f000 f891 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a86:	4803      	ldr	r0, [pc, #12]	@ (8000a94 <MX_TIM2_Init+0xe8>)
 8000a88:	f000 f9e8 	bl	8000e5c <HAL_TIM_MspPostInit>

}
 8000a8c:	bf00      	nop
 8000a8e:	3738      	adds	r7, #56	@ 0x38
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200001b0 	.word	0x200001b0

08000a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000a9e:	4a23      	ldr	r2, [pc, #140]	@ (8000b2c <MX_USART2_UART_Init+0x94>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae0:	4811      	ldr	r0, [pc, #68]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000ae2:	f004 fd2d 	bl	8005540 <HAL_UART_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000aec:	f000 f85c 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000af4:	f005 fb56 	bl	80061a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000afe:	f000 f853 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4808      	ldr	r0, [pc, #32]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000b06:	f005 fb8b 	bl	8006220 <HAL_UARTEx_SetRxFifoThreshold>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b10:	f000 f84a 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_USART2_UART_Init+0x90>)
 8000b16:	f005 fb0c 	bl	8006132 <HAL_UARTEx_DisableFifoMode>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b20:	f000 f842 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200001fc 	.word	0x200001fc
 8000b2c:	40004400 	.word	0x40004400

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4a14      	ldr	r2, [pc, #80]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_GPIO_Init+0x74>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <Error_Handler+0x8>

08000bb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd6:	4a08      	ldr	r2, [pc, #32]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bea:	f002 fd2b 	bl	8003644 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000

08000bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0a0      	sub	sp, #128	@ 0x80
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	2254      	movs	r2, #84	@ 0x54
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f005 fd95 	bl	800674c <memset>
  if(hadc->Instance==ADC2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a3c      	ldr	r2, [pc, #240]	@ (8000d18 <HAL_ADC_MspInit+0x11c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d135      	bne.n	8000c98 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c32:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fa3f 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c48:	f7ff ffae 	bl	8000ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c4c:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	4a32      	ldr	r2, [pc, #200]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000c52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c58:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b2d      	ldr	r3, [pc, #180]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c68:	4a2c      	ldr	r2, [pc, #176]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c70:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7c:	23c0      	movs	r3, #192	@ 0xc0
 8000c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c80:	2303      	movs	r3, #3
 8000c82:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c92:	f002 f97f 	bl	8002f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8000c96:	e03a      	b.n	8000d0e <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC5)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <HAL_ADC_MspInit+0x124>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d135      	bne.n	8000d0e <HAL_ADC_MspInit+0x112>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ca2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ca6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000ca8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000cac:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 fa04 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_ADC_MspInit+0xc6>
      Error_Handler();
 8000cbe:	f7ff ff73 	bl	8000ba8 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	4a15      	ldr	r2, [pc, #84]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	4a0f      	ldr	r2, [pc, #60]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <HAL_ADC_MspInit+0x120>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0a:	f002 f943 	bl	8002f94 <HAL_GPIO_Init>
}
 8000d0e:	bf00      	nop
 8000d10:	3780      	adds	r7, #128	@ 0x80
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	50000100 	.word	0x50000100
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	50000600 	.word	0x50000600

08000d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0a0      	sub	sp, #128	@ 0x80
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	2254      	movs	r2, #84	@ 0x54
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 fd01 	bl	800674c <memset>
  if(hi2c->Instance==I2C1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a30      	ldr	r2, [pc, #192]	@ (8000e10 <HAL_I2C_MspInit+0xec>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d159      	bne.n	8000e08 <HAL_I2C_MspInit+0xe4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d54:	2340      	movs	r3, #64	@ 0x40
 8000d56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 f9ad 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d6c:	f7ff ff1c 	bl	8000ba8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <HAL_I2C_MspInit+0xf0>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d74:	4a27      	ldr	r2, [pc, #156]	@ (8000e14 <HAL_I2C_MspInit+0xf0>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7c:	4b25      	ldr	r3, [pc, #148]	@ (8000e14 <HAL_I2C_MspInit+0xf0>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <HAL_I2C_MspInit+0xf0>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8c:	4a21      	ldr	r2, [pc, #132]	@ (8000e14 <HAL_I2C_MspInit+0xf0>)
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <HAL_I2C_MspInit+0xf0>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000da0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000da4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da6:	2312      	movs	r3, #18
 8000da8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db2:	2304      	movs	r3, #4
 8000db4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc0:	f002 f8e8 	bl	8002f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dc4:	2380      	movs	r3, #128	@ 0x80
 8000dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc8:	2312      	movs	r3, #18
 8000dca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480e      	ldr	r0, [pc, #56]	@ (8000e18 <HAL_I2C_MspInit+0xf4>)
 8000de0:	f002 f8d8 	bl	8002f94 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8000de4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <HAL_I2C_MspInit+0xf8>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e1c <HAL_I2C_MspInit+0xf8>)
 8000dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dee:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_I2C_MspInit+0xf0>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_I2C_MspInit+0xf0>)
 8000df6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_I2C_MspInit+0xf0>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e08:	bf00      	nop
 8000e0a:	3780      	adds	r7, #128	@ 0x80
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40005400 	.word	0x40005400
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	40010000 	.word	0x40010000

08000e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e30:	d10b      	bne.n	8000e4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_TIM_Base_MspInit+0x38>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e36:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <HAL_TIM_Base_MspInit+0x38>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_TIM_Base_MspInit+0x38>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e7c:	d11c      	bne.n	8000eb8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <HAL_TIM_MspPostInit+0x64>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <HAL_TIM_MspPostInit+0x64>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_TIM_MspPostInit+0x64>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e96:	2320      	movs	r3, #32
 8000e98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb4:	f002 f86e 	bl	8002f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b09e      	sub	sp, #120	@ 0x78
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2254      	movs	r2, #84	@ 0x54
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 fc31 	bl	800674c <memset>
  if(huart->Instance==USART2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1f      	ldr	r2, [pc, #124]	@ (8000f6c <HAL_UART_MspInit+0xa8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d136      	bne.n	8000f62 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 f8dd 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f0c:	f7ff fe4c 	bl	8000ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f10:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <HAL_UART_MspInit+0xac>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f14:	4a16      	ldr	r2, [pc, #88]	@ (8000f70 <HAL_UART_MspInit+0xac>)
 8000f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f1c:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <HAL_UART_MspInit+0xac>)
 8000f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <HAL_UART_MspInit+0xac>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2c:	4a10      	ldr	r2, [pc, #64]	@ (8000f70 <HAL_UART_MspInit+0xac>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_UART_MspInit+0xac>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f40:	230c      	movs	r3, #12
 8000f42:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f50:	2307      	movs	r3, #7
 8000f52:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5e:	f002 f819 	bl	8002f94 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f62:	bf00      	nop
 8000f64:	3778      	adds	r7, #120	@ 0x78
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40004400 	.word	0x40004400
 8000f70:	40021000 	.word	0x40021000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fca:	f000 feed 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e00a      	b.n	8000ffa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	4601      	mov	r1, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	60ba      	str	r2, [r7, #8]
 8000ff0:	b2ca      	uxtb	r2, r1
 8000ff2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	dbf0      	blt.n	8000fe4 <_read+0x12>
  }

  return len;
 8001002:	687b      	ldr	r3, [r7, #4]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e009      	b.n	8001032 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	60ba      	str	r2, [r7, #8]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fac2 	bl	80005b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	dbf1      	blt.n	800101e <_write+0x12>
  }
  return len;
 800103a:	687b      	ldr	r3, [r7, #4]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <_close>:

int _close(int file)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800106c:	605a      	str	r2, [r3, #4]
  return 0;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_isatty>:

int _isatty(int file)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001084:	2301      	movs	r3, #1
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001092:	b480      	push	{r7}
 8001094:	b085      	sub	sp, #20
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	@ (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f005 fb84 	bl	80067e8 <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <_sbrk+0x64>)
 80010fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20020000 	.word	0x20020000
 800110c:	00000400 	.word	0x00000400
 8001110:	200002bc 	.word	0x200002bc
 8001114:	20000410 	.word	0x20000410

08001118 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__vm_fetch>:
 *      Author: Will
 */

#include "vm.h"

uint8_t __vm_fetch(struct VM_State* state) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	state->instruction_length = BYTECODE_OPCODE_LEN;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	619a      	str	r2, [r3, #24]
	return state->rom[state->pc];
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <advance_pc>:

void advance_pc(struct VM_State* state) {
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	state->pc = state->pc + state->instruction_length;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69da      	ldr	r2, [r3, #28]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	441a      	add	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	61da      	str	r2, [r3, #28]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <get_immediate>:

uint32_t get_immediate(struct VM_State* state) {
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	uint32_t v = *(uint32_t*)&state->rom[state->pc + state->instruction_length];
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69d9      	ldr	r1, [r3, #28]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	440b      	add	r3, r1
 800119a:	4413      	add	r3, r2
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	60fb      	str	r3, [r7, #12]
	state->instruction_length += BYTECODE_IMMEDIATE_LEN;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	1d1a      	adds	r2, r3, #4
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	619a      	str	r2, [r3, #24]
	return v;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <vm_init>:
		uint32_t* _call_stack,
		uint32_t* _operand_stack,
		uint32_t _call_stack_size,
		uint32_t _operand_stack_size,
		uint8_t* _rom,
		uint32_t _rom_size) {
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
	state->call_stack = _call_stack;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	601a      	str	r2, [r3, #0]
	state->operand_stack = _operand_stack;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	605a      	str	r2, [r3, #4]
	state->call_stack_size = _call_stack_size;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	609a      	str	r2, [r3, #8]
	state->operand_stack_size = _operand_stack_size;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	60da      	str	r2, [r3, #12]
	state->rom = _rom;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	611a      	str	r2, [r3, #16]
	state->rom_size = _rom_size;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a3a      	ldr	r2, [r7, #32]
 80011e8:	615a      	str	r2, [r3, #20]
	state->pc = 0;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
	state->bp = 0;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	@ 0x28
	state->csp = -1;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	621a      	str	r2, [r3, #32]
	state->osp = -1;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24



}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <vm_execute>:

/* Execute the next instruction */
void vm_execute(struct VM_State* state) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b090      	sub	sp, #64	@ 0x40
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

	if (state->pc > state->rom_size) {
		//error
	}

	uint8_t opcode = __vm_fetch(state);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff8d 	bl	800113c <__vm_fetch>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	switch (opcode) {
 8001228:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800122c:	2bcb      	cmp	r3, #203	@ 0xcb
 800122e:	f200 852b 	bhi.w	8001c88 <vm_execute+0xa74>
 8001232:	a201      	add	r2, pc, #4	@ (adr r2, 8001238 <vm_execute+0x24>)
 8001234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001238:	08001569 	.word	0x08001569
 800123c:	080015a9 	.word	0x080015a9
 8001240:	080015e9 	.word	0x080015e9
 8001244:	08001c89 	.word	0x08001c89
 8001248:	08001c89 	.word	0x08001c89
 800124c:	08001c89 	.word	0x08001c89
 8001250:	08001c89 	.word	0x08001c89
 8001254:	08001c89 	.word	0x08001c89
 8001258:	08001c89 	.word	0x08001c89
 800125c:	08001c89 	.word	0x08001c89
 8001260:	08001c89 	.word	0x08001c89
 8001264:	08001c89 	.word	0x08001c89
 8001268:	08001c89 	.word	0x08001c89
 800126c:	08001c89 	.word	0x08001c89
 8001270:	08001c89 	.word	0x08001c89
 8001274:	08001c89 	.word	0x08001c89
 8001278:	08001c89 	.word	0x08001c89
 800127c:	08001c89 	.word	0x08001c89
 8001280:	08001c89 	.word	0x08001c89
 8001284:	08001c89 	.word	0x08001c89
 8001288:	0800162b 	.word	0x0800162b
 800128c:	0800166b 	.word	0x0800166b
 8001290:	080016ab 	.word	0x080016ab
 8001294:	080016eb 	.word	0x080016eb
 8001298:	08001711 	.word	0x08001711
 800129c:	08001737 	.word	0x08001737
 80012a0:	08001779 	.word	0x08001779
 80012a4:	080017bb 	.word	0x080017bb
 80012a8:	080017e5 	.word	0x080017e5
 80012ac:	08001c89 	.word	0x08001c89
 80012b0:	08001c89 	.word	0x08001c89
 80012b4:	08001c89 	.word	0x08001c89
 80012b8:	08001c89 	.word	0x08001c89
 80012bc:	08001c89 	.word	0x08001c89
 80012c0:	08001c89 	.word	0x08001c89
 80012c4:	08001c89 	.word	0x08001c89
 80012c8:	08001c89 	.word	0x08001c89
 80012cc:	08001c89 	.word	0x08001c89
 80012d0:	08001c89 	.word	0x08001c89
 80012d4:	08001c89 	.word	0x08001c89
 80012d8:	08001821 	.word	0x08001821
 80012dc:	08001831 	.word	0x08001831
 80012e0:	08001871 	.word	0x08001871
 80012e4:	080018a3 	.word	0x080018a3
 80012e8:	080018fd 	.word	0x080018fd
 80012ec:	08001947 	.word	0x08001947
 80012f0:	08001991 	.word	0x08001991
 80012f4:	080019db 	.word	0x080019db
 80012f8:	08001a25 	.word	0x08001a25
 80012fc:	08001a6f 	.word	0x08001a6f
 8001300:	08001ab9 	.word	0x08001ab9
 8001304:	08001aed 	.word	0x08001aed
 8001308:	08001c89 	.word	0x08001c89
 800130c:	08001c89 	.word	0x08001c89
 8001310:	08001c89 	.word	0x08001c89
 8001314:	08001c89 	.word	0x08001c89
 8001318:	08001c89 	.word	0x08001c89
 800131c:	08001c89 	.word	0x08001c89
 8001320:	08001c89 	.word	0x08001c89
 8001324:	08001c89 	.word	0x08001c89
 8001328:	08001b21 	.word	0x08001b21
 800132c:	08001b4b 	.word	0x08001b4b
 8001330:	08001b83 	.word	0x08001b83
 8001334:	08001bbd 	.word	0x08001bbd
 8001338:	08001bf7 	.word	0x08001bf7
 800133c:	08001c89 	.word	0x08001c89
 8001340:	08001c89 	.word	0x08001c89
 8001344:	08001c89 	.word	0x08001c89
 8001348:	08001c89 	.word	0x08001c89
 800134c:	08001c89 	.word	0x08001c89
 8001350:	08001c89 	.word	0x08001c89
 8001354:	08001c89 	.word	0x08001c89
 8001358:	08001c89 	.word	0x08001c89
 800135c:	08001c89 	.word	0x08001c89
 8001360:	08001c89 	.word	0x08001c89
 8001364:	08001c89 	.word	0x08001c89
 8001368:	08001c89 	.word	0x08001c89
 800136c:	08001c89 	.word	0x08001c89
 8001370:	08001c89 	.word	0x08001c89
 8001374:	08001c89 	.word	0x08001c89
 8001378:	08001c89 	.word	0x08001c89
 800137c:	08001c89 	.word	0x08001c89
 8001380:	08001c89 	.word	0x08001c89
 8001384:	08001c89 	.word	0x08001c89
 8001388:	08001c89 	.word	0x08001c89
 800138c:	08001c89 	.word	0x08001c89
 8001390:	08001c89 	.word	0x08001c89
 8001394:	08001c89 	.word	0x08001c89
 8001398:	08001c89 	.word	0x08001c89
 800139c:	08001c89 	.word	0x08001c89
 80013a0:	08001c89 	.word	0x08001c89
 80013a4:	08001c89 	.word	0x08001c89
 80013a8:	08001c89 	.word	0x08001c89
 80013ac:	08001c89 	.word	0x08001c89
 80013b0:	08001c89 	.word	0x08001c89
 80013b4:	08001c89 	.word	0x08001c89
 80013b8:	08001c89 	.word	0x08001c89
 80013bc:	08001c89 	.word	0x08001c89
 80013c0:	08001c89 	.word	0x08001c89
 80013c4:	08001c89 	.word	0x08001c89
 80013c8:	08001c09 	.word	0x08001c09
 80013cc:	08001c89 	.word	0x08001c89
 80013d0:	08001c89 	.word	0x08001c89
 80013d4:	08001c89 	.word	0x08001c89
 80013d8:	08001c89 	.word	0x08001c89
 80013dc:	08001c89 	.word	0x08001c89
 80013e0:	08001c89 	.word	0x08001c89
 80013e4:	08001c89 	.word	0x08001c89
 80013e8:	08001c89 	.word	0x08001c89
 80013ec:	08001c89 	.word	0x08001c89
 80013f0:	08001c89 	.word	0x08001c89
 80013f4:	08001c89 	.word	0x08001c89
 80013f8:	08001c89 	.word	0x08001c89
 80013fc:	08001c89 	.word	0x08001c89
 8001400:	08001c89 	.word	0x08001c89
 8001404:	08001c89 	.word	0x08001c89
 8001408:	08001c89 	.word	0x08001c89
 800140c:	08001c89 	.word	0x08001c89
 8001410:	08001c89 	.word	0x08001c89
 8001414:	08001c89 	.word	0x08001c89
 8001418:	08001c89 	.word	0x08001c89
 800141c:	08001c89 	.word	0x08001c89
 8001420:	08001c89 	.word	0x08001c89
 8001424:	08001c89 	.word	0x08001c89
 8001428:	08001c89 	.word	0x08001c89
 800142c:	08001c89 	.word	0x08001c89
 8001430:	08001c89 	.word	0x08001c89
 8001434:	08001c89 	.word	0x08001c89
 8001438:	08001c89 	.word	0x08001c89
 800143c:	08001c89 	.word	0x08001c89
 8001440:	08001c89 	.word	0x08001c89
 8001444:	08001c89 	.word	0x08001c89
 8001448:	08001c89 	.word	0x08001c89
 800144c:	08001c89 	.word	0x08001c89
 8001450:	08001c89 	.word	0x08001c89
 8001454:	08001c89 	.word	0x08001c89
 8001458:	08001c89 	.word	0x08001c89
 800145c:	08001c89 	.word	0x08001c89
 8001460:	08001c89 	.word	0x08001c89
 8001464:	08001c89 	.word	0x08001c89
 8001468:	08001c89 	.word	0x08001c89
 800146c:	08001c89 	.word	0x08001c89
 8001470:	08001c89 	.word	0x08001c89
 8001474:	08001c89 	.word	0x08001c89
 8001478:	08001c89 	.word	0x08001c89
 800147c:	08001c89 	.word	0x08001c89
 8001480:	08001c89 	.word	0x08001c89
 8001484:	08001c89 	.word	0x08001c89
 8001488:	08001c89 	.word	0x08001c89
 800148c:	08001c89 	.word	0x08001c89
 8001490:	08001c89 	.word	0x08001c89
 8001494:	08001c89 	.word	0x08001c89
 8001498:	08001c89 	.word	0x08001c89
 800149c:	08001c89 	.word	0x08001c89
 80014a0:	08001c89 	.word	0x08001c89
 80014a4:	08001c89 	.word	0x08001c89
 80014a8:	08001c89 	.word	0x08001c89
 80014ac:	08001c89 	.word	0x08001c89
 80014b0:	08001c89 	.word	0x08001c89
 80014b4:	08001c89 	.word	0x08001c89
 80014b8:	08001c89 	.word	0x08001c89
 80014bc:	08001c89 	.word	0x08001c89
 80014c0:	08001c89 	.word	0x08001c89
 80014c4:	08001c89 	.word	0x08001c89
 80014c8:	08001c89 	.word	0x08001c89
 80014cc:	08001c89 	.word	0x08001c89
 80014d0:	08001c89 	.word	0x08001c89
 80014d4:	08001c89 	.word	0x08001c89
 80014d8:	08001c89 	.word	0x08001c89
 80014dc:	08001c89 	.word	0x08001c89
 80014e0:	08001c89 	.word	0x08001c89
 80014e4:	08001c89 	.word	0x08001c89
 80014e8:	08001c89 	.word	0x08001c89
 80014ec:	08001c89 	.word	0x08001c89
 80014f0:	08001c89 	.word	0x08001c89
 80014f4:	08001c89 	.word	0x08001c89
 80014f8:	08001c89 	.word	0x08001c89
 80014fc:	08001c89 	.word	0x08001c89
 8001500:	08001c89 	.word	0x08001c89
 8001504:	08001c89 	.word	0x08001c89
 8001508:	08001c89 	.word	0x08001c89
 800150c:	08001c89 	.word	0x08001c89
 8001510:	08001c89 	.word	0x08001c89
 8001514:	08001c89 	.word	0x08001c89
 8001518:	08001c89 	.word	0x08001c89
 800151c:	08001c89 	.word	0x08001c89
 8001520:	08001c89 	.word	0x08001c89
 8001524:	08001c89 	.word	0x08001c89
 8001528:	08001c89 	.word	0x08001c89
 800152c:	08001c89 	.word	0x08001c89
 8001530:	08001c89 	.word	0x08001c89
 8001534:	08001c89 	.word	0x08001c89
 8001538:	08001c89 	.word	0x08001c89
 800153c:	08001c89 	.word	0x08001c89
 8001540:	08001c89 	.word	0x08001c89
 8001544:	08001c89 	.word	0x08001c89
 8001548:	08001c89 	.word	0x08001c89
 800154c:	08001c89 	.word	0x08001c89
 8001550:	08001c89 	.word	0x08001c89
 8001554:	08001c89 	.word	0x08001c89
 8001558:	08001c2f 	.word	0x08001c2f
 800155c:	08001c89 	.word	0x08001c89
 8001560:	08001c3f 	.word	0x08001c3f
 8001564:	08001c5f 	.word	0x08001c5f
		/* Math */
	    case 0: {//ADD
	        state->osp -= 1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] + state->operand_stack[state->osp+1];
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001588:	3301      	adds	r3, #1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6858      	ldr	r0, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4403      	add	r3, r0
 800159c:	440a      	add	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fdde 	bl	8001162 <advance_pc>

	        break;
 80015a6:	e376      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 1: {//SUB
	        state->osp -= 1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] - state->operand_stack[state->osp+1];
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	3301      	adds	r3, #1
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6858      	ldr	r0, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4403      	add	r3, r0
 80015dc:	1a8a      	subs	r2, r1, r2
 80015de:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fdbe 	bl	8001162 <advance_pc>

	        break;
 80015e6:	e356      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 2: {//MUL
	        state->osp -= 1;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	1e5a      	subs	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] * state->operand_stack[state->osp+1];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	3301      	adds	r3, #1
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6858      	ldr	r0, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4403      	add	r3, r0
 800161c:	fb01 f202 	mul.w	r2, r1, r2
 8001620:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fd9d 	bl	8001162 <advance_pc>

	        break;
 8001628:	e335      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    /* Bitwise Logic */
	    case 20: {//OR
	        state->osp -= 1;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] | state->operand_stack[state->osp+1];
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	6819      	ldr	r1, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	3301      	adds	r3, #1
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6858      	ldr	r0, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4403      	add	r3, r0
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fd7d 	bl	8001162 <advance_pc>

	        break;
 8001668:	e315      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 21: {//XOR
	        state->osp -= 1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	1e5a      	subs	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] ^ state->operand_stack[state->osp+1];
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	3301      	adds	r3, #1
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6858      	ldr	r0, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4403      	add	r3, r0
 800169e:	404a      	eors	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fd5d 	bl	8001162 <advance_pc>

	        break;
 80016a8:	e2f5      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 22: {//AND
	        state->osp -= 1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ae:	1e5a      	subs	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] & state->operand_stack[state->osp+1];
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	3301      	adds	r3, #1
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6858      	ldr	r0, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4403      	add	r3, r0
 80016de:	400a      	ands	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fd3d 	bl	8001162 <advance_pc>

	        break;
 80016e8:	e2d5      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 23: {//INV
	        state->operand_stack[state->osp] = ~state->operand_stack[state->osp];
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6859      	ldr	r1, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	43d2      	mvns	r2, r2
 8001706:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fd2a 	bl	8001162 <advance_pc>

	        break;
 800170e:	e2c2      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 24: {//NEG
	        state->operand_stack[state->osp] = -state->operand_stack[state->osp];
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6859      	ldr	r1, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	4252      	negs	r2, r2
 800172c:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fd17 	bl	8001162 <advance_pc>

	        break;
 8001734:	e2af      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 25: {//SHL
	        state->osp -= 1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173a:	1e5a      	subs	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] << state->operand_stack[state->osp+1];
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	3301      	adds	r3, #1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6858      	ldr	r0, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4403      	add	r3, r0
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fcf6 	bl	8001162 <advance_pc>

	        break;
 8001776:	e28e      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 26: {//SHR
	        state->osp -= 1;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177c:	1e5a      	subs	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] >> state->operand_stack[state->osp+1];
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	3301      	adds	r3, #1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6858      	ldr	r0, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4403      	add	r3, r0
 80017ac:	fa21 f202 	lsr.w	r2, r1, r2
 80017b0:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fcd5 	bl	8001162 <advance_pc>

	        break;
 80017b8:	e26d      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 27: {//BOOL
	        if (state->operand_stack[state->osp])
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <vm_execute+0x5c8>
	            state->operand_stack[state->osp] = 1;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fcc0 	bl	8001162 <advance_pc>

	        break;
 80017e2:	e258      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 28: {//NOT
	        if (state->operand_stack[state->osp])
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <vm_execute+0x5f4>
	            state->operand_stack[state->osp] = 0;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e007      	b.n	8001818 <vm_execute+0x604>
	        else
	            state->operand_stack[state->osp] = 1;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fca2 	bl	8001162 <advance_pc>

	        break;
 800181e:	e23a      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    /* Control Flow */
	    case 40: {//JMP K
	        uint32_t K = get_immediate(state);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fcaf 	bl	8001184 <get_immediate>
 8001826:	60b8      	str	r0, [r7, #8]

	        state->pc = K;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	61da      	str	r2, [r3, #28]

	        break;
 800182e:	e232      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 41: {//ALLOC K
	        uint32_t K = get_immediate(state);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fca7 	bl	8001184 <get_immediate>
 8001836:	60f8      	str	r0, [r7, #12]

	        state->csp += 1;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	621a      	str	r2, [r3, #32]
	        state->call_stack[state->csp] = state->bp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001852:	601a      	str	r2, [r3, #0]

	        state->bp = state->csp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1a      	ldr	r2, [r3, #32]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28

	        state->csp += K;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1a      	ldr	r2, [r3, #32]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	441a      	add	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	621a      	str	r2, [r3, #32]

	        advance_pc(state);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fc7a 	bl	8001162 <advance_pc>

	        break;
 800186e:	e212      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 42: {//CALL K
	      uint32_t K = get_immediate(state);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fc87 	bl	8001184 <get_immediate>
 8001876:	6178      	str	r0, [r7, #20]

	      //get the link address
	      uint32_t link = state->pc + BYTECODE_OPCODE_LEN + BYTECODE_IMMEDIATE_LEN;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	3305      	adds	r3, #5
 800187e:	613b      	str	r3, [r7, #16]

	      // Push the link on the call stack
	      state->csp += 1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	621a      	str	r2, [r3, #32]
	      state->call_stack[state->csp] = link;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	601a      	str	r2, [r3, #0]

	      //Jump to the call location
	      state->pc = K;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	61da      	str	r2, [r3, #28]

	      break;
 80018a0:	e1f9      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 43: {//RET K
	      uint32_t K = get_immediate(state);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fc6e 	bl	8001184 <get_immediate>
 80018a8:	61f8      	str	r0, [r7, #28]

	      //Free local variables
	      state->csp = state->bp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	621a      	str	r2, [r3, #32]

	      //Pop old base pointer off stack
	      state->bp = state->call_stack[state->csp];
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	629a      	str	r2, [r3, #40]	@ 0x28
	      state->csp -= 1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	1e5a      	subs	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	621a      	str	r2, [r3, #32]

	      //Pop link address
	      uint32_t link = state->call_stack[state->csp];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
	      state->csp -= 1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	1e5a      	subs	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	621a      	str	r2, [r3, #32]

	      //Drop parameters passed into function, if any
	      state->csp -= K;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	1ad2      	subs	r2, r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	621a      	str	r2, [r3, #32]

	      state->pc = link;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	61da      	str	r2, [r3, #28]

	      break;
 80018fa:	e1cc      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 44: {//EQ
	        state->osp -= 1;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] == state->operand_stack[state->osp+1];
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	3301      	adds	r3, #1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2d9      	uxtb	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	460a      	mov	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fc0f 	bl	8001162 <advance_pc>

	        break;
 8001944:	e1a7      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 45: {//NE
	        state->osp -= 1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] != state->operand_stack[state->osp+1];
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6859      	ldr	r1, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	3301      	adds	r3, #1
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2d9      	uxtb	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	460a      	mov	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fbea 	bl	8001162 <advance_pc>

	        break;
 800198e:	e182      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 46: {//GT
	        state->osp -= 1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	1e5a      	subs	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] > state->operand_stack[state->osp+1];
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	3301      	adds	r3, #1
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	bf8c      	ite	hi
 80019bc:	2301      	movhi	r3, #1
 80019be:	2300      	movls	r3, #0
 80019c0:	b2d9      	uxtb	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	460a      	mov	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fbc5 	bl	8001162 <advance_pc>

	        break;
 80019d8:	e15d      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 47: {//LT
	        state->osp -= 1;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	1e5a      	subs	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] < state->operand_stack[state->osp+1];
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6859      	ldr	r1, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	3301      	adds	r3, #1
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	bf34      	ite	cc
 8001a06:	2301      	movcc	r3, #1
 8001a08:	2300      	movcs	r3, #0
 8001a0a:	b2d9      	uxtb	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	460a      	mov	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fba0 	bl	8001162 <advance_pc>

	        break;
 8001a22:	e138      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 48: {//GE
	        state->osp -= 1;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] >= state->operand_stack[state->osp+1];
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	bf2c      	ite	cs
 8001a50:	2301      	movcs	r3, #1
 8001a52:	2300      	movcc	r3, #0
 8001a54:	b2d9      	uxtb	r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	460a      	mov	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fb7b 	bl	8001162 <advance_pc>

	        break;
 8001a6c:	e113      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 49: {//LE
	        state->osp -= 1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] <= state->operand_stack[state->osp+1];
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6859      	ldr	r1, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	3301      	adds	r3, #1
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	bf94      	ite	ls
 8001a9a:	2301      	movls	r3, #1
 8001a9c:	2300      	movhi	r3, #0
 8001a9e:	b2d9      	uxtb	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	460a      	mov	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fb56 	bl	8001162 <advance_pc>

	        break;
 8001ab6:	e0ee      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 50: {//JT K
	        uint32_t K = get_immediate(state);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fb63 	bl	8001184 <get_immediate>
 8001abe:	6238      	str	r0, [r7, #32]

	        if (state->operand_stack[state->osp] != 0)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <vm_execute+0x8c6>
	        	state->pc = K;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a3a      	ldr	r2, [r7, #32]
 8001ad6:	61da      	str	r2, [r3, #28]
 8001ad8:	e002      	b.n	8001ae0 <vm_execute+0x8cc>
	        else
	            advance_pc(state);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fb41 	bl	8001162 <advance_pc>

	        state->osp -= 1;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24

	        break;
 8001aea:	e0d4      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 51: {//JF K
	        uint32_t K = get_immediate(state);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff fb49 	bl	8001184 <get_immediate>
 8001af2:	6278      	str	r0, [r7, #36]	@ 0x24

	        if (state->operand_stack[state->osp] == 0)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <vm_execute+0x8fa>
	        	state->pc = K;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0a:	61da      	str	r2, [r3, #28]
 8001b0c:	e002      	b.n	8001b14 <vm_execute+0x900>
	        else
	            advance_pc(state);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fb27 	bl	8001162 <advance_pc>

	        state->osp -= 1;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	1e5a      	subs	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24

	        break;
 8001b1e:	e0ba      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    /* Data Transfer */
	    case 60: {//PUSHI K
	        uint32_t K = get_immediate(state);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fb2f 	bl	8001184 <get_immediate>
 8001b26:	62b8      	str	r0, [r7, #40]	@ 0x28


	        state->osp += 1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = K;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b40:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fb0d 	bl	8001162 <advance_pc>

	        break;
 8001b48:	e0a5      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 61: {//POPC

	        state->csp += 1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	621a      	str	r2, [r3, #32]
	        state->call_stack[state->csp] = state->operand_stack[state->osp];
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	441a      	add	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	601a      	str	r2, [r3, #0]
	        state->osp -= 1;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	625a      	str	r2, [r3, #36]	@ 0x24

	        advance_pc(state);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff faf1 	bl	8001162 <advance_pc>

	        break;
 8001b80:	e089      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 62: {//PUSHL K
	        uint32_t K = get_immediate(state);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fafe 	bl	8001184 <get_immediate>
 8001b88:	62f8      	str	r0, [r7, #44]	@ 0x2c

	        state->osp += 1;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24
	        state->operand_stack[state->osp] = state->call_stack[state->bp+K];
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9e:	440b      	add	r3, r1
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	441a      	add	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff fad4 	bl	8001162 <advance_pc>

	        break;
 8001bba:	e06c      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 63: {//POPL K
	        uint32_t K = get_immediate(state);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fae1 	bl	8001184 <get_immediate>
 8001bc2:	6338      	str	r0, [r7, #48]	@ 0x30

	        state->call_stack[state->bp+K] = state->operand_stack[state->osp];
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	441a      	add	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bda:	4403      	add	r3, r0
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	601a      	str	r2, [r3, #0]

	        state->osp -= 1;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	@ 0x24



	        advance_pc(state);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fab7 	bl	8001162 <advance_pc>
	        break;
 8001bf4:	e04f      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 64: {//DROP

	        state->osp -= 1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	1e5a      	subs	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	625a      	str	r2, [r3, #36]	@ 0x24

	        advance_pc(state);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff faae 	bl	8001162 <advance_pc>
	        break;
 8001c06:	e046      	b.n	8001c96 <vm_execute+0xa82>

	    /* GPIO */
	    /* Timing */
	    case 100: {//DLA

	      HAL_Delay(state->operand_stack[state->osp]);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f8e4 	bl	8001de4 <HAL_Delay>
	      state->osp -= 1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24

	      advance_pc(state);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fa9b 	bl	8001162 <advance_pc>

	      break;
 8001c2c:	e033      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    /* Misc */
	    case 200: {//HALT

	        printf("Halting\n");
 8001c2e:	481c      	ldr	r0, [pc, #112]	@ (8001ca0 <vm_execute+0xa8c>)
 8001c30:	f004 fcac 	bl	800658c <puts>

	      while (1) {
	        HAL_Delay(1000);
 8001c34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c38:	f000 f8d4 	bl	8001de4 <HAL_Delay>
 8001c3c:	e7fa      	b.n	8001c34 <vm_execute+0xa20>
	      }

	      break;
	    }
	    case 202: {//SPEEK
	      uint32_t peek = state->operand_stack[state->osp];
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	637b      	str	r3, [r7, #52]	@ 0x34

	      printf("Peek: %i\n", peek);
 8001c4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001c50:	4814      	ldr	r0, [pc, #80]	@ (8001ca4 <vm_execute+0xa90>)
 8001c52:	f004 fc33 	bl	80064bc <iprintf>

	      advance_pc(state);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fa83 	bl	8001162 <advance_pc>

	      break;
 8001c5c:	e01b      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    case 203: {//SPOP
	      uint32_t top = state->operand_stack[state->osp];
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
	      state->osp -= 1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	1e5a      	subs	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	625a      	str	r2, [r3, #36]	@ 0x24

	      printf("Pop: %i\n", top);
 8001c78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c7a:	480b      	ldr	r0, [pc, #44]	@ (8001ca8 <vm_execute+0xa94>)
 8001c7c:	f004 fc1e 	bl	80064bc <iprintf>

	      advance_pc(state);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fa6e 	bl	8001162 <advance_pc>

	      break;
 8001c86:	e006      	b.n	8001c96 <vm_execute+0xa82>
	    }
	    default: {
	    	printf("Invalid command - (%i)\n", opcode);
 8001c88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4807      	ldr	r0, [pc, #28]	@ (8001cac <vm_execute+0xa98>)
 8001c90:	f004 fc14 	bl	80064bc <iprintf>

	      break;
 8001c94:	bf00      	nop

	  }



}
 8001c96:	bf00      	nop
 8001c98:	3740      	adds	r7, #64	@ 0x40
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	080072a0 	.word	0x080072a0
 8001ca4:	080072a8 	.word	0x080072a8
 8001ca8:	080072b4 	.word	0x080072b4
 8001cac:	080072c0 	.word	0x080072c0

08001cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cb0:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cb2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb4:	f7ff fa30 	bl	8001118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb8:	480c      	ldr	r0, [pc, #48]	@ (8001cec <LoopForever+0x6>)
  ldr r1, =_edata
 8001cba:	490d      	ldr	r1, [pc, #52]	@ (8001cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <LoopForever+0xe>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001cfc <LoopForever+0x16>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cde:	f004 fd89 	bl	80067f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ce2:	f7fe fc77 	bl	80005d4 <main>

08001ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce6:	e7fe      	b.n	8001ce6 <LoopForever>
  ldr   r0, =_estack
 8001ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001cf4:	0800735c 	.word	0x0800735c
  ldr r2, =_sbss
 8001cf8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001cfc:	20000410 	.word	0x20000410

08001d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC1_2_IRQHandler>

08001d02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f001 f90f 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d12:	2000      	movs	r0, #0
 8001d14:	f000 f80e 	bl	8001d34 <HAL_InitTick>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	e001      	b.n	8001d28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d24:	f7fe ff46 	bl	8000bb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d28:	79fb      	ldrb	r3, [r7, #7]

}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d40:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <HAL_InitTick+0x68>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d022      	beq.n	8001d8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d48:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <HAL_InitTick+0x6c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <HAL_InitTick+0x68>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 f90c 	bl	8002f7a <HAL_SYSTICK_Config>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10f      	bne.n	8001d88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	d809      	bhi.n	8001d82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	f04f 30ff 	mov.w	r0, #4294967295
 8001d76:	f001 f8e6 	bl	8002f46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <HAL_InitTick+0x70>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	e007      	b.n	8001d92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e004      	b.n	8001d92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	e001      	b.n	8001d92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a03      	ldr	r2, [pc, #12]	@ (8001dc4 <HAL_IncTick+0x1c>)
 8001db8:	6013      	str	r3, [r2, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	200002c0 	.word	0x200002c0
 8001dc8:	20000008 	.word	0x20000008

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	200002c0 	.word	0x200002c0

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff ffee 	bl	8001dcc <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d004      	beq.n	8001e08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <HAL_Delay+0x40>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4413      	add	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e08:	bf00      	nop
 8001e0a:	f7ff ffdf 	bl	8001dcc <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d8f7      	bhi.n	8001e0a <HAL_Delay+0x26>
  {
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000008 	.word	0x20000008

08001e28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	609a      	str	r2, [r3, #8]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3360      	adds	r3, #96	@ 0x60
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <LL_ADC_SetOffset+0x44>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ec8:	bf00      	nop
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	03fff000 	.word	0x03fff000

08001ed8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3360      	adds	r3, #96	@ 0x60
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3360      	adds	r3, #96	@ 0x60
 8001f14:	461a      	mov	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f2e:	bf00      	nop
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b087      	sub	sp, #28
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3360      	adds	r3, #96	@ 0x60
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3360      	adds	r3, #96	@ 0x60
 8001f80:	461a      	mov	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	615a      	str	r2, [r3, #20]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3330      	adds	r3, #48	@ 0x30
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	4413      	add	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	211f      	movs	r1, #31
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	401a      	ands	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	0e9b      	lsrs	r3, r3, #26
 8002004:	f003 011f 	and.w	r1, r3, #31
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	431a      	orrs	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3314      	adds	r3, #20
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	0e5b      	lsrs	r3, r3, #25
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	4413      	add	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	0d1b      	lsrs	r3, r3, #20
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2107      	movs	r1, #7
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	401a      	ands	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	0d1b      	lsrs	r3, r3, #20
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	431a      	orrs	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002094:	43db      	mvns	r3, r3
 8002096:	401a      	ands	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0318 	and.w	r3, r3, #24
 800209e:	4908      	ldr	r1, [pc, #32]	@ (80020c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020a0:	40d9      	lsrs	r1, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	400b      	ands	r3, r1
 80020a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020aa:	431a      	orrs	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	0007ffff 	.word	0x0007ffff

080020c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80020d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6093      	str	r3, [r2, #8]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020fc:	d101      	bne.n	8002102 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002120:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002124:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002148:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800214c:	d101      	bne.n	8002152 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <LL_ADC_IsEnabled+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_ADC_IsEnabled+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b04      	cmp	r3, #4
 8002198:	d101      	bne.n	800219e <LL_ADC_REG_IsConversionOngoing+0x18>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d101      	bne.n	80021c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1a9      	b.n	8002542 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7fe fcfd 	bl	8000bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff67 	bl	80020e8 <LL_ADC_IsDeepPowerDownEnabled>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff4d 	bl	80020c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff82 	bl	8002138 <LL_ADC_IsInternalRegulatorEnabled>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d115      	bne.n	8002266 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff66 	bl	8002110 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002244:	4b9c      	ldr	r3, [pc, #624]	@ (80024b8 <HAL_ADC_Init+0x2e4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	4a9c      	ldr	r2, [pc, #624]	@ (80024bc <HAL_ADC_Init+0x2e8>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	3301      	adds	r3, #1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002258:	e002      	b.n	8002260 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b01      	subs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f9      	bne.n	800225a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ff64 	bl	8002138 <LL_ADC_IsInternalRegulatorEnabled>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10d      	bne.n	8002292 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	f043 0210 	orr.w	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff75 	bl	8002186 <LL_ADC_REG_IsConversionOngoing>
 800229c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 8142 	bne.w	8002530 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 813e 	bne.w	8002530 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022bc:	f043 0202 	orr.w	r2, r3, #2
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff49 	bl	8002160 <LL_ADC_IsEnabled>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d141      	bne.n	8002358 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022dc:	d004      	beq.n	80022e8 <HAL_ADC_Init+0x114>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a77      	ldr	r2, [pc, #476]	@ (80024c0 <HAL_ADC_Init+0x2ec>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d10f      	bne.n	8002308 <HAL_ADC_Init+0x134>
 80022e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022ec:	f7ff ff38 	bl	8002160 <LL_ADC_IsEnabled>
 80022f0:	4604      	mov	r4, r0
 80022f2:	4873      	ldr	r0, [pc, #460]	@ (80024c0 <HAL_ADC_Init+0x2ec>)
 80022f4:	f7ff ff34 	bl	8002160 <LL_ADC_IsEnabled>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4323      	orrs	r3, r4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e012      	b.n	800232e <HAL_ADC_Init+0x15a>
 8002308:	486e      	ldr	r0, [pc, #440]	@ (80024c4 <HAL_ADC_Init+0x2f0>)
 800230a:	f7ff ff29 	bl	8002160 <LL_ADC_IsEnabled>
 800230e:	4604      	mov	r4, r0
 8002310:	486d      	ldr	r0, [pc, #436]	@ (80024c8 <HAL_ADC_Init+0x2f4>)
 8002312:	f7ff ff25 	bl	8002160 <LL_ADC_IsEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	431c      	orrs	r4, r3
 800231a:	486c      	ldr	r0, [pc, #432]	@ (80024cc <HAL_ADC_Init+0x2f8>)
 800231c:	f7ff ff20 	bl	8002160 <LL_ADC_IsEnabled>
 8002320:	4603      	mov	r3, r0
 8002322:	4323      	orrs	r3, r4
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d012      	beq.n	8002358 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800233a:	d004      	beq.n	8002346 <HAL_ADC_Init+0x172>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a5f      	ldr	r2, [pc, #380]	@ (80024c0 <HAL_ADC_Init+0x2ec>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_ADC_Init+0x176>
 8002346:	4a62      	ldr	r2, [pc, #392]	@ (80024d0 <HAL_ADC_Init+0x2fc>)
 8002348:	e000      	b.n	800234c <HAL_ADC_Init+0x178>
 800234a:	4a62      	ldr	r2, [pc, #392]	@ (80024d4 <HAL_ADC_Init+0x300>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f7ff fd68 	bl	8001e28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7f5b      	ldrb	r3, [r3, #29]
 800235c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002362:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002368:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800236e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002376:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002382:	2b01      	cmp	r3, #1
 8002384:	d106      	bne.n	8002394 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	045b      	lsls	r3, r3, #17
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	4b48      	ldr	r3, [pc, #288]	@ (80024d8 <HAL_ADC_Init+0x304>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fee4 	bl	80021ac <LL_ADC_INJ_IsConversionOngoing>
 80023e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d17f      	bne.n	80024ec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d17c      	bne.n	80024ec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800240e:	f023 0302 	bic.w	r3, r3, #2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	69b9      	ldr	r1, [r7, #24]
 8002418:	430b      	orrs	r3, r1
 800241a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d017      	beq.n	8002454 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002432:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800243c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002440:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6911      	ldr	r1, [r2, #16]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002452:	e013      	b.n	800247c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002462:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002474:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002478:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002482:	2b01      	cmp	r3, #1
 8002484:	d12a      	bne.n	80024dc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800249c:	4311      	orrs	r1, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024a2:	4311      	orrs	r1, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024a8:	430a      	orrs	r2, r1
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	611a      	str	r2, [r3, #16]
 80024b6:	e019      	b.n	80024ec <HAL_ADC_Init+0x318>
 80024b8:	20000000 	.word	0x20000000
 80024bc:	053e2d63 	.word	0x053e2d63
 80024c0:	50000100 	.word	0x50000100
 80024c4:	50000400 	.word	0x50000400
 80024c8:	50000500 	.word	0x50000500
 80024cc:	50000600 	.word	0x50000600
 80024d0:	50000300 	.word	0x50000300
 80024d4:	50000700 	.word	0x50000700
 80024d8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10c      	bne.n	800250e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f023 010f 	bic.w	r1, r3, #15
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	1e5a      	subs	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
 800250c:	e007      	b.n	800251e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 020f 	bic.w	r2, r2, #15
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800252e:	e007      	b.n	8002540 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002534:	f043 0210 	orr.w	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002540:	7ffb      	ldrb	r3, [r7, #31]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	@ 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
 800254a:	bf00      	nop

0800254c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b0b6      	sub	sp, #216	@ 0xd8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x24>
 800256a:	2302      	movs	r3, #2
 800256c:	f000 bc13 	b.w	8002d96 <HAL_ADC_ConfigChannel+0x84a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fe02 	bl	8002186 <LL_ADC_REG_IsConversionOngoing>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 83f3 	bne.w	8002d70 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	f7ff fd18 	bl	8001fcc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fdf0 	bl	8002186 <LL_ADC_REG_IsConversionOngoing>
 80025a6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fdfc 	bl	80021ac <LL_ADC_INJ_IsConversionOngoing>
 80025b4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f040 81d9 	bne.w	8002974 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 81d4 	bne.w	8002974 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025d4:	d10f      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7ff fd1f 	bl	8002024 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fcd9 	bl	8001fa6 <LL_ADC_SetSamplingTimeCommonConfig>
 80025f4:	e00e      	b.n	8002614 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	461a      	mov	r2, r3
 8002604:	f7ff fd0e 	bl	8002024 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fcc9 	bl	8001fa6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	08db      	lsrs	r3, r3, #3
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b04      	cmp	r3, #4
 8002634:	d022      	beq.n	800267c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6919      	ldr	r1, [r3, #16]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002646:	f7ff fc23 	bl	8001e90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6919      	ldr	r1, [r3, #16]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	461a      	mov	r2, r3
 8002658:	f7ff fc6f 	bl	8001f3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002668:	2b01      	cmp	r3, #1
 800266a:	d102      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x126>
 800266c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002670:	e000      	b.n	8002674 <HAL_ADC_ConfigChannel+0x128>
 8002672:	2300      	movs	r3, #0
 8002674:	461a      	mov	r2, r3
 8002676:	f7ff fc7b 	bl	8001f70 <LL_ADC_SetOffsetSaturation>
 800267a:	e17b      	b.n	8002974 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fc28 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002688:	4603      	mov	r3, r0
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x15c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fc1d 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 800269e:	4603      	mov	r3, r0
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	f003 021f 	and.w	r2, r3, #31
 80026a6:	e01e      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x19a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fc12 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e004      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80026da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x1b2>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	e018      	b.n	8002730 <HAL_ADC_ConfigChannel+0x1e4>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800271a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002722:	2320      	movs	r3, #32
 8002724:	e004      	b.n	8002730 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002726:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002730:	429a      	cmp	r2, r3
 8002732:	d106      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fbe1 	bl	8001f04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2101      	movs	r1, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fbc5 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <HAL_ADC_ConfigChannel+0x222>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fbba 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	e01e      	b.n	80027ac <HAL_ADC_ConfigChannel+0x260>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fbaf 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800278c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e004      	b.n	80027aa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x278>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	e018      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x2aa>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80027d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80027e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80027e8:	2320      	movs	r3, #32
 80027ea:	e004      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80027ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d106      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	2101      	movs	r1, #1
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb7e 	bl	8001f04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2102      	movs	r1, #2
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fb62 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x2e8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2102      	movs	r1, #2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fb57 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	f003 021f 	and.w	r2, r3, #31
 8002832:	e01e      	b.n	8002872 <HAL_ADC_ConfigChannel+0x326>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2102      	movs	r1, #2
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fb4c 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002852:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800285a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002862:	2320      	movs	r3, #32
 8002864:	e004      	b.n	8002870 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002866:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287a:	2b00      	cmp	r3, #0
 800287c:	d105      	bne.n	800288a <HAL_ADC_ConfigChannel+0x33e>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0e9b      	lsrs	r3, r3, #26
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	e016      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x36c>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800289c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800289e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028aa:	2320      	movs	r3, #32
 80028ac:	e004      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d106      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2102      	movs	r1, #2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fb1d 	bl	8001f04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2103      	movs	r1, #3
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fb01 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x3aa>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2103      	movs	r1, #3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff faf6 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 80028ec:	4603      	mov	r3, r0
 80028ee:	0e9b      	lsrs	r3, r3, #26
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	e017      	b.n	8002926 <HAL_ADC_ConfigChannel+0x3da>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2103      	movs	r1, #3
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff faeb 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800290e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002910:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002918:	2320      	movs	r3, #32
 800291a:	e003      	b.n	8002924 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800291c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_ADC_ConfigChannel+0x3f2>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	e011      	b.n	8002962 <HAL_ADC_ConfigChannel+0x416>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800294c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800294e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e003      	b.n	8002962 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800295a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002962:	429a      	cmp	r2, r3
 8002964:	d106      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	2103      	movs	r1, #3
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fac8 	bl	8001f04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fbf1 	bl	8002160 <LL_ADC_IsEnabled>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 813d 	bne.w	8002c00 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6819      	ldr	r1, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	461a      	mov	r2, r3
 8002994:	f7ff fb72 	bl	800207c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4aa2      	ldr	r2, [pc, #648]	@ (8002c28 <HAL_ADC_ConfigChannel+0x6dc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	f040 812e 	bne.w	8002c00 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10b      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x480>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2b09      	cmp	r3, #9
 80029c2:	bf94      	ite	ls
 80029c4:	2301      	movls	r3, #1
 80029c6:	2300      	movhi	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e019      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x4b4>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80029da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029dc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80029de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80029e4:	2320      	movs	r3, #32
 80029e6:	e003      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80029e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2b09      	cmp	r3, #9
 80029f8:	bf94      	ite	ls
 80029fa:	2301      	movls	r3, #1
 80029fc:	2300      	movhi	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d079      	beq.n	8002af8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x4d4>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0e9b      	lsrs	r3, r3, #26
 8002a16:	3301      	adds	r3, #1
 8002a18:	069b      	lsls	r3, r3, #26
 8002a1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a1e:	e015      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x500>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a30:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e003      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	069b      	lsls	r3, r3, #26
 8002a48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x520>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	e017      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x550>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e003      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	ea42 0103 	orr.w	r1, r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x576>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	051b      	lsls	r3, r3, #20
 8002ac0:	e018      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x5a8>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e003      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af4:	430b      	orrs	r3, r1
 8002af6:	e07e      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x5c8>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	069b      	lsls	r3, r3, #26
 8002b0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b12:	e015      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x5f4>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b24:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e003      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	069b      	lsls	r3, r3, #26
 8002b3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x614>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0e9b      	lsrs	r3, r3, #26
 8002b52:	3301      	adds	r3, #1
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	2101      	movs	r1, #1
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	e017      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x644>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	61fb      	str	r3, [r7, #28]
  return result;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002b78:	2320      	movs	r3, #32
 8002b7a:	e003      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	ea42 0103 	orr.w	r1, r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10d      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x670>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3b1e      	subs	r3, #30
 8002bb4:	051b      	lsls	r3, r3, #20
 8002bb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	e01b      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x6a8>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	613b      	str	r3, [r7, #16]
  return result;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e003      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	3301      	adds	r3, #1
 8002be2:	f003 021f 	and.w	r2, r3, #31
 8002be6:	4613      	mov	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4413      	add	r3, r2
 8002bec:	3b1e      	subs	r3, #30
 8002bee:	051b      	lsls	r3, r3, #20
 8002bf0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f7ff fa12 	bl	8002024 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <HAL_ADC_ConfigChannel+0x6e0>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80be 	beq.w	8002d8a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c16:	d004      	beq.n	8002c22 <HAL_ADC_ConfigChannel+0x6d6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a04      	ldr	r2, [pc, #16]	@ (8002c30 <HAL_ADC_ConfigChannel+0x6e4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10a      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x6ec>
 8002c22:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c24:	e009      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x6ee>
 8002c26:	bf00      	nop
 8002c28:	407f0000 	.word	0x407f0000
 8002c2c:	80080000 	.word	0x80080000
 8002c30:	50000100 	.word	0x50000100
 8002c34:	50000300 	.word	0x50000300
 8002c38:	4b59      	ldr	r3, [pc, #356]	@ (8002da0 <HAL_ADC_ConfigChannel+0x854>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f91a 	bl	8001e74 <LL_ADC_GetCommonPathInternalCh>
 8002c40:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a56      	ldr	r2, [pc, #344]	@ (8002da4 <HAL_ADC_ConfigChannel+0x858>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0x70c>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a55      	ldr	r2, [pc, #340]	@ (8002da8 <HAL_ADC_ConfigChannel+0x85c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d13a      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d134      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c6c:	d005      	beq.n	8002c7a <HAL_ADC_ConfigChannel+0x72e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a4e      	ldr	r2, [pc, #312]	@ (8002dac <HAL_ADC_ConfigChannel+0x860>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	f040 8085 	bne.w	8002d84 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c82:	d004      	beq.n	8002c8e <HAL_ADC_ConfigChannel+0x742>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a49      	ldr	r2, [pc, #292]	@ (8002db0 <HAL_ADC_ConfigChannel+0x864>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x746>
 8002c8e:	4a49      	ldr	r2, [pc, #292]	@ (8002db4 <HAL_ADC_ConfigChannel+0x868>)
 8002c90:	e000      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x748>
 8002c92:	4a43      	ldr	r2, [pc, #268]	@ (8002da0 <HAL_ADC_ConfigChannel+0x854>)
 8002c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f7ff f8d5 	bl	8001e4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca4:	4b44      	ldr	r3, [pc, #272]	@ (8002db8 <HAL_ADC_ConfigChannel+0x86c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	4a44      	ldr	r2, [pc, #272]	@ (8002dbc <HAL_ADC_ConfigChannel+0x870>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cbe:	e002      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f9      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ccc:	e05a      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a3b      	ldr	r2, [pc, #236]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x874>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d125      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11f      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a31      	ldr	r2, [pc, #196]	@ (8002db0 <HAL_ADC_ConfigChannel+0x864>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d104      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x7ac>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a34      	ldr	r2, [pc, #208]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x878>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d047      	beq.n	8002d88 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d00:	d004      	beq.n	8002d0c <HAL_ADC_ConfigChannel+0x7c0>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2a      	ldr	r2, [pc, #168]	@ (8002db0 <HAL_ADC_ConfigChannel+0x864>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x7c4>
 8002d0c:	4a29      	ldr	r2, [pc, #164]	@ (8002db4 <HAL_ADC_ConfigChannel+0x868>)
 8002d0e:	e000      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x7c6>
 8002d10:	4a23      	ldr	r2, [pc, #140]	@ (8002da0 <HAL_ADC_ConfigChannel+0x854>)
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f7ff f896 	bl	8001e4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d22:	e031      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a27      	ldr	r2, [pc, #156]	@ (8002dc8 <HAL_ADC_ConfigChannel+0x87c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d12d      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d127      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002db0 <HAL_ADC_ConfigChannel+0x864>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d4c:	d004      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0x80c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <HAL_ADC_ConfigChannel+0x864>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x810>
 8002d58:	4a16      	ldr	r2, [pc, #88]	@ (8002db4 <HAL_ADC_ConfigChannel+0x868>)
 8002d5a:	e000      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x812>
 8002d5c:	4a10      	ldr	r2, [pc, #64]	@ (8002da0 <HAL_ADC_ConfigChannel+0x854>)
 8002d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f7ff f870 	bl	8001e4e <LL_ADC_SetCommonPathInternalCh>
 8002d6e:	e00c      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d82:	e002      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d84:	bf00      	nop
 8002d86:	e000      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d92:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	37d8      	adds	r7, #216	@ 0xd8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	50000700 	.word	0x50000700
 8002da4:	c3210000 	.word	0xc3210000
 8002da8:	90c00010 	.word	0x90c00010
 8002dac:	50000600 	.word	0x50000600
 8002db0:	50000100 	.word	0x50000100
 8002db4:	50000300 	.word	0x50000300
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	053e2d63 	.word	0x053e2d63
 8002dc0:	c7520000 	.word	0xc7520000
 8002dc4:	50000500 	.word	0x50000500
 8002dc8:	cb840000 	.word	0xcb840000

08002dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfe:	4a04      	ldr	r2, [pc, #16]	@ (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60d3      	str	r3, [r2, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	@ (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	@ (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	@ 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002efc:	d301      	bcc.n	8002f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00f      	b.n	8002f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f02:	4a0a      	ldr	r2, [pc, #40]	@ (8002f2c <SysTick_Config+0x40>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f7ff ff8e 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <SysTick_Config+0x40>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1a:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <SysTick_Config+0x40>)
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	e000e010 	.word	0xe000e010

08002f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff47 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff5e 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff90 	bl	8002e84 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5f 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ffb2 	bl	8002eec <SysTick_Config>
 8002f88:	4603      	mov	r3, r0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fa2:	e15a      	b.n	800325a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 814c 	beq.w	8003254 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d005      	beq.n	8002fd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d130      	bne.n	8003036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800300a:	2201      	movs	r2, #1
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 0201 	and.w	r2, r3, #1
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b03      	cmp	r3, #3
 8003040:	d017      	beq.n	8003072 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4013      	ands	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d123      	bne.n	80030c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	08da      	lsrs	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3208      	adds	r2, #8
 8003086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	220f      	movs	r2, #15
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	08da      	lsrs	r2, r3, #3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3208      	adds	r2, #8
 80030c0:	6939      	ldr	r1, [r7, #16]
 80030c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	2203      	movs	r2, #3
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0203 	and.w	r2, r3, #3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80a6 	beq.w	8003254 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003108:	4b5b      	ldr	r3, [pc, #364]	@ (8003278 <HAL_GPIO_Init+0x2e4>)
 800310a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310c:	4a5a      	ldr	r2, [pc, #360]	@ (8003278 <HAL_GPIO_Init+0x2e4>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6613      	str	r3, [r2, #96]	@ 0x60
 8003114:	4b58      	ldr	r3, [pc, #352]	@ (8003278 <HAL_GPIO_Init+0x2e4>)
 8003116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003120:	4a56      	ldr	r2, [pc, #344]	@ (800327c <HAL_GPIO_Init+0x2e8>)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	3302      	adds	r3, #2
 8003128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	220f      	movs	r2, #15
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800314a:	d01f      	beq.n	800318c <HAL_GPIO_Init+0x1f8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a4c      	ldr	r2, [pc, #304]	@ (8003280 <HAL_GPIO_Init+0x2ec>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d019      	beq.n	8003188 <HAL_GPIO_Init+0x1f4>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a4b      	ldr	r2, [pc, #300]	@ (8003284 <HAL_GPIO_Init+0x2f0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_GPIO_Init+0x1f0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a4a      	ldr	r2, [pc, #296]	@ (8003288 <HAL_GPIO_Init+0x2f4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00d      	beq.n	8003180 <HAL_GPIO_Init+0x1ec>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a49      	ldr	r2, [pc, #292]	@ (800328c <HAL_GPIO_Init+0x2f8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <HAL_GPIO_Init+0x1e8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a48      	ldr	r2, [pc, #288]	@ (8003290 <HAL_GPIO_Init+0x2fc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d101      	bne.n	8003178 <HAL_GPIO_Init+0x1e4>
 8003174:	2305      	movs	r3, #5
 8003176:	e00a      	b.n	800318e <HAL_GPIO_Init+0x1fa>
 8003178:	2306      	movs	r3, #6
 800317a:	e008      	b.n	800318e <HAL_GPIO_Init+0x1fa>
 800317c:	2304      	movs	r3, #4
 800317e:	e006      	b.n	800318e <HAL_GPIO_Init+0x1fa>
 8003180:	2303      	movs	r3, #3
 8003182:	e004      	b.n	800318e <HAL_GPIO_Init+0x1fa>
 8003184:	2302      	movs	r3, #2
 8003186:	e002      	b.n	800318e <HAL_GPIO_Init+0x1fa>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_GPIO_Init+0x1fa>
 800318c:	2300      	movs	r3, #0
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	f002 0203 	and.w	r2, r2, #3
 8003194:	0092      	lsls	r2, r2, #2
 8003196:	4093      	lsls	r3, r2
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800319e:	4937      	ldr	r1, [pc, #220]	@ (800327c <HAL_GPIO_Init+0x2e8>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ac:	4b39      	ldr	r3, [pc, #228]	@ (8003294 <HAL_GPIO_Init+0x300>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031d0:	4a30      	ldr	r2, [pc, #192]	@ (8003294 <HAL_GPIO_Init+0x300>)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003294 <HAL_GPIO_Init+0x300>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031fa:	4a26      	ldr	r2, [pc, #152]	@ (8003294 <HAL_GPIO_Init+0x300>)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003200:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_GPIO_Init+0x300>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43db      	mvns	r3, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003224:	4a1b      	ldr	r2, [pc, #108]	@ (8003294 <HAL_GPIO_Init+0x300>)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800322a:	4b1a      	ldr	r3, [pc, #104]	@ (8003294 <HAL_GPIO_Init+0x300>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	43db      	mvns	r3, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800324e:	4a11      	ldr	r2, [pc, #68]	@ (8003294 <HAL_GPIO_Init+0x300>)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3301      	adds	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	f47f ae9d 	bne.w	8002fa4 <HAL_GPIO_Init+0x10>
  }
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40021000 	.word	0x40021000
 800327c:	40010000 	.word	0x40010000
 8003280:	48000400 	.word	0x48000400
 8003284:	48000800 	.word	0x48000800
 8003288:	48000c00 	.word	0x48000c00
 800328c:	48001000 	.word	0x48001000
 8003290:	48001400 	.word	0x48001400
 8003294:	40010400 	.word	0x40010400

08003298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e08d      	b.n	80033c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fd30 	bl	8000d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	@ 0x24
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e006      	b.n	8003320 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800331e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d108      	bne.n	800333a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	e007      	b.n	800334a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003348:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800335c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800336c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1a      	ldr	r2, [r3, #32]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d138      	bne.n	8003456 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e032      	b.n	8003458 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2224      	movs	r2, #36	@ 0x24
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003420:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b20      	cmp	r3, #32
 8003478:	d139      	bne.n	80034ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003484:	2302      	movs	r3, #2
 8003486:	e033      	b.n	80034f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	@ 0x24
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d141      	bne.n	800358e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800350a:	4b4b      	ldr	r3, [pc, #300]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003516:	d131      	bne.n	800357c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003518:	4b47      	ldr	r3, [pc, #284]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800351e:	4a46      	ldr	r2, [pc, #280]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003524:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003528:	4b43      	ldr	r3, [pc, #268]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003530:	4a41      	ldr	r2, [pc, #260]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003536:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003538:	4b40      	ldr	r3, [pc, #256]	@ (800363c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2232      	movs	r2, #50	@ 0x32
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	4a3f      	ldr	r2, [pc, #252]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	0c9b      	lsrs	r3, r3, #18
 800354a:	3301      	adds	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800354e:	e002      	b.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3b01      	subs	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003556:	4b38      	ldr	r3, [pc, #224]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003562:	d102      	bne.n	800356a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f2      	bne.n	8003550 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800356a:	4b33      	ldr	r3, [pc, #204]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003576:	d158      	bne.n	800362a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e057      	b.n	800362c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800357c:	4b2e      	ldr	r3, [pc, #184]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003582:	4a2d      	ldr	r2, [pc, #180]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800358c:	e04d      	b.n	800362a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003594:	d141      	bne.n	800361a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003596:	4b28      	ldr	r3, [pc, #160]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a2:	d131      	bne.n	8003608 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035a4:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035aa:	4a23      	ldr	r2, [pc, #140]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035b4:	4b20      	ldr	r3, [pc, #128]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	@ (800363c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2232      	movs	r2, #50	@ 0x32
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	0c9b      	lsrs	r3, r3, #18
 80035d6:	3301      	adds	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035da:	e002      	b.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035e2:	4b15      	ldr	r3, [pc, #84]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ee:	d102      	bne.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f2      	bne.n	80035dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035f6:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003602:	d112      	bne.n	800362a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e011      	b.n	800362c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003608:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800360e:	4a0a      	ldr	r2, [pc, #40]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003618:	e007      	b.n	800362a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800361a:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003622:	4a05      	ldr	r2, [pc, #20]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003624:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003628:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40007000 	.word	0x40007000
 800363c:	20000000 	.word	0x20000000
 8003640:	431bde83 	.word	0x431bde83

08003644 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a04      	ldr	r2, [pc, #16]	@ (8003660 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800364e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003652:	6093      	str	r3, [r2, #8]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40007000 	.word	0x40007000

08003664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e2fe      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d075      	beq.n	800376e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003682:	4b97      	ldr	r3, [pc, #604]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800368c:	4b94      	ldr	r3, [pc, #592]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	d102      	bne.n	80036a2 <HAL_RCC_OscConfig+0x3e>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d002      	beq.n	80036a8 <HAL_RCC_OscConfig+0x44>
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d10b      	bne.n	80036c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	4b8d      	ldr	r3, [pc, #564]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d05b      	beq.n	800376c <HAL_RCC_OscConfig+0x108>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d157      	bne.n	800376c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e2d9      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c8:	d106      	bne.n	80036d8 <HAL_RCC_OscConfig+0x74>
 80036ca:	4b85      	ldr	r3, [pc, #532]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a84      	ldr	r2, [pc, #528]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e01d      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x98>
 80036e2:	4b7f      	ldr	r3, [pc, #508]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7e      	ldr	r2, [pc, #504]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b7c      	ldr	r3, [pc, #496]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a7b      	ldr	r2, [pc, #492]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036fc:	4b78      	ldr	r3, [pc, #480]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a77      	ldr	r2, [pc, #476]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b75      	ldr	r3, [pc, #468]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a74      	ldr	r2, [pc, #464]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800370e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fb56 	bl	8001dcc <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe fb52 	bl	8001dcc <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	@ 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e29e      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003736:	4b6a      	ldr	r3, [pc, #424]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0xc0>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fb42 	bl	8001dcc <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7fe fb3e 	bl	8001dcc <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	@ 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e28a      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800375e:	4b60      	ldr	r3, [pc, #384]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0xe8>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d075      	beq.n	8003866 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377a:	4b59      	ldr	r3, [pc, #356]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003784:	4b56      	ldr	r3, [pc, #344]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b0c      	cmp	r3, #12
 8003792:	d102      	bne.n	800379a <HAL_RCC_OscConfig+0x136>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_OscConfig+0x13c>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d11f      	bne.n	80037e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a0:	4b4f      	ldr	r3, [pc, #316]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_OscConfig+0x154>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e25d      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b49      	ldr	r3, [pc, #292]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	4946      	ldr	r1, [pc, #280]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037cc:	4b45      	ldr	r3, [pc, #276]	@ (80038e4 <HAL_RCC_OscConfig+0x280>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe faaf 	bl	8001d34 <HAL_InitTick>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d043      	beq.n	8003864 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e249      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d023      	beq.n	8003830 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e8:	4b3d      	ldr	r3, [pc, #244]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a3c      	ldr	r2, [pc, #240]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe faea 	bl	8001dcc <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fc:	f7fe fae6 	bl	8001dcc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e232      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800380e:	4b34      	ldr	r3, [pc, #208]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381a:	4b31      	ldr	r3, [pc, #196]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	492d      	ldr	r1, [pc, #180]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
 800382e:	e01a      	b.n	8003866 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003830:	4b2b      	ldr	r3, [pc, #172]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2a      	ldr	r2, [pc, #168]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003836:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fac6 	bl	8001dcc <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003844:	f7fe fac2 	bl	8001dcc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e20e      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003856:	4b22      	ldr	r3, [pc, #136]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x1e0>
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003864:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d041      	beq.n	80038f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01c      	beq.n	80038b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387a:	4b19      	ldr	r3, [pc, #100]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800387c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003880:	4a17      	ldr	r2, [pc, #92]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388a:	f7fe fa9f 	bl	8001dcc <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003892:	f7fe fa9b 	bl	8001dcc <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e1e7      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a4:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80038a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ef      	beq.n	8003892 <HAL_RCC_OscConfig+0x22e>
 80038b2:	e020      	b.n	80038f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b4:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80038b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ba:	4a09      	ldr	r2, [pc, #36]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe fa82 	bl	8001dcc <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038ca:	e00d      	b.n	80038e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fe fa7e 	bl	8001dcc <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d906      	bls.n	80038e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1ca      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
 80038e4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e8:	4b8c      	ldr	r3, [pc, #560]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ea      	bne.n	80038cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80a6 	beq.w	8003a50 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003904:	2300      	movs	r3, #0
 8003906:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003908:	4b84      	ldr	r3, [pc, #528]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_OscConfig+0x2b4>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x2b6>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	4a7e      	ldr	r2, [pc, #504]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	@ 0x58
 800392a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003936:	2301      	movs	r3, #1
 8003938:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800393a:	4b79      	ldr	r3, [pc, #484]	@ (8003b20 <HAL_RCC_OscConfig+0x4bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003946:	4b76      	ldr	r3, [pc, #472]	@ (8003b20 <HAL_RCC_OscConfig+0x4bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a75      	ldr	r2, [pc, #468]	@ (8003b20 <HAL_RCC_OscConfig+0x4bc>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003952:	f7fe fa3b 	bl	8001dcc <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395a:	f7fe fa37 	bl	8001dcc <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e183      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396c:	4b6c      	ldr	r3, [pc, #432]	@ (8003b20 <HAL_RCC_OscConfig+0x4bc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d108      	bne.n	8003992 <HAL_RCC_OscConfig+0x32e>
 8003980:	4b66      	ldr	r3, [pc, #408]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003986:	4a65      	ldr	r2, [pc, #404]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003990:	e024      	b.n	80039dc <HAL_RCC_OscConfig+0x378>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d110      	bne.n	80039bc <HAL_RCC_OscConfig+0x358>
 800399a:	4b60      	ldr	r3, [pc, #384]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039a2:	f043 0304 	orr.w	r3, r3, #4
 80039a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039aa:	4b5c      	ldr	r3, [pc, #368]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039ba:	e00f      	b.n	80039dc <HAL_RCC_OscConfig+0x378>
 80039bc:	4b57      	ldr	r3, [pc, #348]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	4a56      	ldr	r2, [pc, #344]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039cc:	4b53      	ldr	r3, [pc, #332]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	4a52      	ldr	r2, [pc, #328]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d016      	beq.n	8003a12 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fe f9f2 	bl	8001dcc <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fe f9ee 	bl	8001dcc <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e138      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a02:	4b46      	ldr	r3, [pc, #280]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ed      	beq.n	80039ec <HAL_RCC_OscConfig+0x388>
 8003a10:	e015      	b.n	8003a3e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a12:	f7fe f9db 	bl	8001dcc <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fe f9d7 	bl	8001dcc <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e121      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a30:	4b3a      	ldr	r3, [pc, #232]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ed      	bne.n	8003a1a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a3e:	7ffb      	ldrb	r3, [r7, #31]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d105      	bne.n	8003a50 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a44:	4b35      	ldr	r3, [pc, #212]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a48:	4a34      	ldr	r2, [pc, #208]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d03c      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01c      	beq.n	8003a9e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a64:	4b2d      	ldr	r3, [pc, #180]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7fe f9aa 	bl	8001dcc <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a7c:	f7fe f9a6 	bl	8001dcc <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0f2      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a8e:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ef      	beq.n	8003a7c <HAL_RCC_OscConfig+0x418>
 8003a9c:	e01b      	b.n	8003ad6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aae:	f7fe f98d 	bl	8001dcc <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ab6:	f7fe f989 	bl	8001dcc <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0d5      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1ef      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80c9 	beq.w	8003c72 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	f000 8083 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d15e      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a08      	ldr	r2, [pc, #32]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003afc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fe f963 	bl	8001dcc <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b08:	e00c      	b.n	8003b24 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fe f95f 	bl	8001dcc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d905      	bls.n	8003b24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e0ab      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b24:	4b55      	ldr	r3, [pc, #340]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ec      	bne.n	8003b0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b30:	4b52      	ldr	r3, [pc, #328]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	4b52      	ldr	r3, [pc, #328]	@ (8003c80 <HAL_RCC_OscConfig+0x61c>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6a11      	ldr	r1, [r2, #32]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b40:	3a01      	subs	r2, #1
 8003b42:	0112      	lsls	r2, r2, #4
 8003b44:	4311      	orrs	r1, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b4a:	0212      	lsls	r2, r2, #8
 8003b4c:	4311      	orrs	r1, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b52:	0852      	lsrs	r2, r2, #1
 8003b54:	3a01      	subs	r2, #1
 8003b56:	0552      	lsls	r2, r2, #21
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b5e:	0852      	lsrs	r2, r2, #1
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0652      	lsls	r2, r2, #25
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b6a:	06d2      	lsls	r2, r2, #27
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	4943      	ldr	r1, [pc, #268]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b74:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a40      	ldr	r2, [pc, #256]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b80:	4b3e      	ldr	r3, [pc, #248]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a3d      	ldr	r2, [pc, #244]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fe f91e 	bl	8001dcc <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fe f91a 	bl	8001dcc <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e066      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba6:	4b35      	ldr	r3, [pc, #212]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x530>
 8003bb2:	e05e      	b.n	8003c72 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb4:	4b31      	ldr	r3, [pc, #196]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a30      	ldr	r2, [pc, #192]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fe f904 	bl	8001dcc <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fe f900 	bl	8001dcc <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e04c      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bda:	4b28      	ldr	r3, [pc, #160]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003be6:	4b25      	ldr	r3, [pc, #148]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	4924      	ldr	r1, [pc, #144]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003bec:	4b25      	ldr	r3, [pc, #148]	@ (8003c84 <HAL_RCC_OscConfig+0x620>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	60cb      	str	r3, [r1, #12]
 8003bf2:	e03e      	b.n	8003c72 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e039      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c00:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 0203 	and.w	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d12c      	bne.n	8003c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d123      	bne.n	8003c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d11b      	bne.n	8003c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d113      	bne.n	8003c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	3b01      	subs	r3, #1
 8003c54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	3b01      	subs	r3, #1
 8003c68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	019f800c 	.word	0x019f800c
 8003c84:	feeefffc 	.word	0xfeeefffc

08003c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e11e      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b91      	ldr	r3, [pc, #580]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d910      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 020f 	bic.w	r2, r3, #15
 8003cb6:	498c      	ldr	r1, [pc, #560]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b8a      	ldr	r3, [pc, #552]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e106      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d073      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d129      	bne.n	8003d38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce4:	4b81      	ldr	r3, [pc, #516]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0f4      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003cf4:	f000 f99e 	bl	8004034 <RCC_GetSysClockFreqFromPLLSource>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4a7c      	ldr	r2, [pc, #496]	@ (8003ef0 <HAL_RCC_ClockConfig+0x268>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d93f      	bls.n	8003d82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d02:	4b7a      	ldr	r3, [pc, #488]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d033      	beq.n	8003d82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d12f      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d22:	4b72      	ldr	r3, [pc, #456]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d2a:	4a70      	ldr	r2, [pc, #448]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d32:	2380      	movs	r3, #128	@ 0x80
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e024      	b.n	8003d82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d40:	4b6a      	ldr	r3, [pc, #424]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0c6      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d50:	4b66      	ldr	r3, [pc, #408]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0be      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d60:	f000 f8ce 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4a61      	ldr	r2, [pc, #388]	@ (8003ef0 <HAL_RCC_ClockConfig+0x268>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d909      	bls.n	8003d82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d76:	4a5d      	ldr	r2, [pc, #372]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d7e:	2380      	movs	r3, #128	@ 0x80
 8003d80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d82:	4b5a      	ldr	r3, [pc, #360]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4957      	ldr	r1, [pc, #348]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d94:	f7fe f81a 	bl	8001dcc <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9c:	f7fe f816 	bl	8001dcc <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e095      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	4b4e      	ldr	r3, [pc, #312]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 020c 	and.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d1eb      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d023      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ddc:	4b43      	ldr	r3, [pc, #268]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a42      	ldr	r2, [pc, #264]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003de2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003de6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003df4:	4b3d      	ldr	r3, [pc, #244]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003dfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e04:	4b39      	ldr	r3, [pc, #228]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4936      	ldr	r1, [pc, #216]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b80      	cmp	r3, #128	@ 0x80
 8003e1c:	d105      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e1e:	4b33      	ldr	r3, [pc, #204]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	4a32      	ldr	r2, [pc, #200]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d21d      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 020f 	bic.w	r2, r3, #15
 8003e40:	4929      	ldr	r1, [pc, #164]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e48:	f7fd ffc0 	bl	8001dcc <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fd ffbc 	bl	8001dcc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e03b      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1ed      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e80:	4b1a      	ldr	r3, [pc, #104]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4917      	ldr	r1, [pc, #92]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e9e:	4b13      	ldr	r3, [pc, #76]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	490f      	ldr	r1, [pc, #60]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eb2:	f000 f825 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	490c      	ldr	r1, [pc, #48]	@ (8003ef4 <HAL_RCC_ClockConfig+0x26c>)
 8003ec4:	5ccb      	ldrb	r3, [r1, r3]
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <HAL_RCC_ClockConfig+0x270>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8003efc <HAL_RCC_ClockConfig+0x274>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd ff2c 	bl	8001d34 <HAL_InitTick>
 8003edc:	4603      	mov	r3, r0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40022000 	.word	0x40022000
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	04c4b400 	.word	0x04c4b400
 8003ef4:	080072d8 	.word	0x080072d8
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	20000004 	.word	0x20000004

08003f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f06:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d102      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f12:	4b2a      	ldr	r3, [pc, #168]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e047      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f18:	4b27      	ldr	r3, [pc, #156]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d102      	bne.n	8003f2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f24:	4b26      	ldr	r3, [pc, #152]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	e03e      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f2a:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d136      	bne.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d10c      	bne.n	8003f6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f54:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	4a16      	ldr	r2, [pc, #88]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f5e:	68d2      	ldr	r2, [r2, #12]
 8003f60:	0a12      	lsrs	r2, r2, #8
 8003f62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	617b      	str	r3, [r7, #20]
      break;
 8003f6c:	e00c      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f6e:	4a13      	ldr	r2, [pc, #76]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	4a10      	ldr	r2, [pc, #64]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f78:	68d2      	ldr	r2, [r2, #12]
 8003f7a:	0a12      	lsrs	r2, r2, #8
 8003f7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
      break;
 8003f86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	0e5b      	lsrs	r3, r3, #25
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	3301      	adds	r3, #1
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e001      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003fa8:	693b      	ldr	r3, [r7, #16]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	00f42400 	.word	0x00f42400
 8003fc0:	02dc6c00 	.word	0x02dc6c00

08003fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000000 	.word	0x20000000

08003fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fe0:	f7ff fff0 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4904      	ldr	r1, [pc, #16]	@ (8004004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40021000 	.word	0x40021000
 8004004:	080072e8 	.word	0x080072e8

08004008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800400c:	f7ff ffda 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b06      	ldr	r3, [pc, #24]	@ (800402c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	0adb      	lsrs	r3, r3, #11
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4904      	ldr	r1, [pc, #16]	@ (8004030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000
 8004030:	080072e8 	.word	0x080072e8

08004034 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800403a:	4b1e      	ldr	r3, [pc, #120]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004044:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	3301      	adds	r3, #1
 8004050:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d10c      	bne.n	8004072 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004058:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	4a14      	ldr	r2, [pc, #80]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004062:	68d2      	ldr	r2, [r2, #12]
 8004064:	0a12      	lsrs	r2, r2, #8
 8004066:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	617b      	str	r3, [r7, #20]
    break;
 8004070:	e00c      	b.n	800408c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004072:	4a12      	ldr	r2, [pc, #72]	@ (80040bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	4a0e      	ldr	r2, [pc, #56]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	0a12      	lsrs	r2, r2, #8
 8004080:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]
    break;
 800408a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800408c:	4b09      	ldr	r3, [pc, #36]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0e5b      	lsrs	r3, r3, #25
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	3301      	adds	r3, #1
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80040a6:	687b      	ldr	r3, [r7, #4]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40021000 	.word	0x40021000
 80040b8:	02dc6c00 	.word	0x02dc6c00
 80040bc:	00f42400 	.word	0x00f42400

080040c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040c8:	2300      	movs	r3, #0
 80040ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040cc:	2300      	movs	r3, #0
 80040ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8098 	beq.w	800420e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e2:	4b43      	ldr	r3, [pc, #268]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10d      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ee:	4b40      	ldr	r3, [pc, #256]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	4a3f      	ldr	r2, [pc, #252]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040fa:	4b3d      	ldr	r3, [pc, #244]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004106:	2301      	movs	r3, #1
 8004108:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800410a:	4b3a      	ldr	r3, [pc, #232]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a39      	ldr	r2, [pc, #228]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004114:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004116:	f7fd fe59 	bl	8001dcc <HAL_GetTick>
 800411a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800411c:	e009      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411e:	f7fd fe55 	bl	8001dcc <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d902      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	74fb      	strb	r3, [r7, #19]
        break;
 8004130:	e005      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004132:	4b30      	ldr	r3, [pc, #192]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ef      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d159      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004144:	4b2a      	ldr	r3, [pc, #168]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800414e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01e      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	429a      	cmp	r2, r3
 800415e:	d019      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004160:	4b23      	ldr	r3, [pc, #140]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800416a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800416c:	4b20      	ldr	r3, [pc, #128]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a1f      	ldr	r2, [pc, #124]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800417c:	4b1c      	ldr	r3, [pc, #112]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	4a1b      	ldr	r2, [pc, #108]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800418c:	4a18      	ldr	r2, [pc, #96]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d016      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419e:	f7fd fe15 	bl	8001dcc <HAL_GetTick>
 80041a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a4:	e00b      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a6:	f7fd fe11 	bl	8001dcc <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d902      	bls.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	74fb      	strb	r3, [r7, #19]
            break;
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041be:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ec      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d2:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	4903      	ldr	r1, [pc, #12]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041e8:	e008      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ea:	7cfb      	ldrb	r3, [r7, #19]
 80041ec:	74bb      	strb	r3, [r7, #18]
 80041ee:	e005      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041fc:	7c7b      	ldrb	r3, [r7, #17]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4ba7      	ldr	r3, [pc, #668]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004206:	4aa6      	ldr	r2, [pc, #664]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800421a:	4ba1      	ldr	r3, [pc, #644]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004220:	f023 0203 	bic.w	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	499d      	ldr	r1, [pc, #628]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800423c:	4b98      	ldr	r3, [pc, #608]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f023 020c 	bic.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	4995      	ldr	r1, [pc, #596]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800425e:	4b90      	ldr	r3, [pc, #576]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	498c      	ldr	r1, [pc, #560]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004280:	4b87      	ldr	r3, [pc, #540]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004286:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	4984      	ldr	r1, [pc, #528]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042a2:	4b7f      	ldr	r3, [pc, #508]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	497b      	ldr	r1, [pc, #492]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c4:	4b76      	ldr	r3, [pc, #472]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	4973      	ldr	r1, [pc, #460]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042e6:	4b6e      	ldr	r3, [pc, #440]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	496a      	ldr	r1, [pc, #424]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004308:	4b65      	ldr	r3, [pc, #404]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4962      	ldr	r1, [pc, #392]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800432a:	4b5d      	ldr	r3, [pc, #372]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	4959      	ldr	r1, [pc, #356]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800434c:	4b54      	ldr	r3, [pc, #336]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004352:	f023 0203 	bic.w	r2, r3, #3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	4951      	ldr	r1, [pc, #324]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800436e:	4b4c      	ldr	r3, [pc, #304]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004374:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437c:	4948      	ldr	r1, [pc, #288]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438c:	2b00      	cmp	r3, #0
 800438e:	d015      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004390:	4b43      	ldr	r3, [pc, #268]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439e:	4940      	ldr	r1, [pc, #256]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ae:	d105      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b0:	4b3b      	ldr	r3, [pc, #236]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a3a      	ldr	r2, [pc, #232]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d015      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043c8:	4b35      	ldr	r3, [pc, #212]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d6:	4932      	ldr	r1, [pc, #200]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043e6:	d105      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e8:	4b2d      	ldr	r3, [pc, #180]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a2c      	ldr	r2, [pc, #176]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043f2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d015      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004400:	4b27      	ldr	r3, [pc, #156]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004406:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440e:	4924      	ldr	r1, [pc, #144]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800441e:	d105      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004420:	4b1f      	ldr	r3, [pc, #124]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4a1e      	ldr	r2, [pc, #120]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800442a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d015      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004438:	4b19      	ldr	r3, [pc, #100]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004446:	4916      	ldr	r1, [pc, #88]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004456:	d105      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004458:	4b11      	ldr	r3, [pc, #68]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a10      	ldr	r2, [pc, #64]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004462:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d019      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004470:	4b0b      	ldr	r3, [pc, #44]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	4908      	ldr	r1, [pc, #32]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800448e:	d109      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004490:	4b03      	ldr	r3, [pc, #12]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a02      	ldr	r2, [pc, #8]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800449a:	60d3      	str	r3, [r2, #12]
 800449c:	e002      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800449e:	bf00      	nop
 80044a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044b0:	4b29      	ldr	r3, [pc, #164]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044be:	4926      	ldr	r1, [pc, #152]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044ce:	d105      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044d0:	4b21      	ldr	r3, [pc, #132]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a20      	ldr	r2, [pc, #128]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044da:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d015      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80044e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f6:	4918      	ldr	r1, [pc, #96]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004506:	d105      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004508:	4b13      	ldr	r3, [pc, #76]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4a12      	ldr	r2, [pc, #72]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800450e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004512:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d015      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004520:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004526:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800452e:	490a      	ldr	r1, [pc, #40]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800453e:	d105      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a04      	ldr	r2, [pc, #16]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800454a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800454c:	7cbb      	ldrb	r3, [r7, #18]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000

0800455c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e049      	b.n	8004602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc fc4c 	bl	8000e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f000 fac0 	bl	8004b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e049      	b.n	80046b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f841 	bl	80046b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f000 fa69 	bl	8004b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e0ff      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b14      	cmp	r3, #20
 80046f6:	f200 80f0 	bhi.w	80048da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004700:	08004755 	.word	0x08004755
 8004704:	080048db 	.word	0x080048db
 8004708:	080048db 	.word	0x080048db
 800470c:	080048db 	.word	0x080048db
 8004710:	08004795 	.word	0x08004795
 8004714:	080048db 	.word	0x080048db
 8004718:	080048db 	.word	0x080048db
 800471c:	080048db 	.word	0x080048db
 8004720:	080047d7 	.word	0x080047d7
 8004724:	080048db 	.word	0x080048db
 8004728:	080048db 	.word	0x080048db
 800472c:	080048db 	.word	0x080048db
 8004730:	08004817 	.word	0x08004817
 8004734:	080048db 	.word	0x080048db
 8004738:	080048db 	.word	0x080048db
 800473c:	080048db 	.word	0x080048db
 8004740:	08004859 	.word	0x08004859
 8004744:	080048db 	.word	0x080048db
 8004748:	080048db 	.word	0x080048db
 800474c:	080048db 	.word	0x080048db
 8004750:	08004899 	.word	0x08004899
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fa94 	bl	8004c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0208 	orr.w	r2, r2, #8
 800476e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0204 	bic.w	r2, r2, #4
 800477e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6999      	ldr	r1, [r3, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	619a      	str	r2, [r3, #24]
      break;
 8004792:	e0a5      	b.n	80048e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fb0e 	bl	8004dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6999      	ldr	r1, [r3, #24]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	021a      	lsls	r2, r3, #8
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	619a      	str	r2, [r3, #24]
      break;
 80047d4:	e084      	b.n	80048e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fb81 	bl	8004ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0208 	orr.w	r2, r2, #8
 80047f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0204 	bic.w	r2, r2, #4
 8004800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	61da      	str	r2, [r3, #28]
      break;
 8004814:	e064      	b.n	80048e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fbf3 	bl	8005008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69d9      	ldr	r1, [r3, #28]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	021a      	lsls	r2, r3, #8
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	61da      	str	r2, [r3, #28]
      break;
 8004856:	e043      	b.n	80048e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fc66 	bl	8005130 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0208 	orr.w	r2, r2, #8
 8004872:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0204 	bic.w	r2, r2, #4
 8004882:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004896:	e023      	b.n	80048e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fcb0 	bl	8005204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	021a      	lsls	r2, r3, #8
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80048d8:	e002      	b.n	80048e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
      break;
 80048de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop

080048f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_TIM_ConfigClockSource+0x1c>
 800490c:	2302      	movs	r3, #2
 800490e:	e0f6      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x20a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800492e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800493a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a6f      	ldr	r2, [pc, #444]	@ (8004b08 <HAL_TIM_ConfigClockSource+0x214>)
 800494a:	4293      	cmp	r3, r2
 800494c:	f000 80c1 	beq.w	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 8004950:	4a6d      	ldr	r2, [pc, #436]	@ (8004b08 <HAL_TIM_ConfigClockSource+0x214>)
 8004952:	4293      	cmp	r3, r2
 8004954:	f200 80c6 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004958:	4a6c      	ldr	r2, [pc, #432]	@ (8004b0c <HAL_TIM_ConfigClockSource+0x218>)
 800495a:	4293      	cmp	r3, r2
 800495c:	f000 80b9 	beq.w	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 8004960:	4a6a      	ldr	r2, [pc, #424]	@ (8004b0c <HAL_TIM_ConfigClockSource+0x218>)
 8004962:	4293      	cmp	r3, r2
 8004964:	f200 80be 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004968:	4a69      	ldr	r2, [pc, #420]	@ (8004b10 <HAL_TIM_ConfigClockSource+0x21c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	f000 80b1 	beq.w	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 8004970:	4a67      	ldr	r2, [pc, #412]	@ (8004b10 <HAL_TIM_ConfigClockSource+0x21c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	f200 80b6 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004978:	4a66      	ldr	r2, [pc, #408]	@ (8004b14 <HAL_TIM_ConfigClockSource+0x220>)
 800497a:	4293      	cmp	r3, r2
 800497c:	f000 80a9 	beq.w	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 8004980:	4a64      	ldr	r2, [pc, #400]	@ (8004b14 <HAL_TIM_ConfigClockSource+0x220>)
 8004982:	4293      	cmp	r3, r2
 8004984:	f200 80ae 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004988:	4a63      	ldr	r2, [pc, #396]	@ (8004b18 <HAL_TIM_ConfigClockSource+0x224>)
 800498a:	4293      	cmp	r3, r2
 800498c:	f000 80a1 	beq.w	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 8004990:	4a61      	ldr	r2, [pc, #388]	@ (8004b18 <HAL_TIM_ConfigClockSource+0x224>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f200 80a6 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004998:	4a60      	ldr	r2, [pc, #384]	@ (8004b1c <HAL_TIM_ConfigClockSource+0x228>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f000 8099 	beq.w	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 80049a0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b1c <HAL_TIM_ConfigClockSource+0x228>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f200 809e 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 80049a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049ac:	f000 8091 	beq.w	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 80049b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049b4:	f200 8096 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 80049b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049bc:	f000 8089 	beq.w	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 80049c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049c4:	f200 808e 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 80049c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049cc:	d03e      	beq.n	8004a4c <HAL_TIM_ConfigClockSource+0x158>
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049d2:	f200 8087 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 80049d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049da:	f000 8086 	beq.w	8004aea <HAL_TIM_ConfigClockSource+0x1f6>
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e2:	d87f      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 80049e4:	2b70      	cmp	r3, #112	@ 0x70
 80049e6:	d01a      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x12a>
 80049e8:	2b70      	cmp	r3, #112	@ 0x70
 80049ea:	d87b      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 80049ec:	2b60      	cmp	r3, #96	@ 0x60
 80049ee:	d050      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x19e>
 80049f0:	2b60      	cmp	r3, #96	@ 0x60
 80049f2:	d877      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 80049f4:	2b50      	cmp	r3, #80	@ 0x50
 80049f6:	d03c      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x17e>
 80049f8:	2b50      	cmp	r3, #80	@ 0x50
 80049fa:	d873      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 80049fc:	2b40      	cmp	r3, #64	@ 0x40
 80049fe:	d058      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x1be>
 8004a00:	2b40      	cmp	r3, #64	@ 0x40
 8004a02:	d86f      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a04:	2b30      	cmp	r3, #48	@ 0x30
 8004a06:	d064      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 8004a08:	2b30      	cmp	r3, #48	@ 0x30
 8004a0a:	d86b      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d060      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d867      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d05c      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d05a      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x1de>
 8004a1c:	e062      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a2e:	f000 fcd1 	bl	80053d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	609a      	str	r2, [r3, #8]
      break;
 8004a4a:	e04f      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a5c:	f000 fcba 	bl	80053d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a6e:	609a      	str	r2, [r3, #8]
      break;
 8004a70:	e03c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f000 fc2c 	bl	80052dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2150      	movs	r1, #80	@ 0x50
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fc85 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004a90:	e02c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f000 fc4b 	bl	800533a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2160      	movs	r1, #96	@ 0x60
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fc75 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004ab0:	e01c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 fc0c 	bl	80052dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2140      	movs	r1, #64	@ 0x40
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fc65 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e00c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f000 fc5c 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004ae2:	e003      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae8:	e000      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	00100070 	.word	0x00100070
 8004b0c:	00100060 	.word	0x00100060
 8004b10:	00100050 	.word	0x00100050
 8004b14:	00100040 	.word	0x00100040
 8004b18:	00100030 	.word	0x00100030
 8004b1c:	00100020 	.word	0x00100020

08004b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a4c      	ldr	r2, [pc, #304]	@ (8004c64 <TIM_Base_SetConfig+0x144>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d017      	beq.n	8004b68 <TIM_Base_SetConfig+0x48>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3e:	d013      	beq.n	8004b68 <TIM_Base_SetConfig+0x48>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a49      	ldr	r2, [pc, #292]	@ (8004c68 <TIM_Base_SetConfig+0x148>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00f      	beq.n	8004b68 <TIM_Base_SetConfig+0x48>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a48      	ldr	r2, [pc, #288]	@ (8004c6c <TIM_Base_SetConfig+0x14c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <TIM_Base_SetConfig+0x48>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a47      	ldr	r2, [pc, #284]	@ (8004c70 <TIM_Base_SetConfig+0x150>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d007      	beq.n	8004b68 <TIM_Base_SetConfig+0x48>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a46      	ldr	r2, [pc, #280]	@ (8004c74 <TIM_Base_SetConfig+0x154>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_Base_SetConfig+0x48>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a45      	ldr	r2, [pc, #276]	@ (8004c78 <TIM_Base_SetConfig+0x158>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d108      	bne.n	8004b7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a39      	ldr	r2, [pc, #228]	@ (8004c64 <TIM_Base_SetConfig+0x144>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d023      	beq.n	8004bca <TIM_Base_SetConfig+0xaa>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b88:	d01f      	beq.n	8004bca <TIM_Base_SetConfig+0xaa>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a36      	ldr	r2, [pc, #216]	@ (8004c68 <TIM_Base_SetConfig+0x148>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01b      	beq.n	8004bca <TIM_Base_SetConfig+0xaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a35      	ldr	r2, [pc, #212]	@ (8004c6c <TIM_Base_SetConfig+0x14c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d017      	beq.n	8004bca <TIM_Base_SetConfig+0xaa>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a34      	ldr	r2, [pc, #208]	@ (8004c70 <TIM_Base_SetConfig+0x150>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <TIM_Base_SetConfig+0xaa>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a33      	ldr	r2, [pc, #204]	@ (8004c74 <TIM_Base_SetConfig+0x154>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00f      	beq.n	8004bca <TIM_Base_SetConfig+0xaa>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a33      	ldr	r2, [pc, #204]	@ (8004c7c <TIM_Base_SetConfig+0x15c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <TIM_Base_SetConfig+0xaa>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a32      	ldr	r2, [pc, #200]	@ (8004c80 <TIM_Base_SetConfig+0x160>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_Base_SetConfig+0xaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a31      	ldr	r2, [pc, #196]	@ (8004c84 <TIM_Base_SetConfig+0x164>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_Base_SetConfig+0xaa>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c78 <TIM_Base_SetConfig+0x158>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d108      	bne.n	8004bdc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a18      	ldr	r2, [pc, #96]	@ (8004c64 <TIM_Base_SetConfig+0x144>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <TIM_Base_SetConfig+0x110>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c74 <TIM_Base_SetConfig+0x154>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00f      	beq.n	8004c30 <TIM_Base_SetConfig+0x110>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a1a      	ldr	r2, [pc, #104]	@ (8004c7c <TIM_Base_SetConfig+0x15c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00b      	beq.n	8004c30 <TIM_Base_SetConfig+0x110>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a19      	ldr	r2, [pc, #100]	@ (8004c80 <TIM_Base_SetConfig+0x160>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d007      	beq.n	8004c30 <TIM_Base_SetConfig+0x110>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a18      	ldr	r2, [pc, #96]	@ (8004c84 <TIM_Base_SetConfig+0x164>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_Base_SetConfig+0x110>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a13      	ldr	r2, [pc, #76]	@ (8004c78 <TIM_Base_SetConfig+0x158>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d103      	bne.n	8004c38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f023 0201 	bic.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	611a      	str	r2, [r3, #16]
  }
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40013400 	.word	0x40013400
 8004c78:	40015000 	.word	0x40015000
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800

08004c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f023 0201 	bic.w	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 0302 	bic.w	r3, r3, #2
 8004cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a30      	ldr	r2, [pc, #192]	@ (8004da4 <TIM_OC1_SetConfig+0x11c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <TIM_OC1_SetConfig+0x88>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a2f      	ldr	r2, [pc, #188]	@ (8004da8 <TIM_OC1_SetConfig+0x120>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00f      	beq.n	8004d10 <TIM_OC1_SetConfig+0x88>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a2e      	ldr	r2, [pc, #184]	@ (8004dac <TIM_OC1_SetConfig+0x124>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <TIM_OC1_SetConfig+0x88>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8004db0 <TIM_OC1_SetConfig+0x128>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <TIM_OC1_SetConfig+0x88>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a2c      	ldr	r2, [pc, #176]	@ (8004db4 <TIM_OC1_SetConfig+0x12c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_OC1_SetConfig+0x88>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004db8 <TIM_OC1_SetConfig+0x130>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10c      	bne.n	8004d2a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0308 	bic.w	r3, r3, #8
 8004d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f023 0304 	bic.w	r3, r3, #4
 8004d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004da4 <TIM_OC1_SetConfig+0x11c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <TIM_OC1_SetConfig+0xd2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a1c      	ldr	r2, [pc, #112]	@ (8004da8 <TIM_OC1_SetConfig+0x120>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00f      	beq.n	8004d5a <TIM_OC1_SetConfig+0xd2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dac <TIM_OC1_SetConfig+0x124>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <TIM_OC1_SetConfig+0xd2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1a      	ldr	r2, [pc, #104]	@ (8004db0 <TIM_OC1_SetConfig+0x128>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <TIM_OC1_SetConfig+0xd2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a19      	ldr	r2, [pc, #100]	@ (8004db4 <TIM_OC1_SetConfig+0x12c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_OC1_SetConfig+0xd2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a18      	ldr	r2, [pc, #96]	@ (8004db8 <TIM_OC1_SetConfig+0x130>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d111      	bne.n	8004d7e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	621a      	str	r2, [r3, #32]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40013400 	.word	0x40013400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40014400 	.word	0x40014400
 8004db4:	40014800 	.word	0x40014800
 8004db8:	40015000 	.word	0x40015000

08004dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f023 0210 	bic.w	r2, r3, #16
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0320 	bic.w	r3, r3, #32
 8004e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004ecc <TIM_OC2_SetConfig+0x110>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_OC2_SetConfig+0x74>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed0 <TIM_OC2_SetConfig+0x114>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_OC2_SetConfig+0x74>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed4 <TIM_OC2_SetConfig+0x118>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10d      	bne.n	8004e4c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ecc <TIM_OC2_SetConfig+0x110>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <TIM_OC2_SetConfig+0xc0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed0 <TIM_OC2_SetConfig+0x114>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00f      	beq.n	8004e7c <TIM_OC2_SetConfig+0xc0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed8 <TIM_OC2_SetConfig+0x11c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00b      	beq.n	8004e7c <TIM_OC2_SetConfig+0xc0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1d      	ldr	r2, [pc, #116]	@ (8004edc <TIM_OC2_SetConfig+0x120>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d007      	beq.n	8004e7c <TIM_OC2_SetConfig+0xc0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee0 <TIM_OC2_SetConfig+0x124>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_OC2_SetConfig+0xc0>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a17      	ldr	r2, [pc, #92]	@ (8004ed4 <TIM_OC2_SetConfig+0x118>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d113      	bne.n	8004ea4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40013400 	.word	0x40013400
 8004ed4:	40015000 	.word	0x40015000
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800

08004ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff0 <TIM_OC3_SetConfig+0x10c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d007      	beq.n	8004f56 <TIM_OC3_SetConfig+0x72>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff4 <TIM_OC3_SetConfig+0x110>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d003      	beq.n	8004f56 <TIM_OC3_SetConfig+0x72>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a29      	ldr	r2, [pc, #164]	@ (8004ff8 <TIM_OC3_SetConfig+0x114>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10d      	bne.n	8004f72 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff0 <TIM_OC3_SetConfig+0x10c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <TIM_OC3_SetConfig+0xbe>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff4 <TIM_OC3_SetConfig+0x110>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_OC3_SetConfig+0xbe>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1d      	ldr	r2, [pc, #116]	@ (8004ffc <TIM_OC3_SetConfig+0x118>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_OC3_SetConfig+0xbe>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005000 <TIM_OC3_SetConfig+0x11c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_OC3_SetConfig+0xbe>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a1b      	ldr	r2, [pc, #108]	@ (8005004 <TIM_OC3_SetConfig+0x120>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_OC3_SetConfig+0xbe>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a16      	ldr	r2, [pc, #88]	@ (8004ff8 <TIM_OC3_SetConfig+0x114>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d113      	bne.n	8004fca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	40013400 	.word	0x40013400
 8004ff8:	40015000 	.word	0x40015000
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40014400 	.word	0x40014400
 8005004:	40014800 	.word	0x40014800

08005008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	031b      	lsls	r3, r3, #12
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a2c      	ldr	r2, [pc, #176]	@ (8005118 <TIM_OC4_SetConfig+0x110>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d007      	beq.n	800507c <TIM_OC4_SetConfig+0x74>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a2b      	ldr	r2, [pc, #172]	@ (800511c <TIM_OC4_SetConfig+0x114>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d003      	beq.n	800507c <TIM_OC4_SetConfig+0x74>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a2a      	ldr	r2, [pc, #168]	@ (8005120 <TIM_OC4_SetConfig+0x118>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d10d      	bne.n	8005098 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	031b      	lsls	r3, r3, #12
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005096:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a1f      	ldr	r2, [pc, #124]	@ (8005118 <TIM_OC4_SetConfig+0x110>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <TIM_OC4_SetConfig+0xc0>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a1e      	ldr	r2, [pc, #120]	@ (800511c <TIM_OC4_SetConfig+0x114>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00f      	beq.n	80050c8 <TIM_OC4_SetConfig+0xc0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005124 <TIM_OC4_SetConfig+0x11c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <TIM_OC4_SetConfig+0xc0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005128 <TIM_OC4_SetConfig+0x120>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <TIM_OC4_SetConfig+0xc0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a1c      	ldr	r2, [pc, #112]	@ (800512c <TIM_OC4_SetConfig+0x124>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_OC4_SetConfig+0xc0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a17      	ldr	r2, [pc, #92]	@ (8005120 <TIM_OC4_SetConfig+0x118>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d113      	bne.n	80050f0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	019b      	lsls	r3, r3, #6
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	019b      	lsls	r3, r3, #6
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40013400 	.word	0x40013400
 8005120:	40015000 	.word	0x40015000
 8005124:	40014000 	.word	0x40014000
 8005128:	40014400 	.word	0x40014400
 800512c:	40014800 	.word	0x40014800

08005130 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800515e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005174:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	041b      	lsls	r3, r3, #16
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <TIM_OC5_SetConfig+0xbc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <TIM_OC5_SetConfig+0x82>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a18      	ldr	r2, [pc, #96]	@ (80051f0 <TIM_OC5_SetConfig+0xc0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_OC5_SetConfig+0x82>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a17      	ldr	r2, [pc, #92]	@ (80051f4 <TIM_OC5_SetConfig+0xc4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_OC5_SetConfig+0x82>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a16      	ldr	r2, [pc, #88]	@ (80051f8 <TIM_OC5_SetConfig+0xc8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC5_SetConfig+0x82>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a15      	ldr	r2, [pc, #84]	@ (80051fc <TIM_OC5_SetConfig+0xcc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC5_SetConfig+0x82>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a14      	ldr	r2, [pc, #80]	@ (8005200 <TIM_OC5_SetConfig+0xd0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d109      	bne.n	80051c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40013400 	.word	0x40013400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800
 8005200:	40015000 	.word	0x40015000

08005204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800524a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	051b      	lsls	r3, r3, #20
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a1a      	ldr	r2, [pc, #104]	@ (80052c4 <TIM_OC6_SetConfig+0xc0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <TIM_OC6_SetConfig+0x84>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a19      	ldr	r2, [pc, #100]	@ (80052c8 <TIM_OC6_SetConfig+0xc4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00f      	beq.n	8005288 <TIM_OC6_SetConfig+0x84>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a18      	ldr	r2, [pc, #96]	@ (80052cc <TIM_OC6_SetConfig+0xc8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00b      	beq.n	8005288 <TIM_OC6_SetConfig+0x84>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a17      	ldr	r2, [pc, #92]	@ (80052d0 <TIM_OC6_SetConfig+0xcc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d007      	beq.n	8005288 <TIM_OC6_SetConfig+0x84>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a16      	ldr	r2, [pc, #88]	@ (80052d4 <TIM_OC6_SetConfig+0xd0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_OC6_SetConfig+0x84>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a15      	ldr	r2, [pc, #84]	@ (80052d8 <TIM_OC6_SetConfig+0xd4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d109      	bne.n	800529c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800528e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	029b      	lsls	r3, r3, #10
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40013400 	.word	0x40013400
 80052cc:	40014000 	.word	0x40014000
 80052d0:	40014400 	.word	0x40014400
 80052d4:	40014800 	.word	0x40014800
 80052d8:	40015000 	.word	0x40015000

080052dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f023 030a 	bic.w	r3, r3, #10
 8005318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800533a:	b480      	push	{r7}
 800533c:	b087      	sub	sp, #28
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f023 0210 	bic.w	r2, r3, #16
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	031b      	lsls	r3, r3, #12
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005376:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80053b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f043 0307 	orr.w	r3, r3, #7
 80053c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	021a      	lsls	r2, r3, #8
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	609a      	str	r2, [r3, #8]
}
 8005408:	bf00      	nop
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005428:	2302      	movs	r3, #2
 800542a:	e074      	b.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a34      	ldr	r2, [pc, #208]	@ (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a33      	ldr	r2, [pc, #204]	@ (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a31      	ldr	r2, [pc, #196]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d108      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005470:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a21      	ldr	r2, [pc, #132]	@ (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d022      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ac:	d01d      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d018      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00e      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a15      	ldr	r2, [pc, #84]	@ (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d009      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a18      	ldr	r2, [pc, #96]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a11      	ldr	r2, [pc, #68]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d10c      	bne.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40013400 	.word	0x40013400
 800552c:	40015000 	.word	0x40015000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40014000 	.word	0x40014000

08005540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e042      	b.n	80055d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fb fcad 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2224      	movs	r2, #36	@ 0x24
 800556e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fbb2 	bl	8005cf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f8b3 	bl	80056fc <UART_SetConfig>
 8005596:	4603      	mov	r3, r0
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e01b      	b.n	80055d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fc31 	bl	8005e38 <UART_CheckIdleState>
 80055d6:	4603      	mov	r3, r0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	@ 0x28
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	4613      	mov	r3, r2
 80055ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d17b      	bne.n	80056f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_UART_Transmit+0x26>
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e074      	b.n	80056f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2221      	movs	r2, #33	@ 0x21
 8005616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800561a:	f7fc fbd7 	bl	8001dcc <HAL_GetTick>
 800561e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005638:	d108      	bne.n	800564c <HAL_UART_Transmit+0x6c>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e003      	b.n	8005654 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005654:	e030      	b.n	80056b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	2180      	movs	r1, #128	@ 0x80
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 fc93 	bl	8005f8c <UART_WaitOnFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e03d      	b.n	80056f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10b      	bne.n	8005696 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800568c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	3302      	adds	r3, #2
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	e007      	b.n	80056a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	781a      	ldrb	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1c8      	bne.n	8005656 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	2140      	movs	r1, #64	@ 0x40
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fc5c 	bl	8005f8c <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e006      	b.n	80056f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e000      	b.n	80056f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
  }
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005700:	b08c      	sub	sp, #48	@ 0x30
 8005702:	af00      	add	r7, sp, #0
 8005704:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	431a      	orrs	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	431a      	orrs	r2, r3
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	4313      	orrs	r3, r2
 8005722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4baa      	ldr	r3, [pc, #680]	@ (80059d4 <UART_SetConfig+0x2d8>)
 800572c:	4013      	ands	r3, r2
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	6812      	ldr	r2, [r2, #0]
 8005732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005734:	430b      	orrs	r3, r1
 8005736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a9f      	ldr	r2, [pc, #636]	@ (80059d8 <UART_SetConfig+0x2dc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005764:	4313      	orrs	r3, r2
 8005766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005772:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800577c:	430b      	orrs	r3, r1
 800577e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005786:	f023 010f 	bic.w	r1, r3, #15
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a90      	ldr	r2, [pc, #576]	@ (80059dc <UART_SetConfig+0x2e0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d125      	bne.n	80057ec <UART_SetConfig+0xf0>
 80057a0:	4b8f      	ldr	r3, [pc, #572]	@ (80059e0 <UART_SetConfig+0x2e4>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d81a      	bhi.n	80057e4 <UART_SetConfig+0xe8>
 80057ae:	a201      	add	r2, pc, #4	@ (adr r2, 80057b4 <UART_SetConfig+0xb8>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057c5 	.word	0x080057c5
 80057b8:	080057d5 	.word	0x080057d5
 80057bc:	080057cd 	.word	0x080057cd
 80057c0:	080057dd 	.word	0x080057dd
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ca:	e116      	b.n	80059fa <UART_SetConfig+0x2fe>
 80057cc:	2302      	movs	r3, #2
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d2:	e112      	b.n	80059fa <UART_SetConfig+0x2fe>
 80057d4:	2304      	movs	r3, #4
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057da:	e10e      	b.n	80059fa <UART_SetConfig+0x2fe>
 80057dc:	2308      	movs	r3, #8
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e2:	e10a      	b.n	80059fa <UART_SetConfig+0x2fe>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ea:	e106      	b.n	80059fa <UART_SetConfig+0x2fe>
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a7c      	ldr	r2, [pc, #496]	@ (80059e4 <UART_SetConfig+0x2e8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d138      	bne.n	8005868 <UART_SetConfig+0x16c>
 80057f6:	4b7a      	ldr	r3, [pc, #488]	@ (80059e0 <UART_SetConfig+0x2e4>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fc:	f003 030c 	and.w	r3, r3, #12
 8005800:	2b0c      	cmp	r3, #12
 8005802:	d82d      	bhi.n	8005860 <UART_SetConfig+0x164>
 8005804:	a201      	add	r2, pc, #4	@ (adr r2, 800580c <UART_SetConfig+0x110>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	08005841 	.word	0x08005841
 8005810:	08005861 	.word	0x08005861
 8005814:	08005861 	.word	0x08005861
 8005818:	08005861 	.word	0x08005861
 800581c:	08005851 	.word	0x08005851
 8005820:	08005861 	.word	0x08005861
 8005824:	08005861 	.word	0x08005861
 8005828:	08005861 	.word	0x08005861
 800582c:	08005849 	.word	0x08005849
 8005830:	08005861 	.word	0x08005861
 8005834:	08005861 	.word	0x08005861
 8005838:	08005861 	.word	0x08005861
 800583c:	08005859 	.word	0x08005859
 8005840:	2300      	movs	r3, #0
 8005842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005846:	e0d8      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005848:	2302      	movs	r3, #2
 800584a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584e:	e0d4      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005856:	e0d0      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585e:	e0cc      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005866:	e0c8      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a5e      	ldr	r2, [pc, #376]	@ (80059e8 <UART_SetConfig+0x2ec>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d125      	bne.n	80058be <UART_SetConfig+0x1c2>
 8005872:	4b5b      	ldr	r3, [pc, #364]	@ (80059e0 <UART_SetConfig+0x2e4>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005878:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800587c:	2b30      	cmp	r3, #48	@ 0x30
 800587e:	d016      	beq.n	80058ae <UART_SetConfig+0x1b2>
 8005880:	2b30      	cmp	r3, #48	@ 0x30
 8005882:	d818      	bhi.n	80058b6 <UART_SetConfig+0x1ba>
 8005884:	2b20      	cmp	r3, #32
 8005886:	d00a      	beq.n	800589e <UART_SetConfig+0x1a2>
 8005888:	2b20      	cmp	r3, #32
 800588a:	d814      	bhi.n	80058b6 <UART_SetConfig+0x1ba>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <UART_SetConfig+0x19a>
 8005890:	2b10      	cmp	r3, #16
 8005892:	d008      	beq.n	80058a6 <UART_SetConfig+0x1aa>
 8005894:	e00f      	b.n	80058b6 <UART_SetConfig+0x1ba>
 8005896:	2300      	movs	r3, #0
 8005898:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800589c:	e0ad      	b.n	80059fa <UART_SetConfig+0x2fe>
 800589e:	2302      	movs	r3, #2
 80058a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a4:	e0a9      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058a6:	2304      	movs	r3, #4
 80058a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ac:	e0a5      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058ae:	2308      	movs	r3, #8
 80058b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058b4:	e0a1      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058b6:	2310      	movs	r3, #16
 80058b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058bc:	e09d      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a4a      	ldr	r2, [pc, #296]	@ (80059ec <UART_SetConfig+0x2f0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d125      	bne.n	8005914 <UART_SetConfig+0x218>
 80058c8:	4b45      	ldr	r3, [pc, #276]	@ (80059e0 <UART_SetConfig+0x2e4>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80058d4:	d016      	beq.n	8005904 <UART_SetConfig+0x208>
 80058d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80058d8:	d818      	bhi.n	800590c <UART_SetConfig+0x210>
 80058da:	2b80      	cmp	r3, #128	@ 0x80
 80058dc:	d00a      	beq.n	80058f4 <UART_SetConfig+0x1f8>
 80058de:	2b80      	cmp	r3, #128	@ 0x80
 80058e0:	d814      	bhi.n	800590c <UART_SetConfig+0x210>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <UART_SetConfig+0x1f0>
 80058e6:	2b40      	cmp	r3, #64	@ 0x40
 80058e8:	d008      	beq.n	80058fc <UART_SetConfig+0x200>
 80058ea:	e00f      	b.n	800590c <UART_SetConfig+0x210>
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f2:	e082      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058f4:	2302      	movs	r3, #2
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fa:	e07e      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058fc:	2304      	movs	r3, #4
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005902:	e07a      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005904:	2308      	movs	r3, #8
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590a:	e076      	b.n	80059fa <UART_SetConfig+0x2fe>
 800590c:	2310      	movs	r3, #16
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005912:	e072      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a35      	ldr	r2, [pc, #212]	@ (80059f0 <UART_SetConfig+0x2f4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d12a      	bne.n	8005974 <UART_SetConfig+0x278>
 800591e:	4b30      	ldr	r3, [pc, #192]	@ (80059e0 <UART_SetConfig+0x2e4>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005924:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005928:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800592c:	d01a      	beq.n	8005964 <UART_SetConfig+0x268>
 800592e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005932:	d81b      	bhi.n	800596c <UART_SetConfig+0x270>
 8005934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005938:	d00c      	beq.n	8005954 <UART_SetConfig+0x258>
 800593a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800593e:	d815      	bhi.n	800596c <UART_SetConfig+0x270>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <UART_SetConfig+0x250>
 8005944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005948:	d008      	beq.n	800595c <UART_SetConfig+0x260>
 800594a:	e00f      	b.n	800596c <UART_SetConfig+0x270>
 800594c:	2300      	movs	r3, #0
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005952:	e052      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005954:	2302      	movs	r3, #2
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800595a:	e04e      	b.n	80059fa <UART_SetConfig+0x2fe>
 800595c:	2304      	movs	r3, #4
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005962:	e04a      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005964:	2308      	movs	r3, #8
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596a:	e046      	b.n	80059fa <UART_SetConfig+0x2fe>
 800596c:	2310      	movs	r3, #16
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005972:	e042      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a17      	ldr	r2, [pc, #92]	@ (80059d8 <UART_SetConfig+0x2dc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d13a      	bne.n	80059f4 <UART_SetConfig+0x2f8>
 800597e:	4b18      	ldr	r3, [pc, #96]	@ (80059e0 <UART_SetConfig+0x2e4>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005984:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005988:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800598c:	d01a      	beq.n	80059c4 <UART_SetConfig+0x2c8>
 800598e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005992:	d81b      	bhi.n	80059cc <UART_SetConfig+0x2d0>
 8005994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005998:	d00c      	beq.n	80059b4 <UART_SetConfig+0x2b8>
 800599a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800599e:	d815      	bhi.n	80059cc <UART_SetConfig+0x2d0>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <UART_SetConfig+0x2b0>
 80059a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a8:	d008      	beq.n	80059bc <UART_SetConfig+0x2c0>
 80059aa:	e00f      	b.n	80059cc <UART_SetConfig+0x2d0>
 80059ac:	2300      	movs	r3, #0
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059b2:	e022      	b.n	80059fa <UART_SetConfig+0x2fe>
 80059b4:	2302      	movs	r3, #2
 80059b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ba:	e01e      	b.n	80059fa <UART_SetConfig+0x2fe>
 80059bc:	2304      	movs	r3, #4
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c2:	e01a      	b.n	80059fa <UART_SetConfig+0x2fe>
 80059c4:	2308      	movs	r3, #8
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ca:	e016      	b.n	80059fa <UART_SetConfig+0x2fe>
 80059cc:	2310      	movs	r3, #16
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059d2:	e012      	b.n	80059fa <UART_SetConfig+0x2fe>
 80059d4:	cfff69f3 	.word	0xcfff69f3
 80059d8:	40008000 	.word	0x40008000
 80059dc:	40013800 	.word	0x40013800
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40004400 	.word	0x40004400
 80059e8:	40004800 	.word	0x40004800
 80059ec:	40004c00 	.word	0x40004c00
 80059f0:	40005000 	.word	0x40005000
 80059f4:	2310      	movs	r3, #16
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4aae      	ldr	r2, [pc, #696]	@ (8005cb8 <UART_SetConfig+0x5bc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	f040 8097 	bne.w	8005b34 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d823      	bhi.n	8005a56 <UART_SetConfig+0x35a>
 8005a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <UART_SetConfig+0x318>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a39 	.word	0x08005a39
 8005a18:	08005a57 	.word	0x08005a57
 8005a1c:	08005a41 	.word	0x08005a41
 8005a20:	08005a57 	.word	0x08005a57
 8005a24:	08005a47 	.word	0x08005a47
 8005a28:	08005a57 	.word	0x08005a57
 8005a2c:	08005a57 	.word	0x08005a57
 8005a30:	08005a57 	.word	0x08005a57
 8005a34:	08005a4f 	.word	0x08005a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a38:	f7fe fad0 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8005a3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a3e:	e010      	b.n	8005a62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a40:	4b9e      	ldr	r3, [pc, #632]	@ (8005cbc <UART_SetConfig+0x5c0>)
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a44:	e00d      	b.n	8005a62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a46:	f7fe fa5b 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8005a4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a4c:	e009      	b.n	8005a62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a54:	e005      	b.n	8005a62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8130 	beq.w	8005cca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	4a94      	ldr	r2, [pc, #592]	@ (8005cc0 <UART_SetConfig+0x5c4>)
 8005a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a74:	461a      	mov	r2, r3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d305      	bcc.n	8005a9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d903      	bls.n	8005aa2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005aa0:	e113      	b.n	8005cca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	60fa      	str	r2, [r7, #12]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aae:	4a84      	ldr	r2, [pc, #528]	@ (8005cc0 <UART_SetConfig+0x5c4>)
 8005ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ac4:	f7fa fbfc 	bl	80002c0 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4610      	mov	r0, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	020b      	lsls	r3, r1, #8
 8005ada:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ade:	0202      	lsls	r2, r0, #8
 8005ae0:	6979      	ldr	r1, [r7, #20]
 8005ae2:	6849      	ldr	r1, [r1, #4]
 8005ae4:	0849      	lsrs	r1, r1, #1
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	460c      	mov	r4, r1
 8005aea:	4605      	mov	r5, r0
 8005aec:	eb12 0804 	adds.w	r8, r2, r4
 8005af0:	eb43 0905 	adc.w	r9, r3, r5
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	469a      	mov	sl, r3
 8005afc:	4693      	mov	fp, r2
 8005afe:	4652      	mov	r2, sl
 8005b00:	465b      	mov	r3, fp
 8005b02:	4640      	mov	r0, r8
 8005b04:	4649      	mov	r1, r9
 8005b06:	f7fa fbdb 	bl	80002c0 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4613      	mov	r3, r2
 8005b10:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b18:	d308      	bcc.n	8005b2c <UART_SetConfig+0x430>
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b20:	d204      	bcs.n	8005b2c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	60da      	str	r2, [r3, #12]
 8005b2a:	e0ce      	b.n	8005cca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b32:	e0ca      	b.n	8005cca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b3c:	d166      	bne.n	8005c0c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d827      	bhi.n	8005b96 <UART_SetConfig+0x49a>
 8005b46:	a201      	add	r2, pc, #4	@ (adr r2, 8005b4c <UART_SetConfig+0x450>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	08005b97 	.word	0x08005b97
 8005b5c:	08005b87 	.word	0x08005b87
 8005b60:	08005b97 	.word	0x08005b97
 8005b64:	08005b97 	.word	0x08005b97
 8005b68:	08005b97 	.word	0x08005b97
 8005b6c:	08005b8f 	.word	0x08005b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fe fa34 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8005b74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b76:	e014      	b.n	8005ba2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7fe fa46 	bl	8004008 <HAL_RCC_GetPCLK2Freq>
 8005b7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b7e:	e010      	b.n	8005ba2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b80:	4b4e      	ldr	r3, [pc, #312]	@ (8005cbc <UART_SetConfig+0x5c0>)
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b84:	e00d      	b.n	8005ba2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b86:	f7fe f9bb 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8005b8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b8c:	e009      	b.n	8005ba2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b94:	e005      	b.n	8005ba2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8090 	beq.w	8005cca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	4a44      	ldr	r2, [pc, #272]	@ (8005cc0 <UART_SetConfig+0x5c4>)
 8005bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bbc:	005a      	lsls	r2, r3, #1
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	441a      	add	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	2b0f      	cmp	r3, #15
 8005bd4:	d916      	bls.n	8005c04 <UART_SetConfig+0x508>
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bdc:	d212      	bcs.n	8005c04 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f023 030f 	bic.w	r3, r3, #15
 8005be6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	8bfb      	ldrh	r3, [r7, #30]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	8bfa      	ldrh	r2, [r7, #30]
 8005c00:	60da      	str	r2, [r3, #12]
 8005c02:	e062      	b.n	8005cca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c0a:	e05e      	b.n	8005cca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d828      	bhi.n	8005c66 <UART_SetConfig+0x56a>
 8005c14:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <UART_SetConfig+0x520>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c51 	.word	0x08005c51
 8005c28:	08005c67 	.word	0x08005c67
 8005c2c:	08005c57 	.word	0x08005c57
 8005c30:	08005c67 	.word	0x08005c67
 8005c34:	08005c67 	.word	0x08005c67
 8005c38:	08005c67 	.word	0x08005c67
 8005c3c:	08005c5f 	.word	0x08005c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe f9cc 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8005c44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c46:	e014      	b.n	8005c72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c48:	f7fe f9de 	bl	8004008 <HAL_RCC_GetPCLK2Freq>
 8005c4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c4e:	e010      	b.n	8005c72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c50:	4b1a      	ldr	r3, [pc, #104]	@ (8005cbc <UART_SetConfig+0x5c0>)
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c54:	e00d      	b.n	8005c72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c56:	f7fe f953 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8005c5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c5c:	e009      	b.n	8005c72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c64:	e005      	b.n	8005c72 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c70:	bf00      	nop
    }

    if (pclk != 0U)
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d028      	beq.n	8005cca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	4a10      	ldr	r2, [pc, #64]	@ (8005cc0 <UART_SetConfig+0x5c4>)
 8005c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	441a      	add	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b0f      	cmp	r3, #15
 8005ca0:	d910      	bls.n	8005cc4 <UART_SetConfig+0x5c8>
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca8:	d20c      	bcs.n	8005cc4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	e009      	b.n	8005cca <UART_SetConfig+0x5ce>
 8005cb6:	bf00      	nop
 8005cb8:	40008000 	.word	0x40008000
 8005cbc:	00f42400 	.word	0x00f42400
 8005cc0:	080072f0 	.word	0x080072f0
      }
      else
      {
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005ce6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3730      	adds	r7, #48	@ 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005cf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01a      	beq.n	8005e0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df2:	d10a      	bne.n	8005e0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	605a      	str	r2, [r3, #4]
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b098      	sub	sp, #96	@ 0x60
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e48:	f7fb ffc0 	bl	8001dcc <HAL_GetTick>
 8005e4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d12f      	bne.n	8005ebc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e64:	2200      	movs	r2, #0
 8005e66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f88e 	bl	8005f8c <UART_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d022      	beq.n	8005ebc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e6      	bne.n	8005e76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e063      	b.n	8005f84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d149      	bne.n	8005f5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f857 	bl	8005f8c <UART_WaitOnFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d03c      	beq.n	8005f5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e6      	bne.n	8005ee4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	e853 3f00 	ldrex	r3, [r3]
 8005f24:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3308      	adds	r3, #8
 8005f34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f36:	61fa      	str	r2, [r7, #28]
 8005f38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	69b9      	ldr	r1, [r7, #24]
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	617b      	str	r3, [r7, #20]
   return(result);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e5      	bne.n	8005f16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e012      	b.n	8005f84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3758      	adds	r7, #88	@ 0x58
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9c:	e04f      	b.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d04b      	beq.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa6:	f7fb ff11 	bl	8001dcc <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d302      	bcc.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e04e      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d037      	beq.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b80      	cmp	r3, #128	@ 0x80
 8005fd2:	d034      	beq.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b40      	cmp	r3, #64	@ 0x40
 8005fd8:	d031      	beq.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d110      	bne.n	800600a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2208      	movs	r2, #8
 8005fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f838 	bl	8006066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e029      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006018:	d111      	bne.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f81e 	bl	8006066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e00f      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69da      	ldr	r2, [r3, #28]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4013      	ands	r3, r2
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	461a      	mov	r2, r3
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	429a      	cmp	r2, r3
 800605a:	d0a0      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006066:	b480      	push	{r7}
 8006068:	b095      	sub	sp, #84	@ 0x54
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800608c:	643b      	str	r3, [r7, #64]	@ 0x40
 800608e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800609a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e6      	bne.n	800606e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3308      	adds	r3, #8
 80060a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3308      	adds	r3, #8
 80060c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e3      	bne.n	80060a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d118      	bne.n	8006112 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f023 0310 	bic.w	r3, r3, #16
 80060f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6979      	ldr	r1, [r7, #20]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	613b      	str	r3, [r7, #16]
   return(result);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e6      	bne.n	80060e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006126:	bf00      	nop
 8006128:	3754      	adds	r7, #84	@ 0x54
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_UARTEx_DisableFifoMode+0x16>
 8006144:	2302      	movs	r3, #2
 8006146:	e027      	b.n	8006198 <HAL_UARTEx_DisableFifoMode+0x66>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2224      	movs	r2, #36	@ 0x24
 8006154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006176:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e02d      	b.n	8006218 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2224      	movs	r2, #36	@ 0x24
 80061c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0201 	bic.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f84f 	bl	800629c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006234:	2302      	movs	r3, #2
 8006236:	e02d      	b.n	8006294 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2224      	movs	r2, #36	@ 0x24
 8006244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0201 	bic.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f811 	bl	800629c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d108      	bne.n	80062be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062bc:	e031      	b.n	8006322 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062be:	2308      	movs	r3, #8
 80062c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062c2:	2308      	movs	r3, #8
 80062c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	0e5b      	lsrs	r3, r3, #25
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	0f5b      	lsrs	r3, r3, #29
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062e6:	7bbb      	ldrb	r3, [r7, #14]
 80062e8:	7b3a      	ldrb	r2, [r7, #12]
 80062ea:	4911      	ldr	r1, [pc, #68]	@ (8006330 <UARTEx_SetNbDataToProcess+0x94>)
 80062ec:	5c8a      	ldrb	r2, [r1, r2]
 80062ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062f2:	7b3a      	ldrb	r2, [r7, #12]
 80062f4:	490f      	ldr	r1, [pc, #60]	@ (8006334 <UARTEx_SetNbDataToProcess+0x98>)
 80062f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	7b7a      	ldrb	r2, [r7, #13]
 8006308:	4909      	ldr	r1, [pc, #36]	@ (8006330 <UARTEx_SetNbDataToProcess+0x94>)
 800630a:	5c8a      	ldrb	r2, [r1, r2]
 800630c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006310:	7b7a      	ldrb	r2, [r7, #13]
 8006312:	4908      	ldr	r1, [pc, #32]	@ (8006334 <UARTEx_SetNbDataToProcess+0x98>)
 8006314:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006316:	fb93 f3f2 	sdiv	r3, r3, r2
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	08007308 	.word	0x08007308
 8006334:	08007310 	.word	0x08007310

08006338 <std>:
 8006338:	2300      	movs	r3, #0
 800633a:	b510      	push	{r4, lr}
 800633c:	4604      	mov	r4, r0
 800633e:	e9c0 3300 	strd	r3, r3, [r0]
 8006342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006346:	6083      	str	r3, [r0, #8]
 8006348:	8181      	strh	r1, [r0, #12]
 800634a:	6643      	str	r3, [r0, #100]	@ 0x64
 800634c:	81c2      	strh	r2, [r0, #14]
 800634e:	6183      	str	r3, [r0, #24]
 8006350:	4619      	mov	r1, r3
 8006352:	2208      	movs	r2, #8
 8006354:	305c      	adds	r0, #92	@ 0x5c
 8006356:	f000 f9f9 	bl	800674c <memset>
 800635a:	4b0d      	ldr	r3, [pc, #52]	@ (8006390 <std+0x58>)
 800635c:	6263      	str	r3, [r4, #36]	@ 0x24
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <std+0x5c>)
 8006360:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006362:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <std+0x60>)
 8006364:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006366:	4b0d      	ldr	r3, [pc, #52]	@ (800639c <std+0x64>)
 8006368:	6323      	str	r3, [r4, #48]	@ 0x30
 800636a:	4b0d      	ldr	r3, [pc, #52]	@ (80063a0 <std+0x68>)
 800636c:	6224      	str	r4, [r4, #32]
 800636e:	429c      	cmp	r4, r3
 8006370:	d006      	beq.n	8006380 <std+0x48>
 8006372:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006376:	4294      	cmp	r4, r2
 8006378:	d002      	beq.n	8006380 <std+0x48>
 800637a:	33d0      	adds	r3, #208	@ 0xd0
 800637c:	429c      	cmp	r4, r3
 800637e:	d105      	bne.n	800638c <std+0x54>
 8006380:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006388:	f000 ba58 	b.w	800683c <__retarget_lock_init_recursive>
 800638c:	bd10      	pop	{r4, pc}
 800638e:	bf00      	nop
 8006390:	0800659d 	.word	0x0800659d
 8006394:	080065bf 	.word	0x080065bf
 8006398:	080065f7 	.word	0x080065f7
 800639c:	0800661b 	.word	0x0800661b
 80063a0:	200002c4 	.word	0x200002c4

080063a4 <stdio_exit_handler>:
 80063a4:	4a02      	ldr	r2, [pc, #8]	@ (80063b0 <stdio_exit_handler+0xc>)
 80063a6:	4903      	ldr	r1, [pc, #12]	@ (80063b4 <stdio_exit_handler+0x10>)
 80063a8:	4803      	ldr	r0, [pc, #12]	@ (80063b8 <stdio_exit_handler+0x14>)
 80063aa:	f000 b869 	b.w	8006480 <_fwalk_sglue>
 80063ae:	bf00      	nop
 80063b0:	2000000c 	.word	0x2000000c
 80063b4:	080070dd 	.word	0x080070dd
 80063b8:	2000001c 	.word	0x2000001c

080063bc <cleanup_stdio>:
 80063bc:	6841      	ldr	r1, [r0, #4]
 80063be:	4b0c      	ldr	r3, [pc, #48]	@ (80063f0 <cleanup_stdio+0x34>)
 80063c0:	4299      	cmp	r1, r3
 80063c2:	b510      	push	{r4, lr}
 80063c4:	4604      	mov	r4, r0
 80063c6:	d001      	beq.n	80063cc <cleanup_stdio+0x10>
 80063c8:	f000 fe88 	bl	80070dc <_fflush_r>
 80063cc:	68a1      	ldr	r1, [r4, #8]
 80063ce:	4b09      	ldr	r3, [pc, #36]	@ (80063f4 <cleanup_stdio+0x38>)
 80063d0:	4299      	cmp	r1, r3
 80063d2:	d002      	beq.n	80063da <cleanup_stdio+0x1e>
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 fe81 	bl	80070dc <_fflush_r>
 80063da:	68e1      	ldr	r1, [r4, #12]
 80063dc:	4b06      	ldr	r3, [pc, #24]	@ (80063f8 <cleanup_stdio+0x3c>)
 80063de:	4299      	cmp	r1, r3
 80063e0:	d004      	beq.n	80063ec <cleanup_stdio+0x30>
 80063e2:	4620      	mov	r0, r4
 80063e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e8:	f000 be78 	b.w	80070dc <_fflush_r>
 80063ec:	bd10      	pop	{r4, pc}
 80063ee:	bf00      	nop
 80063f0:	200002c4 	.word	0x200002c4
 80063f4:	2000032c 	.word	0x2000032c
 80063f8:	20000394 	.word	0x20000394

080063fc <global_stdio_init.part.0>:
 80063fc:	b510      	push	{r4, lr}
 80063fe:	4b0b      	ldr	r3, [pc, #44]	@ (800642c <global_stdio_init.part.0+0x30>)
 8006400:	4c0b      	ldr	r4, [pc, #44]	@ (8006430 <global_stdio_init.part.0+0x34>)
 8006402:	4a0c      	ldr	r2, [pc, #48]	@ (8006434 <global_stdio_init.part.0+0x38>)
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	4620      	mov	r0, r4
 8006408:	2200      	movs	r2, #0
 800640a:	2104      	movs	r1, #4
 800640c:	f7ff ff94 	bl	8006338 <std>
 8006410:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006414:	2201      	movs	r2, #1
 8006416:	2109      	movs	r1, #9
 8006418:	f7ff ff8e 	bl	8006338 <std>
 800641c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006420:	2202      	movs	r2, #2
 8006422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006426:	2112      	movs	r1, #18
 8006428:	f7ff bf86 	b.w	8006338 <std>
 800642c:	200003fc 	.word	0x200003fc
 8006430:	200002c4 	.word	0x200002c4
 8006434:	080063a5 	.word	0x080063a5

08006438 <__sfp_lock_acquire>:
 8006438:	4801      	ldr	r0, [pc, #4]	@ (8006440 <__sfp_lock_acquire+0x8>)
 800643a:	f000 ba00 	b.w	800683e <__retarget_lock_acquire_recursive>
 800643e:	bf00      	nop
 8006440:	20000405 	.word	0x20000405

08006444 <__sfp_lock_release>:
 8006444:	4801      	ldr	r0, [pc, #4]	@ (800644c <__sfp_lock_release+0x8>)
 8006446:	f000 b9fb 	b.w	8006840 <__retarget_lock_release_recursive>
 800644a:	bf00      	nop
 800644c:	20000405 	.word	0x20000405

08006450 <__sinit>:
 8006450:	b510      	push	{r4, lr}
 8006452:	4604      	mov	r4, r0
 8006454:	f7ff fff0 	bl	8006438 <__sfp_lock_acquire>
 8006458:	6a23      	ldr	r3, [r4, #32]
 800645a:	b11b      	cbz	r3, 8006464 <__sinit+0x14>
 800645c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006460:	f7ff bff0 	b.w	8006444 <__sfp_lock_release>
 8006464:	4b04      	ldr	r3, [pc, #16]	@ (8006478 <__sinit+0x28>)
 8006466:	6223      	str	r3, [r4, #32]
 8006468:	4b04      	ldr	r3, [pc, #16]	@ (800647c <__sinit+0x2c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f5      	bne.n	800645c <__sinit+0xc>
 8006470:	f7ff ffc4 	bl	80063fc <global_stdio_init.part.0>
 8006474:	e7f2      	b.n	800645c <__sinit+0xc>
 8006476:	bf00      	nop
 8006478:	080063bd 	.word	0x080063bd
 800647c:	200003fc 	.word	0x200003fc

08006480 <_fwalk_sglue>:
 8006480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006484:	4607      	mov	r7, r0
 8006486:	4688      	mov	r8, r1
 8006488:	4614      	mov	r4, r2
 800648a:	2600      	movs	r6, #0
 800648c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006490:	f1b9 0901 	subs.w	r9, r9, #1
 8006494:	d505      	bpl.n	80064a2 <_fwalk_sglue+0x22>
 8006496:	6824      	ldr	r4, [r4, #0]
 8006498:	2c00      	cmp	r4, #0
 800649a:	d1f7      	bne.n	800648c <_fwalk_sglue+0xc>
 800649c:	4630      	mov	r0, r6
 800649e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a2:	89ab      	ldrh	r3, [r5, #12]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d907      	bls.n	80064b8 <_fwalk_sglue+0x38>
 80064a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064ac:	3301      	adds	r3, #1
 80064ae:	d003      	beq.n	80064b8 <_fwalk_sglue+0x38>
 80064b0:	4629      	mov	r1, r5
 80064b2:	4638      	mov	r0, r7
 80064b4:	47c0      	blx	r8
 80064b6:	4306      	orrs	r6, r0
 80064b8:	3568      	adds	r5, #104	@ 0x68
 80064ba:	e7e9      	b.n	8006490 <_fwalk_sglue+0x10>

080064bc <iprintf>:
 80064bc:	b40f      	push	{r0, r1, r2, r3}
 80064be:	b507      	push	{r0, r1, r2, lr}
 80064c0:	4906      	ldr	r1, [pc, #24]	@ (80064dc <iprintf+0x20>)
 80064c2:	ab04      	add	r3, sp, #16
 80064c4:	6808      	ldr	r0, [r1, #0]
 80064c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ca:	6881      	ldr	r1, [r0, #8]
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	f000 fadb 	bl	8006a88 <_vfiprintf_r>
 80064d2:	b003      	add	sp, #12
 80064d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d8:	b004      	add	sp, #16
 80064da:	4770      	bx	lr
 80064dc:	20000018 	.word	0x20000018

080064e0 <_puts_r>:
 80064e0:	6a03      	ldr	r3, [r0, #32]
 80064e2:	b570      	push	{r4, r5, r6, lr}
 80064e4:	6884      	ldr	r4, [r0, #8]
 80064e6:	4605      	mov	r5, r0
 80064e8:	460e      	mov	r6, r1
 80064ea:	b90b      	cbnz	r3, 80064f0 <_puts_r+0x10>
 80064ec:	f7ff ffb0 	bl	8006450 <__sinit>
 80064f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064f2:	07db      	lsls	r3, r3, #31
 80064f4:	d405      	bmi.n	8006502 <_puts_r+0x22>
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	0598      	lsls	r0, r3, #22
 80064fa:	d402      	bmi.n	8006502 <_puts_r+0x22>
 80064fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064fe:	f000 f99e 	bl	800683e <__retarget_lock_acquire_recursive>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	0719      	lsls	r1, r3, #28
 8006506:	d502      	bpl.n	800650e <_puts_r+0x2e>
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d135      	bne.n	800657a <_puts_r+0x9a>
 800650e:	4621      	mov	r1, r4
 8006510:	4628      	mov	r0, r5
 8006512:	f000 f8c5 	bl	80066a0 <__swsetup_r>
 8006516:	b380      	cbz	r0, 800657a <_puts_r+0x9a>
 8006518:	f04f 35ff 	mov.w	r5, #4294967295
 800651c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800651e:	07da      	lsls	r2, r3, #31
 8006520:	d405      	bmi.n	800652e <_puts_r+0x4e>
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	059b      	lsls	r3, r3, #22
 8006526:	d402      	bmi.n	800652e <_puts_r+0x4e>
 8006528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800652a:	f000 f989 	bl	8006840 <__retarget_lock_release_recursive>
 800652e:	4628      	mov	r0, r5
 8006530:	bd70      	pop	{r4, r5, r6, pc}
 8006532:	2b00      	cmp	r3, #0
 8006534:	da04      	bge.n	8006540 <_puts_r+0x60>
 8006536:	69a2      	ldr	r2, [r4, #24]
 8006538:	429a      	cmp	r2, r3
 800653a:	dc17      	bgt.n	800656c <_puts_r+0x8c>
 800653c:	290a      	cmp	r1, #10
 800653e:	d015      	beq.n	800656c <_puts_r+0x8c>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	6022      	str	r2, [r4, #0]
 8006546:	7019      	strb	r1, [r3, #0]
 8006548:	68a3      	ldr	r3, [r4, #8]
 800654a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800654e:	3b01      	subs	r3, #1
 8006550:	60a3      	str	r3, [r4, #8]
 8006552:	2900      	cmp	r1, #0
 8006554:	d1ed      	bne.n	8006532 <_puts_r+0x52>
 8006556:	2b00      	cmp	r3, #0
 8006558:	da11      	bge.n	800657e <_puts_r+0x9e>
 800655a:	4622      	mov	r2, r4
 800655c:	210a      	movs	r1, #10
 800655e:	4628      	mov	r0, r5
 8006560:	f000 f85f 	bl	8006622 <__swbuf_r>
 8006564:	3001      	adds	r0, #1
 8006566:	d0d7      	beq.n	8006518 <_puts_r+0x38>
 8006568:	250a      	movs	r5, #10
 800656a:	e7d7      	b.n	800651c <_puts_r+0x3c>
 800656c:	4622      	mov	r2, r4
 800656e:	4628      	mov	r0, r5
 8006570:	f000 f857 	bl	8006622 <__swbuf_r>
 8006574:	3001      	adds	r0, #1
 8006576:	d1e7      	bne.n	8006548 <_puts_r+0x68>
 8006578:	e7ce      	b.n	8006518 <_puts_r+0x38>
 800657a:	3e01      	subs	r6, #1
 800657c:	e7e4      	b.n	8006548 <_puts_r+0x68>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	6022      	str	r2, [r4, #0]
 8006584:	220a      	movs	r2, #10
 8006586:	701a      	strb	r2, [r3, #0]
 8006588:	e7ee      	b.n	8006568 <_puts_r+0x88>
	...

0800658c <puts>:
 800658c:	4b02      	ldr	r3, [pc, #8]	@ (8006598 <puts+0xc>)
 800658e:	4601      	mov	r1, r0
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	f7ff bfa5 	b.w	80064e0 <_puts_r>
 8006596:	bf00      	nop
 8006598:	20000018 	.word	0x20000018

0800659c <__sread>:
 800659c:	b510      	push	{r4, lr}
 800659e:	460c      	mov	r4, r1
 80065a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a4:	f000 f8fc 	bl	80067a0 <_read_r>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	bfab      	itete	ge
 80065ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065ae:	89a3      	ldrhlt	r3, [r4, #12]
 80065b0:	181b      	addge	r3, r3, r0
 80065b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065b6:	bfac      	ite	ge
 80065b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065ba:	81a3      	strhlt	r3, [r4, #12]
 80065bc:	bd10      	pop	{r4, pc}

080065be <__swrite>:
 80065be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c2:	461f      	mov	r7, r3
 80065c4:	898b      	ldrh	r3, [r1, #12]
 80065c6:	05db      	lsls	r3, r3, #23
 80065c8:	4605      	mov	r5, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	4616      	mov	r6, r2
 80065ce:	d505      	bpl.n	80065dc <__swrite+0x1e>
 80065d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d4:	2302      	movs	r3, #2
 80065d6:	2200      	movs	r2, #0
 80065d8:	f000 f8d0 	bl	800677c <_lseek_r>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	4632      	mov	r2, r6
 80065ea:	463b      	mov	r3, r7
 80065ec:	4628      	mov	r0, r5
 80065ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065f2:	f000 b8e7 	b.w	80067c4 <_write_r>

080065f6 <__sseek>:
 80065f6:	b510      	push	{r4, lr}
 80065f8:	460c      	mov	r4, r1
 80065fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fe:	f000 f8bd 	bl	800677c <_lseek_r>
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	bf15      	itete	ne
 8006608:	6560      	strne	r0, [r4, #84]	@ 0x54
 800660a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800660e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006612:	81a3      	strheq	r3, [r4, #12]
 8006614:	bf18      	it	ne
 8006616:	81a3      	strhne	r3, [r4, #12]
 8006618:	bd10      	pop	{r4, pc}

0800661a <__sclose>:
 800661a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661e:	f000 b89d 	b.w	800675c <_close_r>

08006622 <__swbuf_r>:
 8006622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006624:	460e      	mov	r6, r1
 8006626:	4614      	mov	r4, r2
 8006628:	4605      	mov	r5, r0
 800662a:	b118      	cbz	r0, 8006634 <__swbuf_r+0x12>
 800662c:	6a03      	ldr	r3, [r0, #32]
 800662e:	b90b      	cbnz	r3, 8006634 <__swbuf_r+0x12>
 8006630:	f7ff ff0e 	bl	8006450 <__sinit>
 8006634:	69a3      	ldr	r3, [r4, #24]
 8006636:	60a3      	str	r3, [r4, #8]
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	071a      	lsls	r2, r3, #28
 800663c:	d501      	bpl.n	8006642 <__swbuf_r+0x20>
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	b943      	cbnz	r3, 8006654 <__swbuf_r+0x32>
 8006642:	4621      	mov	r1, r4
 8006644:	4628      	mov	r0, r5
 8006646:	f000 f82b 	bl	80066a0 <__swsetup_r>
 800664a:	b118      	cbz	r0, 8006654 <__swbuf_r+0x32>
 800664c:	f04f 37ff 	mov.w	r7, #4294967295
 8006650:	4638      	mov	r0, r7
 8006652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	6922      	ldr	r2, [r4, #16]
 8006658:	1a98      	subs	r0, r3, r2
 800665a:	6963      	ldr	r3, [r4, #20]
 800665c:	b2f6      	uxtb	r6, r6
 800665e:	4283      	cmp	r3, r0
 8006660:	4637      	mov	r7, r6
 8006662:	dc05      	bgt.n	8006670 <__swbuf_r+0x4e>
 8006664:	4621      	mov	r1, r4
 8006666:	4628      	mov	r0, r5
 8006668:	f000 fd38 	bl	80070dc <_fflush_r>
 800666c:	2800      	cmp	r0, #0
 800666e:	d1ed      	bne.n	800664c <__swbuf_r+0x2a>
 8006670:	68a3      	ldr	r3, [r4, #8]
 8006672:	3b01      	subs	r3, #1
 8006674:	60a3      	str	r3, [r4, #8]
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	6022      	str	r2, [r4, #0]
 800667c:	701e      	strb	r6, [r3, #0]
 800667e:	6962      	ldr	r2, [r4, #20]
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	429a      	cmp	r2, r3
 8006684:	d004      	beq.n	8006690 <__swbuf_r+0x6e>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	07db      	lsls	r3, r3, #31
 800668a:	d5e1      	bpl.n	8006650 <__swbuf_r+0x2e>
 800668c:	2e0a      	cmp	r6, #10
 800668e:	d1df      	bne.n	8006650 <__swbuf_r+0x2e>
 8006690:	4621      	mov	r1, r4
 8006692:	4628      	mov	r0, r5
 8006694:	f000 fd22 	bl	80070dc <_fflush_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	d0d9      	beq.n	8006650 <__swbuf_r+0x2e>
 800669c:	e7d6      	b.n	800664c <__swbuf_r+0x2a>
	...

080066a0 <__swsetup_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4b29      	ldr	r3, [pc, #164]	@ (8006748 <__swsetup_r+0xa8>)
 80066a4:	4605      	mov	r5, r0
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	460c      	mov	r4, r1
 80066aa:	b118      	cbz	r0, 80066b4 <__swsetup_r+0x14>
 80066ac:	6a03      	ldr	r3, [r0, #32]
 80066ae:	b90b      	cbnz	r3, 80066b4 <__swsetup_r+0x14>
 80066b0:	f7ff fece 	bl	8006450 <__sinit>
 80066b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b8:	0719      	lsls	r1, r3, #28
 80066ba:	d422      	bmi.n	8006702 <__swsetup_r+0x62>
 80066bc:	06da      	lsls	r2, r3, #27
 80066be:	d407      	bmi.n	80066d0 <__swsetup_r+0x30>
 80066c0:	2209      	movs	r2, #9
 80066c2:	602a      	str	r2, [r5, #0]
 80066c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	f04f 30ff 	mov.w	r0, #4294967295
 80066ce:	e033      	b.n	8006738 <__swsetup_r+0x98>
 80066d0:	0758      	lsls	r0, r3, #29
 80066d2:	d512      	bpl.n	80066fa <__swsetup_r+0x5a>
 80066d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066d6:	b141      	cbz	r1, 80066ea <__swsetup_r+0x4a>
 80066d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066dc:	4299      	cmp	r1, r3
 80066de:	d002      	beq.n	80066e6 <__swsetup_r+0x46>
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 f8af 	bl	8006844 <_free_r>
 80066e6:	2300      	movs	r3, #0
 80066e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	2300      	movs	r3, #0
 80066f4:	6063      	str	r3, [r4, #4]
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	f043 0308 	orr.w	r3, r3, #8
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	b94b      	cbnz	r3, 800671a <__swsetup_r+0x7a>
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800670c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006710:	d003      	beq.n	800671a <__swsetup_r+0x7a>
 8006712:	4621      	mov	r1, r4
 8006714:	4628      	mov	r0, r5
 8006716:	f000 fd2f 	bl	8007178 <__smakebuf_r>
 800671a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671e:	f013 0201 	ands.w	r2, r3, #1
 8006722:	d00a      	beq.n	800673a <__swsetup_r+0x9a>
 8006724:	2200      	movs	r2, #0
 8006726:	60a2      	str	r2, [r4, #8]
 8006728:	6962      	ldr	r2, [r4, #20]
 800672a:	4252      	negs	r2, r2
 800672c:	61a2      	str	r2, [r4, #24]
 800672e:	6922      	ldr	r2, [r4, #16]
 8006730:	b942      	cbnz	r2, 8006744 <__swsetup_r+0xa4>
 8006732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006736:	d1c5      	bne.n	80066c4 <__swsetup_r+0x24>
 8006738:	bd38      	pop	{r3, r4, r5, pc}
 800673a:	0799      	lsls	r1, r3, #30
 800673c:	bf58      	it	pl
 800673e:	6962      	ldrpl	r2, [r4, #20]
 8006740:	60a2      	str	r2, [r4, #8]
 8006742:	e7f4      	b.n	800672e <__swsetup_r+0x8e>
 8006744:	2000      	movs	r0, #0
 8006746:	e7f7      	b.n	8006738 <__swsetup_r+0x98>
 8006748:	20000018 	.word	0x20000018

0800674c <memset>:
 800674c:	4402      	add	r2, r0
 800674e:	4603      	mov	r3, r0
 8006750:	4293      	cmp	r3, r2
 8006752:	d100      	bne.n	8006756 <memset+0xa>
 8006754:	4770      	bx	lr
 8006756:	f803 1b01 	strb.w	r1, [r3], #1
 800675a:	e7f9      	b.n	8006750 <memset+0x4>

0800675c <_close_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4d06      	ldr	r5, [pc, #24]	@ (8006778 <_close_r+0x1c>)
 8006760:	2300      	movs	r3, #0
 8006762:	4604      	mov	r4, r0
 8006764:	4608      	mov	r0, r1
 8006766:	602b      	str	r3, [r5, #0]
 8006768:	f7fa fc6c 	bl	8001044 <_close>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_close_r+0x1a>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_close_r+0x1a>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20000400 	.word	0x20000400

0800677c <_lseek_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4d07      	ldr	r5, [pc, #28]	@ (800679c <_lseek_r+0x20>)
 8006780:	4604      	mov	r4, r0
 8006782:	4608      	mov	r0, r1
 8006784:	4611      	mov	r1, r2
 8006786:	2200      	movs	r2, #0
 8006788:	602a      	str	r2, [r5, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	f7fa fc81 	bl	8001092 <_lseek>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d102      	bne.n	800679a <_lseek_r+0x1e>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	b103      	cbz	r3, 800679a <_lseek_r+0x1e>
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	20000400 	.word	0x20000400

080067a0 <_read_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4d07      	ldr	r5, [pc, #28]	@ (80067c0 <_read_r+0x20>)
 80067a4:	4604      	mov	r4, r0
 80067a6:	4608      	mov	r0, r1
 80067a8:	4611      	mov	r1, r2
 80067aa:	2200      	movs	r2, #0
 80067ac:	602a      	str	r2, [r5, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f7fa fc0f 	bl	8000fd2 <_read>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d102      	bne.n	80067be <_read_r+0x1e>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b103      	cbz	r3, 80067be <_read_r+0x1e>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd38      	pop	{r3, r4, r5, pc}
 80067c0:	20000400 	.word	0x20000400

080067c4 <_write_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d07      	ldr	r5, [pc, #28]	@ (80067e4 <_write_r+0x20>)
 80067c8:	4604      	mov	r4, r0
 80067ca:	4608      	mov	r0, r1
 80067cc:	4611      	mov	r1, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	602a      	str	r2, [r5, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f7fa fc1a 	bl	800100c <_write>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_write_r+0x1e>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_write_r+0x1e>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	20000400 	.word	0x20000400

080067e8 <__errno>:
 80067e8:	4b01      	ldr	r3, [pc, #4]	@ (80067f0 <__errno+0x8>)
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20000018 	.word	0x20000018

080067f4 <__libc_init_array>:
 80067f4:	b570      	push	{r4, r5, r6, lr}
 80067f6:	4d0d      	ldr	r5, [pc, #52]	@ (800682c <__libc_init_array+0x38>)
 80067f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006830 <__libc_init_array+0x3c>)
 80067fa:	1b64      	subs	r4, r4, r5
 80067fc:	10a4      	asrs	r4, r4, #2
 80067fe:	2600      	movs	r6, #0
 8006800:	42a6      	cmp	r6, r4
 8006802:	d109      	bne.n	8006818 <__libc_init_array+0x24>
 8006804:	4d0b      	ldr	r5, [pc, #44]	@ (8006834 <__libc_init_array+0x40>)
 8006806:	4c0c      	ldr	r4, [pc, #48]	@ (8006838 <__libc_init_array+0x44>)
 8006808:	f000 fd24 	bl	8007254 <_init>
 800680c:	1b64      	subs	r4, r4, r5
 800680e:	10a4      	asrs	r4, r4, #2
 8006810:	2600      	movs	r6, #0
 8006812:	42a6      	cmp	r6, r4
 8006814:	d105      	bne.n	8006822 <__libc_init_array+0x2e>
 8006816:	bd70      	pop	{r4, r5, r6, pc}
 8006818:	f855 3b04 	ldr.w	r3, [r5], #4
 800681c:	4798      	blx	r3
 800681e:	3601      	adds	r6, #1
 8006820:	e7ee      	b.n	8006800 <__libc_init_array+0xc>
 8006822:	f855 3b04 	ldr.w	r3, [r5], #4
 8006826:	4798      	blx	r3
 8006828:	3601      	adds	r6, #1
 800682a:	e7f2      	b.n	8006812 <__libc_init_array+0x1e>
 800682c:	08007354 	.word	0x08007354
 8006830:	08007354 	.word	0x08007354
 8006834:	08007354 	.word	0x08007354
 8006838:	08007358 	.word	0x08007358

0800683c <__retarget_lock_init_recursive>:
 800683c:	4770      	bx	lr

0800683e <__retarget_lock_acquire_recursive>:
 800683e:	4770      	bx	lr

08006840 <__retarget_lock_release_recursive>:
 8006840:	4770      	bx	lr
	...

08006844 <_free_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4605      	mov	r5, r0
 8006848:	2900      	cmp	r1, #0
 800684a:	d041      	beq.n	80068d0 <_free_r+0x8c>
 800684c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006850:	1f0c      	subs	r4, r1, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	bfb8      	it	lt
 8006856:	18e4      	addlt	r4, r4, r3
 8006858:	f000 f8e0 	bl	8006a1c <__malloc_lock>
 800685c:	4a1d      	ldr	r2, [pc, #116]	@ (80068d4 <_free_r+0x90>)
 800685e:	6813      	ldr	r3, [r2, #0]
 8006860:	b933      	cbnz	r3, 8006870 <_free_r+0x2c>
 8006862:	6063      	str	r3, [r4, #4]
 8006864:	6014      	str	r4, [r2, #0]
 8006866:	4628      	mov	r0, r5
 8006868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800686c:	f000 b8dc 	b.w	8006a28 <__malloc_unlock>
 8006870:	42a3      	cmp	r3, r4
 8006872:	d908      	bls.n	8006886 <_free_r+0x42>
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	1821      	adds	r1, r4, r0
 8006878:	428b      	cmp	r3, r1
 800687a:	bf01      	itttt	eq
 800687c:	6819      	ldreq	r1, [r3, #0]
 800687e:	685b      	ldreq	r3, [r3, #4]
 8006880:	1809      	addeq	r1, r1, r0
 8006882:	6021      	streq	r1, [r4, #0]
 8006884:	e7ed      	b.n	8006862 <_free_r+0x1e>
 8006886:	461a      	mov	r2, r3
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	b10b      	cbz	r3, 8006890 <_free_r+0x4c>
 800688c:	42a3      	cmp	r3, r4
 800688e:	d9fa      	bls.n	8006886 <_free_r+0x42>
 8006890:	6811      	ldr	r1, [r2, #0]
 8006892:	1850      	adds	r0, r2, r1
 8006894:	42a0      	cmp	r0, r4
 8006896:	d10b      	bne.n	80068b0 <_free_r+0x6c>
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	4401      	add	r1, r0
 800689c:	1850      	adds	r0, r2, r1
 800689e:	4283      	cmp	r3, r0
 80068a0:	6011      	str	r1, [r2, #0]
 80068a2:	d1e0      	bne.n	8006866 <_free_r+0x22>
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	6053      	str	r3, [r2, #4]
 80068aa:	4408      	add	r0, r1
 80068ac:	6010      	str	r0, [r2, #0]
 80068ae:	e7da      	b.n	8006866 <_free_r+0x22>
 80068b0:	d902      	bls.n	80068b8 <_free_r+0x74>
 80068b2:	230c      	movs	r3, #12
 80068b4:	602b      	str	r3, [r5, #0]
 80068b6:	e7d6      	b.n	8006866 <_free_r+0x22>
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	1821      	adds	r1, r4, r0
 80068bc:	428b      	cmp	r3, r1
 80068be:	bf04      	itt	eq
 80068c0:	6819      	ldreq	r1, [r3, #0]
 80068c2:	685b      	ldreq	r3, [r3, #4]
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	bf04      	itt	eq
 80068c8:	1809      	addeq	r1, r1, r0
 80068ca:	6021      	streq	r1, [r4, #0]
 80068cc:	6054      	str	r4, [r2, #4]
 80068ce:	e7ca      	b.n	8006866 <_free_r+0x22>
 80068d0:	bd38      	pop	{r3, r4, r5, pc}
 80068d2:	bf00      	nop
 80068d4:	2000040c 	.word	0x2000040c

080068d8 <sbrk_aligned>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	4e0f      	ldr	r6, [pc, #60]	@ (8006918 <sbrk_aligned+0x40>)
 80068dc:	460c      	mov	r4, r1
 80068de:	6831      	ldr	r1, [r6, #0]
 80068e0:	4605      	mov	r5, r0
 80068e2:	b911      	cbnz	r1, 80068ea <sbrk_aligned+0x12>
 80068e4:	f000 fca6 	bl	8007234 <_sbrk_r>
 80068e8:	6030      	str	r0, [r6, #0]
 80068ea:	4621      	mov	r1, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 fca1 	bl	8007234 <_sbrk_r>
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	d103      	bne.n	80068fe <sbrk_aligned+0x26>
 80068f6:	f04f 34ff 	mov.w	r4, #4294967295
 80068fa:	4620      	mov	r0, r4
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
 80068fe:	1cc4      	adds	r4, r0, #3
 8006900:	f024 0403 	bic.w	r4, r4, #3
 8006904:	42a0      	cmp	r0, r4
 8006906:	d0f8      	beq.n	80068fa <sbrk_aligned+0x22>
 8006908:	1a21      	subs	r1, r4, r0
 800690a:	4628      	mov	r0, r5
 800690c:	f000 fc92 	bl	8007234 <_sbrk_r>
 8006910:	3001      	adds	r0, #1
 8006912:	d1f2      	bne.n	80068fa <sbrk_aligned+0x22>
 8006914:	e7ef      	b.n	80068f6 <sbrk_aligned+0x1e>
 8006916:	bf00      	nop
 8006918:	20000408 	.word	0x20000408

0800691c <_malloc_r>:
 800691c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006920:	1ccd      	adds	r5, r1, #3
 8006922:	f025 0503 	bic.w	r5, r5, #3
 8006926:	3508      	adds	r5, #8
 8006928:	2d0c      	cmp	r5, #12
 800692a:	bf38      	it	cc
 800692c:	250c      	movcc	r5, #12
 800692e:	2d00      	cmp	r5, #0
 8006930:	4606      	mov	r6, r0
 8006932:	db01      	blt.n	8006938 <_malloc_r+0x1c>
 8006934:	42a9      	cmp	r1, r5
 8006936:	d904      	bls.n	8006942 <_malloc_r+0x26>
 8006938:	230c      	movs	r3, #12
 800693a:	6033      	str	r3, [r6, #0]
 800693c:	2000      	movs	r0, #0
 800693e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a18 <_malloc_r+0xfc>
 8006946:	f000 f869 	bl	8006a1c <__malloc_lock>
 800694a:	f8d8 3000 	ldr.w	r3, [r8]
 800694e:	461c      	mov	r4, r3
 8006950:	bb44      	cbnz	r4, 80069a4 <_malloc_r+0x88>
 8006952:	4629      	mov	r1, r5
 8006954:	4630      	mov	r0, r6
 8006956:	f7ff ffbf 	bl	80068d8 <sbrk_aligned>
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	4604      	mov	r4, r0
 800695e:	d158      	bne.n	8006a12 <_malloc_r+0xf6>
 8006960:	f8d8 4000 	ldr.w	r4, [r8]
 8006964:	4627      	mov	r7, r4
 8006966:	2f00      	cmp	r7, #0
 8006968:	d143      	bne.n	80069f2 <_malloc_r+0xd6>
 800696a:	2c00      	cmp	r4, #0
 800696c:	d04b      	beq.n	8006a06 <_malloc_r+0xea>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	4639      	mov	r1, r7
 8006972:	4630      	mov	r0, r6
 8006974:	eb04 0903 	add.w	r9, r4, r3
 8006978:	f000 fc5c 	bl	8007234 <_sbrk_r>
 800697c:	4581      	cmp	r9, r0
 800697e:	d142      	bne.n	8006a06 <_malloc_r+0xea>
 8006980:	6821      	ldr	r1, [r4, #0]
 8006982:	1a6d      	subs	r5, r5, r1
 8006984:	4629      	mov	r1, r5
 8006986:	4630      	mov	r0, r6
 8006988:	f7ff ffa6 	bl	80068d8 <sbrk_aligned>
 800698c:	3001      	adds	r0, #1
 800698e:	d03a      	beq.n	8006a06 <_malloc_r+0xea>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	442b      	add	r3, r5
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	f8d8 3000 	ldr.w	r3, [r8]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	bb62      	cbnz	r2, 80069f8 <_malloc_r+0xdc>
 800699e:	f8c8 7000 	str.w	r7, [r8]
 80069a2:	e00f      	b.n	80069c4 <_malloc_r+0xa8>
 80069a4:	6822      	ldr	r2, [r4, #0]
 80069a6:	1b52      	subs	r2, r2, r5
 80069a8:	d420      	bmi.n	80069ec <_malloc_r+0xd0>
 80069aa:	2a0b      	cmp	r2, #11
 80069ac:	d917      	bls.n	80069de <_malloc_r+0xc2>
 80069ae:	1961      	adds	r1, r4, r5
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	6025      	str	r5, [r4, #0]
 80069b4:	bf18      	it	ne
 80069b6:	6059      	strne	r1, [r3, #4]
 80069b8:	6863      	ldr	r3, [r4, #4]
 80069ba:	bf08      	it	eq
 80069bc:	f8c8 1000 	streq.w	r1, [r8]
 80069c0:	5162      	str	r2, [r4, r5]
 80069c2:	604b      	str	r3, [r1, #4]
 80069c4:	4630      	mov	r0, r6
 80069c6:	f000 f82f 	bl	8006a28 <__malloc_unlock>
 80069ca:	f104 000b 	add.w	r0, r4, #11
 80069ce:	1d23      	adds	r3, r4, #4
 80069d0:	f020 0007 	bic.w	r0, r0, #7
 80069d4:	1ac2      	subs	r2, r0, r3
 80069d6:	bf1c      	itt	ne
 80069d8:	1a1b      	subne	r3, r3, r0
 80069da:	50a3      	strne	r3, [r4, r2]
 80069dc:	e7af      	b.n	800693e <_malloc_r+0x22>
 80069de:	6862      	ldr	r2, [r4, #4]
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	bf0c      	ite	eq
 80069e4:	f8c8 2000 	streq.w	r2, [r8]
 80069e8:	605a      	strne	r2, [r3, #4]
 80069ea:	e7eb      	b.n	80069c4 <_malloc_r+0xa8>
 80069ec:	4623      	mov	r3, r4
 80069ee:	6864      	ldr	r4, [r4, #4]
 80069f0:	e7ae      	b.n	8006950 <_malloc_r+0x34>
 80069f2:	463c      	mov	r4, r7
 80069f4:	687f      	ldr	r7, [r7, #4]
 80069f6:	e7b6      	b.n	8006966 <_malloc_r+0x4a>
 80069f8:	461a      	mov	r2, r3
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	d1fb      	bne.n	80069f8 <_malloc_r+0xdc>
 8006a00:	2300      	movs	r3, #0
 8006a02:	6053      	str	r3, [r2, #4]
 8006a04:	e7de      	b.n	80069c4 <_malloc_r+0xa8>
 8006a06:	230c      	movs	r3, #12
 8006a08:	6033      	str	r3, [r6, #0]
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f000 f80c 	bl	8006a28 <__malloc_unlock>
 8006a10:	e794      	b.n	800693c <_malloc_r+0x20>
 8006a12:	6005      	str	r5, [r0, #0]
 8006a14:	e7d6      	b.n	80069c4 <_malloc_r+0xa8>
 8006a16:	bf00      	nop
 8006a18:	2000040c 	.word	0x2000040c

08006a1c <__malloc_lock>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	@ (8006a24 <__malloc_lock+0x8>)
 8006a1e:	f7ff bf0e 	b.w	800683e <__retarget_lock_acquire_recursive>
 8006a22:	bf00      	nop
 8006a24:	20000404 	.word	0x20000404

08006a28 <__malloc_unlock>:
 8006a28:	4801      	ldr	r0, [pc, #4]	@ (8006a30 <__malloc_unlock+0x8>)
 8006a2a:	f7ff bf09 	b.w	8006840 <__retarget_lock_release_recursive>
 8006a2e:	bf00      	nop
 8006a30:	20000404 	.word	0x20000404

08006a34 <__sfputc_r>:
 8006a34:	6893      	ldr	r3, [r2, #8]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	b410      	push	{r4}
 8006a3c:	6093      	str	r3, [r2, #8]
 8006a3e:	da08      	bge.n	8006a52 <__sfputc_r+0x1e>
 8006a40:	6994      	ldr	r4, [r2, #24]
 8006a42:	42a3      	cmp	r3, r4
 8006a44:	db01      	blt.n	8006a4a <__sfputc_r+0x16>
 8006a46:	290a      	cmp	r1, #10
 8006a48:	d103      	bne.n	8006a52 <__sfputc_r+0x1e>
 8006a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a4e:	f7ff bde8 	b.w	8006622 <__swbuf_r>
 8006a52:	6813      	ldr	r3, [r2, #0]
 8006a54:	1c58      	adds	r0, r3, #1
 8006a56:	6010      	str	r0, [r2, #0]
 8006a58:	7019      	strb	r1, [r3, #0]
 8006a5a:	4608      	mov	r0, r1
 8006a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <__sfputs_r>:
 8006a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a64:	4606      	mov	r6, r0
 8006a66:	460f      	mov	r7, r1
 8006a68:	4614      	mov	r4, r2
 8006a6a:	18d5      	adds	r5, r2, r3
 8006a6c:	42ac      	cmp	r4, r5
 8006a6e:	d101      	bne.n	8006a74 <__sfputs_r+0x12>
 8006a70:	2000      	movs	r0, #0
 8006a72:	e007      	b.n	8006a84 <__sfputs_r+0x22>
 8006a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a78:	463a      	mov	r2, r7
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7ff ffda 	bl	8006a34 <__sfputc_r>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d1f3      	bne.n	8006a6c <__sfputs_r+0xa>
 8006a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a88 <_vfiprintf_r>:
 8006a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	460d      	mov	r5, r1
 8006a8e:	b09d      	sub	sp, #116	@ 0x74
 8006a90:	4614      	mov	r4, r2
 8006a92:	4698      	mov	r8, r3
 8006a94:	4606      	mov	r6, r0
 8006a96:	b118      	cbz	r0, 8006aa0 <_vfiprintf_r+0x18>
 8006a98:	6a03      	ldr	r3, [r0, #32]
 8006a9a:	b90b      	cbnz	r3, 8006aa0 <_vfiprintf_r+0x18>
 8006a9c:	f7ff fcd8 	bl	8006450 <__sinit>
 8006aa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aa2:	07d9      	lsls	r1, r3, #31
 8006aa4:	d405      	bmi.n	8006ab2 <_vfiprintf_r+0x2a>
 8006aa6:	89ab      	ldrh	r3, [r5, #12]
 8006aa8:	059a      	lsls	r2, r3, #22
 8006aaa:	d402      	bmi.n	8006ab2 <_vfiprintf_r+0x2a>
 8006aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aae:	f7ff fec6 	bl	800683e <__retarget_lock_acquire_recursive>
 8006ab2:	89ab      	ldrh	r3, [r5, #12]
 8006ab4:	071b      	lsls	r3, r3, #28
 8006ab6:	d501      	bpl.n	8006abc <_vfiprintf_r+0x34>
 8006ab8:	692b      	ldr	r3, [r5, #16]
 8006aba:	b99b      	cbnz	r3, 8006ae4 <_vfiprintf_r+0x5c>
 8006abc:	4629      	mov	r1, r5
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7ff fdee 	bl	80066a0 <__swsetup_r>
 8006ac4:	b170      	cbz	r0, 8006ae4 <_vfiprintf_r+0x5c>
 8006ac6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ac8:	07dc      	lsls	r4, r3, #31
 8006aca:	d504      	bpl.n	8006ad6 <_vfiprintf_r+0x4e>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	b01d      	add	sp, #116	@ 0x74
 8006ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad6:	89ab      	ldrh	r3, [r5, #12]
 8006ad8:	0598      	lsls	r0, r3, #22
 8006ada:	d4f7      	bmi.n	8006acc <_vfiprintf_r+0x44>
 8006adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ade:	f7ff feaf 	bl	8006840 <__retarget_lock_release_recursive>
 8006ae2:	e7f3      	b.n	8006acc <_vfiprintf_r+0x44>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ae8:	2320      	movs	r3, #32
 8006aea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af2:	2330      	movs	r3, #48	@ 0x30
 8006af4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ca4 <_vfiprintf_r+0x21c>
 8006af8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006afc:	f04f 0901 	mov.w	r9, #1
 8006b00:	4623      	mov	r3, r4
 8006b02:	469a      	mov	sl, r3
 8006b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b08:	b10a      	cbz	r2, 8006b0e <_vfiprintf_r+0x86>
 8006b0a:	2a25      	cmp	r2, #37	@ 0x25
 8006b0c:	d1f9      	bne.n	8006b02 <_vfiprintf_r+0x7a>
 8006b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8006b12:	d00b      	beq.n	8006b2c <_vfiprintf_r+0xa4>
 8006b14:	465b      	mov	r3, fp
 8006b16:	4622      	mov	r2, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff ffa1 	bl	8006a62 <__sfputs_r>
 8006b20:	3001      	adds	r0, #1
 8006b22:	f000 80a7 	beq.w	8006c74 <_vfiprintf_r+0x1ec>
 8006b26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b28:	445a      	add	r2, fp
 8006b2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 809f 	beq.w	8006c74 <_vfiprintf_r+0x1ec>
 8006b36:	2300      	movs	r3, #0
 8006b38:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b40:	f10a 0a01 	add.w	sl, sl, #1
 8006b44:	9304      	str	r3, [sp, #16]
 8006b46:	9307      	str	r3, [sp, #28]
 8006b48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b4e:	4654      	mov	r4, sl
 8006b50:	2205      	movs	r2, #5
 8006b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b56:	4853      	ldr	r0, [pc, #332]	@ (8006ca4 <_vfiprintf_r+0x21c>)
 8006b58:	f7f9 fb62 	bl	8000220 <memchr>
 8006b5c:	9a04      	ldr	r2, [sp, #16]
 8006b5e:	b9d8      	cbnz	r0, 8006b98 <_vfiprintf_r+0x110>
 8006b60:	06d1      	lsls	r1, r2, #27
 8006b62:	bf44      	itt	mi
 8006b64:	2320      	movmi	r3, #32
 8006b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b6a:	0713      	lsls	r3, r2, #28
 8006b6c:	bf44      	itt	mi
 8006b6e:	232b      	movmi	r3, #43	@ 0x2b
 8006b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b74:	f89a 3000 	ldrb.w	r3, [sl]
 8006b78:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b7a:	d015      	beq.n	8006ba8 <_vfiprintf_r+0x120>
 8006b7c:	9a07      	ldr	r2, [sp, #28]
 8006b7e:	4654      	mov	r4, sl
 8006b80:	2000      	movs	r0, #0
 8006b82:	f04f 0c0a 	mov.w	ip, #10
 8006b86:	4621      	mov	r1, r4
 8006b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b8c:	3b30      	subs	r3, #48	@ 0x30
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	d94b      	bls.n	8006c2a <_vfiprintf_r+0x1a2>
 8006b92:	b1b0      	cbz	r0, 8006bc2 <_vfiprintf_r+0x13a>
 8006b94:	9207      	str	r2, [sp, #28]
 8006b96:	e014      	b.n	8006bc2 <_vfiprintf_r+0x13a>
 8006b98:	eba0 0308 	sub.w	r3, r0, r8
 8006b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	9304      	str	r3, [sp, #16]
 8006ba4:	46a2      	mov	sl, r4
 8006ba6:	e7d2      	b.n	8006b4e <_vfiprintf_r+0xc6>
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	1d19      	adds	r1, r3, #4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	9103      	str	r1, [sp, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	bfbb      	ittet	lt
 8006bb4:	425b      	neglt	r3, r3
 8006bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8006bba:	9307      	strge	r3, [sp, #28]
 8006bbc:	9307      	strlt	r3, [sp, #28]
 8006bbe:	bfb8      	it	lt
 8006bc0:	9204      	strlt	r2, [sp, #16]
 8006bc2:	7823      	ldrb	r3, [r4, #0]
 8006bc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bc6:	d10a      	bne.n	8006bde <_vfiprintf_r+0x156>
 8006bc8:	7863      	ldrb	r3, [r4, #1]
 8006bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bcc:	d132      	bne.n	8006c34 <_vfiprintf_r+0x1ac>
 8006bce:	9b03      	ldr	r3, [sp, #12]
 8006bd0:	1d1a      	adds	r2, r3, #4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	9203      	str	r2, [sp, #12]
 8006bd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bda:	3402      	adds	r4, #2
 8006bdc:	9305      	str	r3, [sp, #20]
 8006bde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006cb4 <_vfiprintf_r+0x22c>
 8006be2:	7821      	ldrb	r1, [r4, #0]
 8006be4:	2203      	movs	r2, #3
 8006be6:	4650      	mov	r0, sl
 8006be8:	f7f9 fb1a 	bl	8000220 <memchr>
 8006bec:	b138      	cbz	r0, 8006bfe <_vfiprintf_r+0x176>
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	eba0 000a 	sub.w	r0, r0, sl
 8006bf4:	2240      	movs	r2, #64	@ 0x40
 8006bf6:	4082      	lsls	r2, r0
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	3401      	adds	r4, #1
 8006bfc:	9304      	str	r3, [sp, #16]
 8006bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c02:	4829      	ldr	r0, [pc, #164]	@ (8006ca8 <_vfiprintf_r+0x220>)
 8006c04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c08:	2206      	movs	r2, #6
 8006c0a:	f7f9 fb09 	bl	8000220 <memchr>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d03f      	beq.n	8006c92 <_vfiprintf_r+0x20a>
 8006c12:	4b26      	ldr	r3, [pc, #152]	@ (8006cac <_vfiprintf_r+0x224>)
 8006c14:	bb1b      	cbnz	r3, 8006c5e <_vfiprintf_r+0x1d6>
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	3307      	adds	r3, #7
 8006c1a:	f023 0307 	bic.w	r3, r3, #7
 8006c1e:	3308      	adds	r3, #8
 8006c20:	9303      	str	r3, [sp, #12]
 8006c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c24:	443b      	add	r3, r7
 8006c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c28:	e76a      	b.n	8006b00 <_vfiprintf_r+0x78>
 8006c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c2e:	460c      	mov	r4, r1
 8006c30:	2001      	movs	r0, #1
 8006c32:	e7a8      	b.n	8006b86 <_vfiprintf_r+0xfe>
 8006c34:	2300      	movs	r3, #0
 8006c36:	3401      	adds	r4, #1
 8006c38:	9305      	str	r3, [sp, #20]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	f04f 0c0a 	mov.w	ip, #10
 8006c40:	4620      	mov	r0, r4
 8006c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c46:	3a30      	subs	r2, #48	@ 0x30
 8006c48:	2a09      	cmp	r2, #9
 8006c4a:	d903      	bls.n	8006c54 <_vfiprintf_r+0x1cc>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0c6      	beq.n	8006bde <_vfiprintf_r+0x156>
 8006c50:	9105      	str	r1, [sp, #20]
 8006c52:	e7c4      	b.n	8006bde <_vfiprintf_r+0x156>
 8006c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c58:	4604      	mov	r4, r0
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e7f0      	b.n	8006c40 <_vfiprintf_r+0x1b8>
 8006c5e:	ab03      	add	r3, sp, #12
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	462a      	mov	r2, r5
 8006c64:	4b12      	ldr	r3, [pc, #72]	@ (8006cb0 <_vfiprintf_r+0x228>)
 8006c66:	a904      	add	r1, sp, #16
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f3af 8000 	nop.w
 8006c6e:	4607      	mov	r7, r0
 8006c70:	1c78      	adds	r0, r7, #1
 8006c72:	d1d6      	bne.n	8006c22 <_vfiprintf_r+0x19a>
 8006c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c76:	07d9      	lsls	r1, r3, #31
 8006c78:	d405      	bmi.n	8006c86 <_vfiprintf_r+0x1fe>
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	059a      	lsls	r2, r3, #22
 8006c7e:	d402      	bmi.n	8006c86 <_vfiprintf_r+0x1fe>
 8006c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c82:	f7ff fddd 	bl	8006840 <__retarget_lock_release_recursive>
 8006c86:	89ab      	ldrh	r3, [r5, #12]
 8006c88:	065b      	lsls	r3, r3, #25
 8006c8a:	f53f af1f 	bmi.w	8006acc <_vfiprintf_r+0x44>
 8006c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c90:	e71e      	b.n	8006ad0 <_vfiprintf_r+0x48>
 8006c92:	ab03      	add	r3, sp, #12
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	462a      	mov	r2, r5
 8006c98:	4b05      	ldr	r3, [pc, #20]	@ (8006cb0 <_vfiprintf_r+0x228>)
 8006c9a:	a904      	add	r1, sp, #16
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f000 f879 	bl	8006d94 <_printf_i>
 8006ca2:	e7e4      	b.n	8006c6e <_vfiprintf_r+0x1e6>
 8006ca4:	08007318 	.word	0x08007318
 8006ca8:	08007322 	.word	0x08007322
 8006cac:	00000000 	.word	0x00000000
 8006cb0:	08006a63 	.word	0x08006a63
 8006cb4:	0800731e 	.word	0x0800731e

08006cb8 <_printf_common>:
 8006cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	4616      	mov	r6, r2
 8006cbe:	4698      	mov	r8, r3
 8006cc0:	688a      	ldr	r2, [r1, #8]
 8006cc2:	690b      	ldr	r3, [r1, #16]
 8006cc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	bfb8      	it	lt
 8006ccc:	4613      	movlt	r3, r2
 8006cce:	6033      	str	r3, [r6, #0]
 8006cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cd4:	4607      	mov	r7, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	b10a      	cbz	r2, 8006cde <_printf_common+0x26>
 8006cda:	3301      	adds	r3, #1
 8006cdc:	6033      	str	r3, [r6, #0]
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	0699      	lsls	r1, r3, #26
 8006ce2:	bf42      	ittt	mi
 8006ce4:	6833      	ldrmi	r3, [r6, #0]
 8006ce6:	3302      	addmi	r3, #2
 8006ce8:	6033      	strmi	r3, [r6, #0]
 8006cea:	6825      	ldr	r5, [r4, #0]
 8006cec:	f015 0506 	ands.w	r5, r5, #6
 8006cf0:	d106      	bne.n	8006d00 <_printf_common+0x48>
 8006cf2:	f104 0a19 	add.w	sl, r4, #25
 8006cf6:	68e3      	ldr	r3, [r4, #12]
 8006cf8:	6832      	ldr	r2, [r6, #0]
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	42ab      	cmp	r3, r5
 8006cfe:	dc26      	bgt.n	8006d4e <_printf_common+0x96>
 8006d00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d04:	6822      	ldr	r2, [r4, #0]
 8006d06:	3b00      	subs	r3, #0
 8006d08:	bf18      	it	ne
 8006d0a:	2301      	movne	r3, #1
 8006d0c:	0692      	lsls	r2, r2, #26
 8006d0e:	d42b      	bmi.n	8006d68 <_printf_common+0xb0>
 8006d10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d14:	4641      	mov	r1, r8
 8006d16:	4638      	mov	r0, r7
 8006d18:	47c8      	blx	r9
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	d01e      	beq.n	8006d5c <_printf_common+0xa4>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	6922      	ldr	r2, [r4, #16]
 8006d22:	f003 0306 	and.w	r3, r3, #6
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	bf02      	ittt	eq
 8006d2a:	68e5      	ldreq	r5, [r4, #12]
 8006d2c:	6833      	ldreq	r3, [r6, #0]
 8006d2e:	1aed      	subeq	r5, r5, r3
 8006d30:	68a3      	ldr	r3, [r4, #8]
 8006d32:	bf0c      	ite	eq
 8006d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d38:	2500      	movne	r5, #0
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	bfc4      	itt	gt
 8006d3e:	1a9b      	subgt	r3, r3, r2
 8006d40:	18ed      	addgt	r5, r5, r3
 8006d42:	2600      	movs	r6, #0
 8006d44:	341a      	adds	r4, #26
 8006d46:	42b5      	cmp	r5, r6
 8006d48:	d11a      	bne.n	8006d80 <_printf_common+0xc8>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	e008      	b.n	8006d60 <_printf_common+0xa8>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4652      	mov	r2, sl
 8006d52:	4641      	mov	r1, r8
 8006d54:	4638      	mov	r0, r7
 8006d56:	47c8      	blx	r9
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d103      	bne.n	8006d64 <_printf_common+0xac>
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d64:	3501      	adds	r5, #1
 8006d66:	e7c6      	b.n	8006cf6 <_printf_common+0x3e>
 8006d68:	18e1      	adds	r1, r4, r3
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	2030      	movs	r0, #48	@ 0x30
 8006d6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d72:	4422      	add	r2, r4
 8006d74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d7c:	3302      	adds	r3, #2
 8006d7e:	e7c7      	b.n	8006d10 <_printf_common+0x58>
 8006d80:	2301      	movs	r3, #1
 8006d82:	4622      	mov	r2, r4
 8006d84:	4641      	mov	r1, r8
 8006d86:	4638      	mov	r0, r7
 8006d88:	47c8      	blx	r9
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	d0e6      	beq.n	8006d5c <_printf_common+0xa4>
 8006d8e:	3601      	adds	r6, #1
 8006d90:	e7d9      	b.n	8006d46 <_printf_common+0x8e>
	...

08006d94 <_printf_i>:
 8006d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d98:	7e0f      	ldrb	r7, [r1, #24]
 8006d9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d9c:	2f78      	cmp	r7, #120	@ 0x78
 8006d9e:	4691      	mov	r9, r2
 8006da0:	4680      	mov	r8, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	469a      	mov	sl, r3
 8006da6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006daa:	d807      	bhi.n	8006dbc <_printf_i+0x28>
 8006dac:	2f62      	cmp	r7, #98	@ 0x62
 8006dae:	d80a      	bhi.n	8006dc6 <_printf_i+0x32>
 8006db0:	2f00      	cmp	r7, #0
 8006db2:	f000 80d2 	beq.w	8006f5a <_printf_i+0x1c6>
 8006db6:	2f58      	cmp	r7, #88	@ 0x58
 8006db8:	f000 80b9 	beq.w	8006f2e <_printf_i+0x19a>
 8006dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dc4:	e03a      	b.n	8006e3c <_printf_i+0xa8>
 8006dc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dca:	2b15      	cmp	r3, #21
 8006dcc:	d8f6      	bhi.n	8006dbc <_printf_i+0x28>
 8006dce:	a101      	add	r1, pc, #4	@ (adr r1, 8006dd4 <_printf_i+0x40>)
 8006dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dd4:	08006e2d 	.word	0x08006e2d
 8006dd8:	08006e41 	.word	0x08006e41
 8006ddc:	08006dbd 	.word	0x08006dbd
 8006de0:	08006dbd 	.word	0x08006dbd
 8006de4:	08006dbd 	.word	0x08006dbd
 8006de8:	08006dbd 	.word	0x08006dbd
 8006dec:	08006e41 	.word	0x08006e41
 8006df0:	08006dbd 	.word	0x08006dbd
 8006df4:	08006dbd 	.word	0x08006dbd
 8006df8:	08006dbd 	.word	0x08006dbd
 8006dfc:	08006dbd 	.word	0x08006dbd
 8006e00:	08006f41 	.word	0x08006f41
 8006e04:	08006e6b 	.word	0x08006e6b
 8006e08:	08006efb 	.word	0x08006efb
 8006e0c:	08006dbd 	.word	0x08006dbd
 8006e10:	08006dbd 	.word	0x08006dbd
 8006e14:	08006f63 	.word	0x08006f63
 8006e18:	08006dbd 	.word	0x08006dbd
 8006e1c:	08006e6b 	.word	0x08006e6b
 8006e20:	08006dbd 	.word	0x08006dbd
 8006e24:	08006dbd 	.word	0x08006dbd
 8006e28:	08006f03 	.word	0x08006f03
 8006e2c:	6833      	ldr	r3, [r6, #0]
 8006e2e:	1d1a      	adds	r2, r3, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6032      	str	r2, [r6, #0]
 8006e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e09d      	b.n	8006f7c <_printf_i+0x1e8>
 8006e40:	6833      	ldr	r3, [r6, #0]
 8006e42:	6820      	ldr	r0, [r4, #0]
 8006e44:	1d19      	adds	r1, r3, #4
 8006e46:	6031      	str	r1, [r6, #0]
 8006e48:	0606      	lsls	r6, r0, #24
 8006e4a:	d501      	bpl.n	8006e50 <_printf_i+0xbc>
 8006e4c:	681d      	ldr	r5, [r3, #0]
 8006e4e:	e003      	b.n	8006e58 <_printf_i+0xc4>
 8006e50:	0645      	lsls	r5, r0, #25
 8006e52:	d5fb      	bpl.n	8006e4c <_printf_i+0xb8>
 8006e54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e58:	2d00      	cmp	r5, #0
 8006e5a:	da03      	bge.n	8006e64 <_printf_i+0xd0>
 8006e5c:	232d      	movs	r3, #45	@ 0x2d
 8006e5e:	426d      	negs	r5, r5
 8006e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e64:	4859      	ldr	r0, [pc, #356]	@ (8006fcc <_printf_i+0x238>)
 8006e66:	230a      	movs	r3, #10
 8006e68:	e011      	b.n	8006e8e <_printf_i+0xfa>
 8006e6a:	6821      	ldr	r1, [r4, #0]
 8006e6c:	6833      	ldr	r3, [r6, #0]
 8006e6e:	0608      	lsls	r0, r1, #24
 8006e70:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e74:	d402      	bmi.n	8006e7c <_printf_i+0xe8>
 8006e76:	0649      	lsls	r1, r1, #25
 8006e78:	bf48      	it	mi
 8006e7a:	b2ad      	uxthmi	r5, r5
 8006e7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e7e:	4853      	ldr	r0, [pc, #332]	@ (8006fcc <_printf_i+0x238>)
 8006e80:	6033      	str	r3, [r6, #0]
 8006e82:	bf14      	ite	ne
 8006e84:	230a      	movne	r3, #10
 8006e86:	2308      	moveq	r3, #8
 8006e88:	2100      	movs	r1, #0
 8006e8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e8e:	6866      	ldr	r6, [r4, #4]
 8006e90:	60a6      	str	r6, [r4, #8]
 8006e92:	2e00      	cmp	r6, #0
 8006e94:	bfa2      	ittt	ge
 8006e96:	6821      	ldrge	r1, [r4, #0]
 8006e98:	f021 0104 	bicge.w	r1, r1, #4
 8006e9c:	6021      	strge	r1, [r4, #0]
 8006e9e:	b90d      	cbnz	r5, 8006ea4 <_printf_i+0x110>
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	d04b      	beq.n	8006f3c <_printf_i+0x1a8>
 8006ea4:	4616      	mov	r6, r2
 8006ea6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eaa:	fb03 5711 	mls	r7, r3, r1, r5
 8006eae:	5dc7      	ldrb	r7, [r0, r7]
 8006eb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006eb4:	462f      	mov	r7, r5
 8006eb6:	42bb      	cmp	r3, r7
 8006eb8:	460d      	mov	r5, r1
 8006eba:	d9f4      	bls.n	8006ea6 <_printf_i+0x112>
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d10b      	bne.n	8006ed8 <_printf_i+0x144>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	07df      	lsls	r7, r3, #31
 8006ec4:	d508      	bpl.n	8006ed8 <_printf_i+0x144>
 8006ec6:	6923      	ldr	r3, [r4, #16]
 8006ec8:	6861      	ldr	r1, [r4, #4]
 8006eca:	4299      	cmp	r1, r3
 8006ecc:	bfde      	ittt	le
 8006ece:	2330      	movle	r3, #48	@ 0x30
 8006ed0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ed4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ed8:	1b92      	subs	r2, r2, r6
 8006eda:	6122      	str	r2, [r4, #16]
 8006edc:	f8cd a000 	str.w	sl, [sp]
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	aa03      	add	r2, sp, #12
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	f7ff fee6 	bl	8006cb8 <_printf_common>
 8006eec:	3001      	adds	r0, #1
 8006eee:	d14a      	bne.n	8006f86 <_printf_i+0x1f2>
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	b004      	add	sp, #16
 8006ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	f043 0320 	orr.w	r3, r3, #32
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	4833      	ldr	r0, [pc, #204]	@ (8006fd0 <_printf_i+0x23c>)
 8006f04:	2778      	movs	r7, #120	@ 0x78
 8006f06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	6831      	ldr	r1, [r6, #0]
 8006f0e:	061f      	lsls	r7, r3, #24
 8006f10:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f14:	d402      	bmi.n	8006f1c <_printf_i+0x188>
 8006f16:	065f      	lsls	r7, r3, #25
 8006f18:	bf48      	it	mi
 8006f1a:	b2ad      	uxthmi	r5, r5
 8006f1c:	6031      	str	r1, [r6, #0]
 8006f1e:	07d9      	lsls	r1, r3, #31
 8006f20:	bf44      	itt	mi
 8006f22:	f043 0320 	orrmi.w	r3, r3, #32
 8006f26:	6023      	strmi	r3, [r4, #0]
 8006f28:	b11d      	cbz	r5, 8006f32 <_printf_i+0x19e>
 8006f2a:	2310      	movs	r3, #16
 8006f2c:	e7ac      	b.n	8006e88 <_printf_i+0xf4>
 8006f2e:	4827      	ldr	r0, [pc, #156]	@ (8006fcc <_printf_i+0x238>)
 8006f30:	e7e9      	b.n	8006f06 <_printf_i+0x172>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	f023 0320 	bic.w	r3, r3, #32
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	e7f6      	b.n	8006f2a <_printf_i+0x196>
 8006f3c:	4616      	mov	r6, r2
 8006f3e:	e7bd      	b.n	8006ebc <_printf_i+0x128>
 8006f40:	6833      	ldr	r3, [r6, #0]
 8006f42:	6825      	ldr	r5, [r4, #0]
 8006f44:	6961      	ldr	r1, [r4, #20]
 8006f46:	1d18      	adds	r0, r3, #4
 8006f48:	6030      	str	r0, [r6, #0]
 8006f4a:	062e      	lsls	r6, r5, #24
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	d501      	bpl.n	8006f54 <_printf_i+0x1c0>
 8006f50:	6019      	str	r1, [r3, #0]
 8006f52:	e002      	b.n	8006f5a <_printf_i+0x1c6>
 8006f54:	0668      	lsls	r0, r5, #25
 8006f56:	d5fb      	bpl.n	8006f50 <_printf_i+0x1bc>
 8006f58:	8019      	strh	r1, [r3, #0]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	6123      	str	r3, [r4, #16]
 8006f5e:	4616      	mov	r6, r2
 8006f60:	e7bc      	b.n	8006edc <_printf_i+0x148>
 8006f62:	6833      	ldr	r3, [r6, #0]
 8006f64:	1d1a      	adds	r2, r3, #4
 8006f66:	6032      	str	r2, [r6, #0]
 8006f68:	681e      	ldr	r6, [r3, #0]
 8006f6a:	6862      	ldr	r2, [r4, #4]
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f7f9 f956 	bl	8000220 <memchr>
 8006f74:	b108      	cbz	r0, 8006f7a <_printf_i+0x1e6>
 8006f76:	1b80      	subs	r0, r0, r6
 8006f78:	6060      	str	r0, [r4, #4]
 8006f7a:	6863      	ldr	r3, [r4, #4]
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f84:	e7aa      	b.n	8006edc <_printf_i+0x148>
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	4632      	mov	r2, r6
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	47d0      	blx	sl
 8006f90:	3001      	adds	r0, #1
 8006f92:	d0ad      	beq.n	8006ef0 <_printf_i+0x15c>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	079b      	lsls	r3, r3, #30
 8006f98:	d413      	bmi.n	8006fc2 <_printf_i+0x22e>
 8006f9a:	68e0      	ldr	r0, [r4, #12]
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	4298      	cmp	r0, r3
 8006fa0:	bfb8      	it	lt
 8006fa2:	4618      	movlt	r0, r3
 8006fa4:	e7a6      	b.n	8006ef4 <_printf_i+0x160>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4632      	mov	r2, r6
 8006faa:	4649      	mov	r1, r9
 8006fac:	4640      	mov	r0, r8
 8006fae:	47d0      	blx	sl
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d09d      	beq.n	8006ef0 <_printf_i+0x15c>
 8006fb4:	3501      	adds	r5, #1
 8006fb6:	68e3      	ldr	r3, [r4, #12]
 8006fb8:	9903      	ldr	r1, [sp, #12]
 8006fba:	1a5b      	subs	r3, r3, r1
 8006fbc:	42ab      	cmp	r3, r5
 8006fbe:	dcf2      	bgt.n	8006fa6 <_printf_i+0x212>
 8006fc0:	e7eb      	b.n	8006f9a <_printf_i+0x206>
 8006fc2:	2500      	movs	r5, #0
 8006fc4:	f104 0619 	add.w	r6, r4, #25
 8006fc8:	e7f5      	b.n	8006fb6 <_printf_i+0x222>
 8006fca:	bf00      	nop
 8006fcc:	08007329 	.word	0x08007329
 8006fd0:	0800733a 	.word	0x0800733a

08006fd4 <__sflush_r>:
 8006fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	0716      	lsls	r6, r2, #28
 8006fde:	4605      	mov	r5, r0
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	d454      	bmi.n	800708e <__sflush_r+0xba>
 8006fe4:	684b      	ldr	r3, [r1, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	dc02      	bgt.n	8006ff0 <__sflush_r+0x1c>
 8006fea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	dd48      	ble.n	8007082 <__sflush_r+0xae>
 8006ff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ff2:	2e00      	cmp	r6, #0
 8006ff4:	d045      	beq.n	8007082 <__sflush_r+0xae>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ffc:	682f      	ldr	r7, [r5, #0]
 8006ffe:	6a21      	ldr	r1, [r4, #32]
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	d030      	beq.n	8007066 <__sflush_r+0x92>
 8007004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	0759      	lsls	r1, r3, #29
 800700a:	d505      	bpl.n	8007018 <__sflush_r+0x44>
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007012:	b10b      	cbz	r3, 8007018 <__sflush_r+0x44>
 8007014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	2300      	movs	r3, #0
 800701a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800701c:	6a21      	ldr	r1, [r4, #32]
 800701e:	4628      	mov	r0, r5
 8007020:	47b0      	blx	r6
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	d106      	bne.n	8007036 <__sflush_r+0x62>
 8007028:	6829      	ldr	r1, [r5, #0]
 800702a:	291d      	cmp	r1, #29
 800702c:	d82b      	bhi.n	8007086 <__sflush_r+0xb2>
 800702e:	4a2a      	ldr	r2, [pc, #168]	@ (80070d8 <__sflush_r+0x104>)
 8007030:	410a      	asrs	r2, r1
 8007032:	07d6      	lsls	r6, r2, #31
 8007034:	d427      	bmi.n	8007086 <__sflush_r+0xb2>
 8007036:	2200      	movs	r2, #0
 8007038:	6062      	str	r2, [r4, #4]
 800703a:	04d9      	lsls	r1, r3, #19
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	6022      	str	r2, [r4, #0]
 8007040:	d504      	bpl.n	800704c <__sflush_r+0x78>
 8007042:	1c42      	adds	r2, r0, #1
 8007044:	d101      	bne.n	800704a <__sflush_r+0x76>
 8007046:	682b      	ldr	r3, [r5, #0]
 8007048:	b903      	cbnz	r3, 800704c <__sflush_r+0x78>
 800704a:	6560      	str	r0, [r4, #84]	@ 0x54
 800704c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800704e:	602f      	str	r7, [r5, #0]
 8007050:	b1b9      	cbz	r1, 8007082 <__sflush_r+0xae>
 8007052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007056:	4299      	cmp	r1, r3
 8007058:	d002      	beq.n	8007060 <__sflush_r+0x8c>
 800705a:	4628      	mov	r0, r5
 800705c:	f7ff fbf2 	bl	8006844 <_free_r>
 8007060:	2300      	movs	r3, #0
 8007062:	6363      	str	r3, [r4, #52]	@ 0x34
 8007064:	e00d      	b.n	8007082 <__sflush_r+0xae>
 8007066:	2301      	movs	r3, #1
 8007068:	4628      	mov	r0, r5
 800706a:	47b0      	blx	r6
 800706c:	4602      	mov	r2, r0
 800706e:	1c50      	adds	r0, r2, #1
 8007070:	d1c9      	bne.n	8007006 <__sflush_r+0x32>
 8007072:	682b      	ldr	r3, [r5, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0c6      	beq.n	8007006 <__sflush_r+0x32>
 8007078:	2b1d      	cmp	r3, #29
 800707a:	d001      	beq.n	8007080 <__sflush_r+0xac>
 800707c:	2b16      	cmp	r3, #22
 800707e:	d11e      	bne.n	80070be <__sflush_r+0xea>
 8007080:	602f      	str	r7, [r5, #0]
 8007082:	2000      	movs	r0, #0
 8007084:	e022      	b.n	80070cc <__sflush_r+0xf8>
 8007086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800708a:	b21b      	sxth	r3, r3
 800708c:	e01b      	b.n	80070c6 <__sflush_r+0xf2>
 800708e:	690f      	ldr	r7, [r1, #16]
 8007090:	2f00      	cmp	r7, #0
 8007092:	d0f6      	beq.n	8007082 <__sflush_r+0xae>
 8007094:	0793      	lsls	r3, r2, #30
 8007096:	680e      	ldr	r6, [r1, #0]
 8007098:	bf08      	it	eq
 800709a:	694b      	ldreq	r3, [r1, #20]
 800709c:	600f      	str	r7, [r1, #0]
 800709e:	bf18      	it	ne
 80070a0:	2300      	movne	r3, #0
 80070a2:	eba6 0807 	sub.w	r8, r6, r7
 80070a6:	608b      	str	r3, [r1, #8]
 80070a8:	f1b8 0f00 	cmp.w	r8, #0
 80070ac:	dde9      	ble.n	8007082 <__sflush_r+0xae>
 80070ae:	6a21      	ldr	r1, [r4, #32]
 80070b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070b2:	4643      	mov	r3, r8
 80070b4:	463a      	mov	r2, r7
 80070b6:	4628      	mov	r0, r5
 80070b8:	47b0      	blx	r6
 80070ba:	2800      	cmp	r0, #0
 80070bc:	dc08      	bgt.n	80070d0 <__sflush_r+0xfc>
 80070be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d0:	4407      	add	r7, r0
 80070d2:	eba8 0800 	sub.w	r8, r8, r0
 80070d6:	e7e7      	b.n	80070a8 <__sflush_r+0xd4>
 80070d8:	dfbffffe 	.word	0xdfbffffe

080070dc <_fflush_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	690b      	ldr	r3, [r1, #16]
 80070e0:	4605      	mov	r5, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	b913      	cbnz	r3, 80070ec <_fflush_r+0x10>
 80070e6:	2500      	movs	r5, #0
 80070e8:	4628      	mov	r0, r5
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	b118      	cbz	r0, 80070f6 <_fflush_r+0x1a>
 80070ee:	6a03      	ldr	r3, [r0, #32]
 80070f0:	b90b      	cbnz	r3, 80070f6 <_fflush_r+0x1a>
 80070f2:	f7ff f9ad 	bl	8006450 <__sinit>
 80070f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0f3      	beq.n	80070e6 <_fflush_r+0xa>
 80070fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007100:	07d0      	lsls	r0, r2, #31
 8007102:	d404      	bmi.n	800710e <_fflush_r+0x32>
 8007104:	0599      	lsls	r1, r3, #22
 8007106:	d402      	bmi.n	800710e <_fflush_r+0x32>
 8007108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800710a:	f7ff fb98 	bl	800683e <__retarget_lock_acquire_recursive>
 800710e:	4628      	mov	r0, r5
 8007110:	4621      	mov	r1, r4
 8007112:	f7ff ff5f 	bl	8006fd4 <__sflush_r>
 8007116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007118:	07da      	lsls	r2, r3, #31
 800711a:	4605      	mov	r5, r0
 800711c:	d4e4      	bmi.n	80070e8 <_fflush_r+0xc>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	059b      	lsls	r3, r3, #22
 8007122:	d4e1      	bmi.n	80070e8 <_fflush_r+0xc>
 8007124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007126:	f7ff fb8b 	bl	8006840 <__retarget_lock_release_recursive>
 800712a:	e7dd      	b.n	80070e8 <_fflush_r+0xc>

0800712c <__swhatbuf_r>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	460c      	mov	r4, r1
 8007130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007134:	2900      	cmp	r1, #0
 8007136:	b096      	sub	sp, #88	@ 0x58
 8007138:	4615      	mov	r5, r2
 800713a:	461e      	mov	r6, r3
 800713c:	da0d      	bge.n	800715a <__swhatbuf_r+0x2e>
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007144:	f04f 0100 	mov.w	r1, #0
 8007148:	bf14      	ite	ne
 800714a:	2340      	movne	r3, #64	@ 0x40
 800714c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007150:	2000      	movs	r0, #0
 8007152:	6031      	str	r1, [r6, #0]
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	b016      	add	sp, #88	@ 0x58
 8007158:	bd70      	pop	{r4, r5, r6, pc}
 800715a:	466a      	mov	r2, sp
 800715c:	f000 f848 	bl	80071f0 <_fstat_r>
 8007160:	2800      	cmp	r0, #0
 8007162:	dbec      	blt.n	800713e <__swhatbuf_r+0x12>
 8007164:	9901      	ldr	r1, [sp, #4]
 8007166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800716a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800716e:	4259      	negs	r1, r3
 8007170:	4159      	adcs	r1, r3
 8007172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007176:	e7eb      	b.n	8007150 <__swhatbuf_r+0x24>

08007178 <__smakebuf_r>:
 8007178:	898b      	ldrh	r3, [r1, #12]
 800717a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800717c:	079d      	lsls	r5, r3, #30
 800717e:	4606      	mov	r6, r0
 8007180:	460c      	mov	r4, r1
 8007182:	d507      	bpl.n	8007194 <__smakebuf_r+0x1c>
 8007184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	2301      	movs	r3, #1
 800718e:	6163      	str	r3, [r4, #20]
 8007190:	b003      	add	sp, #12
 8007192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007194:	ab01      	add	r3, sp, #4
 8007196:	466a      	mov	r2, sp
 8007198:	f7ff ffc8 	bl	800712c <__swhatbuf_r>
 800719c:	9f00      	ldr	r7, [sp, #0]
 800719e:	4605      	mov	r5, r0
 80071a0:	4639      	mov	r1, r7
 80071a2:	4630      	mov	r0, r6
 80071a4:	f7ff fbba 	bl	800691c <_malloc_r>
 80071a8:	b948      	cbnz	r0, 80071be <__smakebuf_r+0x46>
 80071aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ae:	059a      	lsls	r2, r3, #22
 80071b0:	d4ee      	bmi.n	8007190 <__smakebuf_r+0x18>
 80071b2:	f023 0303 	bic.w	r3, r3, #3
 80071b6:	f043 0302 	orr.w	r3, r3, #2
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	e7e2      	b.n	8007184 <__smakebuf_r+0xc>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	6020      	str	r0, [r4, #0]
 80071c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c6:	81a3      	strh	r3, [r4, #12]
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071ce:	b15b      	cbz	r3, 80071e8 <__smakebuf_r+0x70>
 80071d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d4:	4630      	mov	r0, r6
 80071d6:	f000 f81d 	bl	8007214 <_isatty_r>
 80071da:	b128      	cbz	r0, 80071e8 <__smakebuf_r+0x70>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	431d      	orrs	r5, r3
 80071ec:	81a5      	strh	r5, [r4, #12]
 80071ee:	e7cf      	b.n	8007190 <__smakebuf_r+0x18>

080071f0 <_fstat_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d07      	ldr	r5, [pc, #28]	@ (8007210 <_fstat_r+0x20>)
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	f7f9 ff2d 	bl	800105c <_fstat>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d102      	bne.n	800720c <_fstat_r+0x1c>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	b103      	cbz	r3, 800720c <_fstat_r+0x1c>
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	bd38      	pop	{r3, r4, r5, pc}
 800720e:	bf00      	nop
 8007210:	20000400 	.word	0x20000400

08007214 <_isatty_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d06      	ldr	r5, [pc, #24]	@ (8007230 <_isatty_r+0x1c>)
 8007218:	2300      	movs	r3, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	602b      	str	r3, [r5, #0]
 8007220:	f7f9 ff2c 	bl	800107c <_isatty>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_isatty_r+0x1a>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_isatty_r+0x1a>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20000400 	.word	0x20000400

08007234 <_sbrk_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4d06      	ldr	r5, [pc, #24]	@ (8007250 <_sbrk_r+0x1c>)
 8007238:	2300      	movs	r3, #0
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	602b      	str	r3, [r5, #0]
 8007240:	f7f9 ff34 	bl	80010ac <_sbrk>
 8007244:	1c43      	adds	r3, r0, #1
 8007246:	d102      	bne.n	800724e <_sbrk_r+0x1a>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	b103      	cbz	r3, 800724e <_sbrk_r+0x1a>
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	20000400 	.word	0x20000400

08007254 <_init>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr

08007260 <_fini>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr
