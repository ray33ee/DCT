
microDCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b428  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800b608  0800b608  0000c608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbd8  0800bbd8  0000d214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bbd8  0800bbd8  0000cbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbe0  0800bbe0  0000d214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbe0  0800bbe0  0000cbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bbe4  0800bbe4  0000cbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800bbe8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000214  0800bdfc  0000d214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  0800bdfc  0000d664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eade  00000000  00000000  0000d244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd6  00000000  00000000  0002bd22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  0002fcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001452  00000000  00000000  00031740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc7a  00000000  00000000  00032b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d60  00000000  00000000  0005e80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011817b  00000000  00000000  0008056c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001986e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080fc  00000000  00000000  0019872c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001a0828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000214 	.word	0x20000214
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b5f0 	.word	0x0800b5f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000218 	.word	0x20000218
 800021c:	0800b5f0 	.word	0x0800b5f0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <executable_init>:
 *      Author: Will
 */

#include "executable.h"

void executable_init(struct Executable_State* executable) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	executable->rom = NULL;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
	executable->rom_length = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <get_length_from_uart>:

void get_length_from_uart(struct Executable_State* executable) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09c      	sub	sp, #112	@ 0x70
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]


	uint8_t buff[100];


	read_uart_into_buffer(buff, 100, '\n');
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	220a      	movs	r2, #10
 8000f52:	2164      	movs	r1, #100	@ 0x64
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fa2b 	bl	80023b0 <read_uart_into_buffer>

	uint32_t len = atoi(buff);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f007 fdc2 	bl	8008ae8 <atoi>
 8000f64:	4603      	mov	r3, r0
 8000f66:	66fb      	str	r3, [r7, #108]	@ 0x6c

	//If len == 0 there is an issue

	executable->rom_length = len;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000f6c:	605a      	str	r2, [r3, #4]
}
 8000f6e:	bf00      	nop
 8000f70:	3770      	adds	r7, #112	@ 0x70
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <get_rom_from_uart>:

void get_rom_from_uart(struct Executable_State* executable) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	free(executable->rom);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f007 fdbc 	bl	8008b00 <free>

	executable->rom = malloc(executable->rom_length);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 fdaf 	bl	8008af0 <malloc>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]

	//If executable->rom is null, allocation failed

	uint8_t buff[5];

	for (uint32_t i = 0; i < executable->rom_length; i++) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e017      	b.n	8000fd0 <get_rom_from_uart+0x5a>
		read_uart_into_buffer(buff, 5, '\n');
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	220a      	movs	r2, #10
 8000fa6:	2105      	movs	r1, #5
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fa01 	bl	80023b0 <read_uart_into_buffer>

		uint32_t byte = atoi(buff);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f007 fd98 	bl	8008ae8 <atoi>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	613b      	str	r3, [r7, #16]

		executable->rom[i] = (uint8_t)byte;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < executable->rom_length; i++) {
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3e2      	bcc.n	8000fa0 <get_rom_from_uart+0x2a>
	}


}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fe8:	b0a8      	sub	sp, #160	@ 0xa0
 8000fea:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f002 faed 	bl	80035ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 f970 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f000 fbee 	bl	80017d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ff8:	f000 fadc 	bl	80015b4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ffc:	f000 fb9e 	bl	800173c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001000:	f000 fa82 	bl	8001508 <MX_I2C1_Init>
  MX_ADC2_Init();
 8001004:	f000 f9b2 	bl	800136c <MX_ADC2_Init>
  MX_ADC5_Init();
 8001008:	f000 fa18 	bl	800143c <MX_ADC5_Init>
  MX_RNG_Init();
 800100c:	f000 fabc 	bl	8001588 <MX_RNG_Init>
  MX_TIM3_Init();
 8001010:	f000 fb46 	bl	80016a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //Timer 3 is used in misc_delay_us
  HAL_TIM_Base_Start(&htim3);
 8001014:	48a0      	ldr	r0, [pc, #640]	@ (8001298 <main+0x2b4>)
 8001016:	f005 fc5f 	bl	80068d8 <HAL_TIM_Base_Start>

  uint8_t buff[100];

  /* Setup PP */

  pp_init(&pp_state, &hi2c1);
 800101a:	49a0      	ldr	r1, [pc, #640]	@ (800129c <main+0x2b8>)
 800101c:	48a0      	ldr	r0, [pc, #640]	@ (80012a0 <main+0x2bc>)
 800101e:	f000 fcbf 	bl	80019a0 <pp_init>

  /* Setup VM */

  const uint32_t call_stack_size = 100;
 8001022:	2364      	movs	r3, #100	@ 0x64
 8001024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  const uint32_t operand_stack_size = 100;
 8001028:	2364      	movs	r3, #100	@ 0x64
 800102a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  uint32_t call_stack[call_stack_size];
 800102e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001032:	3b01      	subs	r3, #1
 8001034:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001038:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800103c:	2200      	movs	r2, #0
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	014b      	lsls	r3, r1, #5
 800104e:	6839      	ldr	r1, [r7, #0]
 8001050:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001054:	6839      	ldr	r1, [r7, #0]
 8001056:	014a      	lsls	r2, r1, #5
 8001058:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800105c:	2200      	movs	r2, #0
 800105e:	469a      	mov	sl, r3
 8001060:	4693      	mov	fp, r2
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800106e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001072:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001076:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	3307      	adds	r3, #7
 800107e:	08db      	lsrs	r3, r3, #3
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	ebad 0d03 	sub.w	sp, sp, r3
 8001086:	ab04      	add	r3, sp, #16
 8001088:	3303      	adds	r3, #3
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t operand_stack[operand_stack_size];
 8001090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001094:	3b01      	subs	r3, #1
 8001096:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001098:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800109c:	2200      	movs	r2, #0
 800109e:	4698      	mov	r8, r3
 80010a0:	4691      	mov	r9, r2
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80010ae:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80010b2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80010b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010ba:	2200      	movs	r2, #0
 80010bc:	461c      	mov	r4, r3
 80010be:	4615      	mov	r5, r2
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	016b      	lsls	r3, r5, #5
 80010ca:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80010ce:	0162      	lsls	r2, r4, #5
 80010d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	3307      	adds	r3, #7
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	ebad 0d03 	sub.w	sp, sp, r3
 80010e0:	ab04      	add	r3, sp, #16
 80010e2:	3303      	adds	r3, #3
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	677b      	str	r3, [r7, #116]	@ 0x74

  executable_init(&exec_state);
 80010ea:	486e      	ldr	r0, [pc, #440]	@ (80012a4 <main+0x2c0>)
 80010ec:	f7ff ff1a 	bl	8000f24 <executable_init>

  vm_init(&vm_state, call_stack, operand_stack, call_stack_size, operand_stack_size, &exec_state, &pp_state);
 80010f0:	4b6b      	ldr	r3, [pc, #428]	@ (80012a0 <main+0x2bc>)
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	4b6b      	ldr	r3, [pc, #428]	@ (80012a4 <main+0x2c0>)
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001102:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001104:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001106:	4868      	ldr	r0, [pc, #416]	@ (80012a8 <main+0x2c4>)
 8001108:	f001 f9d9 	bl	80024be <vm_init>

  /* Setup RNG */

  rng_global_init(&hrng);
 800110c:	4867      	ldr	r0, [pc, #412]	@ (80012ac <main+0x2c8>)
 800110e:	f000 fdbd 	bl	8001c8c <rng_global_init>

  int r1 = soft_i2c_receive(&h2i2c, 0x3c, &who_am_i, 1);

  printf("Soft i2c %i\n", who_am_i);*/

  psu_init(&psu_state, &hadc2, &hadc5, &htim2, &TIM2->CCR1, TIM_CHANNEL_1);
 8001112:	2300      	movs	r3, #0
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	4b66      	ldr	r3, [pc, #408]	@ (80012b0 <main+0x2cc>)
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	4b66      	ldr	r3, [pc, #408]	@ (80012b4 <main+0x2d0>)
 800111c:	4a66      	ldr	r2, [pc, #408]	@ (80012b8 <main+0x2d4>)
 800111e:	4967      	ldr	r1, [pc, #412]	@ (80012bc <main+0x2d8>)
 8001120:	4867      	ldr	r0, [pc, #412]	@ (80012c0 <main+0x2dc>)
 8001122:	f000 fd7b 	bl	8001c1c <psu_init>

  psu_intensity(&psu_state, 0);
 8001126:	2100      	movs	r1, #0
 8001128:	4865      	ldr	r0, [pc, #404]	@ (80012c0 <main+0x2dc>)
 800112a:	f000 fd9f 	bl	8001c6c <psu_intensity>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  read_uart_into_buffer(buff, 100, '\n');
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	220a      	movs	r2, #10
 8001134:	2164      	movs	r1, #100	@ 0x64
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f93a 	bl	80023b0 <read_uart_into_buffer>

	  if (buff[0] == '0') {
 800113c:	7a3b      	ldrb	r3, [r7, #8]
 800113e:	2b30      	cmp	r3, #48	@ 0x30
 8001140:	d11a      	bne.n	8001178 <main+0x194>

		  read_uart_into_buffer(buff, 100, '\n');
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	220a      	movs	r2, #10
 8001148:	2164      	movs	r1, #100	@ 0x64
 800114a:	4618      	mov	r0, r3
 800114c:	f001 f930 	bl	80023b0 <read_uart_into_buffer>

		  uint32_t timeout = atoi(buff);
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	4618      	mov	r0, r3
 8001156:	f007 fcc7 	bl	8008ae8 <atoi>
 800115a:	4603      	mov	r3, r0
 800115c:	66fb      	str	r3, [r7, #108]	@ 0x6c

		  vm_state.timeout = timeout;
 800115e:	4a52      	ldr	r2, [pc, #328]	@ (80012a8 <main+0x2c4>)
 8001160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001162:	6293      	str	r3, [r2, #40]	@ 0x28

		  get_length_from_uart(&exec_state);
 8001164:	484f      	ldr	r0, [pc, #316]	@ (80012a4 <main+0x2c0>)
 8001166:	f7ff feed 	bl	8000f44 <get_length_from_uart>

		  get_rom_from_uart(&exec_state);
 800116a:	484e      	ldr	r0, [pc, #312]	@ (80012a4 <main+0x2c0>)
 800116c:	f7ff ff03 	bl	8000f76 <get_rom_from_uart>

		  printf("ack\n");
 8001170:	4854      	ldr	r0, [pc, #336]	@ (80012c4 <main+0x2e0>)
 8001172:	f008 fb7f 	bl	8009874 <puts>
 8001176:	e7da      	b.n	800112e <main+0x14a>


	  } else if (buff[0] == '1') {
 8001178:	7a3b      	ldrb	r3, [r7, #8]
 800117a:	2b31      	cmp	r3, #49	@ 0x31
 800117c:	d133      	bne.n	80011e6 <main+0x202>

		  printf("%i\n", (int)vm_state.pc);
 800117e:	4b4a      	ldr	r3, [pc, #296]	@ (80012a8 <main+0x2c4>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4619      	mov	r1, r3
 8001184:	4850      	ldr	r0, [pc, #320]	@ (80012c8 <main+0x2e4>)
 8001186:	f008 fb0d 	bl	80097a4 <iprintf>
		  printf("%i\n", (int)vm_state.osp);
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <main+0x2c4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4619      	mov	r1, r3
 8001190:	484d      	ldr	r0, [pc, #308]	@ (80012c8 <main+0x2e4>)
 8001192:	f008 fb07 	bl	80097a4 <iprintf>
		  printf("%i\n", (int)vm_state.csp);
 8001196:	4b44      	ldr	r3, [pc, #272]	@ (80012a8 <main+0x2c4>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4619      	mov	r1, r3
 800119c:	484a      	ldr	r0, [pc, #296]	@ (80012c8 <main+0x2e4>)
 800119e:	f008 fb01 	bl	80097a4 <iprintf>
		  printf("%i\n", (int)vm_state.exec->rom[vm_state.pc]);
 80011a2:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <main+0x2c4>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <main+0x2c4>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4845      	ldr	r0, [pc, #276]	@ (80012c8 <main+0x2e4>)
 80011b4:	f008 faf6 	bl	80097a4 <iprintf>
		  if (vm_state.osp != -1) {
 80011b8:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <main+0x2c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d007      	beq.n	80011d2 <main+0x1ee>
			  printf("%i\n", (int)vm_peek_ops(&vm_state));
 80011c2:	4839      	ldr	r0, [pc, #228]	@ (80012a8 <main+0x2c4>)
 80011c4:	f001 f96a 	bl	800249c <vm_peek_ops>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4619      	mov	r1, r3
 80011cc:	483e      	ldr	r0, [pc, #248]	@ (80012c8 <main+0x2e4>)
 80011ce:	f008 fae9 	bl	80097a4 <iprintf>
		  }
		  printf("%i\n", (int)vm_state.bp);
 80011d2:	4b35      	ldr	r3, [pc, #212]	@ (80012a8 <main+0x2c4>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	483b      	ldr	r0, [pc, #236]	@ (80012c8 <main+0x2e4>)
 80011da:	f008 fae3 	bl	80097a4 <iprintf>


		  printf("ack\n");
 80011de:	4839      	ldr	r0, [pc, #228]	@ (80012c4 <main+0x2e0>)
 80011e0:	f008 fb48 	bl	8009874 <puts>
 80011e4:	e7a3      	b.n	800112e <main+0x14a>

	  } else if (buff[0] == '2') {
 80011e6:	7a3b      	ldrb	r3, [r7, #8]
 80011e8:	2b32      	cmp	r3, #50	@ 0x32
 80011ea:	d127      	bne.n	800123c <main+0x258>
		  uint32_t r = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

		  vm_reset(&vm_state);
 80011f2:	482d      	ldr	r0, [pc, #180]	@ (80012a8 <main+0x2c4>)
 80011f4:	f001 f983 	bl	80024fe <vm_reset>

		  vm_start_timer(&vm_state);
 80011f8:	482b      	ldr	r0, [pc, #172]	@ (80012a8 <main+0x2c4>)
 80011fa:	f001 f998 	bl	800252e <vm_start_timer>

		  while (r == 0) {
 80011fe:	e004      	b.n	800120a <main+0x226>
			  r = vm_execute(&vm_state);
 8001200:	4829      	ldr	r0, [pc, #164]	@ (80012a8 <main+0x2c4>)
 8001202:	f001 f9dd 	bl	80025c0 <vm_execute>
 8001206:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
		  while (r == 0) {
 800120a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f6      	beq.n	8001200 <main+0x21c>
		  }

		  printf("done\n");
 8001212:	482e      	ldr	r0, [pc, #184]	@ (80012cc <main+0x2e8>)
 8001214:	f008 fb2e 	bl	8009874 <puts>

		  printf("%i\n", r);
 8001218:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800121c:	482a      	ldr	r0, [pc, #168]	@ (80012c8 <main+0x2e4>)
 800121e:	f008 fac1 	bl	80097a4 <iprintf>

		  if (r == FAILURE) {
 8001222:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001226:	2b02      	cmp	r3, #2
 8001228:	d181      	bne.n	800112e <main+0x14a>
			  //If the result was a failure, send the top of the stack as the error code or reason
			  printf("%i\n", vm_peek_ops(&vm_state));
 800122a:	481f      	ldr	r0, [pc, #124]	@ (80012a8 <main+0x2c4>)
 800122c:	f001 f936 	bl	800249c <vm_peek_ops>
 8001230:	4603      	mov	r3, r0
 8001232:	4619      	mov	r1, r3
 8001234:	4824      	ldr	r0, [pc, #144]	@ (80012c8 <main+0x2e4>)
 8001236:	f008 fab5 	bl	80097a4 <iprintf>
 800123a:	e778      	b.n	800112e <main+0x14a>
		  }
	  } else if (buff[0] == '3') {
 800123c:	7a3b      	ldrb	r3, [r7, #8]
 800123e:	2b33      	cmp	r3, #51	@ 0x33
 8001240:	d10b      	bne.n	800125a <main+0x276>

		  //Read the pin configs into the state
		  read_uart_into_buffer(&(pp_state.pin_configs), 16, '\n');
 8001242:	220a      	movs	r2, #10
 8001244:	2110      	movs	r1, #16
 8001246:	4822      	ldr	r0, [pc, #136]	@ (80012d0 <main+0x2ec>)
 8001248:	f001 f8b2 	bl	80023b0 <read_uart_into_buffer>

		  //Apply the state
		  pp_setup(&pp_state);
 800124c:	4814      	ldr	r0, [pc, #80]	@ (80012a0 <main+0x2bc>)
 800124e:	f000 fbcf 	bl	80019f0 <pp_setup>

		  printf("ack\n");
 8001252:	481c      	ldr	r0, [pc, #112]	@ (80012c4 <main+0x2e0>)
 8001254:	f008 fb0e 	bl	8009874 <puts>
 8001258:	e769      	b.n	800112e <main+0x14a>


	  } else if (buff[0] == '4') {
 800125a:	7a3b      	ldrb	r3, [r7, #8]
 800125c:	2b34      	cmp	r3, #52	@ 0x34
 800125e:	f47f af66 	bne.w	800112e <main+0x14a>

		  read_uart_into_buffer(buff, 100, '\n');
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	220a      	movs	r2, #10
 8001268:	2164      	movs	r1, #100	@ 0x64
 800126a:	4618      	mov	r0, r3
 800126c:	f001 f8a0 	bl	80023b0 <read_uart_into_buffer>

		  uint32_t num = atoi(buff);
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	4618      	mov	r0, r3
 8001276:	f007 fc37 	bl	8008ae8 <atoi>
 800127a:	4603      	mov	r3, r0
 800127c:	673b      	str	r3, [r7, #112]	@ 0x70

		  psu_intensity(&psu_state, num);
 800127e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001280:	480f      	ldr	r0, [pc, #60]	@ (80012c0 <main+0x2dc>)
 8001282:	f000 fcf3 	bl	8001c6c <psu_intensity>

		  printf("%i\n", num);
 8001286:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001288:	480f      	ldr	r0, [pc, #60]	@ (80012c8 <main+0x2e4>)
 800128a:	f008 fa8b 	bl	80097a4 <iprintf>

		  printf("ack\n");
 800128e:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <main+0x2e0>)
 8001290:	f008 faf0 	bl	8009874 <puts>
	  read_uart_into_buffer(buff, 100, '\n');
 8001294:	e74b      	b.n	800112e <main+0x14a>
 8001296:	bf00      	nop
 8001298:	200003bc 	.word	0x200003bc
 800129c:	20000308 	.word	0x20000308
 80012a0:	200004f0 	.word	0x200004f0
 80012a4:	2000049c 	.word	0x2000049c
 80012a8:	200004a4 	.word	0x200004a4
 80012ac:	2000035c 	.word	0x2000035c
 80012b0:	40000034 	.word	0x40000034
 80012b4:	20000370 	.word	0x20000370
 80012b8:	2000029c 	.word	0x2000029c
 80012bc:	20000230 	.word	0x20000230
 80012c0:	200004dc 	.word	0x200004dc
 80012c4:	0800b608 	.word	0x0800b608
 80012c8:	0800b60c 	.word	0x0800b60c
 80012cc:	0800b610 	.word	0x0800b610
 80012d0:	200004f8 	.word	0x200004f8

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	@ 0x50
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	2238      	movs	r2, #56	@ 0x38
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f008 fba6 	bl	8009a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012fa:	f004 f9db 	bl	80056b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001302:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001308:	2340      	movs	r3, #64	@ 0x40
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2302      	movs	r3, #2
 800130e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001314:	2301      	movs	r3, #1
 8001316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001318:	230c      	movs	r3, #12
 800131a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001320:	2304      	movs	r3, #4
 8001322:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fa75 	bl	800581c <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001338:	f000 fa94 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133c:	230f      	movs	r3, #15
 800133e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001340:	2303      	movs	r3, #3
 8001342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2103      	movs	r1, #3
 8001354:	4618      	mov	r0, r3
 8001356:	f004 fd73 	bl	8005e40 <HAL_RCC_ClockConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001360:	f000 fa80 	bl	8001864 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	3750      	adds	r7, #80	@ 0x50
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2220      	movs	r2, #32
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f008 fb5b 	bl	8009a34 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800137e:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <MX_ADC2_Init+0xc0>)
 8001380:	4a2b      	ldr	r2, [pc, #172]	@ (8001430 <MX_ADC2_Init+0xc4>)
 8001382:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001384:	4b29      	ldr	r3, [pc, #164]	@ (800142c <MX_ADC2_Init+0xc0>)
 8001386:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800138a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800138c:	4b27      	ldr	r3, [pc, #156]	@ (800142c <MX_ADC2_Init+0xc0>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001392:	4b26      	ldr	r3, [pc, #152]	@ (800142c <MX_ADC2_Init+0xc0>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <MX_ADC2_Init+0xc0>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139e:	4b23      	ldr	r3, [pc, #140]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a4:	4b21      	ldr	r3, [pc, #132]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013a6:	2204      	movs	r2, #4
 80013a8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c4:	4b19      	ldr	r3, [pc, #100]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80013de:	4b13      	ldr	r3, [pc, #76]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013e6:	4811      	ldr	r0, [pc, #68]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013e8:	f002 fb7e 	bl	8003ae8 <HAL_ADC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80013f2:	f000 fa37 	bl	8001864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_ADC2_Init+0xc8>)
 80013f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013fa:	2306      	movs	r3, #6
 80013fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <MX_ADC2_Init+0xcc>)
 8001404:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001406:	2304      	movs	r3, #4
 8001408:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	@ (800142c <MX_ADC2_Init+0xc0>)
 8001414:	f002 fd24 	bl	8003e60 <HAL_ADC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800141e:	f000 fa21 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000230 	.word	0x20000230
 8001430:	50000100 	.word	0x50000100
 8001434:	0c900008 	.word	0x0c900008
 8001438:	407f0000 	.word	0x407f0000

0800143c <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	2220      	movs	r2, #32
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f008 faf3 	bl	8009a34 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800144e:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <MX_ADC5_Init+0xc0>)
 8001450:	4a2b      	ldr	r2, [pc, #172]	@ (8001500 <MX_ADC5_Init+0xc4>)
 8001452:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001454:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <MX_ADC5_Init+0xc0>)
 8001456:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800145a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800145c:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <MX_ADC5_Init+0xc0>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001462:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <MX_ADC5_Init+0xc0>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001468:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <MX_ADC5_Init+0xc0>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <MX_ADC5_Init+0xc0>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001474:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <MX_ADC5_Init+0xc0>)
 8001476:	2204      	movs	r2, #4
 8001478:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800147a:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <MX_ADC5_Init+0xc0>)
 800147c:	2200      	movs	r2, #0
 800147e:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001480:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <MX_ADC5_Init+0xc0>)
 8001482:	2200      	movs	r2, #0
 8001484:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001486:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <MX_ADC5_Init+0xc0>)
 8001488:	2201      	movs	r2, #1
 800148a:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <MX_ADC5_Init+0xc0>)
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <MX_ADC5_Init+0xc0>)
 8001496:	2200      	movs	r2, #0
 8001498:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <MX_ADC5_Init+0xc0>)
 800149c:	2200      	movs	r2, #0
 800149e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <MX_ADC5_Init+0xc0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014a8:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_ADC5_Init+0xc0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80014ae:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <MX_ADC5_Init+0xc0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80014b6:	4811      	ldr	r0, [pc, #68]	@ (80014fc <MX_ADC5_Init+0xc0>)
 80014b8:	f002 fb16 	bl	8003ae8 <HAL_ADC_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80014c2:	f000 f9cf 	bl	8001864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_ADC5_Init+0xc8>)
 80014c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ca:	2306      	movs	r3, #6
 80014cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014d2:	237f      	movs	r3, #127	@ 0x7f
 80014d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014d6:	2304      	movs	r3, #4
 80014d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	@ (80014fc <MX_ADC5_Init+0xc0>)
 80014e4:	f002 fcbc 	bl	8003e60 <HAL_ADC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80014ee:	f000 f9b9 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000029c 	.word	0x2000029c
 8001500:	50000600 	.word	0x50000600
 8001504:	04300002 	.word	0x04300002

08001508 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <MX_I2C1_Init+0x74>)
 800150e:	4a1c      	ldr	r2, [pc, #112]	@ (8001580 <MX_I2C1_Init+0x78>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B17DB6;
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_I2C1_Init+0x74>)
 8001514:	4a1b      	ldr	r2, [pc, #108]	@ (8001584 <MX_I2C1_Init+0x7c>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <MX_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_I2C1_Init+0x74>)
 8001520:	2201      	movs	r2, #1
 8001522:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_I2C1_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <MX_I2C1_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_I2C1_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153c:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001542:	480e      	ldr	r0, [pc, #56]	@ (800157c <MX_I2C1_Init+0x74>)
 8001544:	f003 fc50 	bl	8004de8 <HAL_I2C_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800154e:	f000 f989 	bl	8001864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001552:	2100      	movs	r1, #0
 8001554:	4809      	ldr	r0, [pc, #36]	@ (800157c <MX_I2C1_Init+0x74>)
 8001556:	f004 f815 	bl	8005584 <HAL_I2CEx_ConfigAnalogFilter>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001560:	f000 f980 	bl	8001864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001564:	2100      	movs	r1, #0
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_I2C1_Init+0x74>)
 8001568:	f004 f857 	bl	800561a <HAL_I2CEx_ConfigDigitalFilter>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001572:	f000 f977 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000308 	.word	0x20000308
 8001580:	40005400 	.word	0x40005400
 8001584:	20b17db6 	.word	0x20b17db6

08001588 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <MX_RNG_Init+0x24>)
 800158e:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <MX_RNG_Init+0x28>)
 8001590:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_RNG_Init+0x24>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	@ (80015ac <MX_RNG_Init+0x24>)
 800159a:	f005 f8bb 	bl	8006714 <HAL_RNG_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80015a4:	f000 f95e 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000035c 	.word	0x2000035c
 80015b0:	50060800 	.word	0x50060800

080015b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	@ 0x38
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e6:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015ee:	4b2b      	ldr	r3, [pc, #172]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b29      	ldr	r3, [pc, #164]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 80015fa:	4b28      	ldr	r3, [pc, #160]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015fc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8001600:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001602:	4b26      	ldr	r3, [pc, #152]	@ (800169c <MX_TIM2_Init+0xe8>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <MX_TIM2_Init+0xe8>)
 800160a:	2280      	movs	r2, #128	@ 0x80
 800160c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160e:	4823      	ldr	r0, [pc, #140]	@ (800169c <MX_TIM2_Init+0xe8>)
 8001610:	f005 f90b 	bl	800682a <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800161a:	f000 f923 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001624:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001628:	4619      	mov	r1, r3
 800162a:	481c      	ldr	r0, [pc, #112]	@ (800169c <MX_TIM2_Init+0xe8>)
 800162c:	f005 fc4c 	bl	8006ec8 <HAL_TIM_ConfigClockSource>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001636:	f000 f915 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800163a:	4818      	ldr	r0, [pc, #96]	@ (800169c <MX_TIM2_Init+0xe8>)
 800163c:	f005 f9bc 	bl	80069b8 <HAL_TIM_PWM_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001646:	f000 f90d 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4810      	ldr	r0, [pc, #64]	@ (800169c <MX_TIM2_Init+0xe8>)
 800165a:	f006 f9eb 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001664:	f000 f8fe 	bl	8001864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001668:	2360      	movs	r3, #96	@ 0x60
 800166a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	4807      	ldr	r0, [pc, #28]	@ (800169c <MX_TIM2_Init+0xe8>)
 8001680:	f005 fb0e 	bl	8006ca0 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800168a:	f000 f8eb 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800168e:	4803      	ldr	r0, [pc, #12]	@ (800169c <MX_TIM2_Init+0xe8>)
 8001690:	f000 fce8 	bl	8002064 <HAL_TIM_MspPostInit>

}
 8001694:	bf00      	nop
 8001696:	3738      	adds	r7, #56	@ 0x38
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000370 	.word	0x20000370

080016a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <MX_TIM3_Init+0x94>)
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <MX_TIM3_Init+0x98>)
 80016c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_TIM3_Init+0x94>)
 80016c6:	225f      	movs	r2, #95	@ 0x5f
 80016c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <MX_TIM3_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_TIM3_Init+0x94>)
 80016d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_TIM3_Init+0x94>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <MX_TIM3_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e4:	4813      	ldr	r0, [pc, #76]	@ (8001734 <MX_TIM3_Init+0x94>)
 80016e6:	f005 f8a0 	bl	800682a <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016f0:	f000 f8b8 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <MX_TIM3_Init+0x94>)
 8001702:	f005 fbe1 	bl	8006ec8 <HAL_TIM_ConfigClockSource>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800170c:	f000 f8aa 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_TIM3_Init+0x94>)
 800171e:	f006 f989 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001728:	f000 f89c 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200003bc 	.word	0x200003bc
 8001738:	40000400 	.word	0x40000400

0800173c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001740:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 8001742:	4a23      	ldr	r2, [pc, #140]	@ (80017d0 <MX_USART2_UART_Init+0x94>)
 8001744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001746:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 8001748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800174c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001772:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001784:	4811      	ldr	r0, [pc, #68]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 8001786:	f006 f9eb 	bl	8007b60 <HAL_UART_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001790:	f000 f868 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001794:	2100      	movs	r1, #0
 8001796:	480d      	ldr	r0, [pc, #52]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 8001798:	f007 f8dc 	bl	8008954 <HAL_UARTEx_SetTxFifoThreshold>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017a2:	f000 f85f 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a6:	2100      	movs	r1, #0
 80017a8:	4808      	ldr	r0, [pc, #32]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 80017aa:	f007 f911 	bl	80089d0 <HAL_UARTEx_SetRxFifoThreshold>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017b4:	f000 f856 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <MX_USART2_UART_Init+0x90>)
 80017ba:	f007 f892 	bl	80088e2 <HAL_UARTEx_DisableFifoMode>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017c4:	f000 f84e 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000408 	.word	0x20000408
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_GPIO_Init+0x8c>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a20      	ldr	r2, [pc, #128]	@ (8001860 <MX_GPIO_Init+0x8c>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_GPIO_Init+0x8c>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <MX_GPIO_Init+0x8c>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001860 <MX_GPIO_Init+0x8c>)
 80017f8:	f043 0320 	orr.w	r3, r3, #32
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_GPIO_Init+0x8c>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_GPIO_Init+0x8c>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	4a14      	ldr	r2, [pc, #80]	@ (8001860 <MX_GPIO_Init+0x8c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_GPIO_Init+0x8c>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_GPIO_Init+0x8c>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	4a0e      	ldr	r2, [pc, #56]	@ (8001860 <MX_GPIO_Init+0x8c>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_GPIO_Init+0x8c>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_GPIO_Init+0x8c>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <MX_GPIO_Init+0x8c>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_GPIO_Init+0x8c>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
/* USER CODE END MX_GPIO_Init_2 */
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <Error_Handler+0x8>

08001870 <mcp23017_init>:

#include "mcp23017.h"



void mcp23017_init(struct MCP23017_HANDLE * mcp_handle, uint16_t opcode, I2C_HandleTypeDef* _hi2c) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	460b      	mov	r3, r1
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	817b      	strh	r3, [r7, #10]
	const uint8_t CLEAR_GPIO_MESSAGE[] = {GPIOA_REGISTER_ADDRESS, 0x00, 0x00};
 800187e:	4a1a      	ldr	r2, [pc, #104]	@ (80018e8 <mcp23017_init+0x78>)
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	4611      	mov	r1, r2
 8001888:	8019      	strh	r1, [r3, #0]
 800188a:	3302      	adds	r3, #2
 800188c:	0c12      	lsrs	r2, r2, #16
 800188e:	701a      	strb	r2, [r3, #0]
	const uint8_t SET_OUTPUT_MESSAGE[] = {IODIRA_REGISTER_ADDRESS, 0x00, 0x00};
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	2100      	movs	r1, #0
 8001896:	460a      	mov	r2, r1
 8001898:	801a      	strh	r2, [r3, #0]
 800189a:	460a      	mov	r2, r1
 800189c:	709a      	strb	r2, [r3, #2]

	//Clear the GPIOA and GPIOB registers BEFORE we set the GPIO to outputs
	if (HAL_I2C_Master_Transmit(_hi2c, opcode, CLEAR_GPIO_MESSAGE, sizeof(CLEAR_GPIO_MESSAGE), 10) != HAL_OK) {
 800189e:	f107 0214 	add.w	r2, r7, #20
 80018a2:	8979      	ldrh	r1, [r7, #10]
 80018a4:	230a      	movs	r3, #10
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2303      	movs	r3, #3
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f003 fb38 	bl	8004f20 <HAL_I2C_Master_Transmit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <mcp23017_init+0x4c>
		//error
		printf("mcp23017_init clear registers error\n");
 80018b6:	480d      	ldr	r0, [pc, #52]	@ (80018ec <mcp23017_init+0x7c>)
 80018b8:	f007 ffdc 	bl	8009874 <puts>
	}

	//Set all the GPIO pins to output
	if (HAL_I2C_Master_Transmit(_hi2c, opcode, SET_OUTPUT_MESSAGE, sizeof(SET_OUTPUT_MESSAGE), 10) != HAL_OK) {
 80018bc:	f107 0210 	add.w	r2, r7, #16
 80018c0:	8979      	ldrh	r1, [r7, #10]
 80018c2:	230a      	movs	r3, #10
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2303      	movs	r3, #3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f003 fb29 	bl	8004f20 <HAL_I2C_Master_Transmit>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <mcp23017_init+0x6a>
		//error
		printf("mcp23017_init set pins to output error\n");
 80018d4:	4806      	ldr	r0, [pc, #24]	@ (80018f0 <mcp23017_init+0x80>)
 80018d6:	f007 ffcd 	bl	8009874 <puts>
	}

	mcp_handle->hi2c = _hi2c;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	601a      	str	r2, [r3, #0]
}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	0800b664 	.word	0x0800b664
 80018ec:	0800b618 	.word	0x0800b618
 80018f0:	0800b63c 	.word	0x0800b63c

080018f4 <mcp23017_gpio>:

void mcp23017_gpio(struct MCP23017_HANDLE * mcp_handle, uint16_t opcode, uint16_t gpio_a_b) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	803b      	strh	r3, [r7, #0]

	uint8_t a = gpio_a_b & 0xff;
 8001904:	883b      	ldrh	r3, [r7, #0]
 8001906:	73fb      	strb	r3, [r7, #15]
	uint8_t b = gpio_a_b >> 8;
 8001908:	883b      	ldrh	r3, [r7, #0]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b29b      	uxth	r3, r3
 800190e:	73bb      	strb	r3, [r7, #14]

	const uint8_t WRITE_GPIO_MESSAGE_A[] = {GPIOA_REGISTER_ADDRESS, a};
 8001910:	2312      	movs	r3, #18
 8001912:	733b      	strb	r3, [r7, #12]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(mcp_handle->hi2c, opcode, WRITE_GPIO_MESSAGE_A, sizeof(WRITE_GPIO_MESSAGE_A), 10) != HAL_OK) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	f107 020c 	add.w	r2, r7, #12
 8001920:	8879      	ldrh	r1, [r7, #2]
 8001922:	230a      	movs	r3, #10
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2302      	movs	r3, #2
 8001928:	f003 fafa 	bl	8004f20 <HAL_I2C_Master_Transmit>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <mcp23017_gpio+0x44>
		//error
		printf("mcp23017_gpio write registers error\n");
 8001932:	480d      	ldr	r0, [pc, #52]	@ (8001968 <mcp23017_gpio+0x74>)
 8001934:	f007 ff9e 	bl	8009874 <puts>
	}

	const uint8_t WRITE_GPIO_MESSAGE_B[] = {GPIOB_REGISTER_ADDRESS, b};
 8001938:	2313      	movs	r3, #19
 800193a:	723b      	strb	r3, [r7, #8]
 800193c:	7bbb      	ldrb	r3, [r7, #14]
 800193e:	727b      	strb	r3, [r7, #9]

	if (HAL_I2C_Master_Transmit(mcp_handle->hi2c, opcode, WRITE_GPIO_MESSAGE_B, sizeof(WRITE_GPIO_MESSAGE_B), 10) != HAL_OK) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	f107 0208 	add.w	r2, r7, #8
 8001948:	8879      	ldrh	r1, [r7, #2]
 800194a:	230a      	movs	r3, #10
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2302      	movs	r3, #2
 8001950:	f003 fae6 	bl	8004f20 <HAL_I2C_Master_Transmit>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <mcp23017_gpio+0x6c>
		//error
		printf("mcp23017_gpio write registers error\n");
 800195a:	4803      	ldr	r0, [pc, #12]	@ (8001968 <mcp23017_gpio+0x74>)
 800195c:	f007 ff8a 	bl	8009874 <puts>
	}


}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	0800b668 	.word	0x0800b668

0800196c <misc_delay_us>:

#include "misc.h"


void misc_delay_us(uint16_t us)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <misc_delay_us+0x30>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 800197e:	bf00      	nop
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <misc_delay_us+0x30>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	429a      	cmp	r2, r3
 800198a:	d3f9      	bcc.n	8001980 <misc_delay_us+0x14>
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200003bc 	.word	0x200003bc

080019a0 <pp_init>:
	GPIO_PIN_3,
	GPIO_PIN_5,
};

/* Setup MCP expanders and set all STM GPIO to inputs */
void pp_init(struct PP_HANDLE* pp_handle, I2C_HandleTypeDef* hi2c) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]

	//Setup both MCP devices
	mcp23017_init(&pp_handle->u2_handle, MCP_U2_ADDR, hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	2140      	movs	r1, #64	@ 0x40
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff5d 	bl	8001870 <mcp23017_init>
	mcp23017_init(&pp_handle->u3_handle, MCP_U3_ADDR, hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3304      	adds	r3, #4
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	214e      	movs	r1, #78	@ 0x4e
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff56 	bl	8001870 <mcp23017_init>

	//On startup, setup the device as though all pins are not connected. I.e. VCC off, GND off and STM GPIO as inputs
	for (int i = 0; i < PP_COUNT; i++) {
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e008      	b.n	80019dc <pp_init+0x3c>
		pp_handle->pin_configs[i] = NC;
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	3308      	adds	r3, #8
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PP_COUNT; i++) {
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3301      	adds	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b0f      	cmp	r3, #15
 80019e0:	ddf3      	ble.n	80019ca <pp_init+0x2a>
	}

	pp_setup(pp_handle);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f804 	bl	80019f0 <pp_setup>

}
 80019e8:	bf00      	nop
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <pp_setup>:

/* Setup all physical pins as either input, output, vcc or gnd according to pp_handle->pin_configs */
void pp_setup(struct PP_HANDLE* pp_handle) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	@ 0x38
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	//Extract relevant information via 'GS_HVS_SELECT_MAP'
	//Setup GS and HVS bits
	//Setup STM GPIO

	//Two 16 bit numbers represent all 4 banks of GPIO (port A and B for both MCPs)
	uint16_t mcp_gpio_registers[] = {0, 0};
 80019f8:	2300      	movs	r3, #0
 80019fa:	83bb      	strh	r3, [r7, #28]
 80019fc:	2300      	movs	r3, #0
 80019fe:	83fb      	strh	r3, [r7, #30]

	for (int i = 0; i < PP_COUNT; i++) {
 8001a00:	2300      	movs	r3, #0
 8001a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a04:	e087      	b.n	8001b16 <pp_setup+0x126>
		uint32_t mcp_index = GS_HVS_SELECT_MAP[i*5];
 8001a06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8001b40 <pp_setup+0x150>)
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_TypeDef* stm_gpio_port = STM_GPIO_PORT_MAP[i];
 8001a16:	4a4b      	ldr	r2, [pc, #300]	@ (8001b44 <pp_setup+0x154>)
 8001a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		uint16_t stm_gpio_pin = STM_GPIO_PIN_MAP[i];
 8001a20:	4a49      	ldr	r2, [pc, #292]	@ (8001b48 <pp_setup+0x158>)
 8001a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	857b      	strh	r3, [r7, #42]	@ 0x2a

		/* Set up the STM GPIO as an (input) or (output and set value) */
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]

		GPIO_InitStruct.Pin = stm_gpio_pin;
 8001a3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001a3c:	60bb      	str	r3, [r7, #8]

		if (pp_handle->pin_configs[i] == OUTPUT) {
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a42:	4413      	add	r3, r2
 8001a44:	3308      	adds	r3, #8
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d10c      	bne.n	8001a66 <pp_setup+0x76>
			//Set all outputs to 0 by default
			HAL_GPIO_WritePin(stm_gpio_port, stm_gpio_pin, 0);
 8001a4c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4619      	mov	r1, r3
 8001a52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a54:	f003 f9b0 	bl	8004db8 <HAL_GPIO_WritePin>

			//Setup gpio as input
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e003      	b.n	8001a6e <pp_setup+0x7e>
		} else {
			//If the PP is a vcc, gnd or input, set stm gpio as input
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
		}

		HAL_GPIO_Init(stm_gpio_port, &GPIO_InitStruct);
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	4619      	mov	r1, r3
 8001a74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a76:	f003 f805 	bl	8004a84 <HAL_GPIO_Init>

		if (pp_handle->pin_configs[i] == VCC) {
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7e:	4413      	add	r3, r2
 8001a80:	3308      	adds	r3, #8
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d11e      	bne.n	8001ac6 <pp_setup+0xd6>
			uint32_t hvs_pin = GS_HVS_SELECT_MAP[i*5+2];
 8001a88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	3302      	adds	r3, #2
 8001a92:	4a2b      	ldr	r2, [pc, #172]	@ (8001b40 <pp_setup+0x150>)
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	623b      	str	r3, [r7, #32]

			mcp_gpio_registers[mcp_index] |= 1 << hvs_pin;
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	3338      	adds	r3, #56	@ 0x38
 8001aa0:	443b      	add	r3, r7
 8001aa2:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001aa6:	b21a      	sxth	r2, r3
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	3338      	adds	r3, #56	@ 0x38
 8001abe:	443b      	add	r3, r7
 8001ac0:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8001ac4:	e024      	b.n	8001b10 <pp_setup+0x120>
		} else if (pp_handle->pin_configs[i] == GND) {
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aca:	4413      	add	r3, r2
 8001acc:	3308      	adds	r3, #8
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d11d      	bne.n	8001b10 <pp_setup+0x120>
			uint32_t gs_pin = GS_HVS_SELECT_MAP[i*5+1];
 8001ad4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a18      	ldr	r2, [pc, #96]	@ (8001b40 <pp_setup+0x150>)
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24

			mcp_gpio_registers[mcp_index] |= 1 << gs_pin;
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	3338      	adds	r3, #56	@ 0x38
 8001aec:	443b      	add	r3, r7
 8001aee:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	2101      	movs	r1, #1
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	3338      	adds	r3, #56	@ 0x38
 8001b0a:	443b      	add	r3, r7
 8001b0c:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < PP_COUNT; i++) {
 8001b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b12:	3301      	adds	r3, #1
 8001b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	f77f af74 	ble.w	8001a06 <pp_setup+0x16>

		}
	}

	/* Write mcp_gpio_registers to MCP devices */
	mcp23017_gpio(&pp_handle->u2_handle, MCP_U2_ADDR, mcp_gpio_registers[0]);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8bba      	ldrh	r2, [r7, #28]
 8001b22:	2140      	movs	r1, #64	@ 0x40
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fee5 	bl	80018f4 <mcp23017_gpio>
	mcp23017_gpio(&pp_handle->u3_handle, MCP_U3_ADDR, mcp_gpio_registers[1]);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	8bfa      	ldrh	r2, [r7, #30]
 8001b30:	214e      	movs	r1, #78	@ 0x4e
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fede 	bl	80018f4 <mcp23017_gpio>

}
 8001b38:	bf00      	nop
 8001b3a:	3738      	adds	r7, #56	@ 0x38
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	0800b6a4 	.word	0x0800b6a4
 8001b44:	20000000 	.word	0x20000000
 8001b48:	0800b7e4 	.word	0x0800b7e4

08001b4c <pp_write>:

/* Write to a physical pin */
void pp_write(uint32_t pp_number, GPIO_PinState state) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	70fb      	strb	r3, [r7, #3]

	if (state != GPIO_PIN_RESET)
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <pp_write+0x1a>
	{
		pp_set(pp_number);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f808 	bl	8001b74 <pp_set>
	else
	{
		pp_reset(pp_number);
	}

}
 8001b64:	e002      	b.n	8001b6c <pp_write+0x20>
		pp_reset(pp_number);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f820 	bl	8001bac <pp_reset>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <pp_set>:

/* Set physical pin */
void pp_set(uint32_t pp_number) {
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef* stm_gpio_port = STM_GPIO_PORT_MAP[pp_number];
 8001b7c:	4a09      	ldr	r2, [pc, #36]	@ (8001ba4 <pp_set+0x30>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	60fb      	str	r3, [r7, #12]
	uint16_t stm_gpio_pin = STM_GPIO_PIN_MAP[pp_number];
 8001b86:	4a08      	ldr	r2, [pc, #32]	@ (8001ba8 <pp_set+0x34>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	817b      	strh	r3, [r7, #10]

	stm_gpio_port->BSRR = (uint32_t)stm_gpio_pin;
 8001b90:	897a      	ldrh	r2, [r7, #10]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	619a      	str	r2, [r3, #24]

}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	0800b7e4 	.word	0x0800b7e4

08001bac <pp_reset>:

/* Reset physical pin */
void pp_reset(uint32_t pp_number) {
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef* stm_gpio_port = STM_GPIO_PORT_MAP[pp_number];
 8001bb4:	4a09      	ldr	r2, [pc, #36]	@ (8001bdc <pp_reset+0x30>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	60fb      	str	r3, [r7, #12]
	uint16_t stm_gpio_pin = STM_GPIO_PIN_MAP[pp_number];
 8001bbe:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <pp_reset+0x34>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	817b      	strh	r3, [r7, #10]

	stm_gpio_port->BRR = (uint32_t)stm_gpio_pin;
 8001bc8:	897a      	ldrh	r2, [r7, #10]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	0800b7e4 	.word	0x0800b7e4

08001be4 <pp_read>:

/* Read from a physical pin */
GPIO_PinState pp_read(uint32_t pp_number) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef* stm_gpio_port = STM_GPIO_PORT_MAP[pp_number];
 8001bec:	4a09      	ldr	r2, [pc, #36]	@ (8001c14 <pp_read+0x30>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	60fb      	str	r3, [r7, #12]
	uint16_t stm_gpio_pin = STM_GPIO_PIN_MAP[pp_number];
 8001bf6:	4a08      	ldr	r2, [pc, #32]	@ (8001c18 <pp_read+0x34>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	817b      	strh	r3, [r7, #10]

	return HAL_GPIO_ReadPin(stm_gpio_port, stm_gpio_pin);
 8001c00:	897b      	ldrh	r3, [r7, #10]
 8001c02:	4619      	mov	r1, r3
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f003 f8bf 	bl	8004d88 <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000000 	.word	0x20000000
 8001c18:	0800b7e4 	.word	0x0800b7e4

08001c1c <psu_init>:
		struct PSU_STATE* psu_handle,
		ADC_HandleTypeDef* _adc_diff,
		ADC_HandleTypeDef* _adc_single,
		TIM_HandleTypeDef* _pwm_timer,
		volatile uint32_t* _ccr,
		uint32_t pwm_channel) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]

	psu_handle->adc_diff = _adc_diff;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	605a      	str	r2, [r3, #4]
	psu_handle->adc_single = _adc_single;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
	psu_handle->pwm_timer = _pwm_timer;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	609a      	str	r2, [r3, #8]

	psu_handle->ccr = _ccr;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	60da      	str	r2, [r3, #12]

	HAL_TIM_PWM_Start(_pwm_timer, pwm_channel);
 8001c42:	69f9      	ldr	r1, [r7, #28]
 8001c44:	6838      	ldr	r0, [r7, #0]
 8001c46:	f004 ff19 	bl	8006a7c <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(_adc_single, ADC_SINGLE_ENDED);
 8001c4a:	217f      	movs	r1, #127	@ 0x7f
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f002 fdd3 	bl	80047f8 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(_adc_diff, ADC_DIFFERENTIAL_ENDED);
 8001c52:	4905      	ldr	r1, [pc, #20]	@ (8001c68 <psu_init+0x4c>)
 8001c54:	68b8      	ldr	r0, [r7, #8]
 8001c56:	f002 fdcf 	bl	80047f8 <HAL_ADCEx_Calibration_Start>


	*_ccr = 0;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	407f0000 	.word	0x407f0000

08001c6c <psu_intensity>:

void psu_intensity(struct PSU_STATE* psu_handle, uint32_t intensity) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
	*psu_handle->ccr = intensity;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <rng_global_init>:
#include "rng.h"

struct RNG_State GLOBAL_RNG_STATE;

/* Initialise the rng state with a seed from the RNG peripheral */
void rng_global_init(RNG_HandleTypeDef* _hrng) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	if (HAL_RNG_GenerateRandomNumber(_hrng, &(GLOBAL_RNG_STATE._state)) != HAL_OK) {
 8001c94:	4907      	ldr	r1, [pc, #28]	@ (8001cb4 <rng_global_init+0x28>)
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f004 fd71 	bl	800677e <HAL_RNG_GenerateRandomNumber>
		//error
	}

	//Zero is a fixed point so we map it to 1 instead
	if (GLOBAL_RNG_STATE._state == 0) {
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <rng_global_init+0x28>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <rng_global_init+0x1e>
		GLOBAL_RNG_STATE._state = 1;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <rng_global_init+0x28>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
	}
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000508 	.word	0x20000508

08001cb8 <rng_global_seed>:

/* Function to allow user to use their own seed for reproducability */
void rng_global_seed(uint32_t seed) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	if (seed == 0) { //Zero is a fixed point so we map it to 1 instead
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <rng_global_seed+0x16>
		GLOBAL_RNG_STATE._state = 1;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <rng_global_seed+0x28>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
	} else {
		GLOBAL_RNG_STATE._state = seed;
	}
}
 8001ccc:	e002      	b.n	8001cd4 <rng_global_seed+0x1c>
		GLOBAL_RNG_STATE._state = seed;
 8001cce:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <rng_global_seed+0x28>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	20000508 	.word	0x20000508

08001ce4 <rng_global_next32>:

/* Use xorshift32 to generate the next seed */
uint32_t rng_global_next32() {
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state << 13;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <rng_global_next32+0x44>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <rng_global_next32+0x44>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	035b      	lsls	r3, r3, #13
 8001cf2:	4053      	eors	r3, r2
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d28 <rng_global_next32+0x44>)
 8001cf6:	6013      	str	r3, [r2, #0]
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state >> 17;
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <rng_global_next32+0x44>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <rng_global_next32+0x44>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0c5b      	lsrs	r3, r3, #17
 8001d02:	4053      	eors	r3, r2
 8001d04:	4a08      	ldr	r2, [pc, #32]	@ (8001d28 <rng_global_next32+0x44>)
 8001d06:	6013      	str	r3, [r2, #0]
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state << 5;
 8001d08:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <rng_global_next32+0x44>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <rng_global_next32+0x44>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	015b      	lsls	r3, r3, #5
 8001d12:	4053      	eors	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <rng_global_next32+0x44>)
 8001d16:	6013      	str	r3, [r2, #0]
	return GLOBAL_RNG_STATE._state;
 8001d18:	4b03      	ldr	r3, [pc, #12]	@ (8001d28 <rng_global_next32+0x44>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000508 	.word	0x20000508

08001d2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d36:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	4a08      	ldr	r2, [pc, #32]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_MspInit+0x44>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d62:	f003 fd4b 	bl	80057fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0a0      	sub	sp, #128	@ 0x80
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d8c:	f107 0318 	add.w	r3, r7, #24
 8001d90:	2254      	movs	r2, #84	@ 0x54
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f007 fe4d 	bl	8009a34 <memset>
  if(hadc->Instance==ADC2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e90 <HAL_ADC_MspInit+0x11c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d135      	bne.n	8001e10 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001da8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001daa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db0:	f107 0318 	add.w	r3, r7, #24
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 fa5f 	bl	8006278 <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001dc0:	f7ff fd50 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001dc4:	4b33      	ldr	r3, [pc, #204]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	4a32      	ldr	r2, [pc, #200]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001dca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd0:	4b30      	ldr	r3, [pc, #192]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001df4:	23c0      	movs	r3, #192	@ 0xc0
 8001df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e0a:	f002 fe3b 	bl	8004a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001e0e:	e03a      	b.n	8001e86 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC5)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a20      	ldr	r2, [pc, #128]	@ (8001e98 <HAL_ADC_MspInit+0x124>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d135      	bne.n	8001e86 <HAL_ADC_MspInit+0x112>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001e20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001e24:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e26:	f107 0318 	add.w	r3, r7, #24
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 fa24 	bl	8006278 <HAL_RCCEx_PeriphCLKConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_ADC_MspInit+0xc6>
      Error_Handler();
 8001e36:	f7ff fd15 	bl	8001864 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	4a15      	ldr	r2, [pc, #84]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e46:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	4a0f      	ldr	r2, [pc, #60]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <HAL_ADC_MspInit+0x120>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e70:	2303      	movs	r3, #3
 8001e72:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e82:	f002 fdff 	bl	8004a84 <HAL_GPIO_Init>
}
 8001e86:	bf00      	nop
 8001e88:	3780      	adds	r7, #128	@ 0x80
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	50000100 	.word	0x50000100
 8001e94:	40021000 	.word	0x40021000
 8001e98:	50000600 	.word	0x50000600

08001e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0a0      	sub	sp, #128	@ 0x80
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	2254      	movs	r2, #84	@ 0x54
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f007 fdb9 	bl	8009a34 <memset>
  if(hi2c->Instance==I2C1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a30      	ldr	r2, [pc, #192]	@ (8001f88 <HAL_I2C_MspInit+0xec>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d159      	bne.n	8001f80 <HAL_I2C_MspInit+0xe4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ecc:	2340      	movs	r3, #64	@ 0x40
 8001ece:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 f9cd 	bl	8006278 <HAL_RCCEx_PeriphCLKConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ee4:	f7ff fcbe 	bl	8001864 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b28      	ldr	r3, [pc, #160]	@ (8001f8c <HAL_I2C_MspInit+0xf0>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eec:	4a27      	ldr	r2, [pc, #156]	@ (8001f8c <HAL_I2C_MspInit+0xf0>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <HAL_I2C_MspInit+0xf0>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <HAL_I2C_MspInit+0xf0>)
 8001f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f04:	4a21      	ldr	r2, [pc, #132]	@ (8001f8c <HAL_I2C_MspInit+0xf0>)
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <HAL_I2C_MspInit+0xf0>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1e:	2312      	movs	r3, #18
 8001f20:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f32:	4619      	mov	r1, r3
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f38:	f002 fda4 	bl	8004a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f40:	2312      	movs	r3, #18
 8001f42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f54:	4619      	mov	r1, r3
 8001f56:	480e      	ldr	r0, [pc, #56]	@ (8001f90 <HAL_I2C_MspInit+0xf4>)
 8001f58:	f002 fd94 	bl	8004a84 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <HAL_I2C_MspInit+0xf8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a0c      	ldr	r2, [pc, #48]	@ (8001f94 <HAL_I2C_MspInit+0xf8>)
 8001f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f66:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <HAL_I2C_MspInit+0xf0>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	4a07      	ldr	r2, [pc, #28]	@ (8001f8c <HAL_I2C_MspInit+0xf0>)
 8001f6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_I2C_MspInit+0xf0>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f80:	bf00      	nop
 8001f82:	3780      	adds	r7, #128	@ 0x80
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	40010000 	.word	0x40010000

08001f98 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b098      	sub	sp, #96	@ 0x60
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	2254      	movs	r2, #84	@ 0x54
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f007 fd43 	bl	8009a34 <memset>
  if(hrng->Instance==RNG)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a11      	ldr	r2, [pc, #68]	@ (8001ff8 <HAL_RNG_MspInit+0x60>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001fb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fbc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8001fbe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 f955 	bl	8006278 <HAL_RCCEx_PeriphCLKConfig>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001fd4:	f7ff fc46 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <HAL_RNG_MspInit+0x64>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fdc:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <HAL_RNG_MspInit+0x64>)
 8001fde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_RNG_MspInit+0x64>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3760      	adds	r7, #96	@ 0x60
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	50060800 	.word	0x50060800
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002010:	d10c      	bne.n	800202c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	4a11      	ldr	r2, [pc, #68]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6593      	str	r3, [r2, #88]	@ 0x58
 800201e:	4b0f      	ldr	r3, [pc, #60]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800202a:	e010      	b.n	800204e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0b      	ldr	r2, [pc, #44]	@ (8002060 <HAL_TIM_Base_MspInit+0x60>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10b      	bne.n	800204e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	4a08      	ldr	r2, [pc, #32]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6593      	str	r3, [r2, #88]	@ 0x58
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_TIM_Base_MspInit+0x5c>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	40000400 	.word	0x40000400

08002064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002084:	d11c      	bne.n	80020c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <HAL_TIM_MspPostInit+0x64>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	4a0f      	ldr	r2, [pc, #60]	@ (80020c8 <HAL_TIM_MspPostInit+0x64>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <HAL_TIM_MspPostInit+0x64>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800209e:	2320      	movs	r3, #32
 80020a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	4619      	mov	r1, r3
 80020b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020bc:	f002 fce2 	bl	8004a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b09e      	sub	sp, #120	@ 0x78
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	2254      	movs	r2, #84	@ 0x54
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f007 fca1 	bl	8009a34 <memset>
  if(huart->Instance==USART2)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002174 <HAL_UART_MspInit+0xa8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d136      	bne.n	800216a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020fc:	2302      	movs	r3, #2
 80020fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4618      	mov	r0, r3
 800210a:	f004 f8b5 	bl	8006278 <HAL_RCCEx_PeriphCLKConfig>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002114:	f7ff fba6 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002118:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <HAL_UART_MspInit+0xac>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211c:	4a16      	ldr	r2, [pc, #88]	@ (8002178 <HAL_UART_MspInit+0xac>)
 800211e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002122:	6593      	str	r3, [r2, #88]	@ 0x58
 8002124:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <HAL_UART_MspInit+0xac>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_UART_MspInit+0xac>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002134:	4a10      	ldr	r2, [pc, #64]	@ (8002178 <HAL_UART_MspInit+0xac>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213c:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <HAL_UART_MspInit+0xac>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002148:	230c      	movs	r3, #12
 800214a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002158:	2307      	movs	r3, #7
 800215a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002160:	4619      	mov	r1, r3
 8002162:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002166:	f002 fc8d 	bl	8004a84 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800216a:	bf00      	nop
 800216c:	3778      	adds	r7, #120	@ 0x78
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40004400 	.word	0x40004400
 8002178:	40021000 	.word	0x40021000

0800217c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <NMI_Handler+0x4>

08002184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <HardFault_Handler+0x4>

0800218c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <MemManage_Handler+0x4>

08002194 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d2:	f001 fa4d 	bl	8003670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}

080021da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  return 1;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_kill>:

int _kill(int pid, int sig)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021f4:	f007 fc80 	bl	8009af8 <__errno>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2216      	movs	r2, #22
 80021fc:	601a      	str	r2, [r3, #0]
  return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_exit>:

void _exit (int status)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002212:	f04f 31ff 	mov.w	r1, #4294967295
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffe7 	bl	80021ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <_exit+0x12>

08002220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	e00a      	b.n	8002248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002232:	f3af 8000 	nop.w
 8002236:	4601      	mov	r1, r0
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	b2ca      	uxtb	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbf0      	blt.n	8002232 <_read+0x12>
  }

  return len;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e009      	b.n	8002280 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f889 	bl	800238c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	dbf1      	blt.n	800226c <_write+0x12>
  }
  return len;
 8002288:	687b      	ldr	r3, [r7, #4]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <_close>:

int _close(int file)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022ba:	605a      	str	r2, [r3, #4]
  return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <_isatty>:

int _isatty(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002304:	4a14      	ldr	r2, [pc, #80]	@ (8002358 <_sbrk+0x5c>)
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <_sbrk+0x60>)
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <_sbrk+0x64>)
 800231a:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <_sbrk+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800232c:	f007 fbe4 	bl	8009af8 <__errno>
 8002330:	4603      	mov	r3, r0
 8002332:	220c      	movs	r2, #12
 8002334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	e009      	b.n	8002350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002342:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <_sbrk+0x64>)
 800234c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20020000 	.word	0x20020000
 800235c:	00000400 	.word	0x00000400
 8002360:	20000510 	.word	0x20000510
 8002364:	20000668 	.word	0x20000668

08002368 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <SystemInit+0x20>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <SystemInit+0x20>)
 8002374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002394:	1d39      	adds	r1, r7, #4
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	2201      	movs	r2, #1
 800239c:	4803      	ldr	r0, [pc, #12]	@ (80023ac <__io_putchar+0x20>)
 800239e:	f005 fc2f 	bl	8007c00 <HAL_UART_Transmit>
  return ch;
 80023a2:	687b      	ldr	r3, [r7, #4]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000408 	.word	0x20000408

080023b0 <read_uart_into_buffer>:

uint32_t read_uart_into_buffer(uint8_t* buffer, uint32_t buffer_size, uint8_t stop_character) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	4613      	mov	r3, r2
 80023bc:	71fb      	strb	r3, [r7, #7]
	//Keep reading into the until either a) the stop character is reached or b) we run out of buffer space
	uint32_t count = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]

	while (1) {


		if (count >= buffer_size) {
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d302      	bcc.n	80023d0 <read_uart_into_buffer+0x20>
			return -1;
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	e01f      	b.n	8002410 <read_uart_into_buffer+0x60>
		}

		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <read_uart_into_buffer+0x68>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2208      	movs	r2, #8
 80023d6:	621a      	str	r2, [r3, #32]

		HAL_UART_Receive(&huart2, buffer + count, 1, HAL_MAX_DELAY);
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	18d1      	adds	r1, r2, r3
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	2201      	movs	r2, #1
 80023e4:	480c      	ldr	r0, [pc, #48]	@ (8002418 <read_uart_into_buffer+0x68>)
 80023e6:	f005 fc99 	bl	8007d1c <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart2, buffer + count, 1, HAL_MAX_DELAY);

		if (buffer[count] == stop_character) {
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	79fa      	ldrb	r2, [r7, #7]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <read_uart_into_buffer+0x58>
			buffer[count] = '\0';
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	4413      	add	r3, r2
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
			return count+1;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3301      	adds	r3, #1
 8002406:	e003      	b.n	8002410 <read_uart_into_buffer+0x60>
		}

		count += 1;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3301      	adds	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
		if (count >= buffer_size) {
 800240e:	e7d8      	b.n	80023c2 <read_uart_into_buffer+0x12>
	}
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000408 	.word	0x20000408

0800241c <__vm_fetch>:
 *      Author: Will
 */

#include "vm.h"

uint8_t __vm_fetch(struct VM_State* state) {
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	state->instruction_length = BYTECODE_OPCODE_LEN;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	615a      	str	r2, [r3, #20]
	return state->exec->rom[state->pc];
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4413      	add	r3, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <advance_pc>:

void advance_pc(struct VM_State* state) {
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	state->pc = state->pc + state->instruction_length;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	441a      	add	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	619a      	str	r2, [r3, #24]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <get_immediate>:

uint32_t get_immediate(struct VM_State* state) {
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	uint32_t v = *(uint32_t*)&state->exec->rom[state->pc + state->instruction_length];
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6999      	ldr	r1, [r3, #24]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	440b      	add	r3, r1
 800247e:	4413      	add	r3, r2
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]
	state->instruction_length += BYTECODE_IMMEDIATE_LEN;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	1d1a      	adds	r2, r3, #4
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	615a      	str	r2, [r3, #20]
	return v;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <vm_peek_ops>:

uint32_t vm_peek_ops(struct VM_State* state) {
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	return state->operand_stack[state->osp];
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	681b      	ldr	r3, [r3, #0]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <vm_init>:
		uint32_t* _call_stack,
		uint32_t* _operand_stack,
		uint32_t _call_stack_size,
		uint32_t _operand_stack_size,
		struct Executable_State* _exec,
		struct PP_HANDLE* _pp) {
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	603b      	str	r3, [r7, #0]

	state->call_stack = _call_stack;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	601a      	str	r2, [r3, #0]
	state->operand_stack = _operand_stack;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	605a      	str	r2, [r3, #4]
	state->call_stack_size = _call_stack_size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	609a      	str	r2, [r3, #8]
	state->operand_stack_size = _operand_stack_size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	60da      	str	r2, [r3, #12]
	state->exec = _exec;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	611a      	str	r2, [r3, #16]
	state->pp = _pp;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a3a      	ldr	r2, [r7, #32]
 80024ee:	635a      	str	r2, [r3, #52]	@ 0x34

	vm_reset(state);
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f804 	bl	80024fe <vm_reset>
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <vm_reset>:

void vm_reset(struct VM_State* state) {
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
	state->pc = 0;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
	state->bp = 0;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24
	state->csp = -1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f04f 32ff 	mov.w	r2, #4294967295
 8002518:	61da      	str	r2, [r3, #28]
	state->osp = -1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	621a      	str	r2, [r3, #32]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <vm_start_timer>:

void vm_start_timer(struct VM_State* state)  {
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
	state->start_tick = HAL_GetTick();
 8002536:	f001 f8ad 	bl	8003694 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <vm_set>:

void vm_set(struct VM_State* state, uint32_t pin) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	pp_set(pin);
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	f7ff fb0e 	bl	8001b74 <pp_set>


	advance_pc(state);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff73 	bl	8002444 <advance_pc>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <vm_rst>:

void vm_rst(struct VM_State* state, uint32_t pin) {
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
	pp_reset(pin);
 8002570:	6838      	ldr	r0, [r7, #0]
 8002572:	f7ff fb1b 	bl	8001bac <pp_reset>

	advance_pc(state);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ff64 	bl	8002444 <advance_pc>
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <vm_get>:

void vm_get(struct VM_State* state, uint32_t pin) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	state->osp += 1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	621a      	str	r2, [r3, #32]

	state->operand_stack[state->osp] = pp_read(pin);
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	f7ff fb23 	bl	8001be4 <pp_read>
 800259e:	4603      	mov	r3, r0
 80025a0:	4619      	mov	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	460a      	mov	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]

	advance_pc(state);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ff46 	bl	8002444 <advance_pc>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <vm_execute>:

/* Execute the next instruction */
uint32_t vm_execute(struct VM_State* state) {
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b09f      	sub	sp, #124	@ 0x7c
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]


	if (state->pc >= state->exec->rom_length) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <vm_execute+0x1c>
		//error
		return PC_OVERLOW;
 80025d6:	2306      	movs	r3, #6
 80025d8:	f000 bf48 	b.w	800346c <vm_execute+0xeac>

	if (state->exec->rom_length == 0) {
		//No code is loaded, error
	}

	if (state->osp > state->operand_stack_size - 10 && state->osp != -1) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	3b0a      	subs	r3, #10
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d907      	bls.n	80025fa <vm_execute+0x3a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f2:	d002      	beq.n	80025fa <vm_execute+0x3a>
		//If the OSP is close to the end of the op stack, raise a op stack overflow
		return OP_STACK_OVERFLOW;
 80025f4:	2303      	movs	r3, #3
 80025f6:	f000 bf39 	b.w	800346c <vm_execute+0xeac>
	}

	if (state->csp > state->call_stack_size - 10 && state->csp != -1) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	3b0a      	subs	r3, #10
 8002604:	429a      	cmp	r2, r3
 8002606:	d907      	bls.n	8002618 <vm_execute+0x58>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d002      	beq.n	8002618 <vm_execute+0x58>
		//If the csp is close to the end of the call stack, raise a call stack overflow
		return CALL_STACK_OVERFLOW;
 8002612:	2304      	movs	r3, #4
 8002614:	f000 bf2a 	b.w	800346c <vm_execute+0xeac>
	}

	if (HAL_GetTick() - state->start_tick > state->timeout) {
 8002618:	f001 f83c 	bl	8003694 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	1ad2      	subs	r2, r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	429a      	cmp	r2, r3
 800262a:	d902      	bls.n	8002632 <vm_execute+0x72>
		return TIMEOUT_EXCEEDED;
 800262c:	2305      	movs	r3, #5
 800262e:	f000 bf1d 	b.w	800346c <vm_execute+0xeac>
	}

	uint8_t opcode = __vm_fetch(state);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fef2 	bl	800241c <__vm_fetch>
 8002638:	4603      	mov	r3, r0
 800263a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	switch (opcode) {
 800263e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002642:	2bca      	cmp	r3, #202	@ 0xca
 8002644:	f200 870a 	bhi.w	800345c <vm_execute+0xe9c>
 8002648:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <vm_execute+0x90>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	0800297d 	.word	0x0800297d
 8002654:	080029bf 	.word	0x080029bf
 8002658:	08002a01 	.word	0x08002a01
 800265c:	08002a45 	.word	0x08002a45
 8002660:	08002a6d 	.word	0x08002a6d
 8002664:	0800345d 	.word	0x0800345d
 8002668:	0800345d 	.word	0x0800345d
 800266c:	0800345d 	.word	0x0800345d
 8002670:	0800345d 	.word	0x0800345d
 8002674:	0800345d 	.word	0x0800345d
 8002678:	0800345d 	.word	0x0800345d
 800267c:	0800345d 	.word	0x0800345d
 8002680:	0800345d 	.word	0x0800345d
 8002684:	0800345d 	.word	0x0800345d
 8002688:	0800345d 	.word	0x0800345d
 800268c:	0800345d 	.word	0x0800345d
 8002690:	0800345d 	.word	0x0800345d
 8002694:	0800345d 	.word	0x0800345d
 8002698:	0800345d 	.word	0x0800345d
 800269c:	0800345d 	.word	0x0800345d
 80026a0:	08002a97 	.word	0x08002a97
 80026a4:	08002ad9 	.word	0x08002ad9
 80026a8:	08002b1b 	.word	0x08002b1b
 80026ac:	08002b5d 	.word	0x08002b5d
 80026b0:	08002b85 	.word	0x08002b85
 80026b4:	08002bad 	.word	0x08002bad
 80026b8:	08002bf1 	.word	0x08002bf1
 80026bc:	08002c35 	.word	0x08002c35
 80026c0:	08002c61 	.word	0x08002c61
 80026c4:	0800345d 	.word	0x0800345d
 80026c8:	0800345d 	.word	0x0800345d
 80026cc:	0800345d 	.word	0x0800345d
 80026d0:	0800345d 	.word	0x0800345d
 80026d4:	0800345d 	.word	0x0800345d
 80026d8:	0800345d 	.word	0x0800345d
 80026dc:	0800345d 	.word	0x0800345d
 80026e0:	0800345d 	.word	0x0800345d
 80026e4:	0800345d 	.word	0x0800345d
 80026e8:	0800345d 	.word	0x0800345d
 80026ec:	0800345d 	.word	0x0800345d
 80026f0:	08002c9d 	.word	0x08002c9d
 80026f4:	08002cad 	.word	0x08002cad
 80026f8:	08002ced 	.word	0x08002ced
 80026fc:	08002d1f 	.word	0x08002d1f
 8002700:	08002d79 	.word	0x08002d79
 8002704:	08002dc3 	.word	0x08002dc3
 8002708:	08002e0d 	.word	0x08002e0d
 800270c:	08002e57 	.word	0x08002e57
 8002710:	08002ea1 	.word	0x08002ea1
 8002714:	08002eeb 	.word	0x08002eeb
 8002718:	08002f35 	.word	0x08002f35
 800271c:	08002f69 	.word	0x08002f69
 8002720:	0800345d 	.word	0x0800345d
 8002724:	0800345d 	.word	0x0800345d
 8002728:	0800345d 	.word	0x0800345d
 800272c:	0800345d 	.word	0x0800345d
 8002730:	0800345d 	.word	0x0800345d
 8002734:	0800345d 	.word	0x0800345d
 8002738:	0800345d 	.word	0x0800345d
 800273c:	0800345d 	.word	0x0800345d
 8002740:	08002f9d 	.word	0x08002f9d
 8002744:	08002fc7 	.word	0x08002fc7
 8002748:	08002fff 	.word	0x08002fff
 800274c:	08003039 	.word	0x08003039
 8002750:	08003073 	.word	0x08003073
 8002754:	08003085 	.word	0x08003085
 8002758:	080030b9 	.word	0x080030b9
 800275c:	080030ed 	.word	0x080030ed
 8002760:	0800345d 	.word	0x0800345d
 8002764:	0800345d 	.word	0x0800345d
 8002768:	0800345d 	.word	0x0800345d
 800276c:	0800345d 	.word	0x0800345d
 8002770:	0800345d 	.word	0x0800345d
 8002774:	0800345d 	.word	0x0800345d
 8002778:	0800345d 	.word	0x0800345d
 800277c:	0800345d 	.word	0x0800345d
 8002780:	0800345d 	.word	0x0800345d
 8002784:	0800345d 	.word	0x0800345d
 8002788:	0800345d 	.word	0x0800345d
 800278c:	0800345d 	.word	0x0800345d
 8002790:	0800345d 	.word	0x0800345d
 8002794:	08003129 	.word	0x08003129
 8002798:	0800315b 	.word	0x0800315b
 800279c:	0800345d 	.word	0x0800345d
 80027a0:	0800345d 	.word	0x0800345d
 80027a4:	0800345d 	.word	0x0800345d
 80027a8:	0800345d 	.word	0x0800345d
 80027ac:	0800345d 	.word	0x0800345d
 80027b0:	0800345d 	.word	0x0800345d
 80027b4:	0800345d 	.word	0x0800345d
 80027b8:	080031a3 	.word	0x080031a3
 80027bc:	080031ef 	.word	0x080031ef
 80027c0:	0800345d 	.word	0x0800345d
 80027c4:	0800345d 	.word	0x0800345d
 80027c8:	0800345d 	.word	0x0800345d
 80027cc:	0800345d 	.word	0x0800345d
 80027d0:	0800345d 	.word	0x0800345d
 80027d4:	0800345d 	.word	0x0800345d
 80027d8:	0800345d 	.word	0x0800345d
 80027dc:	0800345d 	.word	0x0800345d
 80027e0:	08003225 	.word	0x08003225
 80027e4:	0800324d 	.word	0x0800324d
 80027e8:	0800345d 	.word	0x0800345d
 80027ec:	0800345d 	.word	0x0800345d
 80027f0:	0800345d 	.word	0x0800345d
 80027f4:	0800345d 	.word	0x0800345d
 80027f8:	0800345d 	.word	0x0800345d
 80027fc:	0800345d 	.word	0x0800345d
 8002800:	0800345d 	.word	0x0800345d
 8002804:	0800345d 	.word	0x0800345d
 8002808:	0800345d 	.word	0x0800345d
 800280c:	08003275 	.word	0x08003275
 8002810:	0800327f 	.word	0x0800327f
 8002814:	08003289 	.word	0x08003289
 8002818:	08003293 	.word	0x08003293
 800281c:	0800329d 	.word	0x0800329d
 8002820:	080032a7 	.word	0x080032a7
 8002824:	080032b1 	.word	0x080032b1
 8002828:	080032bb 	.word	0x080032bb
 800282c:	080032c5 	.word	0x080032c5
 8002830:	080032cf 	.word	0x080032cf
 8002834:	080032d9 	.word	0x080032d9
 8002838:	080032e3 	.word	0x080032e3
 800283c:	080032ed 	.word	0x080032ed
 8002840:	080032f7 	.word	0x080032f7
 8002844:	08003301 	.word	0x08003301
 8002848:	0800330b 	.word	0x0800330b
 800284c:	0800345d 	.word	0x0800345d
 8002850:	0800345d 	.word	0x0800345d
 8002854:	0800345d 	.word	0x0800345d
 8002858:	0800345d 	.word	0x0800345d
 800285c:	0800345d 	.word	0x0800345d
 8002860:	0800345d 	.word	0x0800345d
 8002864:	0800345d 	.word	0x0800345d
 8002868:	0800345d 	.word	0x0800345d
 800286c:	0800345d 	.word	0x0800345d
 8002870:	0800345d 	.word	0x0800345d
 8002874:	0800345d 	.word	0x0800345d
 8002878:	0800345d 	.word	0x0800345d
 800287c:	0800345d 	.word	0x0800345d
 8002880:	0800345d 	.word	0x0800345d
 8002884:	08003315 	.word	0x08003315
 8002888:	0800331f 	.word	0x0800331f
 800288c:	08003329 	.word	0x08003329
 8002890:	08003333 	.word	0x08003333
 8002894:	0800333d 	.word	0x0800333d
 8002898:	08003347 	.word	0x08003347
 800289c:	08003351 	.word	0x08003351
 80028a0:	0800335b 	.word	0x0800335b
 80028a4:	08003365 	.word	0x08003365
 80028a8:	0800336f 	.word	0x0800336f
 80028ac:	08003379 	.word	0x08003379
 80028b0:	08003383 	.word	0x08003383
 80028b4:	0800338d 	.word	0x0800338d
 80028b8:	08003397 	.word	0x08003397
 80028bc:	080033a1 	.word	0x080033a1
 80028c0:	080033ab 	.word	0x080033ab
 80028c4:	0800345d 	.word	0x0800345d
 80028c8:	0800345d 	.word	0x0800345d
 80028cc:	0800345d 	.word	0x0800345d
 80028d0:	0800345d 	.word	0x0800345d
 80028d4:	0800345d 	.word	0x0800345d
 80028d8:	0800345d 	.word	0x0800345d
 80028dc:	0800345d 	.word	0x0800345d
 80028e0:	0800345d 	.word	0x0800345d
 80028e4:	0800345d 	.word	0x0800345d
 80028e8:	0800345d 	.word	0x0800345d
 80028ec:	0800345d 	.word	0x0800345d
 80028f0:	0800345d 	.word	0x0800345d
 80028f4:	0800345d 	.word	0x0800345d
 80028f8:	0800345d 	.word	0x0800345d
 80028fc:	080033b5 	.word	0x080033b5
 8002900:	080033bf 	.word	0x080033bf
 8002904:	080033c9 	.word	0x080033c9
 8002908:	080033d3 	.word	0x080033d3
 800290c:	080033dd 	.word	0x080033dd
 8002910:	080033e7 	.word	0x080033e7
 8002914:	080033f1 	.word	0x080033f1
 8002918:	080033fb 	.word	0x080033fb
 800291c:	08003405 	.word	0x08003405
 8002920:	0800340f 	.word	0x0800340f
 8002924:	08003419 	.word	0x08003419
 8002928:	08003423 	.word	0x08003423
 800292c:	0800342d 	.word	0x0800342d
 8002930:	08003437 	.word	0x08003437
 8002934:	08003441 	.word	0x08003441
 8002938:	0800344b 	.word	0x0800344b
 800293c:	0800345d 	.word	0x0800345d
 8002940:	0800345d 	.word	0x0800345d
 8002944:	0800345d 	.word	0x0800345d
 8002948:	0800345d 	.word	0x0800345d
 800294c:	0800345d 	.word	0x0800345d
 8002950:	0800345d 	.word	0x0800345d
 8002954:	0800345d 	.word	0x0800345d
 8002958:	0800345d 	.word	0x0800345d
 800295c:	0800345d 	.word	0x0800345d
 8002960:	0800345d 	.word	0x0800345d
 8002964:	0800345d 	.word	0x0800345d
 8002968:	0800345d 	.word	0x0800345d
 800296c:	0800345d 	.word	0x0800345d
 8002970:	0800345d 	.word	0x0800345d
 8002974:	08003455 	.word	0x08003455
 8002978:	08003459 	.word	0x08003459
		/* Math */
	    case 0: {//ADD
	        state->osp -= 1;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	1e5a      	subs	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] + state->operand_stack[state->osp+1];
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	3301      	adds	r3, #1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6858      	ldr	r0, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4403      	add	r3, r0
 80029b0:	440a      	add	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff fd45 	bl	8002444 <advance_pc>

	        break;
 80029ba:	f000 bd56 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 1: {//SUB
	        state->osp -= 1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	1e5a      	subs	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] - state->operand_stack[state->osp+1];
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	3301      	adds	r3, #1
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6858      	ldr	r0, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4403      	add	r3, r0
 80029f2:	1a8a      	subs	r2, r1, r2
 80029f4:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fd24 	bl	8002444 <advance_pc>

	        break;
 80029fc:	f000 bd35 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 2: {//MUL
	        state->osp -= 1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	1e5a      	subs	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] * state->operand_stack[state->osp+1];
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	3301      	adds	r3, #1
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	6819      	ldr	r1, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6858      	ldr	r0, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4403      	add	r3, r0
 8002a34:	fb01 f202 	mul.w	r2, r1, r2
 8002a38:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fd02 	bl	8002444 <advance_pc>

	        break;
 8002a40:	f000 bd13 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 3: {//RNG
	        state->osp += 1;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = rng_global_next32();
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	18d4      	adds	r4, r2, r3
 8002a5a:	f7ff f943 	bl	8001ce4 <rng_global_next32>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6023      	str	r3, [r4, #0]

	        advance_pc(state);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fcee 	bl	8002444 <advance_pc>

	        break;
 8002a68:	f000 bcff 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 4: {//SEED

	    	uint32_t seed = state->operand_stack[state->osp];
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	613b      	str	r3, [r7, #16]

	        state->osp -= 1;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	1e5a      	subs	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	621a      	str	r2, [r3, #32]

	    	rng_global_seed(seed);
 8002a86:	6938      	ldr	r0, [r7, #16]
 8002a88:	f7ff f916 	bl	8001cb8 <rng_global_seed>

	        advance_pc(state);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fcd9 	bl	8002444 <advance_pc>

	    	break;
 8002a92:	f000 bcea 	b.w	800346a <vm_execute+0xeaa>

	    }
	    /* Bitwise Logic */
	    case 20: {//OR
	        state->osp -= 1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	1e5a      	subs	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] | state->operand_stack[state->osp+1];
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	6819      	ldr	r1, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6858      	ldr	r0, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4403      	add	r3, r0
 8002aca:	430a      	orrs	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fcb8 	bl	8002444 <advance_pc>

	        break;
 8002ad4:	f000 bcc9 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 21: {//XOR
	        state->osp -= 1;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	1e5a      	subs	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] ^ state->operand_stack[state->osp+1];
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	6819      	ldr	r1, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	3301      	adds	r3, #1
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6858      	ldr	r0, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4403      	add	r3, r0
 8002b0c:	404a      	eors	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff fc97 	bl	8002444 <advance_pc>

	        break;
 8002b16:	f000 bca8 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 22: {//AND
	        state->osp -= 1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] & state->operand_stack[state->osp+1];
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6858      	ldr	r0, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4403      	add	r3, r0
 8002b4e:	400a      	ands	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fc76 	bl	8002444 <advance_pc>

	        break;
 8002b58:	f000 bc87 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 23: {//INV
	        state->operand_stack[state->osp] = ~state->operand_stack[state->osp];
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	43d2      	mvns	r2, r2
 8002b78:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fc62 	bl	8002444 <advance_pc>

	        break;
 8002b80:	f000 bc73 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 24: {//NEG
	        state->operand_stack[state->osp] = -state->operand_stack[state->osp];
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	4252      	negs	r2, r2
 8002ba0:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fc4e 	bl	8002444 <advance_pc>

	        break;
 8002ba8:	f000 bc5f 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 25: {//SHL
	        state->osp -= 1;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	1e5a      	subs	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] << state->operand_stack[state->osp+1];
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	6819      	ldr	r1, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6858      	ldr	r0, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4403      	add	r3, r0
 8002be0:	fa01 f202 	lsl.w	r2, r1, r2
 8002be4:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fc2c 	bl	8002444 <advance_pc>

	        break;
 8002bec:	f000 bc3d 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 26: {//SHR
	        state->osp -= 1;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	1e5a      	subs	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] >> state->operand_stack[state->osp+1];
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	6819      	ldr	r1, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	3301      	adds	r3, #1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6858      	ldr	r0, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4403      	add	r3, r0
 8002c24:	fa21 f202 	lsr.w	r2, r1, r2
 8002c28:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff fc0a 	bl	8002444 <advance_pc>

	        break;
 8002c30:	f000 bc1b 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 27: {//BOOL
	        if (state->operand_stack[state->osp])
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <vm_execute+0x696>
	            state->operand_stack[state->osp] = 1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fbf4 	bl	8002444 <advance_pc>

	        break;
 8002c5c:	f000 bc05 	b.w	800346a <vm_execute+0xeaa>
	    }
	    case 28: {//NOT
	        if (state->operand_stack[state->osp])
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <vm_execute+0x6c4>
	            state->operand_stack[state->osp] = 0;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e007      	b.n	8002c94 <vm_execute+0x6d4>
	        else
	            state->operand_stack[state->osp] = 1;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fbd5 	bl	8002444 <advance_pc>

	        break;
 8002c9a:	e3e6      	b.n	800346a <vm_execute+0xeaa>
	    }
	    /* Control Flow */
	    case 40: {//JMP K
	        uint32_t K = get_immediate(state);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff fbe2 	bl	8002466 <get_immediate>
 8002ca2:	6178      	str	r0, [r7, #20]

	        state->pc = K;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	619a      	str	r2, [r3, #24]

	        break;
 8002caa:	e3de      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 41: {//ALLOC K
	        uint32_t K = get_immediate(state);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff fbda 	bl	8002466 <get_immediate>
 8002cb2:	61b8      	str	r0, [r7, #24]

	        state->csp += 1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	61da      	str	r2, [r3, #28]
	        state->call_stack[state->csp] = state->bp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cce:	601a      	str	r2, [r3, #0]

	        state->bp = state->csp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	625a      	str	r2, [r3, #36]	@ 0x24

	        state->csp += K;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	441a      	add	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	61da      	str	r2, [r3, #28]

	        advance_pc(state);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff fbad 	bl	8002444 <advance_pc>

	        break;
 8002cea:	e3be      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 42: {//CALL K
	      uint32_t K = get_immediate(state);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fbba 	bl	8002466 <get_immediate>
 8002cf2:	6238      	str	r0, [r7, #32]

	      //get the link address
	      uint32_t link = state->pc + BYTECODE_OPCODE_LEN + BYTECODE_IMMEDIATE_LEN;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	3305      	adds	r3, #5
 8002cfa:	61fb      	str	r3, [r7, #28]

	      // Push the link on the call stack
	      state->csp += 1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	61da      	str	r2, [r3, #28]
	      state->call_stack[state->csp] = link;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	601a      	str	r2, [r3, #0]

	      //Jump to the call location
	      state->pc = K;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	619a      	str	r2, [r3, #24]

	      break;
 8002d1c:	e3a5      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 43: {//RET K
	      uint32_t K = get_immediate(state);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fba1 	bl	8002466 <get_immediate>
 8002d24:	62b8      	str	r0, [r7, #40]	@ 0x28

	      //Free local variables
	      state->csp = state->bp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	61da      	str	r2, [r3, #28]

	      //Pop old base pointer off stack
	      state->bp = state->call_stack[state->csp];
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	625a      	str	r2, [r3, #36]	@ 0x24
	      state->csp -= 1;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	1e5a      	subs	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	61da      	str	r2, [r3, #28]

	      //Pop link address
	      uint32_t link = state->call_stack[state->csp];
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
	      state->csp -= 1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	1e5a      	subs	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	61da      	str	r2, [r3, #28]

	      //Drop parameters passed into function, if any
	      state->csp -= K;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	61da      	str	r2, [r3, #28]

	      state->pc = link;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d74:	619a      	str	r2, [r3, #24]

	      break;
 8002d76:	e378      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 44: {//EQ
	        state->osp -= 1;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	1e5a      	subs	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] == state->operand_stack[state->osp+1];
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2d9      	uxtb	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	460a      	mov	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fb42 	bl	8002444 <advance_pc>

	        break;
 8002dc0:	e353      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 45: {//NE
	        state->osp -= 1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	1e5a      	subs	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] != state->operand_stack[state->osp+1];
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	3301      	adds	r3, #1
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	bf14      	ite	ne
 8002dee:	2301      	movne	r3, #1
 8002df0:	2300      	moveq	r3, #0
 8002df2:	b2d9      	uxtb	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	460a      	mov	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff fb1d 	bl	8002444 <advance_pc>

	        break;
 8002e0a:	e32e      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 46: {//GT
	        state->osp -= 1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	1e5a      	subs	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] > state->operand_stack[state->osp+1];
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	bf8c      	ite	hi
 8002e38:	2301      	movhi	r3, #1
 8002e3a:	2300      	movls	r3, #0
 8002e3c:	b2d9      	uxtb	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	460a      	mov	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff faf8 	bl	8002444 <advance_pc>

	        break;
 8002e54:	e309      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 47: {//LT
	        state->osp -= 1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	1e5a      	subs	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] < state->operand_stack[state->osp+1];
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6859      	ldr	r1, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	3301      	adds	r3, #1
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	bf34      	ite	cc
 8002e82:	2301      	movcc	r3, #1
 8002e84:	2300      	movcs	r3, #0
 8002e86:	b2d9      	uxtb	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	460a      	mov	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff fad3 	bl	8002444 <advance_pc>

	        break;
 8002e9e:	e2e4      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 48: {//GE
	        state->osp -= 1;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	1e5a      	subs	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] >= state->operand_stack[state->osp+1];
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	bf2c      	ite	cs
 8002ecc:	2301      	movcs	r3, #1
 8002ece:	2300      	movcc	r3, #0
 8002ed0:	b2d9      	uxtb	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	460a      	mov	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff faae 	bl	8002444 <advance_pc>

	        break;
 8002ee8:	e2bf      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 49: {//LE
	        state->osp -= 1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	1e5a      	subs	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] <= state->operand_stack[state->osp+1];
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	bf94      	ite	ls
 8002f16:	2301      	movls	r3, #1
 8002f18:	2300      	movhi	r3, #0
 8002f1a:	b2d9      	uxtb	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	460a      	mov	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fa89 	bl	8002444 <advance_pc>

	        break;
 8002f32:	e29a      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 50: {//JT K
	        uint32_t K = get_immediate(state);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff fa96 	bl	8002466 <get_immediate>
 8002f3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

	        if (state->operand_stack[state->osp] != 0)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <vm_execute+0x996>
	        	state->pc = K;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f52:	619a      	str	r2, [r3, #24]
 8002f54:	e002      	b.n	8002f5c <vm_execute+0x99c>
	        else
	            advance_pc(state);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fa74 	bl	8002444 <advance_pc>

	        state->osp -= 1;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	1e5a      	subs	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	621a      	str	r2, [r3, #32]

	        break;
 8002f66:	e280      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 51: {//JF K
	        uint32_t K = get_immediate(state);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff fa7c 	bl	8002466 <get_immediate>
 8002f6e:	6338      	str	r0, [r7, #48]	@ 0x30

	        if (state->operand_stack[state->osp] == 0)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d103      	bne.n	8002f8a <vm_execute+0x9ca>
	        	state->pc = K;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f86:	619a      	str	r2, [r3, #24]
 8002f88:	e002      	b.n	8002f90 <vm_execute+0x9d0>
	        else
	            advance_pc(state);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fa5a 	bl	8002444 <advance_pc>

	        state->osp -= 1;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	621a      	str	r2, [r3, #32]

	        break;
 8002f9a:	e266      	b.n	800346a <vm_execute+0xeaa>
	    }
	    /* Data Transfer */
	    case 60: {//PUSHI K
	        uint32_t K = get_immediate(state);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fa62 	bl	8002466 <get_immediate>
 8002fa2:	6378      	str	r0, [r7, #52]	@ 0x34


	        state->osp += 1;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = K;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fbc:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff fa40 	bl	8002444 <advance_pc>

	        break;
 8002fc4:	e251      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 61: {//POPC

	        state->csp += 1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	61da      	str	r2, [r3, #28]
	        state->call_stack[state->csp] = state->operand_stack[state->osp];
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	441a      	add	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	601a      	str	r2, [r3, #0]
	        state->osp -= 1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	621a      	str	r2, [r3, #32]

	        advance_pc(state);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fa24 	bl	8002444 <advance_pc>

	        break;
 8002ffc:	e235      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 62: {//PUSHL K
	        uint32_t K = get_immediate(state);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fa31 	bl	8002466 <get_immediate>
 8003004:	63b8      	str	r0, [r7, #56]	@ 0x38

	        state->osp += 1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->call_stack[state->bp+K];
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301a:	440b      	add	r3, r1
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	441a      	add	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fa07 	bl	8002444 <advance_pc>

	        break;
 8003036:	e218      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 63: {//POPL K
	        uint32_t K = get_immediate(state);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fa14 	bl	8002466 <get_immediate>
 800303e:	63f8      	str	r0, [r7, #60]	@ 0x3c

	        state->call_stack[state->bp+K] = state->operand_stack[state->osp];
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	441a      	add	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003056:	4403      	add	r3, r0
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	601a      	str	r2, [r3, #0]

	        state->osp -= 1;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	1e5a      	subs	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	621a      	str	r2, [r3, #32]



	        advance_pc(state);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff f9ea 	bl	8002444 <advance_pc>
	        break;
 8003070:	e1fb      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 64: {//DROP

	        state->osp -= 1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	1e5a      	subs	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	621a      	str	r2, [r3, #32]

	        advance_pc(state);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff f9e1 	bl	8002444 <advance_pc>
	        break;
 8003082:	e1f2      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 65: {//PUSHG K
	        uint32_t K = get_immediate(state);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff f9ee 	bl	8002466 <get_immediate>
 800308a:	6438      	str	r0, [r7, #64]	@ 0x40

	        state->osp += 1;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->call_stack[K];
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	441a      	add	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff f9c7 	bl	8002444 <advance_pc>

	        break;
 80030b6:	e1d8      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 66: {//POPG K
	        uint32_t K = get_immediate(state);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff f9d4 	bl	8002466 <get_immediate>
 80030be:	6478      	str	r0, [r7, #68]	@ 0x44

	        state->call_stack[K] = state->operand_stack[state->osp];
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	441a      	add	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	601a      	str	r2, [r3, #0]

	        state->osp -= 1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	1e5a      	subs	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	621a      	str	r2, [r3, #32]



	        advance_pc(state);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff f9ad 	bl	8002444 <advance_pc>
	        break;
 80030ea:	e1be      	b.n	800346a <vm_execute+0xeaa>
	    	//Virtual ports are represented by a pointer to the location in the stack that contains the information
	    	//the the VP was constructed with.
	    	// PUSHM constructs this pointer by subtracting the offset from the current stack pointer, and adds this
	    	// pointer to the stack where it can be assigned to global variables.

	        uint32_t K = get_immediate(state);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff f9ba 	bl	8002466 <get_immediate>
 80030f2:	64f8      	str	r0, [r7, #76]	@ 0x4c

	        //Get a pointer minus the K offset, which should give a pointer to the first data in the VP
	        uint32_t* start = &state->operand_stack[state->osp-K];
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a19      	ldr	r1, [r3, #32]
 80030fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030fe:	1acb      	subs	r3, r1, r3
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	64bb      	str	r3, [r7, #72]	@ 0x48

	        state->osp += 1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = start;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800311e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff f98f 	bl	8002444 <advance_pc>

	        break;
 8003126:	e1a0      	b.n	800346a <vm_execute+0xeaa>
	    }

	    /* GPIO */
	    case 81: {//READ

	    	uint32_t pin_number = state->operand_stack[state->osp];
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	657b      	str	r3, [r7, #84]	@ 0x54

	    	uint32_t result = (uint32_t)pp_read(pin_number);
 8003138:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800313a:	f7fe fd53 	bl	8001be4 <pp_read>
 800313e:	4603      	mov	r3, r0
 8003140:	653b      	str	r3, [r7, #80]	@ 0x50

	    	state->operand_stack[state->osp] = result;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003150:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff f976 	bl	8002444 <advance_pc>

	    	break;
 8003158:	e187      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 82: {//WRITE

			uint32_t pin_level = state->operand_stack[state->osp];
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	65fb      	str	r3, [r7, #92]	@ 0x5c

	        state->osp -= 1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	1e5a      	subs	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	621a      	str	r2, [r3, #32]

	        uint32_t pin_number = state->operand_stack[state->osp];
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	65bb      	str	r3, [r7, #88]	@ 0x58

	        state->osp -= 1;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	1e5a      	subs	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	621a      	str	r2, [r3, #32]

	        pp_write(pin_number, (GPIO_PinState)pin_level);
 800318e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4619      	mov	r1, r3
 8003194:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003196:	f7fe fcd9 	bl	8001b4c <pp_write>

	        advance_pc(state);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff f952 	bl	8002444 <advance_pc>

	    	break;
 80031a0:	e163      	b.n	800346a <vm_execute+0xeaa>





			uint32_t* pointer = (uint32_t*)state->operand_stack[state->osp];
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	667b      	str	r3, [r7, #100]	@ 0x64

	    	struct VP_DATA vp = { pointer };
 80031b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031b4:	60fb      	str	r3, [r7, #12]

	        state->osp -= 1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	1e5a      	subs	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]

	        uint32_t value = state->operand_stack[state->osp];
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	663b      	str	r3, [r7, #96]	@ 0x60

	        state->osp -= 1;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	1e5a      	subs	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]

	        vp_write_port(&vp, value);
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f963 	bl	80034ac <vp_write_port>



	    	advance_pc(state);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff f92c 	bl	8002444 <advance_pc>

			break;
 80031ec:	e13d      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 91: {//VPI
	    	uint32_t* pointer = (uint32_t*)state->operand_stack[state->osp];
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	66bb      	str	r3, [r7, #104]	@ 0x68

	    	struct VP_DATA vp = { pointer };
 80031fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003200:	60bb      	str	r3, [r7, #8]


	    	state->operand_stack[state->osp] = vp_read_port(&vp);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	18d4      	adds	r4, r2, r3
 800320e:	f107 0308 	add.w	r3, r7, #8
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f97b 	bl	800350e <vp_read_port>
 8003218:	4603      	mov	r3, r0
 800321a:	6023      	str	r3, [r4, #0]



	    	advance_pc(state);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff f911 	bl	8002444 <advance_pc>

			break;
 8003222:	e122      	b.n	800346a <vm_execute+0xeaa>
	    }
	    /* Timing */
	    case 100: {//DLA

	    	uint32_t delay = state->operand_stack[state->osp];
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	66fb      	str	r3, [r7, #108]	@ 0x6c

	      HAL_Delay(delay);
 8003234:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003236:	f000 fa39 	bl	80036ac <HAL_Delay>
	      state->osp -= 1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	1e5a      	subs	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	621a      	str	r2, [r3, #32]

	      advance_pc(state);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff f8fd 	bl	8002444 <advance_pc>

	      break;
 800324a:	e10e      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 101: {//DLB

	    	uint32_t delay = state->operand_stack[state->osp];
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	673b      	str	r3, [r7, #112]	@ 0x70

	    	misc_delay_us(delay);
 800325c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800325e:	f7fe fb85 	bl	800196c <misc_delay_us>
	      state->osp -= 1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	1e5a      	subs	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	621a      	str	r2, [r3, #32]

	      advance_pc(state);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff f8e9 	bl	8002444 <advance_pc>

	      break;
 8003272:	e0fa      	b.n	800346a <vm_execute+0xeaa>
	    }
	    /* Set */
	    case 111: { //SET1
	    	vm_set(state, 0);
 8003274:	2100      	movs	r1, #0
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff f966 	bl	8002548 <vm_set>
	    	break;
 800327c:	e0f5      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 112: { //SET2
	    	vm_set(state, 1);
 800327e:	2101      	movs	r1, #1
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff f961 	bl	8002548 <vm_set>
	    	break;
 8003286:	e0f0      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 113: { //SET3
	    	vm_set(state, 2);
 8003288:	2102      	movs	r1, #2
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff f95c 	bl	8002548 <vm_set>
	    	break;
 8003290:	e0eb      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 114: { //SET4
	    	vm_set(state, 3);
 8003292:	2103      	movs	r1, #3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff f957 	bl	8002548 <vm_set>
	    	break;
 800329a:	e0e6      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 115: { //SET5
	    	vm_set(state, 4);
 800329c:	2104      	movs	r1, #4
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff f952 	bl	8002548 <vm_set>
	    	break;
 80032a4:	e0e1      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 116: { //SET6
	    	vm_set(state, 5);
 80032a6:	2105      	movs	r1, #5
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff f94d 	bl	8002548 <vm_set>
	    	break;
 80032ae:	e0dc      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 117: { //SET7
	    	vm_set(state, 6);
 80032b0:	2106      	movs	r1, #6
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff f948 	bl	8002548 <vm_set>
	    	break;
 80032b8:	e0d7      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 118: { //SET8
	    	vm_set(state, 7);
 80032ba:	2107      	movs	r1, #7
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff f943 	bl	8002548 <vm_set>
	    	break;
 80032c2:	e0d2      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 119: { //SET9
	    	vm_set(state, 8);
 80032c4:	2108      	movs	r1, #8
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff f93e 	bl	8002548 <vm_set>
	    	break;
 80032cc:	e0cd      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 120: { //SET10
	    	vm_set(state, 9);
 80032ce:	2109      	movs	r1, #9
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff f939 	bl	8002548 <vm_set>
	    	break;
 80032d6:	e0c8      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 121: { //SET11
	    	vm_set(state, 10);
 80032d8:	210a      	movs	r1, #10
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff f934 	bl	8002548 <vm_set>
	    	break;
 80032e0:	e0c3      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 122: { //SET12
	    	vm_set(state, 11);
 80032e2:	210b      	movs	r1, #11
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff f92f 	bl	8002548 <vm_set>
	    	break;
 80032ea:	e0be      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 123: { //SET13
	    	vm_set(state, 12);
 80032ec:	210c      	movs	r1, #12
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff f92a 	bl	8002548 <vm_set>
	    	break;
 80032f4:	e0b9      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 124: { //SET14
	    	vm_set(state, 13);
 80032f6:	210d      	movs	r1, #13
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff f925 	bl	8002548 <vm_set>
	    	break;
 80032fe:	e0b4      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 125: { //SET15
	    	vm_set(state, 14);
 8003300:	210e      	movs	r1, #14
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff f920 	bl	8002548 <vm_set>
	    	break;
 8003308:	e0af      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 126: { //SET16
	    	vm_set(state, 15);
 800330a:	210f      	movs	r1, #15
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff f91b 	bl	8002548 <vm_set>
	    	break;
 8003312:	e0aa      	b.n	800346a <vm_execute+0xeaa>
	    }
	    /* Reset */

	    case 141: { //RST1
	    	vm_rst(state, 0);
 8003314:	2100      	movs	r1, #0
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff f925 	bl	8002566 <vm_rst>
	    	break;
 800331c:	e0a5      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 142: { //RST2
	    	vm_rst(state, 1);
 800331e:	2101      	movs	r1, #1
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff f920 	bl	8002566 <vm_rst>
	    	break;
 8003326:	e0a0      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 143: { //RST3
	    	vm_rst(state, 2);
 8003328:	2102      	movs	r1, #2
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff f91b 	bl	8002566 <vm_rst>
	    	break;
 8003330:	e09b      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 144: { //RST4
	    	vm_rst(state, 3);
 8003332:	2103      	movs	r1, #3
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff f916 	bl	8002566 <vm_rst>
	    	break;
 800333a:	e096      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 145: { //RST5
	    	vm_rst(state, 4);
 800333c:	2104      	movs	r1, #4
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff f911 	bl	8002566 <vm_rst>
	    	break;
 8003344:	e091      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 146: { //RST6
	    	vm_rst(state, 5);
 8003346:	2105      	movs	r1, #5
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff f90c 	bl	8002566 <vm_rst>
	    	break;
 800334e:	e08c      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 147: { //RST7
	    	vm_rst(state, 6);
 8003350:	2106      	movs	r1, #6
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff f907 	bl	8002566 <vm_rst>
	    	break;
 8003358:	e087      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 148: { //RST8
	    	vm_rst(state, 7);
 800335a:	2107      	movs	r1, #7
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff f902 	bl	8002566 <vm_rst>
	    	break;
 8003362:	e082      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 149: { //RST9
	    	vm_rst(state, 8);
 8003364:	2108      	movs	r1, #8
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff f8fd 	bl	8002566 <vm_rst>
	    	break;
 800336c:	e07d      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 150: { //RST10
	    	vm_rst(state, 9);
 800336e:	2109      	movs	r1, #9
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff f8f8 	bl	8002566 <vm_rst>
	    	break;
 8003376:	e078      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 151: { //RST11
	    	vm_rst(state, 10);
 8003378:	210a      	movs	r1, #10
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff f8f3 	bl	8002566 <vm_rst>
	    	break;
 8003380:	e073      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 152: { //RST12
	    	vm_rst(state, 11);
 8003382:	210b      	movs	r1, #11
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff f8ee 	bl	8002566 <vm_rst>
	    	break;
 800338a:	e06e      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 153: { //RST13
	    	vm_rst(state, 12);
 800338c:	210c      	movs	r1, #12
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff f8e9 	bl	8002566 <vm_rst>
	    	break;
 8003394:	e069      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 154: { //RST14
	    	vm_rst(state, 13);
 8003396:	210d      	movs	r1, #13
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff f8e4 	bl	8002566 <vm_rst>
	    	break;
 800339e:	e064      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 155: { //RST15
	    	vm_rst(state, 14);
 80033a0:	210e      	movs	r1, #14
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff f8df 	bl	8002566 <vm_rst>
	    	break;
 80033a8:	e05f      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 156: { //RST16
	    	vm_rst(state, 15);
 80033aa:	210f      	movs	r1, #15
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff f8da 	bl	8002566 <vm_rst>
	    	break;
 80033b2:	e05a      	b.n	800346a <vm_execute+0xeaa>
	    }
	    /* Read */
	    case 171: { //GET1
	    	vm_get(state, 0);
 80033b4:	2100      	movs	r1, #0
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff f8e4 	bl	8002584 <vm_get>
	    	break;
 80033bc:	e055      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 172: { //GET2
	    	vm_get(state, 1);
 80033be:	2101      	movs	r1, #1
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff f8df 	bl	8002584 <vm_get>
	    	break;
 80033c6:	e050      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 173: { //GET3
	    	vm_get(state, 2);
 80033c8:	2102      	movs	r1, #2
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff f8da 	bl	8002584 <vm_get>
	    	break;
 80033d0:	e04b      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 174: { //GET4
	    	vm_get(state, 3);
 80033d2:	2103      	movs	r1, #3
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff f8d5 	bl	8002584 <vm_get>
	    	break;
 80033da:	e046      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 175: { //GET5
	    	vm_get(state, 4);
 80033dc:	2104      	movs	r1, #4
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff f8d0 	bl	8002584 <vm_get>
	    	break;
 80033e4:	e041      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 176: { //GET6
	    	vm_get(state, 5);
 80033e6:	2105      	movs	r1, #5
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff f8cb 	bl	8002584 <vm_get>
	    	break;
 80033ee:	e03c      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 177: { //GET7
	    	vm_get(state, 6);
 80033f0:	2106      	movs	r1, #6
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff f8c6 	bl	8002584 <vm_get>
	    	break;
 80033f8:	e037      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 178: { //GET8
	    	vm_get(state, 7);
 80033fa:	2107      	movs	r1, #7
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff f8c1 	bl	8002584 <vm_get>
	    	break;
 8003402:	e032      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 179: { //GET9
	    	vm_get(state, 8);
 8003404:	2108      	movs	r1, #8
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff f8bc 	bl	8002584 <vm_get>
	    	break;
 800340c:	e02d      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 180: { //GET10
	    	vm_get(state, 9);
 800340e:	2109      	movs	r1, #9
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff f8b7 	bl	8002584 <vm_get>
	    	break;
 8003416:	e028      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 181: { //GET11
	    	vm_get(state, 10);
 8003418:	210a      	movs	r1, #10
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff f8b2 	bl	8002584 <vm_get>
	    	break;
 8003420:	e023      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 182: { //GET12
	    	vm_get(state, 11);
 8003422:	210b      	movs	r1, #11
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff f8ad 	bl	8002584 <vm_get>
	    	break;
 800342a:	e01e      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 183: { //GET13
	    	vm_get(state, 12);
 800342c:	210c      	movs	r1, #12
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff f8a8 	bl	8002584 <vm_get>
	    	break;
 8003434:	e019      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 184: { //GET14
	    	vm_get(state, 13);
 8003436:	210d      	movs	r1, #13
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff f8a3 	bl	8002584 <vm_get>
	    	break;
 800343e:	e014      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 185: { //GET15
	    	vm_get(state, 14);
 8003440:	210e      	movs	r1, #14
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff f89e 	bl	8002584 <vm_get>
	    	break;
 8003448:	e00f      	b.n	800346a <vm_execute+0xeaa>
	    }
	    case 186: { //GET16
	    	vm_get(state, 15);
 800344a:	210f      	movs	r1, #15
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff f899 	bl	8002584 <vm_get>
	    	break;
 8003452:	e00a      	b.n	800346a <vm_execute+0xeaa>
	    }

	    /* Misc */
	    case 201: {//SUC

	    	return SUCCESS;
 8003454:	2301      	movs	r3, #1
 8003456:	e009      	b.n	800346c <vm_execute+0xeac>

	      break;
	    }
	    case 202: {//FAIL

	    	return FAILURE;
 8003458:	2302      	movs	r3, #2
 800345a:	e007      	b.n	800346c <vm_execute+0xeac>

	      break;
	    }
	    default: {
	    	printf("Invalid command - (%i)\n", (int)opcode);
 800345c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003460:	4619      	mov	r1, r3
 8003462:	4804      	ldr	r0, [pc, #16]	@ (8003474 <vm_execute+0xeb4>)
 8003464:	f006 f99e 	bl	80097a4 <iprintf>

	      break;
 8003468:	bf00      	nop
	    }

	  }


	return RUNNING;
 800346a:	2300      	movs	r3, #0

}
 800346c:	4618      	mov	r0, r3
 800346e:	377c      	adds	r7, #124	@ 0x7c
 8003470:	46bd      	mov	sp, r7
 8003472:	bd90      	pop	{r4, r7, pc}
 8003474:	0800b68c 	.word	0x0800b68c

08003478 <vp_get_pin_count>:

void vp_set_state(struct VP_DATA* vp, uint32_t state) {
	*(vp->start) = state;
}

uint32_t vp_get_pin_count(struct VP_DATA* vp) {
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	return *(vp->start+1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <vp_get_pins>:

uint32_t* vp_get_pins(struct VP_DATA* vp) {
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
	return vp->start + 2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <vp_write_port>:

void vp_write_port(struct VP_DATA* vp, uint32_t value) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
	uint32_t len = vp_get_pin_count(vp);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ffde 	bl	8003478 <vp_get_pin_count>
 80034bc:	6138      	str	r0, [r7, #16]
	uint32_t* pins = vp_get_pins(vp);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffe7 	bl	8003492 <vp_get_pins>
 80034c4:	60f8      	str	r0, [r7, #12]

	for (uint32_t i = 0; i < len; i++) {
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e017      	b.n	80034fc <vp_write_port+0x50>
		uint32_t pin_no = pins[i];
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60bb      	str	r3, [r7, #8]

		if (value & 1) {
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <vp_write_port+0x3e>
			pp_set(pin_no);
 80034e2:	68b8      	ldr	r0, [r7, #8]
 80034e4:	f7fe fb46 	bl	8001b74 <pp_set>
 80034e8:	e002      	b.n	80034f0 <vp_write_port+0x44>
		} else {
			pp_reset(pin_no);
 80034ea:	68b8      	ldr	r0, [r7, #8]
 80034ec:	f7fe fb5e 	bl	8001bac <pp_reset>
		}

		value >>= 1;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	603b      	str	r3, [r7, #0]
	for (uint32_t i = 0; i < len; i++) {
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3301      	adds	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	429a      	cmp	r2, r3
 8003502:	d3e3      	bcc.n	80034cc <vp_write_port+0x20>

	}
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <vp_read_port>:

uint32_t vp_read_port(struct VP_DATA* vp) {
 800350e:	b580      	push	{r7, lr}
 8003510:	b088      	sub	sp, #32
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
	uint32_t len = vp_get_pin_count(vp);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ffae 	bl	8003478 <vp_get_pin_count>
 800351c:	6178      	str	r0, [r7, #20]
	uint32_t* pins = vp_get_pins(vp);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ffb7 	bl	8003492 <vp_get_pins>
 8003524:	6138      	str	r0, [r7, #16]

	uint32_t value = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]

	for (uint32_t i = 0; i < len; i++) {
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e01a      	b.n	8003566 <vp_read_port+0x58>
		uint32_t pin_no = pins[len - i - 1];
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800353a:	3b01      	subs	r3, #1
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]

		value <<= 1;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	61fb      	str	r3, [r7, #28]

		if (pp_read(pin_no) != GPIO_PIN_RESET) {
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7fe fb49 	bl	8001be4 <pp_read>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <vp_read_port+0x52>
			value |= 1;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < len; i++) {
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	3301      	adds	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3e0      	bcc.n	8003530 <vp_read_port+0x22>
		}


	}

	return value;
 800356e:	69fb      	ldr	r3, [r7, #28]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003578:	480d      	ldr	r0, [pc, #52]	@ (80035b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800357a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800357c:	f7fe fef4 	bl	8002368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003580:	480c      	ldr	r0, [pc, #48]	@ (80035b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003582:	490d      	ldr	r1, [pc, #52]	@ (80035b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003584:	4a0d      	ldr	r2, [pc, #52]	@ (80035bc <LoopForever+0xe>)
  movs r3, #0
 8003586:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003588:	e002      	b.n	8003590 <LoopCopyDataInit>

0800358a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800358a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800358c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800358e:	3304      	adds	r3, #4

08003590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003594:	d3f9      	bcc.n	800358a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003596:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003598:	4c0a      	ldr	r4, [pc, #40]	@ (80035c4 <LoopForever+0x16>)
  movs r3, #0
 800359a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800359c:	e001      	b.n	80035a2 <LoopFillZerobss>

0800359e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800359e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a0:	3204      	adds	r2, #4

080035a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a4:	d3fb      	bcc.n	800359e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035a6:	f006 faad 	bl	8009b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035aa:	f7fd fd1b 	bl	8000fe4 <main>

080035ae <LoopForever>:

LoopForever:
    b LoopForever
 80035ae:	e7fe      	b.n	80035ae <LoopForever>
  ldr   r0, =_estack
 80035b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80035bc:	0800bbe8 	.word	0x0800bbe8
  ldr r2, =_sbss
 80035c0:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80035c4:	20000664 	.word	0x20000664

080035c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035c8:	e7fe      	b.n	80035c8 <ADC1_2_IRQHandler>

080035ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d4:	2003      	movs	r0, #3
 80035d6:	f001 fa23 	bl	8004a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035da:	2000      	movs	r0, #0
 80035dc:	f000 f80e 	bl	80035fc <HAL_InitTick>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	71fb      	strb	r3, [r7, #7]
 80035ea:	e001      	b.n	80035f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035ec:	f7fe fb9e 	bl	8001d2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035f0:	79fb      	ldrb	r3, [r7, #7]

}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003608:	4b16      	ldr	r3, [pc, #88]	@ (8003664 <HAL_InitTick+0x68>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d022      	beq.n	8003656 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003610:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <HAL_InitTick+0x6c>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <HAL_InitTick+0x68>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800361c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	4618      	mov	r0, r3
 8003626:	f001 fa20 	bl	8004a6a <HAL_SYSTICK_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10f      	bne.n	8003650 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	d809      	bhi.n	800364a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003636:	2200      	movs	r2, #0
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	f04f 30ff 	mov.w	r0, #4294967295
 800363e:	f001 f9fa 	bl	8004a36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <HAL_InitTick+0x70>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	e007      	b.n	800365a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
 800364e:	e004      	b.n	800365a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e001      	b.n	800365a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000048 	.word	0x20000048
 8003668:	20000040 	.word	0x20000040
 800366c:	20000044 	.word	0x20000044

08003670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <HAL_IncTick+0x1c>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <HAL_IncTick+0x20>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4413      	add	r3, r2
 800367e:	4a03      	ldr	r2, [pc, #12]	@ (800368c <HAL_IncTick+0x1c>)
 8003680:	6013      	str	r3, [r2, #0]
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	20000514 	.word	0x20000514
 8003690:	20000048 	.word	0x20000048

08003694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return uwTick;
 8003698:	4b03      	ldr	r3, [pc, #12]	@ (80036a8 <HAL_GetTick+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000514 	.word	0x20000514

080036ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036b4:	f7ff ffee 	bl	8003694 <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d004      	beq.n	80036d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80036c6:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <HAL_Delay+0x40>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036d0:	bf00      	nop
 80036d2:	f7ff ffdf 	bl	8003694 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d8f7      	bhi.n	80036d2 <HAL_Delay+0x26>
  {
  }
}
 80036e2:	bf00      	nop
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000048 	.word	0x20000048

080036f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	609a      	str	r2, [r3, #8]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3360      	adds	r3, #96	@ 0x60
 800376a:	461a      	mov	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <LL_ADC_SetOffset+0x44>)
 800377a:	4013      	ands	r3, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	4313      	orrs	r3, r2
 8003788:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	03fff000 	.word	0x03fff000

080037a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3360      	adds	r3, #96	@ 0x60
 80037ae:	461a      	mov	r2, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3360      	adds	r3, #96	@ 0x60
 80037dc:	461a      	mov	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003802:	b480      	push	{r7}
 8003804:	b087      	sub	sp, #28
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3360      	adds	r3, #96	@ 0x60
 8003812:	461a      	mov	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	431a      	orrs	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3360      	adds	r3, #96	@ 0x60
 8003848:	461a      	mov	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	431a      	orrs	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	615a      	str	r2, [r3, #20]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3330      	adds	r3, #48	@ 0x30
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	f003 030c 	and.w	r3, r3, #12
 80038b0:	4413      	add	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	211f      	movs	r1, #31
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	401a      	ands	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	0e9b      	lsrs	r3, r3, #26
 80038cc:	f003 011f 	and.w	r1, r3, #31
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	431a      	orrs	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3314      	adds	r3, #20
 80038fc:	461a      	mov	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	0e5b      	lsrs	r3, r3, #25
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	4413      	add	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	0d1b      	lsrs	r3, r3, #20
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	2107      	movs	r1, #7
 800391a:	fa01 f303 	lsl.w	r3, r1, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	401a      	ands	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	0d1b      	lsrs	r3, r3, #20
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	431a      	orrs	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	43db      	mvns	r3, r3
 800395e:	401a      	ands	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f003 0318 	and.w	r3, r3, #24
 8003966:	4908      	ldr	r1, [pc, #32]	@ (8003988 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003968:	40d9      	lsrs	r1, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	400b      	ands	r3, r1
 800396e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003972:	431a      	orrs	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	0007ffff 	.word	0x0007ffff

0800398c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800399c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6093      	str	r3, [r2, #8]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039c4:	d101      	bne.n	80039ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80039e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a14:	d101      	bne.n	8003a1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a3c:	f043 0202 	orr.w	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <LL_ADC_IsEnabled+0x18>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <LL_ADC_IsEnabled+0x1a>
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d101      	bne.n	8003a8e <LL_ADC_IsDisableOngoing+0x18>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <LL_ADC_IsDisableOngoing+0x1a>
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d101      	bne.n	8003ab4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d101      	bne.n	8003ada <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b089      	sub	sp, #36	@ 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e1a9      	b.n	8003e56 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fe f92f 	bl	8001d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff41 	bl	80039b0 <LL_ADC_IsDeepPowerDownEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff27 	bl	800398c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff5c 	bl	8003a00 <LL_ADC_IsInternalRegulatorEnabled>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d115      	bne.n	8003b7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff ff40 	bl	80039d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b58:	4b9c      	ldr	r3, [pc, #624]	@ (8003dcc <HAL_ADC_Init+0x2e4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	4a9c      	ldr	r2, [pc, #624]	@ (8003dd0 <HAL_ADC_Init+0x2e8>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	3301      	adds	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b6c:	e002      	b.n	8003b74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f9      	bne.n	8003b6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff ff3e 	bl	8003a00 <LL_ADC_IsInternalRegulatorEnabled>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10d      	bne.n	8003ba6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8e:	f043 0210 	orr.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ff76 	bl	8003a9c <LL_ADC_REG_IsConversionOngoing>
 8003bb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 8142 	bne.w	8003e44 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 813e 	bne.w	8003e44 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bcc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003bd0:	f043 0202 	orr.w	r2, r3, #2
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff37 	bl	8003a50 <LL_ADC_IsEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d141      	bne.n	8003c6c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bf0:	d004      	beq.n	8003bfc <HAL_ADC_Init+0x114>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a77      	ldr	r2, [pc, #476]	@ (8003dd4 <HAL_ADC_Init+0x2ec>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d10f      	bne.n	8003c1c <HAL_ADC_Init+0x134>
 8003bfc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c00:	f7ff ff26 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c04:	4604      	mov	r4, r0
 8003c06:	4873      	ldr	r0, [pc, #460]	@ (8003dd4 <HAL_ADC_Init+0x2ec>)
 8003c08:	f7ff ff22 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4323      	orrs	r3, r4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e012      	b.n	8003c42 <HAL_ADC_Init+0x15a>
 8003c1c:	486e      	ldr	r0, [pc, #440]	@ (8003dd8 <HAL_ADC_Init+0x2f0>)
 8003c1e:	f7ff ff17 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c22:	4604      	mov	r4, r0
 8003c24:	486d      	ldr	r0, [pc, #436]	@ (8003ddc <HAL_ADC_Init+0x2f4>)
 8003c26:	f7ff ff13 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	431c      	orrs	r4, r3
 8003c2e:	486c      	ldr	r0, [pc, #432]	@ (8003de0 <HAL_ADC_Init+0x2f8>)
 8003c30:	f7ff ff0e 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4323      	orrs	r3, r4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d012      	beq.n	8003c6c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c4e:	d004      	beq.n	8003c5a <HAL_ADC_Init+0x172>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a5f      	ldr	r2, [pc, #380]	@ (8003dd4 <HAL_ADC_Init+0x2ec>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d101      	bne.n	8003c5e <HAL_ADC_Init+0x176>
 8003c5a:	4a62      	ldr	r2, [pc, #392]	@ (8003de4 <HAL_ADC_Init+0x2fc>)
 8003c5c:	e000      	b.n	8003c60 <HAL_ADC_Init+0x178>
 8003c5e:	4a62      	ldr	r2, [pc, #392]	@ (8003de8 <HAL_ADC_Init+0x300>)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f7ff fd42 	bl	80036f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7f5b      	ldrb	r3, [r3, #29]
 8003c70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003c7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003c82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d106      	bne.n	8003ca8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	045b      	lsls	r3, r3, #17
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	4b48      	ldr	r3, [pc, #288]	@ (8003dec <HAL_ADC_Init+0x304>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	69b9      	ldr	r1, [r7, #24]
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fee5 	bl	8003ac2 <LL_ADC_INJ_IsConversionOngoing>
 8003cf8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d17f      	bne.n	8003e00 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d17c      	bne.n	8003e00 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d0a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d12:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d22:	f023 0302 	bic.w	r3, r3, #2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	69b9      	ldr	r1, [r7, #24]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d017      	beq.n	8003d68 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6911      	ldr	r1, [r2, #16]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	430b      	orrs	r3, r1
 8003d62:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003d66:	e013      	b.n	8003d90 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d8c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d12a      	bne.n	8003df0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003db0:	4311      	orrs	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	611a      	str	r2, [r3, #16]
 8003dca:	e019      	b.n	8003e00 <HAL_ADC_Init+0x318>
 8003dcc:	20000040 	.word	0x20000040
 8003dd0:	053e2d63 	.word	0x053e2d63
 8003dd4:	50000100 	.word	0x50000100
 8003dd8:	50000400 	.word	0x50000400
 8003ddc:	50000500 	.word	0x50000500
 8003de0:	50000600 	.word	0x50000600
 8003de4:	50000300 	.word	0x50000300
 8003de8:	50000700 	.word	0x50000700
 8003dec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d10c      	bne.n	8003e22 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	f023 010f 	bic.w	r1, r3, #15
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	1e5a      	subs	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e20:	e007      	b.n	8003e32 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 020f 	bic.w	r2, r2, #15
 8003e30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	f043 0201 	orr.w	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e42:	e007      	b.n	8003e54 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e48:	f043 0210 	orr.w	r2, r3, #16
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3724      	adds	r7, #36	@ 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd90      	pop	{r4, r7, pc}
 8003e5e:	bf00      	nop

08003e60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b0b6      	sub	sp, #216	@ 0xd8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x24>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	f000 bc13 	b.w	80046aa <HAL_ADC_ConfigChannel+0x84a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fe03 	bl	8003a9c <LL_ADC_REG_IsConversionOngoing>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f040 83f3 	bne.w	8004684 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6859      	ldr	r1, [r3, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f7ff fcf2 	bl	8003894 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fdf1 	bl	8003a9c <LL_ADC_REG_IsConversionOngoing>
 8003eba:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fdfd 	bl	8003ac2 <LL_ADC_INJ_IsConversionOngoing>
 8003ec8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ecc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 81d9 	bne.w	8004288 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ed6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 81d4 	bne.w	8004288 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ee8:	d10f      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f7ff fcf9 	bl	80038ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fcb3 	bl	800386e <LL_ADC_SetSamplingTimeCommonConfig>
 8003f08:	e00e      	b.n	8003f28 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6819      	ldr	r1, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f7ff fce8 	bl	80038ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fca3 	bl	800386e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	08db      	lsrs	r3, r3, #3
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d022      	beq.n	8003f90 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6919      	ldr	r1, [r3, #16]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f5a:	f7ff fbfd 	bl	8003758 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6919      	ldr	r1, [r3, #16]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f7ff fc49 	bl	8003802 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d102      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x126>
 8003f80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f84:	e000      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x128>
 8003f86:	2300      	movs	r3, #0
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f7ff fc55 	bl	8003838 <LL_ADC_SetOffsetSaturation>
 8003f8e:	e17b      	b.n	8004288 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fc02 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x15c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fbf7 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	0e9b      	lsrs	r3, r3, #26
 8003fb6:	f003 021f 	and.w	r2, r3, #31
 8003fba:	e01e      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x19a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fbec 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003fea:	2320      	movs	r3, #32
 8003fec:	e004      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004002:	2b00      	cmp	r3, #0
 8004004:	d105      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x1b2>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	0e9b      	lsrs	r3, r3, #26
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	e018      	b.n	8004044 <HAL_ADC_ConfigChannel+0x1e4>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800402a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800402e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004036:	2320      	movs	r3, #32
 8004038:	e004      	b.n	8004044 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800403a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004044:	429a      	cmp	r2, r3
 8004046:	d106      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2200      	movs	r2, #0
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fbbb 	bl	80037cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2101      	movs	r1, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fb9f 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 8004062:	4603      	mov	r3, r0
 8004064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x222>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2101      	movs	r1, #1
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fb94 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 8004078:	4603      	mov	r3, r0
 800407a:	0e9b      	lsrs	r3, r3, #26
 800407c:	f003 021f 	and.w	r2, r3, #31
 8004080:	e01e      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x260>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2101      	movs	r1, #1
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fb89 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 800408e:	4603      	mov	r3, r0
 8004090:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80040a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80040a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80040b0:	2320      	movs	r3, #32
 80040b2:	e004      	b.n	80040be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80040b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x278>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0e9b      	lsrs	r3, r3, #26
 80040d2:	f003 031f 	and.w	r3, r3, #31
 80040d6:	e018      	b.n	800410a <HAL_ADC_ConfigChannel+0x2aa>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80040ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80040f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80040fc:	2320      	movs	r3, #32
 80040fe:	e004      	b.n	800410a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004100:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004104:	fab3 f383 	clz	r3, r3
 8004108:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800410a:	429a      	cmp	r2, r3
 800410c:	d106      	bne.n	800411c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2200      	movs	r2, #0
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fb58 	bl	80037cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2102      	movs	r1, #2
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fb3c 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 8004128:	4603      	mov	r3, r0
 800412a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x2e8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2102      	movs	r1, #2
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fb31 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 800413e:	4603      	mov	r3, r0
 8004140:	0e9b      	lsrs	r3, r3, #26
 8004142:	f003 021f 	and.w	r2, r3, #31
 8004146:	e01e      	b.n	8004186 <HAL_ADC_ConfigChannel+0x326>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2102      	movs	r1, #2
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fb26 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 8004154:	4603      	mov	r3, r0
 8004156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004166:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800416a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800416e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004176:	2320      	movs	r3, #32
 8004178:	e004      	b.n	8004184 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800417a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_ADC_ConfigChannel+0x33e>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	0e9b      	lsrs	r3, r3, #26
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	e016      	b.n	80041cc <HAL_ADC_ConfigChannel+0x36c>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80041b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80041b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80041be:	2320      	movs	r3, #32
 80041c0:	e004      	b.n	80041cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80041c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d106      	bne.n	80041de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff faf7 	bl	80037cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2103      	movs	r1, #3
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fadb 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <HAL_ADC_ConfigChannel+0x3aa>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2103      	movs	r1, #3
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fad0 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 8004200:	4603      	mov	r3, r0
 8004202:	0e9b      	lsrs	r3, r3, #26
 8004204:	f003 021f 	and.w	r2, r3, #31
 8004208:	e017      	b.n	800423a <HAL_ADC_ConfigChannel+0x3da>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2103      	movs	r1, #3
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fac5 	bl	80037a0 <LL_ADC_GetOffsetChannel>
 8004216:	4603      	mov	r3, r0
 8004218:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004222:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004224:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004226:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800422c:	2320      	movs	r3, #32
 800422e:	e003      	b.n	8004238 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004242:	2b00      	cmp	r3, #0
 8004244:	d105      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x3f2>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	0e9b      	lsrs	r3, r3, #26
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	e011      	b.n	8004276 <HAL_ADC_ConfigChannel+0x416>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004260:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004262:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800426a:	2320      	movs	r3, #32
 800426c:	e003      	b.n	8004276 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800426e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004270:	fab3 f383 	clz	r3, r3
 8004274:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004276:	429a      	cmp	r2, r3
 8004278:	d106      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	2103      	movs	r1, #3
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff faa2 	bl	80037cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fbdf 	bl	8003a50 <LL_ADC_IsEnabled>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	f040 813d 	bne.w	8004514 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6819      	ldr	r1, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f7ff fb4c 	bl	8003944 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4aa2      	ldr	r2, [pc, #648]	@ (800453c <HAL_ADC_ConfigChannel+0x6dc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	f040 812e 	bne.w	8004514 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x480>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0e9b      	lsrs	r3, r3, #26
 80042ce:	3301      	adds	r3, #1
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2b09      	cmp	r3, #9
 80042d6:	bf94      	ite	ls
 80042d8:	2301      	movls	r3, #1
 80042da:	2300      	movhi	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e019      	b.n	8004314 <HAL_ADC_ConfigChannel+0x4b4>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80042ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042f0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80042f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80042f8:	2320      	movs	r3, #32
 80042fa:	e003      	b.n	8004304 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80042fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	3301      	adds	r3, #1
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2b09      	cmp	r3, #9
 800430c:	bf94      	ite	ls
 800430e:	2301      	movls	r3, #1
 8004310:	2300      	movhi	r3, #0
 8004312:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004314:	2b00      	cmp	r3, #0
 8004316:	d079      	beq.n	800440c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x4d4>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0e9b      	lsrs	r3, r3, #26
 800432a:	3301      	adds	r3, #1
 800432c:	069b      	lsls	r3, r3, #26
 800432e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004332:	e015      	b.n	8004360 <HAL_ADC_ConfigChannel+0x500>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800433c:	fa93 f3a3 	rbit	r3, r3
 8004340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004344:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800434c:	2320      	movs	r3, #32
 800434e:	e003      	b.n	8004358 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	3301      	adds	r3, #1
 800435a:	069b      	lsls	r3, r3, #26
 800435c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x520>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0e9b      	lsrs	r3, r3, #26
 8004372:	3301      	adds	r3, #1
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2101      	movs	r1, #1
 800437a:	fa01 f303 	lsl.w	r3, r1, r3
 800437e:	e017      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x550>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800438e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004390:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004398:	2320      	movs	r3, #32
 800439a:	e003      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800439c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2101      	movs	r1, #1
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	ea42 0103 	orr.w	r1, r2, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x576>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	0e9b      	lsrs	r3, r3, #26
 80043c6:	3301      	adds	r3, #1
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	051b      	lsls	r3, r3, #20
 80043d4:	e018      	b.n	8004408 <HAL_ADC_ConfigChannel+0x5a8>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80043e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80043e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80043ee:	2320      	movs	r3, #32
 80043f0:	e003      	b.n	80043fa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80043f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f4:	fab3 f383 	clz	r3, r3
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	f003 021f 	and.w	r2, r3, #31
 8004400:	4613      	mov	r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4413      	add	r3, r2
 8004406:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004408:	430b      	orrs	r3, r1
 800440a:	e07e      	b.n	800450a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004414:	2b00      	cmp	r3, #0
 8004416:	d107      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x5c8>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	0e9b      	lsrs	r3, r3, #26
 800441e:	3301      	adds	r3, #1
 8004420:	069b      	lsls	r3, r3, #26
 8004422:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004426:	e015      	b.n	8004454 <HAL_ADC_ConfigChannel+0x5f4>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004438:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	e003      	b.n	800444c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	069b      	lsls	r3, r3, #26
 8004450:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x614>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	0e9b      	lsrs	r3, r3, #26
 8004466:	3301      	adds	r3, #1
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2101      	movs	r1, #1
 800446e:	fa01 f303 	lsl.w	r3, r1, r3
 8004472:	e017      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x644>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	fa93 f3a3 	rbit	r3, r3
 8004480:	61fb      	str	r3, [r7, #28]
  return result;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800448c:	2320      	movs	r3, #32
 800448e:	e003      	b.n	8004498 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
 8004498:	3301      	adds	r3, #1
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2101      	movs	r1, #1
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	ea42 0103 	orr.w	r1, r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x670>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	0e9b      	lsrs	r3, r3, #26
 80044ba:	3301      	adds	r3, #1
 80044bc:	f003 021f 	and.w	r2, r3, #31
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	3b1e      	subs	r3, #30
 80044c8:	051b      	lsls	r3, r3, #20
 80044ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044ce:	e01b      	b.n	8004508 <HAL_ADC_ConfigChannel+0x6a8>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	fa93 f3a3 	rbit	r3, r3
 80044dc:	613b      	str	r3, [r7, #16]
  return result;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80044e8:	2320      	movs	r3, #32
 80044ea:	e003      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	3301      	adds	r3, #1
 80044f6:	f003 021f 	and.w	r2, r3, #31
 80044fa:	4613      	mov	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	4413      	add	r3, r2
 8004500:	3b1e      	subs	r3, #30
 8004502:	051b      	lsls	r3, r3, #20
 8004504:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004508:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800450e:	4619      	mov	r1, r3
 8004510:	f7ff f9ec 	bl	80038ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b09      	ldr	r3, [pc, #36]	@ (8004540 <HAL_ADC_ConfigChannel+0x6e0>)
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80be 	beq.w	800469e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800452a:	d004      	beq.n	8004536 <HAL_ADC_ConfigChannel+0x6d6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a04      	ldr	r2, [pc, #16]	@ (8004544 <HAL_ADC_ConfigChannel+0x6e4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d10a      	bne.n	800454c <HAL_ADC_ConfigChannel+0x6ec>
 8004536:	4b04      	ldr	r3, [pc, #16]	@ (8004548 <HAL_ADC_ConfigChannel+0x6e8>)
 8004538:	e009      	b.n	800454e <HAL_ADC_ConfigChannel+0x6ee>
 800453a:	bf00      	nop
 800453c:	407f0000 	.word	0x407f0000
 8004540:	80080000 	.word	0x80080000
 8004544:	50000100 	.word	0x50000100
 8004548:	50000300 	.word	0x50000300
 800454c:	4b59      	ldr	r3, [pc, #356]	@ (80046b4 <HAL_ADC_ConfigChannel+0x854>)
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff f8f4 	bl	800373c <LL_ADC_GetCommonPathInternalCh>
 8004554:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a56      	ldr	r2, [pc, #344]	@ (80046b8 <HAL_ADC_ConfigChannel+0x858>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_ADC_ConfigChannel+0x70c>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a55      	ldr	r2, [pc, #340]	@ (80046bc <HAL_ADC_ConfigChannel+0x85c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d13a      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800456c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004570:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d134      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004580:	d005      	beq.n	800458e <HAL_ADC_ConfigChannel+0x72e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a4e      	ldr	r2, [pc, #312]	@ (80046c0 <HAL_ADC_ConfigChannel+0x860>)
 8004588:	4293      	cmp	r3, r2
 800458a:	f040 8085 	bne.w	8004698 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004596:	d004      	beq.n	80045a2 <HAL_ADC_ConfigChannel+0x742>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a49      	ldr	r2, [pc, #292]	@ (80046c4 <HAL_ADC_ConfigChannel+0x864>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d101      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x746>
 80045a2:	4a49      	ldr	r2, [pc, #292]	@ (80046c8 <HAL_ADC_ConfigChannel+0x868>)
 80045a4:	e000      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x748>
 80045a6:	4a43      	ldr	r2, [pc, #268]	@ (80046b4 <HAL_ADC_ConfigChannel+0x854>)
 80045a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f7ff f8af 	bl	8003716 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b8:	4b44      	ldr	r3, [pc, #272]	@ (80046cc <HAL_ADC_ConfigChannel+0x86c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	4a44      	ldr	r2, [pc, #272]	@ (80046d0 <HAL_ADC_ConfigChannel+0x870>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	4613      	mov	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045d2:	e002      	b.n	80045da <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f9      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045e0:	e05a      	b.n	8004698 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a3b      	ldr	r2, [pc, #236]	@ (80046d4 <HAL_ADC_ConfigChannel+0x874>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d125      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d11f      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a31      	ldr	r2, [pc, #196]	@ (80046c4 <HAL_ADC_ConfigChannel+0x864>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d104      	bne.n	800460c <HAL_ADC_ConfigChannel+0x7ac>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a34      	ldr	r2, [pc, #208]	@ (80046d8 <HAL_ADC_ConfigChannel+0x878>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d047      	beq.n	800469c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004614:	d004      	beq.n	8004620 <HAL_ADC_ConfigChannel+0x7c0>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2a      	ldr	r2, [pc, #168]	@ (80046c4 <HAL_ADC_ConfigChannel+0x864>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x7c4>
 8004620:	4a29      	ldr	r2, [pc, #164]	@ (80046c8 <HAL_ADC_ConfigChannel+0x868>)
 8004622:	e000      	b.n	8004626 <HAL_ADC_ConfigChannel+0x7c6>
 8004624:	4a23      	ldr	r2, [pc, #140]	@ (80046b4 <HAL_ADC_ConfigChannel+0x854>)
 8004626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f7ff f870 	bl	8003716 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004636:	e031      	b.n	800469c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a27      	ldr	r2, [pc, #156]	@ (80046dc <HAL_ADC_ConfigChannel+0x87c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d12d      	bne.n	800469e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d127      	bne.n	800469e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1c      	ldr	r2, [pc, #112]	@ (80046c4 <HAL_ADC_ConfigChannel+0x864>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d022      	beq.n	800469e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004660:	d004      	beq.n	800466c <HAL_ADC_ConfigChannel+0x80c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a17      	ldr	r2, [pc, #92]	@ (80046c4 <HAL_ADC_ConfigChannel+0x864>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d101      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x810>
 800466c:	4a16      	ldr	r2, [pc, #88]	@ (80046c8 <HAL_ADC_ConfigChannel+0x868>)
 800466e:	e000      	b.n	8004672 <HAL_ADC_ConfigChannel+0x812>
 8004670:	4a10      	ldr	r2, [pc, #64]	@ (80046b4 <HAL_ADC_ConfigChannel+0x854>)
 8004672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004676:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f7ff f84a 	bl	8003716 <LL_ADC_SetCommonPathInternalCh>
 8004682:	e00c      	b.n	800469e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004696:	e002      	b.n	800469e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800469c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80046a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	37d8      	adds	r7, #216	@ 0xd8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	50000700 	.word	0x50000700
 80046b8:	c3210000 	.word	0xc3210000
 80046bc:	90c00010 	.word	0x90c00010
 80046c0:	50000600 	.word	0x50000600
 80046c4:	50000100 	.word	0x50000100
 80046c8:	50000300 	.word	0x50000300
 80046cc:	20000040 	.word	0x20000040
 80046d0:	053e2d63 	.word	0x053e2d63
 80046d4:	c7520000 	.word	0xc7520000
 80046d8:	50000500 	.word	0x50000500
 80046dc:	cb840000 	.word	0xcb840000

080046e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff f9c2 	bl	8003a76 <LL_ADC_IsDisableOngoing>
 80046f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff f9a9 	bl	8003a50 <LL_ADC_IsEnabled>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d047      	beq.n	8004794 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d144      	bne.n	8004794 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 030d 	and.w	r3, r3, #13
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10c      	bne.n	8004732 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff f983 	bl	8003a28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2203      	movs	r2, #3
 8004728:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800472a:	f7fe ffb3 	bl	8003694 <HAL_GetTick>
 800472e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004730:	e029      	b.n	8004786 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004736:	f043 0210 	orr.w	r2, r3, #16
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004742:	f043 0201 	orr.w	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e023      	b.n	8004796 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800474e:	f7fe ffa1 	bl	8003694 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d914      	bls.n	8004786 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00d      	beq.n	8004786 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476e:	f043 0210 	orr.w	r2, r3, #16
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800477a:	f043 0201 	orr.w	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e007      	b.n	8004796 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1dc      	bne.n	800474e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <LL_ADC_StartCalibration>:
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80047b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	609a      	str	r2, [r3, #8]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <LL_ADC_IsCalibrationOnGoing>:
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047e4:	d101      	bne.n	80047ea <LL_ADC_IsCalibrationOnGoing+0x1a>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <LL_ADC_IsCalibrationOnGoing+0x1c>
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_ADCEx_Calibration_Start+0x1c>
 8004810:	2302      	movs	r3, #2
 8004812:	e04d      	b.n	80048b0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff ff5f 	bl	80046e0 <ADC_Disable>
 8004822:	4603      	mov	r3, r0
 8004824:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d136      	bne.n	800489a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004830:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004834:	f023 0302 	bic.w	r3, r3, #2
 8004838:	f043 0202 	orr.w	r2, r3, #2
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff ffa9 	bl	800479e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800484c:	e014      	b.n	8004878 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	3301      	adds	r3, #1
 8004852:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d90d      	bls.n	8004878 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004860:	f023 0312 	bic.w	r3, r3, #18
 8004864:	f043 0210 	orr.w	r2, r3, #16
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e01b      	b.n	80048b0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff ffa7 	bl	80047d0 <LL_ADC_IsCalibrationOnGoing>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e2      	bne.n	800484e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488c:	f023 0303 	bic.w	r3, r3, #3
 8004890:	f043 0201 	orr.w	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004898:	e005      	b.n	80048a6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489e:	f043 0210 	orr.w	r2, r3, #16
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	0004de01 	.word	0x0004de01

080048bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ee:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	60d3      	str	r3, [r2, #12]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004908:	4b04      	ldr	r3, [pc, #16]	@ (800491c <__NVIC_GetPriorityGrouping+0x18>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 0307 	and.w	r3, r3, #7
}
 8004912:	4618      	mov	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	6039      	str	r1, [r7, #0]
 800492a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004930:	2b00      	cmp	r3, #0
 8004932:	db0a      	blt.n	800494a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	b2da      	uxtb	r2, r3
 8004938:	490c      	ldr	r1, [pc, #48]	@ (800496c <__NVIC_SetPriority+0x4c>)
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	0112      	lsls	r2, r2, #4
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	440b      	add	r3, r1
 8004944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004948:	e00a      	b.n	8004960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	b2da      	uxtb	r2, r3
 800494e:	4908      	ldr	r1, [pc, #32]	@ (8004970 <__NVIC_SetPriority+0x50>)
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	3b04      	subs	r3, #4
 8004958:	0112      	lsls	r2, r2, #4
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	440b      	add	r3, r1
 800495e:	761a      	strb	r2, [r3, #24]
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000e100 	.word	0xe000e100
 8004970:	e000ed00 	.word	0xe000ed00

08004974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004974:	b480      	push	{r7}
 8004976:	b089      	sub	sp, #36	@ 0x24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f1c3 0307 	rsb	r3, r3, #7
 800498e:	2b04      	cmp	r3, #4
 8004990:	bf28      	it	cs
 8004992:	2304      	movcs	r3, #4
 8004994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3304      	adds	r3, #4
 800499a:	2b06      	cmp	r3, #6
 800499c:	d902      	bls.n	80049a4 <NVIC_EncodePriority+0x30>
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3b03      	subs	r3, #3
 80049a2:	e000      	b.n	80049a6 <NVIC_EncodePriority+0x32>
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43da      	mvns	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	401a      	ands	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049bc:	f04f 31ff 	mov.w	r1, #4294967295
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	43d9      	mvns	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049cc:	4313      	orrs	r3, r2
         );
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3724      	adds	r7, #36	@ 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049ec:	d301      	bcc.n	80049f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049ee:	2301      	movs	r3, #1
 80049f0:	e00f      	b.n	8004a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049f2:	4a0a      	ldr	r2, [pc, #40]	@ (8004a1c <SysTick_Config+0x40>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049fa:	210f      	movs	r1, #15
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	f7ff ff8e 	bl	8004920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <SysTick_Config+0x40>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a0a:	4b04      	ldr	r3, [pc, #16]	@ (8004a1c <SysTick_Config+0x40>)
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	e000e010 	.word	0xe000e010

08004a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ff47 	bl	80048bc <__NVIC_SetPriorityGrouping>
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a44:	f7ff ff5e 	bl	8004904 <__NVIC_GetPriorityGrouping>
 8004a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	6978      	ldr	r0, [r7, #20]
 8004a50:	f7ff ff90 	bl	8004974 <NVIC_EncodePriority>
 8004a54:	4602      	mov	r2, r0
 8004a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff5f 	bl	8004920 <__NVIC_SetPriority>
}
 8004a62:	bf00      	nop
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff ffb2 	bl	80049dc <SysTick_Config>
 8004a78:	4603      	mov	r3, r0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a92:	e15a      	b.n	8004d4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 814c 	beq.w	8004d44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d005      	beq.n	8004ac4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d130      	bne.n	8004b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	2203      	movs	r2, #3
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004afa:	2201      	movs	r2, #1
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4013      	ands	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	f003 0201 	and.w	r2, r3, #1
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d017      	beq.n	8004b62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	43db      	mvns	r3, r3
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4013      	ands	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d123      	bne.n	8004bb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	08da      	lsrs	r2, r3, #3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3208      	adds	r2, #8
 8004b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	220f      	movs	r2, #15
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	08da      	lsrs	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3208      	adds	r2, #8
 8004bb0:	6939      	ldr	r1, [r7, #16]
 8004bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0203 	and.w	r2, r3, #3
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80a6 	beq.w	8004d44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d68 <HAL_GPIO_Init+0x2e4>)
 8004bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8004d68 <HAL_GPIO_Init+0x2e4>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c04:	4b58      	ldr	r3, [pc, #352]	@ (8004d68 <HAL_GPIO_Init+0x2e4>)
 8004c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c10:	4a56      	ldr	r2, [pc, #344]	@ (8004d6c <HAL_GPIO_Init+0x2e8>)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	089b      	lsrs	r3, r3, #2
 8004c16:	3302      	adds	r3, #2
 8004c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	220f      	movs	r2, #15
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4013      	ands	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c3a:	d01f      	beq.n	8004c7c <HAL_GPIO_Init+0x1f8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a4c      	ldr	r2, [pc, #304]	@ (8004d70 <HAL_GPIO_Init+0x2ec>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d019      	beq.n	8004c78 <HAL_GPIO_Init+0x1f4>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a4b      	ldr	r2, [pc, #300]	@ (8004d74 <HAL_GPIO_Init+0x2f0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <HAL_GPIO_Init+0x1f0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d78 <HAL_GPIO_Init+0x2f4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00d      	beq.n	8004c70 <HAL_GPIO_Init+0x1ec>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a49      	ldr	r2, [pc, #292]	@ (8004d7c <HAL_GPIO_Init+0x2f8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <HAL_GPIO_Init+0x1e8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a48      	ldr	r2, [pc, #288]	@ (8004d80 <HAL_GPIO_Init+0x2fc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d101      	bne.n	8004c68 <HAL_GPIO_Init+0x1e4>
 8004c64:	2305      	movs	r3, #5
 8004c66:	e00a      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c68:	2306      	movs	r3, #6
 8004c6a:	e008      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	e006      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c70:	2303      	movs	r3, #3
 8004c72:	e004      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e002      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	f002 0203 	and.w	r2, r2, #3
 8004c84:	0092      	lsls	r2, r2, #2
 8004c86:	4093      	lsls	r3, r2
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c8e:	4937      	ldr	r1, [pc, #220]	@ (8004d6c <HAL_GPIO_Init+0x2e8>)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	3302      	adds	r3, #2
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c9c:	4b39      	ldr	r3, [pc, #228]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cc0:	4a30      	ldr	r2, [pc, #192]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cea:	4a26      	ldr	r2, [pc, #152]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004cf0:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d14:	4a1b      	ldr	r2, [pc, #108]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4013      	ands	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d3e:	4a11      	ldr	r2, [pc, #68]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	3301      	adds	r3, #1
 8004d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f47f ae9d 	bne.w	8004a94 <HAL_GPIO_Init+0x10>
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	48000400 	.word	0x48000400
 8004d74:	48000800 	.word	0x48000800
 8004d78:	48000c00 	.word	0x48000c00
 8004d7c:	48001000 	.word	0x48001000
 8004d80:	48001400 	.word	0x48001400
 8004d84:	40010400 	.word	0x40010400

08004d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	887b      	ldrh	r3, [r7, #2]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
 8004da4:	e001      	b.n	8004daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dc8:	787b      	ldrb	r3, [r7, #1]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dd4:	e002      	b.n	8004ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e08d      	b.n	8004f16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fd f844 	bl	8001e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2224      	movs	r2, #36	@ 0x24
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d107      	bne.n	8004e62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e5e:	609a      	str	r2, [r3, #8]
 8004e60:	e006      	b.n	8004e70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d108      	bne.n	8004e8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	e007      	b.n	8004e9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ebc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69d9      	ldr	r1, [r3, #28]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1a      	ldr	r2, [r3, #32]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	607a      	str	r2, [r7, #4]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	817b      	strh	r3, [r7, #10]
 8004f30:	4613      	mov	r3, r2
 8004f32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	f040 80fd 	bne.w	800513c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_I2C_Master_Transmit+0x30>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e0f6      	b.n	800513e <HAL_I2C_Master_Transmit+0x21e>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f58:	f7fe fb9c 	bl	8003694 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2319      	movs	r3, #25
 8004f64:	2201      	movs	r2, #1
 8004f66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 f914 	bl	8005198 <I2C_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e0e1      	b.n	800513e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2221      	movs	r2, #33	@ 0x21
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2210      	movs	r2, #16
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	893a      	ldrh	r2, [r7, #8]
 8004f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2bff      	cmp	r3, #255	@ 0xff
 8004faa:	d906      	bls.n	8004fba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	22ff      	movs	r2, #255	@ 0xff
 8004fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004fb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e007      	b.n	8004fca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004fc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fc8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d024      	beq.n	800501c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd6:	781a      	ldrb	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005006:	b2db      	uxtb	r3, r3
 8005008:	3301      	adds	r3, #1
 800500a:	b2da      	uxtb	r2, r3
 800500c:	8979      	ldrh	r1, [r7, #10]
 800500e:	4b4e      	ldr	r3, [pc, #312]	@ (8005148 <HAL_I2C_Master_Transmit+0x228>)
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fa83 	bl	8005520 <I2C_TransferConfig>
 800501a:	e066      	b.n	80050ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005020:	b2da      	uxtb	r2, r3
 8005022:	8979      	ldrh	r1, [r7, #10]
 8005024:	4b48      	ldr	r3, [pc, #288]	@ (8005148 <HAL_I2C_Master_Transmit+0x228>)
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fa78 	bl	8005520 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005030:	e05b      	b.n	80050ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	6a39      	ldr	r1, [r7, #32]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f907 	bl	800524a <I2C_WaitOnTXISFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e07b      	b.n	800513e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	781a      	ldrb	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d034      	beq.n	80050ea <HAL_I2C_Master_Transmit+0x1ca>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005084:	2b00      	cmp	r3, #0
 8005086:	d130      	bne.n	80050ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	2200      	movs	r2, #0
 8005090:	2180      	movs	r1, #128	@ 0x80
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f880 	bl	8005198 <I2C_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e04d      	b.n	800513e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2bff      	cmp	r3, #255	@ 0xff
 80050aa:	d90e      	bls.n	80050ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	22ff      	movs	r2, #255	@ 0xff
 80050b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	8979      	ldrh	r1, [r7, #10]
 80050ba:	2300      	movs	r3, #0
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fa2c 	bl	8005520 <I2C_TransferConfig>
 80050c8:	e00f      	b.n	80050ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	8979      	ldrh	r1, [r7, #10]
 80050dc:	2300      	movs	r3, #0
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fa1b 	bl	8005520 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d19e      	bne.n	8005032 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	6a39      	ldr	r1, [r7, #32]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f8ed 	bl	80052d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e01a      	b.n	800513e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2220      	movs	r2, #32
 800510e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <HAL_I2C_Master_Transmit+0x22c>)
 800511c:	400b      	ands	r3, r1
 800511e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	80002000 	.word	0x80002000
 800514c:	fe00e800 	.word	0xfe00e800

08005150 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d103      	bne.n	800516e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b01      	cmp	r3, #1
 800517a:	d007      	beq.n	800518c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	619a      	str	r2, [r3, #24]
  }
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	4613      	mov	r3, r2
 80051a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a8:	e03b      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f8d6 	bl	8005360 <I2C_IsErrorOccurred>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e041      	b.n	8005242 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d02d      	beq.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c6:	f7fe fa65 	bl	8003694 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d302      	bcc.n	80051dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d122      	bne.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4013      	ands	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d113      	bne.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fe:	f043 0220 	orr.w	r2, r3, #32
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e00f      	b.n	8005242 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4013      	ands	r3, r2
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	429a      	cmp	r2, r3
 8005230:	bf0c      	ite	eq
 8005232:	2301      	moveq	r3, #1
 8005234:	2300      	movne	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	429a      	cmp	r2, r3
 800523e:	d0b4      	beq.n	80051aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005256:	e033      	b.n	80052c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f87f 	bl	8005360 <I2C_IsErrorOccurred>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e031      	b.n	80052d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d025      	beq.n	80052c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005274:	f7fe fa0e 	bl	8003694 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	d302      	bcc.n	800528a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d11a      	bne.n	80052c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b02      	cmp	r3, #2
 8005296:	d013      	beq.n	80052c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e007      	b.n	80052d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d1c4      	bne.n	8005258 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052e4:	e02f      	b.n	8005346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f838 	bl	8005360 <I2C_IsErrorOccurred>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e02d      	b.n	8005356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fa:	f7fe f9cb 	bl	8003694 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	429a      	cmp	r2, r3
 8005308:	d302      	bcc.n	8005310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11a      	bne.n	8005346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b20      	cmp	r3, #32
 800531c:	d013      	beq.n	8005346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	f043 0220 	orr.w	r2, r3, #32
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e007      	b.n	8005356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b20      	cmp	r3, #32
 8005352:	d1c8      	bne.n	80052e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	@ 0x28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b00      	cmp	r3, #0
 800538a:	d068      	beq.n	800545e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2210      	movs	r2, #16
 8005392:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005394:	e049      	b.n	800542a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539c:	d045      	beq.n	800542a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800539e:	f7fe f979 	bl	8003694 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d302      	bcc.n	80053b4 <I2C_IsErrorOccurred+0x54>
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d13a      	bne.n	800542a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d6:	d121      	bne.n	800541c <I2C_IsErrorOccurred+0xbc>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053de:	d01d      	beq.n	800541c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053e0:	7cfb      	ldrb	r3, [r7, #19]
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d01a      	beq.n	800541c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053f6:	f7fe f94d 	bl	8003694 <HAL_GetTick>
 80053fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053fc:	e00e      	b.n	800541c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053fe:	f7fe f949 	bl	8003694 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b19      	cmp	r3, #25
 800540a:	d907      	bls.n	800541c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	f043 0320 	orr.w	r3, r3, #32
 8005412:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800541a:	e006      	b.n	800542a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b20      	cmp	r3, #32
 8005428:	d1e9      	bne.n	80053fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b20      	cmp	r3, #32
 8005436:	d003      	beq.n	8005440 <I2C_IsErrorOccurred+0xe0>
 8005438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0aa      	beq.n	8005396 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005444:	2b00      	cmp	r3, #0
 8005446:	d103      	bne.n	8005450 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2220      	movs	r2, #32
 800544e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	f043 0304 	orr.w	r3, r3, #4
 8005456:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	f043 0308 	orr.w	r3, r3, #8
 8005498:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	f043 0302 	orr.w	r3, r3, #2
 80054ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80054cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01c      	beq.n	800550e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff fe3b 	bl	8005150 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6859      	ldr	r1, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b0d      	ldr	r3, [pc, #52]	@ (800551c <I2C_IsErrorOccurred+0x1bc>)
 80054e6:	400b      	ands	r3, r1
 80054e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800550e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005512:	4618      	mov	r0, r3
 8005514:	3728      	adds	r7, #40	@ 0x28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	fe00e800 	.word	0xfe00e800

08005520 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	607b      	str	r3, [r7, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	817b      	strh	r3, [r7, #10]
 800552e:	4613      	mov	r3, r2
 8005530:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005532:	897b      	ldrh	r3, [r7, #10]
 8005534:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005538:	7a7b      	ldrb	r3, [r7, #9]
 800553a:	041b      	lsls	r3, r3, #16
 800553c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005540:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	4313      	orrs	r3, r2
 800554a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800554e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	0d5b      	lsrs	r3, r3, #21
 800555a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800555e:	4b08      	ldr	r3, [pc, #32]	@ (8005580 <I2C_TransferConfig+0x60>)
 8005560:	430b      	orrs	r3, r1
 8005562:	43db      	mvns	r3, r3
 8005564:	ea02 0103 	and.w	r1, r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	03ff63ff 	.word	0x03ff63ff

08005584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b20      	cmp	r3, #32
 8005598:	d138      	bne.n	800560c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e032      	b.n	800560e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2224      	movs	r2, #36	@ 0x24
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6819      	ldr	r1, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	e000      	b.n	800560e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800560c:	2302      	movs	r3, #2
  }
}
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b20      	cmp	r3, #32
 800562e:	d139      	bne.n	80056a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800563a:	2302      	movs	r3, #2
 800563c:	e033      	b.n	80056a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2224      	movs	r2, #36	@ 0x24
 800564a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0201 	bic.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800566c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
  }
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d141      	bne.n	8005746 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056c2:	4b4b      	ldr	r3, [pc, #300]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ce:	d131      	bne.n	8005734 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056d0:	4b47      	ldr	r3, [pc, #284]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056d6:	4a46      	ldr	r2, [pc, #280]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056e0:	4b43      	ldr	r3, [pc, #268]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056e8:	4a41      	ldr	r2, [pc, #260]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056f0:	4b40      	ldr	r3, [pc, #256]	@ (80057f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2232      	movs	r2, #50	@ 0x32
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	4a3f      	ldr	r2, [pc, #252]	@ (80057f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	0c9b      	lsrs	r3, r3, #18
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005706:	e002      	b.n	800570e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3b01      	subs	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800570e:	4b38      	ldr	r3, [pc, #224]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800571a:	d102      	bne.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f2      	bne.n	8005708 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005722:	4b33      	ldr	r3, [pc, #204]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800572a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800572e:	d158      	bne.n	80057e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e057      	b.n	80057e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005734:	4b2e      	ldr	r3, [pc, #184]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800573a:	4a2d      	ldr	r2, [pc, #180]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005740:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005744:	e04d      	b.n	80057e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800574c:	d141      	bne.n	80057d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800574e:	4b28      	ldr	r3, [pc, #160]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800575a:	d131      	bne.n	80057c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800575c:	4b24      	ldr	r3, [pc, #144]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800575e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005762:	4a23      	ldr	r2, [pc, #140]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005768:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800576c:	4b20      	ldr	r3, [pc, #128]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005774:	4a1e      	ldr	r2, [pc, #120]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800577a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800577c:	4b1d      	ldr	r3, [pc, #116]	@ (80057f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2232      	movs	r2, #50	@ 0x32
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	4a1c      	ldr	r2, [pc, #112]	@ (80057f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005788:	fba2 2303 	umull	r2, r3, r2, r3
 800578c:	0c9b      	lsrs	r3, r3, #18
 800578e:	3301      	adds	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005792:	e002      	b.n	800579a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3b01      	subs	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800579a:	4b15      	ldr	r3, [pc, #84]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a6:	d102      	bne.n	80057ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f2      	bne.n	8005794 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057ae:	4b10      	ldr	r3, [pc, #64]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ba:	d112      	bne.n	80057e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e011      	b.n	80057e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057c0:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057c6:	4a0a      	ldr	r2, [pc, #40]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80057d0:	e007      	b.n	80057e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057d2:	4b07      	ldr	r3, [pc, #28]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057da:	4a05      	ldr	r2, [pc, #20]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40007000 	.word	0x40007000
 80057f4:	20000040 	.word	0x20000040
 80057f8:	431bde83 	.word	0x431bde83

080057fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005800:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	4a04      	ldr	r2, [pc, #16]	@ (8005818 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005806:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800580a:	6093      	str	r3, [r2, #8]
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40007000 	.word	0x40007000

0800581c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e2fe      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d075      	beq.n	8005926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800583a:	4b97      	ldr	r3, [pc, #604]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 030c 	and.w	r3, r3, #12
 8005842:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005844:	4b94      	ldr	r3, [pc, #592]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b0c      	cmp	r3, #12
 8005852:	d102      	bne.n	800585a <HAL_RCC_OscConfig+0x3e>
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b03      	cmp	r3, #3
 8005858:	d002      	beq.n	8005860 <HAL_RCC_OscConfig+0x44>
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b08      	cmp	r3, #8
 800585e:	d10b      	bne.n	8005878 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005860:	4b8d      	ldr	r3, [pc, #564]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d05b      	beq.n	8005924 <HAL_RCC_OscConfig+0x108>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d157      	bne.n	8005924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e2d9      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005880:	d106      	bne.n	8005890 <HAL_RCC_OscConfig+0x74>
 8005882:	4b85      	ldr	r3, [pc, #532]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a84      	ldr	r2, [pc, #528]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e01d      	b.n	80058cc <HAL_RCC_OscConfig+0xb0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005898:	d10c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x98>
 800589a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80058a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a7b      	ldr	r2, [pc, #492]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80058ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e00b      	b.n	80058cc <HAL_RCC_OscConfig+0xb0>
 80058b4:	4b78      	ldr	r3, [pc, #480]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a77      	ldr	r2, [pc, #476]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80058ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	4b75      	ldr	r3, [pc, #468]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a74      	ldr	r2, [pc, #464]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80058c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d013      	beq.n	80058fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fd fede 	bl	8003694 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058dc:	f7fd feda 	bl	8003694 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b64      	cmp	r3, #100	@ 0x64
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e29e      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0xc0>
 80058fa:	e014      	b.n	8005926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fd feca 	bl	8003694 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005904:	f7fd fec6 	bl	8003694 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b64      	cmp	r3, #100	@ 0x64
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e28a      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005916:	4b60      	ldr	r3, [pc, #384]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0xe8>
 8005922:	e000      	b.n	8005926 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d075      	beq.n	8005a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005932:	4b59      	ldr	r3, [pc, #356]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800593c:	4b56      	ldr	r3, [pc, #344]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b0c      	cmp	r3, #12
 800594a:	d102      	bne.n	8005952 <HAL_RCC_OscConfig+0x136>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d002      	beq.n	8005958 <HAL_RCC_OscConfig+0x13c>
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b04      	cmp	r3, #4
 8005956:	d11f      	bne.n	8005998 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005958:	4b4f      	ldr	r3, [pc, #316]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_RCC_OscConfig+0x154>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e25d      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005970:	4b49      	ldr	r3, [pc, #292]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	061b      	lsls	r3, r3, #24
 800597e:	4946      	ldr	r1, [pc, #280]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005980:	4313      	orrs	r3, r2
 8005982:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005984:	4b45      	ldr	r3, [pc, #276]	@ (8005a9c <HAL_RCC_OscConfig+0x280>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f7fd fe37 	bl	80035fc <HAL_InitTick>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d043      	beq.n	8005a1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e249      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d023      	beq.n	80059e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80059a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fd fe72 	bl	8003694 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059b4:	f7fd fe6e 	bl	8003694 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e232      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059c6:	4b34      	ldr	r3, [pc, #208]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d2:	4b31      	ldr	r3, [pc, #196]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	061b      	lsls	r3, r3, #24
 80059e0:	492d      	ldr	r1, [pc, #180]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	604b      	str	r3, [r1, #4]
 80059e6:	e01a      	b.n	8005a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 80059ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fd fe4e 	bl	8003694 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059fc:	f7fd fe4a 	bl	8003694 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e20e      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a0e:	4b22      	ldr	r3, [pc, #136]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0x1e0>
 8005a1a:	e000      	b.n	8005a1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d041      	beq.n	8005aae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d01c      	beq.n	8005a6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a32:	4b19      	ldr	r3, [pc, #100]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a38:	4a17      	ldr	r2, [pc, #92]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005a3a:	f043 0301 	orr.w	r3, r3, #1
 8005a3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a42:	f7fd fe27 	bl	8003694 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a4a:	f7fd fe23 	bl	8003694 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e1e7      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0ef      	beq.n	8005a4a <HAL_RCC_OscConfig+0x22e>
 8005a6a:	e020      	b.n	8005aae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a72:	4a09      	ldr	r2, [pc, #36]	@ (8005a98 <HAL_RCC_OscConfig+0x27c>)
 8005a74:	f023 0301 	bic.w	r3, r3, #1
 8005a78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7c:	f7fd fe0a 	bl	8003694 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a82:	e00d      	b.n	8005aa0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a84:	f7fd fe06 	bl	8003694 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d906      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e1ca      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
 8005a96:	bf00      	nop
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005aa0:	4b8c      	ldr	r3, [pc, #560]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1ea      	bne.n	8005a84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 80a6 	beq.w	8005c08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005abc:	2300      	movs	r3, #0
 8005abe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ac0:	4b84      	ldr	r3, [pc, #528]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x2b4>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <HAL_RCC_OscConfig+0x2b6>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00d      	beq.n	8005af2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ada:	4a7e      	ldr	r2, [pc, #504]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005aee:	2301      	movs	r3, #1
 8005af0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005af2:	4b79      	ldr	r3, [pc, #484]	@ (8005cd8 <HAL_RCC_OscConfig+0x4bc>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d118      	bne.n	8005b30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005afe:	4b76      	ldr	r3, [pc, #472]	@ (8005cd8 <HAL_RCC_OscConfig+0x4bc>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a75      	ldr	r2, [pc, #468]	@ (8005cd8 <HAL_RCC_OscConfig+0x4bc>)
 8005b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b0a:	f7fd fdc3 	bl	8003694 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b12:	f7fd fdbf 	bl	8003694 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e183      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b24:	4b6c      	ldr	r3, [pc, #432]	@ (8005cd8 <HAL_RCC_OscConfig+0x4bc>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d108      	bne.n	8005b4a <HAL_RCC_OscConfig+0x32e>
 8005b38:	4b66      	ldr	r3, [pc, #408]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3e:	4a65      	ldr	r2, [pc, #404]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005b40:	f043 0301 	orr.w	r3, r3, #1
 8005b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b48:	e024      	b.n	8005b94 <HAL_RCC_OscConfig+0x378>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d110      	bne.n	8005b74 <HAL_RCC_OscConfig+0x358>
 8005b52:	4b60      	ldr	r3, [pc, #384]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b58:	4a5e      	ldr	r2, [pc, #376]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005b5a:	f043 0304 	orr.w	r3, r3, #4
 8005b5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b62:	4b5c      	ldr	r3, [pc, #368]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b68:	4a5a      	ldr	r2, [pc, #360]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b72:	e00f      	b.n	8005b94 <HAL_RCC_OscConfig+0x378>
 8005b74:	4b57      	ldr	r3, [pc, #348]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7a:	4a56      	ldr	r2, [pc, #344]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b84:	4b53      	ldr	r3, [pc, #332]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8a:	4a52      	ldr	r2, [pc, #328]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005b8c:	f023 0304 	bic.w	r3, r3, #4
 8005b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d016      	beq.n	8005bca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9c:	f7fd fd7a 	bl	8003694 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ba2:	e00a      	b.n	8005bba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba4:	f7fd fd76 	bl	8003694 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e138      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bba:	4b46      	ldr	r3, [pc, #280]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0ed      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x388>
 8005bc8:	e015      	b.n	8005bf6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bca:	f7fd fd63 	bl	8003694 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bd0:	e00a      	b.n	8005be8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd2:	f7fd fd5f 	bl	8003694 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e121      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005be8:	4b3a      	ldr	r3, [pc, #232]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1ed      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bf6:	7ffb      	ldrb	r3, [r7, #31]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d105      	bne.n	8005c08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bfc:	4b35      	ldr	r3, [pc, #212]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c00:	4a34      	ldr	r2, [pc, #208]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d03c      	beq.n	8005c8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01c      	beq.n	8005c56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c22:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2c:	f7fd fd32 	bl	8003694 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c34:	f7fd fd2e 	bl	8003694 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e0f2      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c46:	4b23      	ldr	r3, [pc, #140]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0ef      	beq.n	8005c34 <HAL_RCC_OscConfig+0x418>
 8005c54:	e01b      	b.n	8005c8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c56:	4b1f      	ldr	r3, [pc, #124]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c5e:	f023 0301 	bic.w	r3, r3, #1
 8005c62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c66:	f7fd fd15 	bl	8003694 <HAL_GetTick>
 8005c6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c6e:	f7fd fd11 	bl	8003694 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e0d5      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c80:	4b14      	ldr	r3, [pc, #80]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1ef      	bne.n	8005c6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80c9 	beq.w	8005e2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c98:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 030c 	and.w	r3, r3, #12
 8005ca0:	2b0c      	cmp	r3, #12
 8005ca2:	f000 8083 	beq.w	8005dac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d15e      	bne.n	8005d6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cae:	4b09      	ldr	r3, [pc, #36]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a08      	ldr	r2, [pc, #32]	@ (8005cd4 <HAL_RCC_OscConfig+0x4b8>)
 8005cb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cba:	f7fd fceb 	bl	8003694 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cc0:	e00c      	b.n	8005cdc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc2:	f7fd fce7 	bl	8003694 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d905      	bls.n	8005cdc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e0ab      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cdc:	4b55      	ldr	r3, [pc, #340]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1ec      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ce8:	4b52      	ldr	r3, [pc, #328]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	4b52      	ldr	r3, [pc, #328]	@ (8005e38 <HAL_RCC_OscConfig+0x61c>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6a11      	ldr	r1, [r2, #32]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cf8:	3a01      	subs	r2, #1
 8005cfa:	0112      	lsls	r2, r2, #4
 8005cfc:	4311      	orrs	r1, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005d02:	0212      	lsls	r2, r2, #8
 8005d04:	4311      	orrs	r1, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d0a:	0852      	lsrs	r2, r2, #1
 8005d0c:	3a01      	subs	r2, #1
 8005d0e:	0552      	lsls	r2, r2, #21
 8005d10:	4311      	orrs	r1, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d16:	0852      	lsrs	r2, r2, #1
 8005d18:	3a01      	subs	r2, #1
 8005d1a:	0652      	lsls	r2, r2, #25
 8005d1c:	4311      	orrs	r1, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d22:	06d2      	lsls	r2, r2, #27
 8005d24:	430a      	orrs	r2, r1
 8005d26:	4943      	ldr	r1, [pc, #268]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d2c:	4b41      	ldr	r3, [pc, #260]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a40      	ldr	r2, [pc, #256]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d38:	4b3e      	ldr	r3, [pc, #248]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d44:	f7fd fca6 	bl	8003694 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fd fca2 	bl	8003694 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e066      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d5e:	4b35      	ldr	r3, [pc, #212]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0f0      	beq.n	8005d4c <HAL_RCC_OscConfig+0x530>
 8005d6a:	e05e      	b.n	8005e2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d6c:	4b31      	ldr	r3, [pc, #196]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a30      	ldr	r2, [pc, #192]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d78:	f7fd fc8c 	bl	8003694 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d80:	f7fd fc88 	bl	8003694 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e04c      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d92:	4b28      	ldr	r3, [pc, #160]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d9e:	4b25      	ldr	r3, [pc, #148]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	4924      	ldr	r1, [pc, #144]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005da4:	4b25      	ldr	r3, [pc, #148]	@ (8005e3c <HAL_RCC_OscConfig+0x620>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	60cb      	str	r3, [r1, #12]
 8005daa:	e03e      	b.n	8005e2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e039      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005db8:	4b1e      	ldr	r3, [pc, #120]	@ (8005e34 <HAL_RCC_OscConfig+0x618>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f003 0203 	and.w	r2, r3, #3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d12c      	bne.n	8005e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d123      	bne.n	8005e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d11b      	bne.n	8005e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d113      	bne.n	8005e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d109      	bne.n	8005e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1c:	085b      	lsrs	r3, r3, #1
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d001      	beq.n	8005e2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40021000 	.word	0x40021000
 8005e38:	019f800c 	.word	0x019f800c
 8005e3c:	feeefffc 	.word	0xfeeefffc

08005e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e11e      	b.n	8006096 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e58:	4b91      	ldr	r3, [pc, #580]	@ (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d910      	bls.n	8005e88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e66:	4b8e      	ldr	r3, [pc, #568]	@ (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f023 020f 	bic.w	r2, r3, #15
 8005e6e:	498c      	ldr	r1, [pc, #560]	@ (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e76:	4b8a      	ldr	r3, [pc, #552]	@ (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d001      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e106      	b.n	8006096 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d073      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d129      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e9c:	4b81      	ldr	r3, [pc, #516]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e0f4      	b.n	8006096 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005eac:	f000 f99e 	bl	80061ec <RCC_GetSysClockFreqFromPLLSource>
 8005eb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	4a7c      	ldr	r2, [pc, #496]	@ (80060a8 <HAL_RCC_ClockConfig+0x268>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d93f      	bls.n	8005f3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005eba:	4b7a      	ldr	r3, [pc, #488]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d009      	beq.n	8005eda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d033      	beq.n	8005f3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d12f      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005eda:	4b72      	ldr	r3, [pc, #456]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ee2:	4a70      	ldr	r2, [pc, #448]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ee8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005eea:	2380      	movs	r3, #128	@ 0x80
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e024      	b.n	8005f3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d107      	bne.n	8005f08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d109      	bne.n	8005f18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0c6      	b.n	8006096 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f08:	4b66      	ldr	r3, [pc, #408]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0be      	b.n	8006096 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f18:	f000 f8ce 	bl	80060b8 <HAL_RCC_GetSysClockFreq>
 8005f1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4a61      	ldr	r2, [pc, #388]	@ (80060a8 <HAL_RCC_ClockConfig+0x268>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d909      	bls.n	8005f3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f26:	4b5f      	ldr	r3, [pc, #380]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f2e:	4a5d      	ldr	r2, [pc, #372]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f36:	2380      	movs	r3, #128	@ 0x80
 8005f38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f3a:	4b5a      	ldr	r3, [pc, #360]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f023 0203 	bic.w	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4957      	ldr	r1, [pc, #348]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f4c:	f7fd fba2 	bl	8003694 <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f52:	e00a      	b.n	8005f6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f54:	f7fd fb9e 	bl	8003694 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e095      	b.n	8006096 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 020c 	and.w	r2, r3, #12
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d1eb      	bne.n	8005f54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d023      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f94:	4b43      	ldr	r3, [pc, #268]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	4a42      	ldr	r2, [pc, #264]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005f9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005fac:	4b3d      	ldr	r3, [pc, #244]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005fb4:	4a3b      	ldr	r2, [pc, #236]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005fb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005fba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fbc:	4b39      	ldr	r3, [pc, #228]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	4936      	ldr	r1, [pc, #216]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b80      	cmp	r3, #128	@ 0x80
 8005fd4:	d105      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005fd6:	4b33      	ldr	r3, [pc, #204]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	4a32      	ldr	r2, [pc, #200]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8005fdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fe0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d21d      	bcs.n	800602c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f023 020f 	bic.w	r2, r3, #15
 8005ff8:	4929      	ldr	r1, [pc, #164]	@ (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006000:	f7fd fb48 	bl	8003694 <HAL_GetTick>
 8006004:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	e00a      	b.n	800601e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006008:	f7fd fb44 	bl	8003694 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e03b      	b.n	8006096 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800601e:	4b20      	ldr	r3, [pc, #128]	@ (80060a0 <HAL_RCC_ClockConfig+0x260>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d1ed      	bne.n	8006008 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006038:	4b1a      	ldr	r3, [pc, #104]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	4917      	ldr	r1, [pc, #92]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006056:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	490f      	ldr	r1, [pc, #60]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8006066:	4313      	orrs	r3, r2
 8006068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800606a:	f000 f825 	bl	80060b8 <HAL_RCC_GetSysClockFreq>
 800606e:	4602      	mov	r2, r0
 8006070:	4b0c      	ldr	r3, [pc, #48]	@ (80060a4 <HAL_RCC_ClockConfig+0x264>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	490c      	ldr	r1, [pc, #48]	@ (80060ac <HAL_RCC_ClockConfig+0x26c>)
 800607c:	5ccb      	ldrb	r3, [r1, r3]
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	fa22 f303 	lsr.w	r3, r2, r3
 8006086:	4a0a      	ldr	r2, [pc, #40]	@ (80060b0 <HAL_RCC_ClockConfig+0x270>)
 8006088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800608a:	4b0a      	ldr	r3, [pc, #40]	@ (80060b4 <HAL_RCC_ClockConfig+0x274>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f7fd fab4 	bl	80035fc <HAL_InitTick>
 8006094:	4603      	mov	r3, r0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40022000 	.word	0x40022000
 80060a4:	40021000 	.word	0x40021000
 80060a8:	04c4b400 	.word	0x04c4b400
 80060ac:	0800b824 	.word	0x0800b824
 80060b0:	20000040 	.word	0x20000040
 80060b4:	20000044 	.word	0x20000044

080060b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80060be:	4b2c      	ldr	r3, [pc, #176]	@ (8006170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d102      	bne.n	80060d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006174 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	e047      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80060d0:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 030c 	and.w	r3, r3, #12
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d102      	bne.n	80060e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060dc:	4b26      	ldr	r3, [pc, #152]	@ (8006178 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	e03e      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80060e2:	4b23      	ldr	r3, [pc, #140]	@ (8006170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	2b0c      	cmp	r3, #12
 80060ec:	d136      	bne.n	800615c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ee:	4b20      	ldr	r3, [pc, #128]	@ (8006170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	3301      	adds	r3, #1
 8006104:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b03      	cmp	r3, #3
 800610a:	d10c      	bne.n	8006126 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800610c:	4a1a      	ldr	r2, [pc, #104]	@ (8006178 <HAL_RCC_GetSysClockFreq+0xc0>)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	fbb2 f3f3 	udiv	r3, r2, r3
 8006114:	4a16      	ldr	r2, [pc, #88]	@ (8006170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006116:	68d2      	ldr	r2, [r2, #12]
 8006118:	0a12      	lsrs	r2, r2, #8
 800611a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800611e:	fb02 f303 	mul.w	r3, r2, r3
 8006122:	617b      	str	r3, [r7, #20]
      break;
 8006124:	e00c      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006126:	4a13      	ldr	r2, [pc, #76]	@ (8006174 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	fbb2 f3f3 	udiv	r3, r2, r3
 800612e:	4a10      	ldr	r2, [pc, #64]	@ (8006170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006130:	68d2      	ldr	r2, [r2, #12]
 8006132:	0a12      	lsrs	r2, r2, #8
 8006134:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006138:	fb02 f303 	mul.w	r3, r2, r3
 800613c:	617b      	str	r3, [r7, #20]
      break;
 800613e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006140:	4b0b      	ldr	r3, [pc, #44]	@ (8006170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	0e5b      	lsrs	r3, r3, #25
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	3301      	adds	r3, #1
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	fbb2 f3f3 	udiv	r3, r2, r3
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	e001      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006160:	693b      	ldr	r3, [r7, #16]
}
 8006162:	4618      	mov	r0, r3
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
 8006174:	00f42400 	.word	0x00f42400
 8006178:	02dc6c00 	.word	0x02dc6c00

0800617c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006180:	4b03      	ldr	r3, [pc, #12]	@ (8006190 <HAL_RCC_GetHCLKFreq+0x14>)
 8006182:	681b      	ldr	r3, [r3, #0]
}
 8006184:	4618      	mov	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000040 	.word	0x20000040

08006194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006198:	f7ff fff0 	bl	800617c <HAL_RCC_GetHCLKFreq>
 800619c:	4602      	mov	r2, r0
 800619e:	4b06      	ldr	r3, [pc, #24]	@ (80061b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	4904      	ldr	r1, [pc, #16]	@ (80061bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80061aa:	5ccb      	ldrb	r3, [r1, r3]
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40021000 	.word	0x40021000
 80061bc:	0800b834 	.word	0x0800b834

080061c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80061c4:	f7ff ffda 	bl	800617c <HAL_RCC_GetHCLKFreq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	0adb      	lsrs	r3, r3, #11
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	4904      	ldr	r1, [pc, #16]	@ (80061e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061d6:	5ccb      	ldrb	r3, [r1, r3]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40021000 	.word	0x40021000
 80061e8:	0800b834 	.word	0x0800b834

080061ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061f2:	4b1e      	ldr	r3, [pc, #120]	@ (800626c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061fc:	4b1b      	ldr	r3, [pc, #108]	@ (800626c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b03      	cmp	r3, #3
 800620e:	d10c      	bne.n	800622a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006210:	4a17      	ldr	r2, [pc, #92]	@ (8006270 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	fbb2 f3f3 	udiv	r3, r2, r3
 8006218:	4a14      	ldr	r2, [pc, #80]	@ (800626c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800621a:	68d2      	ldr	r2, [r2, #12]
 800621c:	0a12      	lsrs	r2, r2, #8
 800621e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006222:	fb02 f303 	mul.w	r3, r2, r3
 8006226:	617b      	str	r3, [r7, #20]
    break;
 8006228:	e00c      	b.n	8006244 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800622a:	4a12      	ldr	r2, [pc, #72]	@ (8006274 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	4a0e      	ldr	r2, [pc, #56]	@ (800626c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006234:	68d2      	ldr	r2, [r2, #12]
 8006236:	0a12      	lsrs	r2, r2, #8
 8006238:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800623c:	fb02 f303 	mul.w	r3, r2, r3
 8006240:	617b      	str	r3, [r7, #20]
    break;
 8006242:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006244:	4b09      	ldr	r3, [pc, #36]	@ (800626c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	0e5b      	lsrs	r3, r3, #25
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	3301      	adds	r3, #1
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	fbb2 f3f3 	udiv	r3, r2, r3
 800625c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800625e:	687b      	ldr	r3, [r7, #4]
}
 8006260:	4618      	mov	r0, r3
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40021000 	.word	0x40021000
 8006270:	02dc6c00 	.word	0x02dc6c00
 8006274:	00f42400 	.word	0x00f42400

08006278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006280:	2300      	movs	r3, #0
 8006282:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006284:	2300      	movs	r3, #0
 8006286:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 8098 	beq.w	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006296:	2300      	movs	r3, #0
 8006298:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800629a:	4b43      	ldr	r3, [pc, #268]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800629c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10d      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a6:	4b40      	ldr	r3, [pc, #256]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062aa:	4a3f      	ldr	r2, [pc, #252]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80062b2:	4b3d      	ldr	r3, [pc, #244]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ba:	60bb      	str	r3, [r7, #8]
 80062bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062be:	2301      	movs	r3, #1
 80062c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062c2:	4b3a      	ldr	r3, [pc, #232]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a39      	ldr	r2, [pc, #228]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062ce:	f7fd f9e1 	bl	8003694 <HAL_GetTick>
 80062d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062d4:	e009      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d6:	f7fd f9dd 	bl	8003694 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d902      	bls.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	74fb      	strb	r3, [r7, #19]
        break;
 80062e8:	e005      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ea:	4b30      	ldr	r3, [pc, #192]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0ef      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80062f6:	7cfb      	ldrb	r3, [r7, #19]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d159      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062fc:	4b2a      	ldr	r3, [pc, #168]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006306:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01e      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	429a      	cmp	r2, r3
 8006316:	d019      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006318:	4b23      	ldr	r3, [pc, #140]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800631a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800631e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006322:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006324:	4b20      	ldr	r3, [pc, #128]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632a:	4a1f      	ldr	r2, [pc, #124]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800632c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006334:	4b1c      	ldr	r3, [pc, #112]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633a:	4a1b      	ldr	r2, [pc, #108]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800633c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006344:	4a18      	ldr	r2, [pc, #96]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006356:	f7fd f99d 	bl	8003694 <HAL_GetTick>
 800635a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800635c:	e00b      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635e:	f7fd f999 	bl	8003694 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800636c:	4293      	cmp	r3, r2
 800636e:	d902      	bls.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	74fb      	strb	r3, [r7, #19]
            break;
 8006374:	e006      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006376:	4b0c      	ldr	r3, [pc, #48]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0ec      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800638a:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800638c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006398:	4903      	ldr	r1, [pc, #12]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80063a0:	e008      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063a2:	7cfb      	ldrb	r3, [r7, #19]
 80063a4:	74bb      	strb	r3, [r7, #18]
 80063a6:	e005      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063a8:	40021000 	.word	0x40021000
 80063ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	7cfb      	ldrb	r3, [r7, #19]
 80063b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063b4:	7c7b      	ldrb	r3, [r7, #17]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d105      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ba:	4ba7      	ldr	r3, [pc, #668]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063be:	4aa6      	ldr	r2, [pc, #664]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063d2:	4ba1      	ldr	r3, [pc, #644]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d8:	f023 0203 	bic.w	r2, r3, #3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	499d      	ldr	r1, [pc, #628]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063f4:	4b98      	ldr	r3, [pc, #608]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fa:	f023 020c 	bic.w	r2, r3, #12
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	4995      	ldr	r1, [pc, #596]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006416:	4b90      	ldr	r3, [pc, #576]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	498c      	ldr	r1, [pc, #560]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006438:	4b87      	ldr	r3, [pc, #540]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	4984      	ldr	r1, [pc, #528]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800645a:	4b7f      	ldr	r3, [pc, #508]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	497b      	ldr	r1, [pc, #492]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800647c:	4b76      	ldr	r3, [pc, #472]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006482:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	4973      	ldr	r1, [pc, #460]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800649e:	4b6e      	ldr	r3, [pc, #440]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	496a      	ldr	r1, [pc, #424]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064c0:	4b65      	ldr	r3, [pc, #404]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	4962      	ldr	r1, [pc, #392]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064e2:	4b5d      	ldr	r3, [pc, #372]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	4959      	ldr	r1, [pc, #356]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006504:	4b54      	ldr	r3, [pc, #336]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800650a:	f023 0203 	bic.w	r2, r3, #3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006512:	4951      	ldr	r1, [pc, #324]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006526:	4b4c      	ldr	r3, [pc, #304]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006534:	4948      	ldr	r1, [pc, #288]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006544:	2b00      	cmp	r3, #0
 8006546:	d015      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006548:	4b43      	ldr	r3, [pc, #268]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006556:	4940      	ldr	r1, [pc, #256]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006566:	d105      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006568:	4b3b      	ldr	r3, [pc, #236]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	4a3a      	ldr	r2, [pc, #232]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006572:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800657c:	2b00      	cmp	r3, #0
 800657e:	d015      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006580:	4b35      	ldr	r3, [pc, #212]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006586:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658e:	4932      	ldr	r1, [pc, #200]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800659e:	d105      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065b8:	4b27      	ldr	r3, [pc, #156]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c6:	4924      	ldr	r1, [pc, #144]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065d6:	d105      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065f0:	4b19      	ldr	r3, [pc, #100]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fe:	4916      	ldr	r1, [pc, #88]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800660e:	d105      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006610:	4b11      	ldr	r3, [pc, #68]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4a10      	ldr	r2, [pc, #64]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800661a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d019      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006628:	4b0b      	ldr	r3, [pc, #44]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006636:	4908      	ldr	r1, [pc, #32]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006646:	d109      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006648:	4b03      	ldr	r3, [pc, #12]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	4a02      	ldr	r2, [pc, #8]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006652:	60d3      	str	r3, [r2, #12]
 8006654:	e002      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006656:	bf00      	nop
 8006658:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d015      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006668:	4b29      	ldr	r3, [pc, #164]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800666a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006676:	4926      	ldr	r1, [pc, #152]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006686:	d105      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006688:	4b21      	ldr	r3, [pc, #132]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	4a20      	ldr	r2, [pc, #128]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800668e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006692:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d015      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80066a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ae:	4918      	ldr	r1, [pc, #96]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066be:	d105      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066c0:	4b13      	ldr	r3, [pc, #76]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	4a12      	ldr	r2, [pc, #72]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d015      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80066d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e6:	490a      	ldr	r1, [pc, #40]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066f6:	d105      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066f8:	4b05      	ldr	r3, [pc, #20]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	4a04      	ldr	r2, [pc, #16]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006702:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006704:	7cbb      	ldrb	r3, [r7, #18]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	40021000 	.word	0x40021000

08006714 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e027      	b.n	8006776 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	7a5b      	ldrb	r3, [r3, #9]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fb fc2e 	bl	8001f98 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f023 0108 	bic.w	r1, r3, #8
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0204 	orr.w	r2, r2, #4
 8006766:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	7a1b      	ldrb	r3, [r3, #8]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006794:	2302      	movs	r3, #2
 8006796:	e044      	b.n	8006822 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	7a5b      	ldrb	r3, [r3, #9]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d133      	bne.n	8006810 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067ae:	f7fc ff71 	bl	8003694 <HAL_GetTick>
 80067b2:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80067b4:	e018      	b.n	80067e8 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80067b6:	f7fc ff6d 	bl	8003694 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d911      	bls.n	80067e8 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d00a      	beq.n	80067e8 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e01c      	b.n	8006822 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d1df      	bne.n	80067b6 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	725a      	strb	r2, [r3, #9]
 800680e:	e004      	b.n	800681a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2204      	movs	r2, #4
 8006814:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	721a      	strb	r2, [r3, #8]

  return status;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e049      	b.n	80068d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7fb fbd5 	bl	8002000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3304      	adds	r3, #4
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f000 fc43 	bl	80070f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d001      	beq.n	80068f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e04c      	b.n	800698a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a26      	ldr	r2, [pc, #152]	@ (8006998 <HAL_TIM_Base_Start+0xc0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d022      	beq.n	8006948 <HAL_TIM_Base_Start+0x70>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800690a:	d01d      	beq.n	8006948 <HAL_TIM_Base_Start+0x70>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a22      	ldr	r2, [pc, #136]	@ (800699c <HAL_TIM_Base_Start+0xc4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d018      	beq.n	8006948 <HAL_TIM_Base_Start+0x70>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a21      	ldr	r2, [pc, #132]	@ (80069a0 <HAL_TIM_Base_Start+0xc8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <HAL_TIM_Base_Start+0x70>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1f      	ldr	r2, [pc, #124]	@ (80069a4 <HAL_TIM_Base_Start+0xcc>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00e      	beq.n	8006948 <HAL_TIM_Base_Start+0x70>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1e      	ldr	r2, [pc, #120]	@ (80069a8 <HAL_TIM_Base_Start+0xd0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_TIM_Base_Start+0x70>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1c      	ldr	r2, [pc, #112]	@ (80069ac <HAL_TIM_Base_Start+0xd4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <HAL_TIM_Base_Start+0x70>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1b      	ldr	r2, [pc, #108]	@ (80069b0 <HAL_TIM_Base_Start+0xd8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d115      	bne.n	8006974 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	4b19      	ldr	r3, [pc, #100]	@ (80069b4 <HAL_TIM_Base_Start+0xdc>)
 8006950:	4013      	ands	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b06      	cmp	r3, #6
 8006958:	d015      	beq.n	8006986 <HAL_TIM_Base_Start+0xae>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006960:	d011      	beq.n	8006986 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006972:	e008      	b.n	8006986 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	e000      	b.n	8006988 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006986:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40013400 	.word	0x40013400
 80069ac:	40014000 	.word	0x40014000
 80069b0:	40015000 	.word	0x40015000
 80069b4:	00010007 	.word	0x00010007

080069b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e049      	b.n	8006a5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d106      	bne.n	80069e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f841 	bl	8006a66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4619      	mov	r1, r3
 80069f6:	4610      	mov	r0, r2
 80069f8:	f000 fb7c 	bl	80070f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d109      	bne.n	8006aa0 <HAL_TIM_PWM_Start+0x24>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	bf14      	ite	ne
 8006a98:	2301      	movne	r3, #1
 8006a9a:	2300      	moveq	r3, #0
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	e03c      	b.n	8006b1a <HAL_TIM_PWM_Start+0x9e>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d109      	bne.n	8006aba <HAL_TIM_PWM_Start+0x3e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	bf14      	ite	ne
 8006ab2:	2301      	movne	r3, #1
 8006ab4:	2300      	moveq	r3, #0
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	e02f      	b.n	8006b1a <HAL_TIM_PWM_Start+0x9e>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d109      	bne.n	8006ad4 <HAL_TIM_PWM_Start+0x58>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	bf14      	ite	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2300      	moveq	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	e022      	b.n	8006b1a <HAL_TIM_PWM_Start+0x9e>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b0c      	cmp	r3, #12
 8006ad8:	d109      	bne.n	8006aee <HAL_TIM_PWM_Start+0x72>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	bf14      	ite	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	2300      	moveq	r3, #0
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	e015      	b.n	8006b1a <HAL_TIM_PWM_Start+0x9e>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b10      	cmp	r3, #16
 8006af2:	d109      	bne.n	8006b08 <HAL_TIM_PWM_Start+0x8c>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	bf14      	ite	ne
 8006b00:	2301      	movne	r3, #1
 8006b02:	2300      	moveq	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	e008      	b.n	8006b1a <HAL_TIM_PWM_Start+0x9e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e0a6      	b.n	8006c70 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <HAL_TIM_PWM_Start+0xb6>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b30:	e023      	b.n	8006b7a <HAL_TIM_PWM_Start+0xfe>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d104      	bne.n	8006b42 <HAL_TIM_PWM_Start+0xc6>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b40:	e01b      	b.n	8006b7a <HAL_TIM_PWM_Start+0xfe>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d104      	bne.n	8006b52 <HAL_TIM_PWM_Start+0xd6>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b50:	e013      	b.n	8006b7a <HAL_TIM_PWM_Start+0xfe>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b0c      	cmp	r3, #12
 8006b56:	d104      	bne.n	8006b62 <HAL_TIM_PWM_Start+0xe6>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b60:	e00b      	b.n	8006b7a <HAL_TIM_PWM_Start+0xfe>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b10      	cmp	r3, #16
 8006b66:	d104      	bne.n	8006b72 <HAL_TIM_PWM_Start+0xf6>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b70:	e003      	b.n	8006b7a <HAL_TIM_PWM_Start+0xfe>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 ff30 	bl	80079e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8006c78 <HAL_TIM_PWM_Start+0x1fc>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d018      	beq.n	8006bc4 <HAL_TIM_PWM_Start+0x148>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a39      	ldr	r2, [pc, #228]	@ (8006c7c <HAL_TIM_PWM_Start+0x200>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d013      	beq.n	8006bc4 <HAL_TIM_PWM_Start+0x148>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a37      	ldr	r2, [pc, #220]	@ (8006c80 <HAL_TIM_PWM_Start+0x204>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00e      	beq.n	8006bc4 <HAL_TIM_PWM_Start+0x148>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a36      	ldr	r2, [pc, #216]	@ (8006c84 <HAL_TIM_PWM_Start+0x208>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d009      	beq.n	8006bc4 <HAL_TIM_PWM_Start+0x148>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a34      	ldr	r2, [pc, #208]	@ (8006c88 <HAL_TIM_PWM_Start+0x20c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_TIM_PWM_Start+0x148>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a33      	ldr	r2, [pc, #204]	@ (8006c8c <HAL_TIM_PWM_Start+0x210>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIM_PWM_Start+0x14c>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <HAL_TIM_PWM_Start+0x14e>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d007      	beq.n	8006bde <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a25      	ldr	r2, [pc, #148]	@ (8006c78 <HAL_TIM_PWM_Start+0x1fc>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d022      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x1b2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf0:	d01d      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x1b2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a26      	ldr	r2, [pc, #152]	@ (8006c90 <HAL_TIM_PWM_Start+0x214>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d018      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x1b2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a24      	ldr	r2, [pc, #144]	@ (8006c94 <HAL_TIM_PWM_Start+0x218>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x1b2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a23      	ldr	r2, [pc, #140]	@ (8006c98 <HAL_TIM_PWM_Start+0x21c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00e      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x1b2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a19      	ldr	r2, [pc, #100]	@ (8006c7c <HAL_TIM_PWM_Start+0x200>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d009      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x1b2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a18      	ldr	r2, [pc, #96]	@ (8006c80 <HAL_TIM_PWM_Start+0x204>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d004      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x1b2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a18      	ldr	r2, [pc, #96]	@ (8006c8c <HAL_TIM_PWM_Start+0x210>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d115      	bne.n	8006c5a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	4b19      	ldr	r3, [pc, #100]	@ (8006c9c <HAL_TIM_PWM_Start+0x220>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b06      	cmp	r3, #6
 8006c3e:	d015      	beq.n	8006c6c <HAL_TIM_PWM_Start+0x1f0>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c46:	d011      	beq.n	8006c6c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c58:	e008      	b.n	8006c6c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0201 	orr.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	e000      	b.n	8006c6e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	40012c00 	.word	0x40012c00
 8006c7c:	40013400 	.word	0x40013400
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800
 8006c8c:	40015000 	.word	0x40015000
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40000800 	.word	0x40000800
 8006c98:	40000c00 	.word	0x40000c00
 8006c9c:	00010007 	.word	0x00010007

08006ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e0ff      	b.n	8006ebe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b14      	cmp	r3, #20
 8006cca:	f200 80f0 	bhi.w	8006eae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006cce:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006d29 	.word	0x08006d29
 8006cd8:	08006eaf 	.word	0x08006eaf
 8006cdc:	08006eaf 	.word	0x08006eaf
 8006ce0:	08006eaf 	.word	0x08006eaf
 8006ce4:	08006d69 	.word	0x08006d69
 8006ce8:	08006eaf 	.word	0x08006eaf
 8006cec:	08006eaf 	.word	0x08006eaf
 8006cf0:	08006eaf 	.word	0x08006eaf
 8006cf4:	08006dab 	.word	0x08006dab
 8006cf8:	08006eaf 	.word	0x08006eaf
 8006cfc:	08006eaf 	.word	0x08006eaf
 8006d00:	08006eaf 	.word	0x08006eaf
 8006d04:	08006deb 	.word	0x08006deb
 8006d08:	08006eaf 	.word	0x08006eaf
 8006d0c:	08006eaf 	.word	0x08006eaf
 8006d10:	08006eaf 	.word	0x08006eaf
 8006d14:	08006e2d 	.word	0x08006e2d
 8006d18:	08006eaf 	.word	0x08006eaf
 8006d1c:	08006eaf 	.word	0x08006eaf
 8006d20:	08006eaf 	.word	0x08006eaf
 8006d24:	08006e6d 	.word	0x08006e6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fa94 	bl	800725c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0208 	orr.w	r2, r2, #8
 8006d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0204 	bic.w	r2, r2, #4
 8006d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6999      	ldr	r1, [r3, #24]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	691a      	ldr	r2, [r3, #16]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	619a      	str	r2, [r3, #24]
      break;
 8006d66:	e0a5      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68b9      	ldr	r1, [r7, #8]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 fb0e 	bl	8007390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699a      	ldr	r2, [r3, #24]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6999      	ldr	r1, [r3, #24]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	021a      	lsls	r2, r3, #8
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	619a      	str	r2, [r3, #24]
      break;
 8006da8:	e084      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fb81 	bl	80074b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0208 	orr.w	r2, r2, #8
 8006dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0204 	bic.w	r2, r2, #4
 8006dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69d9      	ldr	r1, [r3, #28]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	61da      	str	r2, [r3, #28]
      break;
 8006de8:	e064      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fbf3 	bl	80075dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69da      	ldr	r2, [r3, #28]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69da      	ldr	r2, [r3, #28]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69d9      	ldr	r1, [r3, #28]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	021a      	lsls	r2, r3, #8
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	61da      	str	r2, [r3, #28]
      break;
 8006e2a:	e043      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fc66 	bl	8007704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0208 	orr.w	r2, r2, #8
 8006e46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0204 	bic.w	r2, r2, #4
 8006e56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006e6a:	e023      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68b9      	ldr	r1, [r7, #8]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fcb0 	bl	80077d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	021a      	lsls	r2, r3, #8
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006eac:	e002      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop

08006ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e0f6      	b.n	80070d2 <HAL_TIM_ConfigClockSource+0x20a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006f02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a6f      	ldr	r2, [pc, #444]	@ (80070dc <HAL_TIM_ConfigClockSource+0x214>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	f000 80c1 	beq.w	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f24:	4a6d      	ldr	r2, [pc, #436]	@ (80070dc <HAL_TIM_ConfigClockSource+0x214>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	f200 80c6 	bhi.w	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f2c:	4a6c      	ldr	r2, [pc, #432]	@ (80070e0 <HAL_TIM_ConfigClockSource+0x218>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	f000 80b9 	beq.w	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f34:	4a6a      	ldr	r2, [pc, #424]	@ (80070e0 <HAL_TIM_ConfigClockSource+0x218>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	f200 80be 	bhi.w	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f3c:	4a69      	ldr	r2, [pc, #420]	@ (80070e4 <HAL_TIM_ConfigClockSource+0x21c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	f000 80b1 	beq.w	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f44:	4a67      	ldr	r2, [pc, #412]	@ (80070e4 <HAL_TIM_ConfigClockSource+0x21c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	f200 80b6 	bhi.w	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f4c:	4a66      	ldr	r2, [pc, #408]	@ (80070e8 <HAL_TIM_ConfigClockSource+0x220>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	f000 80a9 	beq.w	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f54:	4a64      	ldr	r2, [pc, #400]	@ (80070e8 <HAL_TIM_ConfigClockSource+0x220>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	f200 80ae 	bhi.w	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f5c:	4a63      	ldr	r2, [pc, #396]	@ (80070ec <HAL_TIM_ConfigClockSource+0x224>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	f000 80a1 	beq.w	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f64:	4a61      	ldr	r2, [pc, #388]	@ (80070ec <HAL_TIM_ConfigClockSource+0x224>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	f200 80a6 	bhi.w	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f6c:	4a60      	ldr	r2, [pc, #384]	@ (80070f0 <HAL_TIM_ConfigClockSource+0x228>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	f000 8099 	beq.w	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f74:	4a5e      	ldr	r2, [pc, #376]	@ (80070f0 <HAL_TIM_ConfigClockSource+0x228>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	f200 809e 	bhi.w	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f80:	f000 8091 	beq.w	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f88:	f200 8096 	bhi.w	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f90:	f000 8089 	beq.w	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006f94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f98:	f200 808e 	bhi.w	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa0:	d03e      	beq.n	8007020 <HAL_TIM_ConfigClockSource+0x158>
 8006fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa6:	f200 8087 	bhi.w	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fae:	f000 8086 	beq.w	80070be <HAL_TIM_ConfigClockSource+0x1f6>
 8006fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb6:	d87f      	bhi.n	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fb8:	2b70      	cmp	r3, #112	@ 0x70
 8006fba:	d01a      	beq.n	8006ff2 <HAL_TIM_ConfigClockSource+0x12a>
 8006fbc:	2b70      	cmp	r3, #112	@ 0x70
 8006fbe:	d87b      	bhi.n	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fc0:	2b60      	cmp	r3, #96	@ 0x60
 8006fc2:	d050      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x19e>
 8006fc4:	2b60      	cmp	r3, #96	@ 0x60
 8006fc6:	d877      	bhi.n	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fc8:	2b50      	cmp	r3, #80	@ 0x50
 8006fca:	d03c      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0x17e>
 8006fcc:	2b50      	cmp	r3, #80	@ 0x50
 8006fce:	d873      	bhi.n	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fd0:	2b40      	cmp	r3, #64	@ 0x40
 8006fd2:	d058      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x1be>
 8006fd4:	2b40      	cmp	r3, #64	@ 0x40
 8006fd6:	d86f      	bhi.n	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fd8:	2b30      	cmp	r3, #48	@ 0x30
 8006fda:	d064      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006fdc:	2b30      	cmp	r3, #48	@ 0x30
 8006fde:	d86b      	bhi.n	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d060      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d867      	bhi.n	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d05c      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006fec:	2b10      	cmp	r3, #16
 8006fee:	d05a      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x1de>
 8006ff0:	e062      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007002:	f000 fcd1 	bl	80079a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	609a      	str	r2, [r3, #8]
      break;
 800701e:	e04f      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007030:	f000 fcba 	bl	80079a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007042:	609a      	str	r2, [r3, #8]
      break;
 8007044:	e03c      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007052:	461a      	mov	r2, r3
 8007054:	f000 fc2c 	bl	80078b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2150      	movs	r1, #80	@ 0x50
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fc85 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 8007064:	e02c      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007072:	461a      	mov	r2, r3
 8007074:	f000 fc4b 	bl	800790e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2160      	movs	r1, #96	@ 0x60
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fc75 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 8007084:	e01c      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007092:	461a      	mov	r2, r3
 8007094:	f000 fc0c 	bl	80078b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2140      	movs	r1, #64	@ 0x40
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fc65 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 80070a4:	e00c      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f000 fc5c 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 80070b6:	e003      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
      break;
 80070bc:	e000      	b.n	80070c0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80070be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	00100070 	.word	0x00100070
 80070e0:	00100060 	.word	0x00100060
 80070e4:	00100050 	.word	0x00100050
 80070e8:	00100040 	.word	0x00100040
 80070ec:	00100030 	.word	0x00100030
 80070f0:	00100020 	.word	0x00100020

080070f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a4c      	ldr	r2, [pc, #304]	@ (8007238 <TIM_Base_SetConfig+0x144>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d017      	beq.n	800713c <TIM_Base_SetConfig+0x48>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007112:	d013      	beq.n	800713c <TIM_Base_SetConfig+0x48>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a49      	ldr	r2, [pc, #292]	@ (800723c <TIM_Base_SetConfig+0x148>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00f      	beq.n	800713c <TIM_Base_SetConfig+0x48>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a48      	ldr	r2, [pc, #288]	@ (8007240 <TIM_Base_SetConfig+0x14c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00b      	beq.n	800713c <TIM_Base_SetConfig+0x48>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a47      	ldr	r2, [pc, #284]	@ (8007244 <TIM_Base_SetConfig+0x150>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_Base_SetConfig+0x48>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a46      	ldr	r2, [pc, #280]	@ (8007248 <TIM_Base_SetConfig+0x154>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_Base_SetConfig+0x48>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a45      	ldr	r2, [pc, #276]	@ (800724c <TIM_Base_SetConfig+0x158>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d108      	bne.n	800714e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a39      	ldr	r2, [pc, #228]	@ (8007238 <TIM_Base_SetConfig+0x144>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d023      	beq.n	800719e <TIM_Base_SetConfig+0xaa>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800715c:	d01f      	beq.n	800719e <TIM_Base_SetConfig+0xaa>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a36      	ldr	r2, [pc, #216]	@ (800723c <TIM_Base_SetConfig+0x148>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d01b      	beq.n	800719e <TIM_Base_SetConfig+0xaa>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a35      	ldr	r2, [pc, #212]	@ (8007240 <TIM_Base_SetConfig+0x14c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d017      	beq.n	800719e <TIM_Base_SetConfig+0xaa>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a34      	ldr	r2, [pc, #208]	@ (8007244 <TIM_Base_SetConfig+0x150>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d013      	beq.n	800719e <TIM_Base_SetConfig+0xaa>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a33      	ldr	r2, [pc, #204]	@ (8007248 <TIM_Base_SetConfig+0x154>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00f      	beq.n	800719e <TIM_Base_SetConfig+0xaa>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a33      	ldr	r2, [pc, #204]	@ (8007250 <TIM_Base_SetConfig+0x15c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00b      	beq.n	800719e <TIM_Base_SetConfig+0xaa>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a32      	ldr	r2, [pc, #200]	@ (8007254 <TIM_Base_SetConfig+0x160>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d007      	beq.n	800719e <TIM_Base_SetConfig+0xaa>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a31      	ldr	r2, [pc, #196]	@ (8007258 <TIM_Base_SetConfig+0x164>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d003      	beq.n	800719e <TIM_Base_SetConfig+0xaa>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2c      	ldr	r2, [pc, #176]	@ (800724c <TIM_Base_SetConfig+0x158>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d108      	bne.n	80071b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a18      	ldr	r2, [pc, #96]	@ (8007238 <TIM_Base_SetConfig+0x144>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <TIM_Base_SetConfig+0x110>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a1a      	ldr	r2, [pc, #104]	@ (8007248 <TIM_Base_SetConfig+0x154>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00f      	beq.n	8007204 <TIM_Base_SetConfig+0x110>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007250 <TIM_Base_SetConfig+0x15c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00b      	beq.n	8007204 <TIM_Base_SetConfig+0x110>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a19      	ldr	r2, [pc, #100]	@ (8007254 <TIM_Base_SetConfig+0x160>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d007      	beq.n	8007204 <TIM_Base_SetConfig+0x110>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a18      	ldr	r2, [pc, #96]	@ (8007258 <TIM_Base_SetConfig+0x164>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <TIM_Base_SetConfig+0x110>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a13      	ldr	r2, [pc, #76]	@ (800724c <TIM_Base_SetConfig+0x158>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d103      	bne.n	800720c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b01      	cmp	r3, #1
 800721c:	d105      	bne.n	800722a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f023 0201 	bic.w	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	611a      	str	r2, [r3, #16]
  }
}
 800722a:	bf00      	nop
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40012c00 	.word	0x40012c00
 800723c:	40000400 	.word	0x40000400
 8007240:	40000800 	.word	0x40000800
 8007244:	40000c00 	.word	0x40000c00
 8007248:	40013400 	.word	0x40013400
 800724c:	40015000 	.word	0x40015000
 8007250:	40014000 	.word	0x40014000
 8007254:	40014400 	.word	0x40014400
 8007258:	40014800 	.word	0x40014800

0800725c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f023 0201 	bic.w	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800728a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0303 	bic.w	r3, r3, #3
 8007296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f023 0302 	bic.w	r3, r3, #2
 80072a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a30      	ldr	r2, [pc, #192]	@ (8007378 <TIM_OC1_SetConfig+0x11c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d013      	beq.n	80072e4 <TIM_OC1_SetConfig+0x88>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a2f      	ldr	r2, [pc, #188]	@ (800737c <TIM_OC1_SetConfig+0x120>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00f      	beq.n	80072e4 <TIM_OC1_SetConfig+0x88>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a2e      	ldr	r2, [pc, #184]	@ (8007380 <TIM_OC1_SetConfig+0x124>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00b      	beq.n	80072e4 <TIM_OC1_SetConfig+0x88>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007384 <TIM_OC1_SetConfig+0x128>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d007      	beq.n	80072e4 <TIM_OC1_SetConfig+0x88>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007388 <TIM_OC1_SetConfig+0x12c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d003      	beq.n	80072e4 <TIM_OC1_SetConfig+0x88>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a2b      	ldr	r2, [pc, #172]	@ (800738c <TIM_OC1_SetConfig+0x130>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d10c      	bne.n	80072fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f023 0308 	bic.w	r3, r3, #8
 80072ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f023 0304 	bic.w	r3, r3, #4
 80072fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a1d      	ldr	r2, [pc, #116]	@ (8007378 <TIM_OC1_SetConfig+0x11c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d013      	beq.n	800732e <TIM_OC1_SetConfig+0xd2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a1c      	ldr	r2, [pc, #112]	@ (800737c <TIM_OC1_SetConfig+0x120>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d00f      	beq.n	800732e <TIM_OC1_SetConfig+0xd2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a1b      	ldr	r2, [pc, #108]	@ (8007380 <TIM_OC1_SetConfig+0x124>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00b      	beq.n	800732e <TIM_OC1_SetConfig+0xd2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a1a      	ldr	r2, [pc, #104]	@ (8007384 <TIM_OC1_SetConfig+0x128>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d007      	beq.n	800732e <TIM_OC1_SetConfig+0xd2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a19      	ldr	r2, [pc, #100]	@ (8007388 <TIM_OC1_SetConfig+0x12c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d003      	beq.n	800732e <TIM_OC1_SetConfig+0xd2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a18      	ldr	r2, [pc, #96]	@ (800738c <TIM_OC1_SetConfig+0x130>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d111      	bne.n	8007352 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800733c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	621a      	str	r2, [r3, #32]
}
 800736c:	bf00      	nop
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40013400 	.word	0x40013400
 8007380:	40014000 	.word	0x40014000
 8007384:	40014400 	.word	0x40014400
 8007388:	40014800 	.word	0x40014800
 800738c:	40015000 	.word	0x40015000

08007390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	f023 0210 	bic.w	r2, r3, #16
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	021b      	lsls	r3, r3, #8
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f023 0320 	bic.w	r3, r3, #32
 80073de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a2c      	ldr	r2, [pc, #176]	@ (80074a0 <TIM_OC2_SetConfig+0x110>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d007      	beq.n	8007404 <TIM_OC2_SetConfig+0x74>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a2b      	ldr	r2, [pc, #172]	@ (80074a4 <TIM_OC2_SetConfig+0x114>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d003      	beq.n	8007404 <TIM_OC2_SetConfig+0x74>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a2a      	ldr	r2, [pc, #168]	@ (80074a8 <TIM_OC2_SetConfig+0x118>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d10d      	bne.n	8007420 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800740a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800741e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a1f      	ldr	r2, [pc, #124]	@ (80074a0 <TIM_OC2_SetConfig+0x110>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d013      	beq.n	8007450 <TIM_OC2_SetConfig+0xc0>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1e      	ldr	r2, [pc, #120]	@ (80074a4 <TIM_OC2_SetConfig+0x114>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d00f      	beq.n	8007450 <TIM_OC2_SetConfig+0xc0>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a1e      	ldr	r2, [pc, #120]	@ (80074ac <TIM_OC2_SetConfig+0x11c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00b      	beq.n	8007450 <TIM_OC2_SetConfig+0xc0>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a1d      	ldr	r2, [pc, #116]	@ (80074b0 <TIM_OC2_SetConfig+0x120>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d007      	beq.n	8007450 <TIM_OC2_SetConfig+0xc0>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a1c      	ldr	r2, [pc, #112]	@ (80074b4 <TIM_OC2_SetConfig+0x124>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d003      	beq.n	8007450 <TIM_OC2_SetConfig+0xc0>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a17      	ldr	r2, [pc, #92]	@ (80074a8 <TIM_OC2_SetConfig+0x118>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d113      	bne.n	8007478 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800745e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	621a      	str	r2, [r3, #32]
}
 8007492:	bf00      	nop
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40012c00 	.word	0x40012c00
 80074a4:	40013400 	.word	0x40013400
 80074a8:	40015000 	.word	0x40015000
 80074ac:	40014000 	.word	0x40014000
 80074b0:	40014400 	.word	0x40014400
 80074b4:	40014800 	.word	0x40014800

080074b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a2b      	ldr	r2, [pc, #172]	@ (80075c4 <TIM_OC3_SetConfig+0x10c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d007      	beq.n	800752a <TIM_OC3_SetConfig+0x72>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2a      	ldr	r2, [pc, #168]	@ (80075c8 <TIM_OC3_SetConfig+0x110>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d003      	beq.n	800752a <TIM_OC3_SetConfig+0x72>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a29      	ldr	r2, [pc, #164]	@ (80075cc <TIM_OC3_SetConfig+0x114>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d10d      	bne.n	8007546 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	021b      	lsls	r3, r3, #8
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	4313      	orrs	r3, r2
 800753c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a1e      	ldr	r2, [pc, #120]	@ (80075c4 <TIM_OC3_SetConfig+0x10c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d013      	beq.n	8007576 <TIM_OC3_SetConfig+0xbe>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a1d      	ldr	r2, [pc, #116]	@ (80075c8 <TIM_OC3_SetConfig+0x110>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00f      	beq.n	8007576 <TIM_OC3_SetConfig+0xbe>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a1d      	ldr	r2, [pc, #116]	@ (80075d0 <TIM_OC3_SetConfig+0x118>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00b      	beq.n	8007576 <TIM_OC3_SetConfig+0xbe>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a1c      	ldr	r2, [pc, #112]	@ (80075d4 <TIM_OC3_SetConfig+0x11c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d007      	beq.n	8007576 <TIM_OC3_SetConfig+0xbe>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1b      	ldr	r2, [pc, #108]	@ (80075d8 <TIM_OC3_SetConfig+0x120>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_OC3_SetConfig+0xbe>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a16      	ldr	r2, [pc, #88]	@ (80075cc <TIM_OC3_SetConfig+0x114>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d113      	bne.n	800759e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800757c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	4313      	orrs	r3, r2
 800759c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	621a      	str	r2, [r3, #32]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40013400 	.word	0x40013400
 80075cc:	40015000 	.word	0x40015000
 80075d0:	40014000 	.word	0x40014000
 80075d4:	40014400 	.word	0x40014400
 80075d8:	40014800 	.word	0x40014800

080075dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800760a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800760e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	021b      	lsls	r3, r3, #8
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800762a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	031b      	lsls	r3, r3, #12
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4313      	orrs	r3, r2
 8007636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a2c      	ldr	r2, [pc, #176]	@ (80076ec <TIM_OC4_SetConfig+0x110>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d007      	beq.n	8007650 <TIM_OC4_SetConfig+0x74>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a2b      	ldr	r2, [pc, #172]	@ (80076f0 <TIM_OC4_SetConfig+0x114>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_OC4_SetConfig+0x74>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a2a      	ldr	r2, [pc, #168]	@ (80076f4 <TIM_OC4_SetConfig+0x118>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d10d      	bne.n	800766c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	031b      	lsls	r3, r3, #12
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800766a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a1f      	ldr	r2, [pc, #124]	@ (80076ec <TIM_OC4_SetConfig+0x110>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d013      	beq.n	800769c <TIM_OC4_SetConfig+0xc0>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a1e      	ldr	r2, [pc, #120]	@ (80076f0 <TIM_OC4_SetConfig+0x114>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00f      	beq.n	800769c <TIM_OC4_SetConfig+0xc0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a1e      	ldr	r2, [pc, #120]	@ (80076f8 <TIM_OC4_SetConfig+0x11c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00b      	beq.n	800769c <TIM_OC4_SetConfig+0xc0>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a1d      	ldr	r2, [pc, #116]	@ (80076fc <TIM_OC4_SetConfig+0x120>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d007      	beq.n	800769c <TIM_OC4_SetConfig+0xc0>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a1c      	ldr	r2, [pc, #112]	@ (8007700 <TIM_OC4_SetConfig+0x124>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_OC4_SetConfig+0xc0>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a17      	ldr	r2, [pc, #92]	@ (80076f4 <TIM_OC4_SetConfig+0x118>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d113      	bne.n	80076c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	019b      	lsls	r3, r3, #6
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	019b      	lsls	r3, r3, #6
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	621a      	str	r2, [r3, #32]
}
 80076de:	bf00      	nop
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40012c00 	.word	0x40012c00
 80076f0:	40013400 	.word	0x40013400
 80076f4:	40015000 	.word	0x40015000
 80076f8:	40014000 	.word	0x40014000
 80076fc:	40014400 	.word	0x40014400
 8007700:	40014800 	.word	0x40014800

08007704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	041b      	lsls	r3, r3, #16
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a19      	ldr	r2, [pc, #100]	@ (80077c0 <TIM_OC5_SetConfig+0xbc>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d013      	beq.n	8007786 <TIM_OC5_SetConfig+0x82>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a18      	ldr	r2, [pc, #96]	@ (80077c4 <TIM_OC5_SetConfig+0xc0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00f      	beq.n	8007786 <TIM_OC5_SetConfig+0x82>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a17      	ldr	r2, [pc, #92]	@ (80077c8 <TIM_OC5_SetConfig+0xc4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00b      	beq.n	8007786 <TIM_OC5_SetConfig+0x82>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a16      	ldr	r2, [pc, #88]	@ (80077cc <TIM_OC5_SetConfig+0xc8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d007      	beq.n	8007786 <TIM_OC5_SetConfig+0x82>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a15      	ldr	r2, [pc, #84]	@ (80077d0 <TIM_OC5_SetConfig+0xcc>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d003      	beq.n	8007786 <TIM_OC5_SetConfig+0x82>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a14      	ldr	r2, [pc, #80]	@ (80077d4 <TIM_OC5_SetConfig+0xd0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d109      	bne.n	800779a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800778c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	621a      	str	r2, [r3, #32]
}
 80077b4:	bf00      	nop
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	40012c00 	.word	0x40012c00
 80077c4:	40013400 	.word	0x40013400
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40014400 	.word	0x40014400
 80077d0:	40014800 	.word	0x40014800
 80077d4:	40015000 	.word	0x40015000

080077d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800780a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4313      	orrs	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800781e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	051b      	lsls	r3, r3, #20
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a1a      	ldr	r2, [pc, #104]	@ (8007898 <TIM_OC6_SetConfig+0xc0>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d013      	beq.n	800785c <TIM_OC6_SetConfig+0x84>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a19      	ldr	r2, [pc, #100]	@ (800789c <TIM_OC6_SetConfig+0xc4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d00f      	beq.n	800785c <TIM_OC6_SetConfig+0x84>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a18      	ldr	r2, [pc, #96]	@ (80078a0 <TIM_OC6_SetConfig+0xc8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00b      	beq.n	800785c <TIM_OC6_SetConfig+0x84>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a17      	ldr	r2, [pc, #92]	@ (80078a4 <TIM_OC6_SetConfig+0xcc>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d007      	beq.n	800785c <TIM_OC6_SetConfig+0x84>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a16      	ldr	r2, [pc, #88]	@ (80078a8 <TIM_OC6_SetConfig+0xd0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d003      	beq.n	800785c <TIM_OC6_SetConfig+0x84>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a15      	ldr	r2, [pc, #84]	@ (80078ac <TIM_OC6_SetConfig+0xd4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d109      	bne.n	8007870 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007862:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	029b      	lsls	r3, r3, #10
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	4313      	orrs	r3, r2
 800786e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	621a      	str	r2, [r3, #32]
}
 800788a:	bf00      	nop
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	40012c00 	.word	0x40012c00
 800789c:	40013400 	.word	0x40013400
 80078a0:	40014000 	.word	0x40014000
 80078a4:	40014400 	.word	0x40014400
 80078a8:	40014800 	.word	0x40014800
 80078ac:	40015000 	.word	0x40015000

080078b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f023 0201 	bic.w	r2, r3, #1
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f023 030a 	bic.w	r3, r3, #10
 80078ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	621a      	str	r2, [r3, #32]
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800790e:	b480      	push	{r7}
 8007910:	b087      	sub	sp, #28
 8007912:	af00      	add	r7, sp, #0
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	f023 0210 	bic.w	r2, r3, #16
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	031b      	lsls	r3, r3, #12
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800794a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	f043 0307 	orr.w	r3, r3, #7
 8007994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	609a      	str	r2, [r3, #8]
}
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	021a      	lsls	r2, r3, #8
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	609a      	str	r2, [r3, #8]
}
 80079dc:	bf00      	nop
 80079de:	371c      	adds	r7, #28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	2201      	movs	r2, #1
 80079fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a1a      	ldr	r2, [r3, #32]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	401a      	ands	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a1a      	ldr	r2, [r3, #32]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f003 031f 	and.w	r3, r3, #31
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a20:	431a      	orrs	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	621a      	str	r2, [r3, #32]
}
 8007a26:	bf00      	nop
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e074      	b.n	8007b36 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a34      	ldr	r2, [pc, #208]	@ (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d009      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a33      	ldr	r2, [pc, #204]	@ (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d004      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a31      	ldr	r2, [pc, #196]	@ (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d108      	bne.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007a90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a21      	ldr	r2, [pc, #132]	@ (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d022      	beq.n	8007b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007acc:	d01d      	beq.n	8007b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d018      	beq.n	8007b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d013      	beq.n	8007b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00e      	beq.n	8007b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a15      	ldr	r2, [pc, #84]	@ (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d009      	beq.n	8007b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a18      	ldr	r2, [pc, #96]	@ (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d004      	beq.n	8007b0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a11      	ldr	r2, [pc, #68]	@ (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d10c      	bne.n	8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40012c00 	.word	0x40012c00
 8007b48:	40013400 	.word	0x40013400
 8007b4c:	40015000 	.word	0x40015000
 8007b50:	40000400 	.word	0x40000400
 8007b54:	40000800 	.word	0x40000800
 8007b58:	40000c00 	.word	0x40000c00
 8007b5c:	40014000 	.word	0x40014000

08007b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e042      	b.n	8007bf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d106      	bne.n	8007b8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7fa faa1 	bl	80020cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2224      	movs	r2, #36	@ 0x24
 8007b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0201 	bic.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fc7a 	bl	80084a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f97b 	bl	8007eac <UART_SetConfig>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e01b      	b.n	8007bf8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fcf9 	bl	80085e8 <UART_CheckIdleState>
 8007bf6:	4603      	mov	r3, r0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08a      	sub	sp, #40	@ 0x28
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	d17b      	bne.n	8007d12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <HAL_UART_Transmit+0x26>
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e074      	b.n	8007d14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2221      	movs	r2, #33	@ 0x21
 8007c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c3a:	f7fb fd2b 	bl	8003694 <HAL_GetTick>
 8007c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	88fa      	ldrh	r2, [r7, #6]
 8007c44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	88fa      	ldrh	r2, [r7, #6]
 8007c4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c58:	d108      	bne.n	8007c6c <HAL_UART_Transmit+0x6c>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d104      	bne.n	8007c6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	e003      	b.n	8007c74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c74:	e030      	b.n	8007cd8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2180      	movs	r1, #128	@ 0x80
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fd5b 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e03d      	b.n	8007d14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10b      	bne.n	8007cb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	3302      	adds	r3, #2
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	e007      	b.n	8007cc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	781a      	ldrb	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1c8      	bne.n	8007c76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2200      	movs	r2, #0
 8007cec:	2140      	movs	r1, #64	@ 0x40
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fd24 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d005      	beq.n	8007d06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e006      	b.n	8007d14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	e000      	b.n	8007d14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007d12:	2302      	movs	r3, #2
  }
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3720      	adds	r7, #32
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	@ 0x28
 8007d20:	af02      	add	r7, sp, #8
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	f040 80b5 	bne.w	8007ea2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_UART_Receive+0x28>
 8007d3e:	88fb      	ldrh	r3, [r7, #6]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e0ad      	b.n	8007ea4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2222      	movs	r2, #34	@ 0x22
 8007d54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d5e:	f7fb fc99 	bl	8003694 <HAL_GetTick>
 8007d62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	88fa      	ldrh	r2, [r7, #6]
 8007d68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	88fa      	ldrh	r2, [r7, #6]
 8007d70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d7c:	d10e      	bne.n	8007d9c <HAL_UART_Receive+0x80>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d105      	bne.n	8007d92 <HAL_UART_Receive+0x76>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007d8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d90:	e02d      	b.n	8007dee <HAL_UART_Receive+0xd2>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	22ff      	movs	r2, #255	@ 0xff
 8007d96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d9a:	e028      	b.n	8007dee <HAL_UART_Receive+0xd2>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10d      	bne.n	8007dc0 <HAL_UART_Receive+0xa4>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d104      	bne.n	8007db6 <HAL_UART_Receive+0x9a>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	22ff      	movs	r2, #255	@ 0xff
 8007db0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007db4:	e01b      	b.n	8007dee <HAL_UART_Receive+0xd2>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	227f      	movs	r2, #127	@ 0x7f
 8007dba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007dbe:	e016      	b.n	8007dee <HAL_UART_Receive+0xd2>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dc8:	d10d      	bne.n	8007de6 <HAL_UART_Receive+0xca>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <HAL_UART_Receive+0xc0>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	227f      	movs	r2, #127	@ 0x7f
 8007dd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007dda:	e008      	b.n	8007dee <HAL_UART_Receive+0xd2>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	223f      	movs	r2, #63	@ 0x3f
 8007de0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007de4:	e003      	b.n	8007dee <HAL_UART_Receive+0xd2>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007df4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dfe:	d108      	bne.n	8007e12 <HAL_UART_Receive+0xf6>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	61bb      	str	r3, [r7, #24]
 8007e10:	e003      	b.n	8007e1a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007e1a:	e036      	b.n	8007e8a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	2200      	movs	r2, #0
 8007e24:	2120      	movs	r1, #32
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 fc88 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e032      	b.n	8007ea4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10c      	bne.n	8007e5e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	8a7b      	ldrh	r3, [r7, #18]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	3302      	adds	r3, #2
 8007e5a:	61bb      	str	r3, [r7, #24]
 8007e5c:	e00c      	b.n	8007e78 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	8a7b      	ldrh	r3, [r7, #18]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	3301      	adds	r3, #1
 8007e76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	3b01      	subs	r3, #1
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1c2      	bne.n	8007e1c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e000      	b.n	8007ea4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007ea2:	2302      	movs	r3, #2
  }
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3720      	adds	r7, #32
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eb0:	b08c      	sub	sp, #48	@ 0x30
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4baa      	ldr	r3, [pc, #680]	@ (8008184 <UART_SetConfig+0x2d8>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a9f      	ldr	r2, [pc, #636]	@ (8008188 <UART_SetConfig+0x2dc>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d004      	beq.n	8007f18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f14:	4313      	orrs	r3, r2
 8007f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f22:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f36:	f023 010f 	bic.w	r1, r3, #15
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a90      	ldr	r2, [pc, #576]	@ (800818c <UART_SetConfig+0x2e0>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d125      	bne.n	8007f9c <UART_SetConfig+0xf0>
 8007f50:	4b8f      	ldr	r3, [pc, #572]	@ (8008190 <UART_SetConfig+0x2e4>)
 8007f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d81a      	bhi.n	8007f94 <UART_SetConfig+0xe8>
 8007f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <UART_SetConfig+0xb8>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f75 	.word	0x08007f75
 8007f68:	08007f85 	.word	0x08007f85
 8007f6c:	08007f7d 	.word	0x08007f7d
 8007f70:	08007f8d 	.word	0x08007f8d
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7a:	e116      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f82:	e112      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007f84:	2304      	movs	r3, #4
 8007f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8a:	e10e      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007f8c:	2308      	movs	r3, #8
 8007f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f92:	e10a      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007f94:	2310      	movs	r3, #16
 8007f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9a:	e106      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a7c      	ldr	r2, [pc, #496]	@ (8008194 <UART_SetConfig+0x2e8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d138      	bne.n	8008018 <UART_SetConfig+0x16c>
 8007fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8008190 <UART_SetConfig+0x2e4>)
 8007fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fac:	f003 030c 	and.w	r3, r3, #12
 8007fb0:	2b0c      	cmp	r3, #12
 8007fb2:	d82d      	bhi.n	8008010 <UART_SetConfig+0x164>
 8007fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fbc <UART_SetConfig+0x110>)
 8007fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fba:	bf00      	nop
 8007fbc:	08007ff1 	.word	0x08007ff1
 8007fc0:	08008011 	.word	0x08008011
 8007fc4:	08008011 	.word	0x08008011
 8007fc8:	08008011 	.word	0x08008011
 8007fcc:	08008001 	.word	0x08008001
 8007fd0:	08008011 	.word	0x08008011
 8007fd4:	08008011 	.word	0x08008011
 8007fd8:	08008011 	.word	0x08008011
 8007fdc:	08007ff9 	.word	0x08007ff9
 8007fe0:	08008011 	.word	0x08008011
 8007fe4:	08008011 	.word	0x08008011
 8007fe8:	08008011 	.word	0x08008011
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff6:	e0d8      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffe:	e0d4      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008000:	2304      	movs	r3, #4
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008006:	e0d0      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008008:	2308      	movs	r3, #8
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800e:	e0cc      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008010:	2310      	movs	r3, #16
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008016:	e0c8      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a5e      	ldr	r2, [pc, #376]	@ (8008198 <UART_SetConfig+0x2ec>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d125      	bne.n	800806e <UART_SetConfig+0x1c2>
 8008022:	4b5b      	ldr	r3, [pc, #364]	@ (8008190 <UART_SetConfig+0x2e4>)
 8008024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008028:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800802c:	2b30      	cmp	r3, #48	@ 0x30
 800802e:	d016      	beq.n	800805e <UART_SetConfig+0x1b2>
 8008030:	2b30      	cmp	r3, #48	@ 0x30
 8008032:	d818      	bhi.n	8008066 <UART_SetConfig+0x1ba>
 8008034:	2b20      	cmp	r3, #32
 8008036:	d00a      	beq.n	800804e <UART_SetConfig+0x1a2>
 8008038:	2b20      	cmp	r3, #32
 800803a:	d814      	bhi.n	8008066 <UART_SetConfig+0x1ba>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <UART_SetConfig+0x19a>
 8008040:	2b10      	cmp	r3, #16
 8008042:	d008      	beq.n	8008056 <UART_SetConfig+0x1aa>
 8008044:	e00f      	b.n	8008066 <UART_SetConfig+0x1ba>
 8008046:	2300      	movs	r3, #0
 8008048:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804c:	e0ad      	b.n	80081aa <UART_SetConfig+0x2fe>
 800804e:	2302      	movs	r3, #2
 8008050:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008054:	e0a9      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008056:	2304      	movs	r3, #4
 8008058:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805c:	e0a5      	b.n	80081aa <UART_SetConfig+0x2fe>
 800805e:	2308      	movs	r3, #8
 8008060:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008064:	e0a1      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008066:	2310      	movs	r3, #16
 8008068:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806c:	e09d      	b.n	80081aa <UART_SetConfig+0x2fe>
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a4a      	ldr	r2, [pc, #296]	@ (800819c <UART_SetConfig+0x2f0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d125      	bne.n	80080c4 <UART_SetConfig+0x218>
 8008078:	4b45      	ldr	r3, [pc, #276]	@ (8008190 <UART_SetConfig+0x2e4>)
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800807e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008082:	2bc0      	cmp	r3, #192	@ 0xc0
 8008084:	d016      	beq.n	80080b4 <UART_SetConfig+0x208>
 8008086:	2bc0      	cmp	r3, #192	@ 0xc0
 8008088:	d818      	bhi.n	80080bc <UART_SetConfig+0x210>
 800808a:	2b80      	cmp	r3, #128	@ 0x80
 800808c:	d00a      	beq.n	80080a4 <UART_SetConfig+0x1f8>
 800808e:	2b80      	cmp	r3, #128	@ 0x80
 8008090:	d814      	bhi.n	80080bc <UART_SetConfig+0x210>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <UART_SetConfig+0x1f0>
 8008096:	2b40      	cmp	r3, #64	@ 0x40
 8008098:	d008      	beq.n	80080ac <UART_SetConfig+0x200>
 800809a:	e00f      	b.n	80080bc <UART_SetConfig+0x210>
 800809c:	2300      	movs	r3, #0
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a2:	e082      	b.n	80081aa <UART_SetConfig+0x2fe>
 80080a4:	2302      	movs	r3, #2
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080aa:	e07e      	b.n	80081aa <UART_SetConfig+0x2fe>
 80080ac:	2304      	movs	r3, #4
 80080ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b2:	e07a      	b.n	80081aa <UART_SetConfig+0x2fe>
 80080b4:	2308      	movs	r3, #8
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ba:	e076      	b.n	80081aa <UART_SetConfig+0x2fe>
 80080bc:	2310      	movs	r3, #16
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c2:	e072      	b.n	80081aa <UART_SetConfig+0x2fe>
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a35      	ldr	r2, [pc, #212]	@ (80081a0 <UART_SetConfig+0x2f4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d12a      	bne.n	8008124 <UART_SetConfig+0x278>
 80080ce:	4b30      	ldr	r3, [pc, #192]	@ (8008190 <UART_SetConfig+0x2e4>)
 80080d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080dc:	d01a      	beq.n	8008114 <UART_SetConfig+0x268>
 80080de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080e2:	d81b      	bhi.n	800811c <UART_SetConfig+0x270>
 80080e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e8:	d00c      	beq.n	8008104 <UART_SetConfig+0x258>
 80080ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ee:	d815      	bhi.n	800811c <UART_SetConfig+0x270>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <UART_SetConfig+0x250>
 80080f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080f8:	d008      	beq.n	800810c <UART_SetConfig+0x260>
 80080fa:	e00f      	b.n	800811c <UART_SetConfig+0x270>
 80080fc:	2300      	movs	r3, #0
 80080fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008102:	e052      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008104:	2302      	movs	r3, #2
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810a:	e04e      	b.n	80081aa <UART_SetConfig+0x2fe>
 800810c:	2304      	movs	r3, #4
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008112:	e04a      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008114:	2308      	movs	r3, #8
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811a:	e046      	b.n	80081aa <UART_SetConfig+0x2fe>
 800811c:	2310      	movs	r3, #16
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e042      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a17      	ldr	r2, [pc, #92]	@ (8008188 <UART_SetConfig+0x2dc>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d13a      	bne.n	80081a4 <UART_SetConfig+0x2f8>
 800812e:	4b18      	ldr	r3, [pc, #96]	@ (8008190 <UART_SetConfig+0x2e4>)
 8008130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008134:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008138:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800813c:	d01a      	beq.n	8008174 <UART_SetConfig+0x2c8>
 800813e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008142:	d81b      	bhi.n	800817c <UART_SetConfig+0x2d0>
 8008144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008148:	d00c      	beq.n	8008164 <UART_SetConfig+0x2b8>
 800814a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800814e:	d815      	bhi.n	800817c <UART_SetConfig+0x2d0>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <UART_SetConfig+0x2b0>
 8008154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008158:	d008      	beq.n	800816c <UART_SetConfig+0x2c0>
 800815a:	e00f      	b.n	800817c <UART_SetConfig+0x2d0>
 800815c:	2300      	movs	r3, #0
 800815e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008162:	e022      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008164:	2302      	movs	r3, #2
 8008166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800816a:	e01e      	b.n	80081aa <UART_SetConfig+0x2fe>
 800816c:	2304      	movs	r3, #4
 800816e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008172:	e01a      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008174:	2308      	movs	r3, #8
 8008176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800817a:	e016      	b.n	80081aa <UART_SetConfig+0x2fe>
 800817c:	2310      	movs	r3, #16
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008182:	e012      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008184:	cfff69f3 	.word	0xcfff69f3
 8008188:	40008000 	.word	0x40008000
 800818c:	40013800 	.word	0x40013800
 8008190:	40021000 	.word	0x40021000
 8008194:	40004400 	.word	0x40004400
 8008198:	40004800 	.word	0x40004800
 800819c:	40004c00 	.word	0x40004c00
 80081a0:	40005000 	.word	0x40005000
 80081a4:	2310      	movs	r3, #16
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4aae      	ldr	r2, [pc, #696]	@ (8008468 <UART_SetConfig+0x5bc>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	f040 8097 	bne.w	80082e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081ba:	2b08      	cmp	r3, #8
 80081bc:	d823      	bhi.n	8008206 <UART_SetConfig+0x35a>
 80081be:	a201      	add	r2, pc, #4	@ (adr r2, 80081c4 <UART_SetConfig+0x318>)
 80081c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	08008207 	.word	0x08008207
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	08008207 	.word	0x08008207
 80081d4:	080081f7 	.word	0x080081f7
 80081d8:	08008207 	.word	0x08008207
 80081dc:	08008207 	.word	0x08008207
 80081e0:	08008207 	.word	0x08008207
 80081e4:	080081ff 	.word	0x080081ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e8:	f7fd ffd4 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 80081ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ee:	e010      	b.n	8008212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081f0:	4b9e      	ldr	r3, [pc, #632]	@ (800846c <UART_SetConfig+0x5c0>)
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081f4:	e00d      	b.n	8008212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f6:	f7fd ff5f 	bl	80060b8 <HAL_RCC_GetSysClockFreq>
 80081fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081fc:	e009      	b.n	8008212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008204:	e005      	b.n	8008212 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008210:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8130 	beq.w	800847a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821e:	4a94      	ldr	r2, [pc, #592]	@ (8008470 <UART_SetConfig+0x5c4>)
 8008220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008224:	461a      	mov	r2, r3
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	fbb3 f3f2 	udiv	r3, r3, r2
 800822c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	4413      	add	r3, r2
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	429a      	cmp	r2, r3
 800823c:	d305      	bcc.n	800824a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	429a      	cmp	r2, r3
 8008248:	d903      	bls.n	8008252 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008250:	e113      	b.n	800847a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008254:	2200      	movs	r2, #0
 8008256:	60bb      	str	r3, [r7, #8]
 8008258:	60fa      	str	r2, [r7, #12]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825e:	4a84      	ldr	r2, [pc, #528]	@ (8008470 <UART_SetConfig+0x5c4>)
 8008260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008264:	b29b      	uxth	r3, r3
 8008266:	2200      	movs	r2, #0
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008270:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008274:	f7f8 fcc0 	bl	8000bf8 <__aeabi_uldivmod>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4610      	mov	r0, r2
 800827e:	4619      	mov	r1, r3
 8008280:	f04f 0200 	mov.w	r2, #0
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	020b      	lsls	r3, r1, #8
 800828a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800828e:	0202      	lsls	r2, r0, #8
 8008290:	6979      	ldr	r1, [r7, #20]
 8008292:	6849      	ldr	r1, [r1, #4]
 8008294:	0849      	lsrs	r1, r1, #1
 8008296:	2000      	movs	r0, #0
 8008298:	460c      	mov	r4, r1
 800829a:	4605      	mov	r5, r0
 800829c:	eb12 0804 	adds.w	r8, r2, r4
 80082a0:	eb43 0905 	adc.w	r9, r3, r5
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	469a      	mov	sl, r3
 80082ac:	4693      	mov	fp, r2
 80082ae:	4652      	mov	r2, sl
 80082b0:	465b      	mov	r3, fp
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	f7f8 fc9f 	bl	8000bf8 <__aeabi_uldivmod>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4613      	mov	r3, r2
 80082c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082c8:	d308      	bcc.n	80082dc <UART_SetConfig+0x430>
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082d0:	d204      	bcs.n	80082dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6a3a      	ldr	r2, [r7, #32]
 80082d8:	60da      	str	r2, [r3, #12]
 80082da:	e0ce      	b.n	800847a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082e2:	e0ca      	b.n	800847a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ec:	d166      	bne.n	80083bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80082ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d827      	bhi.n	8008346 <UART_SetConfig+0x49a>
 80082f6:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <UART_SetConfig+0x450>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008329 	.word	0x08008329
 8008304:	08008331 	.word	0x08008331
 8008308:	08008347 	.word	0x08008347
 800830c:	08008337 	.word	0x08008337
 8008310:	08008347 	.word	0x08008347
 8008314:	08008347 	.word	0x08008347
 8008318:	08008347 	.word	0x08008347
 800831c:	0800833f 	.word	0x0800833f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008320:	f7fd ff38 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 8008324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008326:	e014      	b.n	8008352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008328:	f7fd ff4a 	bl	80061c0 <HAL_RCC_GetPCLK2Freq>
 800832c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800832e:	e010      	b.n	8008352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008330:	4b4e      	ldr	r3, [pc, #312]	@ (800846c <UART_SetConfig+0x5c0>)
 8008332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008334:	e00d      	b.n	8008352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008336:	f7fd febf 	bl	80060b8 <HAL_RCC_GetSysClockFreq>
 800833a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800833c:	e009      	b.n	8008352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800833e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008344:	e005      	b.n	8008352 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 8090 	beq.w	800847a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835e:	4a44      	ldr	r2, [pc, #272]	@ (8008470 <UART_SetConfig+0x5c4>)
 8008360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008364:	461a      	mov	r2, r3
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	fbb3 f3f2 	udiv	r3, r3, r2
 800836c:	005a      	lsls	r2, r3, #1
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	441a      	add	r2, r3
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	fbb2 f3f3 	udiv	r3, r2, r3
 800837e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	2b0f      	cmp	r3, #15
 8008384:	d916      	bls.n	80083b4 <UART_SetConfig+0x508>
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800838c:	d212      	bcs.n	80083b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	b29b      	uxth	r3, r3
 8008392:	f023 030f 	bic.w	r3, r3, #15
 8008396:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	085b      	lsrs	r3, r3, #1
 800839c:	b29b      	uxth	r3, r3
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	8bfb      	ldrh	r3, [r7, #30]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	8bfa      	ldrh	r2, [r7, #30]
 80083b0:	60da      	str	r2, [r3, #12]
 80083b2:	e062      	b.n	800847a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083ba:	e05e      	b.n	800847a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d828      	bhi.n	8008416 <UART_SetConfig+0x56a>
 80083c4:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <UART_SetConfig+0x520>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083f1 	.word	0x080083f1
 80083d0:	080083f9 	.word	0x080083f9
 80083d4:	08008401 	.word	0x08008401
 80083d8:	08008417 	.word	0x08008417
 80083dc:	08008407 	.word	0x08008407
 80083e0:	08008417 	.word	0x08008417
 80083e4:	08008417 	.word	0x08008417
 80083e8:	08008417 	.word	0x08008417
 80083ec:	0800840f 	.word	0x0800840f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f0:	f7fd fed0 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 80083f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083f6:	e014      	b.n	8008422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f8:	f7fd fee2 	bl	80061c0 <HAL_RCC_GetPCLK2Freq>
 80083fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083fe:	e010      	b.n	8008422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008400:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <UART_SetConfig+0x5c0>)
 8008402:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008404:	e00d      	b.n	8008422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008406:	f7fd fe57 	bl	80060b8 <HAL_RCC_GetSysClockFreq>
 800840a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800840c:	e009      	b.n	8008422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800840e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008414:	e005      	b.n	8008422 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008420:	bf00      	nop
    }

    if (pclk != 0U)
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	2b00      	cmp	r3, #0
 8008426:	d028      	beq.n	800847a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842c:	4a10      	ldr	r2, [pc, #64]	@ (8008470 <UART_SetConfig+0x5c4>)
 800842e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008432:	461a      	mov	r2, r3
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	fbb3 f2f2 	udiv	r2, r3, r2
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	085b      	lsrs	r3, r3, #1
 8008440:	441a      	add	r2, r3
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	fbb2 f3f3 	udiv	r3, r2, r3
 800844a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	2b0f      	cmp	r3, #15
 8008450:	d910      	bls.n	8008474 <UART_SetConfig+0x5c8>
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008458:	d20c      	bcs.n	8008474 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	b29a      	uxth	r2, r3
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60da      	str	r2, [r3, #12]
 8008464:	e009      	b.n	800847a <UART_SetConfig+0x5ce>
 8008466:	bf00      	nop
 8008468:	40008000 	.word	0x40008000
 800846c:	00f42400 	.word	0x00f42400
 8008470:	0800b83c 	.word	0x0800b83c
      }
      else
      {
        ret = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2201      	movs	r2, #1
 800847e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2201      	movs	r2, #1
 8008486:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2200      	movs	r2, #0
 800848e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2200      	movs	r2, #0
 8008494:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008496:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800849a:	4618      	mov	r0, r3
 800849c:	3730      	adds	r7, #48	@ 0x30
 800849e:	46bd      	mov	sp, r7
 80084a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080084a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b0:	f003 0308 	and.w	r3, r3, #8
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00a      	beq.n	8008512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	f003 0310 	and.w	r3, r3, #16
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d01a      	beq.n	80085ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085a2:	d10a      	bne.n	80085ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	605a      	str	r2, [r3, #4]
  }
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b098      	sub	sp, #96	@ 0x60
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085f8:	f7fb f84c 	bl	8003694 <HAL_GetTick>
 80085fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b08      	cmp	r3, #8
 800860a:	d12f      	bne.n	800866c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800860c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008614:	2200      	movs	r2, #0
 8008616:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f88e 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d022      	beq.n	800866c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800863a:	653b      	str	r3, [r7, #80]	@ 0x50
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008644:	647b      	str	r3, [r7, #68]	@ 0x44
 8008646:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800864a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e6      	bne.n	8008626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2220      	movs	r2, #32
 800865c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e063      	b.n	8008734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b04      	cmp	r3, #4
 8008678:	d149      	bne.n	800870e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800867a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008682:	2200      	movs	r2, #0
 8008684:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f857 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d03c      	beq.n	800870e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	623b      	str	r3, [r7, #32]
   return(result);
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80086b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e6      	bne.n	8008694 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3308      	adds	r3, #8
 80086e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086e6:	61fa      	str	r2, [r7, #28]
 80086e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	69b9      	ldr	r1, [r7, #24]
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	617b      	str	r3, [r7, #20]
   return(result);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e5      	bne.n	80086c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e012      	b.n	8008734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2220      	movs	r2, #32
 800871a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3758      	adds	r7, #88	@ 0x58
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	4613      	mov	r3, r2
 800874a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800874c:	e04f      	b.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008754:	d04b      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008756:	f7fa ff9d 	bl	8003694 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	429a      	cmp	r2, r3
 8008764:	d302      	bcc.n	800876c <UART_WaitOnFlagUntilTimeout+0x30>
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e04e      	b.n	800880e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0304 	and.w	r3, r3, #4
 800877a:	2b00      	cmp	r3, #0
 800877c:	d037      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b80      	cmp	r3, #128	@ 0x80
 8008782:	d034      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b40      	cmp	r3, #64	@ 0x40
 8008788:	d031      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b08      	cmp	r3, #8
 8008796:	d110      	bne.n	80087ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2208      	movs	r2, #8
 800879e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 f838 	bl	8008816 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2208      	movs	r2, #8
 80087aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e029      	b.n	800880e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087c8:	d111      	bne.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 f81e 	bl	8008816 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2220      	movs	r2, #32
 80087de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e00f      	b.n	800880e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	69da      	ldr	r2, [r3, #28]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	4013      	ands	r3, r2
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	bf0c      	ite	eq
 80087fe:	2301      	moveq	r3, #1
 8008800:	2300      	movne	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	461a      	mov	r2, r3
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	429a      	cmp	r2, r3
 800880a:	d0a0      	beq.n	800874e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008816:	b480      	push	{r7}
 8008818:	b095      	sub	sp, #84	@ 0x54
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008826:	e853 3f00 	ldrex	r3, [r3]
 800882a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
 800883a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800883c:	643b      	str	r3, [r7, #64]	@ 0x40
 800883e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008842:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800884a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e6      	bne.n	800881e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3308      	adds	r3, #8
 8008856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008866:	f023 0301 	bic.w	r3, r3, #1
 800886a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3308      	adds	r3, #8
 8008872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800887a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e3      	bne.n	8008850 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800888c:	2b01      	cmp	r3, #1
 800888e:	d118      	bne.n	80088c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	60bb      	str	r3, [r7, #8]
   return(result);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f023 0310 	bic.w	r3, r3, #16
 80088a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088ae:	61bb      	str	r3, [r7, #24]
 80088b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6979      	ldr	r1, [r7, #20]
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	613b      	str	r3, [r7, #16]
   return(result);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e6      	bne.n	8008890 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80088d6:	bf00      	nop
 80088d8:	3754      	adds	r7, #84	@ 0x54
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e027      	b.n	8008948 <HAL_UARTEx_DisableFifoMode+0x66>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2224      	movs	r2, #36	@ 0x24
 8008904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0201 	bic.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008926:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008968:	2302      	movs	r3, #2
 800896a:	e02d      	b.n	80089c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2224      	movs	r2, #36	@ 0x24
 8008978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0201 	bic.w	r2, r2, #1
 8008992:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f84f 	bl	8008a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e02d      	b.n	8008a44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2224      	movs	r2, #36	@ 0x24
 80089f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f811 	bl	8008a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d108      	bne.n	8008a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a6c:	e031      	b.n	8008ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a6e:	2308      	movs	r3, #8
 8008a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a72:	2308      	movs	r3, #8
 8008a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	0e5b      	lsrs	r3, r3, #25
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	0f5b      	lsrs	r3, r3, #29
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	7b3a      	ldrb	r2, [r7, #12]
 8008a9a:	4911      	ldr	r1, [pc, #68]	@ (8008ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8008a9c:	5c8a      	ldrb	r2, [r1, r2]
 8008a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008aa2:	7b3a      	ldrb	r2, [r7, #12]
 8008aa4:	490f      	ldr	r1, [pc, #60]	@ (8008ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8008aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	7b7a      	ldrb	r2, [r7, #13]
 8008ab8:	4909      	ldr	r1, [pc, #36]	@ (8008ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8008aba:	5c8a      	ldrb	r2, [r1, r2]
 8008abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ac0:	7b7a      	ldrb	r2, [r7, #13]
 8008ac2:	4908      	ldr	r1, [pc, #32]	@ (8008ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8008ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	0800b854 	.word	0x0800b854
 8008ae4:	0800b85c 	.word	0x0800b85c

08008ae8 <atoi>:
 8008ae8:	220a      	movs	r2, #10
 8008aea:	2100      	movs	r1, #0
 8008aec:	f000 b938 	b.w	8008d60 <strtol>

08008af0 <malloc>:
 8008af0:	4b02      	ldr	r3, [pc, #8]	@ (8008afc <malloc+0xc>)
 8008af2:	4601      	mov	r1, r0
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	f000 b82d 	b.w	8008b54 <_malloc_r>
 8008afa:	bf00      	nop
 8008afc:	20000058 	.word	0x20000058

08008b00 <free>:
 8008b00:	4b02      	ldr	r3, [pc, #8]	@ (8008b0c <free+0xc>)
 8008b02:	4601      	mov	r1, r0
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	f001 be7f 	b.w	800a808 <_free_r>
 8008b0a:	bf00      	nop
 8008b0c:	20000058 	.word	0x20000058

08008b10 <sbrk_aligned>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4e0f      	ldr	r6, [pc, #60]	@ (8008b50 <sbrk_aligned+0x40>)
 8008b14:	460c      	mov	r4, r1
 8008b16:	6831      	ldr	r1, [r6, #0]
 8008b18:	4605      	mov	r5, r0
 8008b1a:	b911      	cbnz	r1, 8008b22 <sbrk_aligned+0x12>
 8008b1c:	f000 ffca 	bl	8009ab4 <_sbrk_r>
 8008b20:	6030      	str	r0, [r6, #0]
 8008b22:	4621      	mov	r1, r4
 8008b24:	4628      	mov	r0, r5
 8008b26:	f000 ffc5 	bl	8009ab4 <_sbrk_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d103      	bne.n	8008b36 <sbrk_aligned+0x26>
 8008b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8008b32:	4620      	mov	r0, r4
 8008b34:	bd70      	pop	{r4, r5, r6, pc}
 8008b36:	1cc4      	adds	r4, r0, #3
 8008b38:	f024 0403 	bic.w	r4, r4, #3
 8008b3c:	42a0      	cmp	r0, r4
 8008b3e:	d0f8      	beq.n	8008b32 <sbrk_aligned+0x22>
 8008b40:	1a21      	subs	r1, r4, r0
 8008b42:	4628      	mov	r0, r5
 8008b44:	f000 ffb6 	bl	8009ab4 <_sbrk_r>
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d1f2      	bne.n	8008b32 <sbrk_aligned+0x22>
 8008b4c:	e7ef      	b.n	8008b2e <sbrk_aligned+0x1e>
 8008b4e:	bf00      	nop
 8008b50:	20000518 	.word	0x20000518

08008b54 <_malloc_r>:
 8008b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b58:	1ccd      	adds	r5, r1, #3
 8008b5a:	f025 0503 	bic.w	r5, r5, #3
 8008b5e:	3508      	adds	r5, #8
 8008b60:	2d0c      	cmp	r5, #12
 8008b62:	bf38      	it	cc
 8008b64:	250c      	movcc	r5, #12
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	4606      	mov	r6, r0
 8008b6a:	db01      	blt.n	8008b70 <_malloc_r+0x1c>
 8008b6c:	42a9      	cmp	r1, r5
 8008b6e:	d904      	bls.n	8008b7a <_malloc_r+0x26>
 8008b70:	230c      	movs	r3, #12
 8008b72:	6033      	str	r3, [r6, #0]
 8008b74:	2000      	movs	r0, #0
 8008b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c50 <_malloc_r+0xfc>
 8008b7e:	f000 f869 	bl	8008c54 <__malloc_lock>
 8008b82:	f8d8 3000 	ldr.w	r3, [r8]
 8008b86:	461c      	mov	r4, r3
 8008b88:	bb44      	cbnz	r4, 8008bdc <_malloc_r+0x88>
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f7ff ffbf 	bl	8008b10 <sbrk_aligned>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	4604      	mov	r4, r0
 8008b96:	d158      	bne.n	8008c4a <_malloc_r+0xf6>
 8008b98:	f8d8 4000 	ldr.w	r4, [r8]
 8008b9c:	4627      	mov	r7, r4
 8008b9e:	2f00      	cmp	r7, #0
 8008ba0:	d143      	bne.n	8008c2a <_malloc_r+0xd6>
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	d04b      	beq.n	8008c3e <_malloc_r+0xea>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4630      	mov	r0, r6
 8008bac:	eb04 0903 	add.w	r9, r4, r3
 8008bb0:	f000 ff80 	bl	8009ab4 <_sbrk_r>
 8008bb4:	4581      	cmp	r9, r0
 8008bb6:	d142      	bne.n	8008c3e <_malloc_r+0xea>
 8008bb8:	6821      	ldr	r1, [r4, #0]
 8008bba:	1a6d      	subs	r5, r5, r1
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f7ff ffa6 	bl	8008b10 <sbrk_aligned>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d03a      	beq.n	8008c3e <_malloc_r+0xea>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	442b      	add	r3, r5
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	bb62      	cbnz	r2, 8008c30 <_malloc_r+0xdc>
 8008bd6:	f8c8 7000 	str.w	r7, [r8]
 8008bda:	e00f      	b.n	8008bfc <_malloc_r+0xa8>
 8008bdc:	6822      	ldr	r2, [r4, #0]
 8008bde:	1b52      	subs	r2, r2, r5
 8008be0:	d420      	bmi.n	8008c24 <_malloc_r+0xd0>
 8008be2:	2a0b      	cmp	r2, #11
 8008be4:	d917      	bls.n	8008c16 <_malloc_r+0xc2>
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	6025      	str	r5, [r4, #0]
 8008bec:	bf18      	it	ne
 8008bee:	6059      	strne	r1, [r3, #4]
 8008bf0:	6863      	ldr	r3, [r4, #4]
 8008bf2:	bf08      	it	eq
 8008bf4:	f8c8 1000 	streq.w	r1, [r8]
 8008bf8:	5162      	str	r2, [r4, r5]
 8008bfa:	604b      	str	r3, [r1, #4]
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f000 f82f 	bl	8008c60 <__malloc_unlock>
 8008c02:	f104 000b 	add.w	r0, r4, #11
 8008c06:	1d23      	adds	r3, r4, #4
 8008c08:	f020 0007 	bic.w	r0, r0, #7
 8008c0c:	1ac2      	subs	r2, r0, r3
 8008c0e:	bf1c      	itt	ne
 8008c10:	1a1b      	subne	r3, r3, r0
 8008c12:	50a3      	strne	r3, [r4, r2]
 8008c14:	e7af      	b.n	8008b76 <_malloc_r+0x22>
 8008c16:	6862      	ldr	r2, [r4, #4]
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	bf0c      	ite	eq
 8008c1c:	f8c8 2000 	streq.w	r2, [r8]
 8008c20:	605a      	strne	r2, [r3, #4]
 8008c22:	e7eb      	b.n	8008bfc <_malloc_r+0xa8>
 8008c24:	4623      	mov	r3, r4
 8008c26:	6864      	ldr	r4, [r4, #4]
 8008c28:	e7ae      	b.n	8008b88 <_malloc_r+0x34>
 8008c2a:	463c      	mov	r4, r7
 8008c2c:	687f      	ldr	r7, [r7, #4]
 8008c2e:	e7b6      	b.n	8008b9e <_malloc_r+0x4a>
 8008c30:	461a      	mov	r2, r3
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d1fb      	bne.n	8008c30 <_malloc_r+0xdc>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	6053      	str	r3, [r2, #4]
 8008c3c:	e7de      	b.n	8008bfc <_malloc_r+0xa8>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	6033      	str	r3, [r6, #0]
 8008c42:	4630      	mov	r0, r6
 8008c44:	f000 f80c 	bl	8008c60 <__malloc_unlock>
 8008c48:	e794      	b.n	8008b74 <_malloc_r+0x20>
 8008c4a:	6005      	str	r5, [r0, #0]
 8008c4c:	e7d6      	b.n	8008bfc <_malloc_r+0xa8>
 8008c4e:	bf00      	nop
 8008c50:	2000051c 	.word	0x2000051c

08008c54 <__malloc_lock>:
 8008c54:	4801      	ldr	r0, [pc, #4]	@ (8008c5c <__malloc_lock+0x8>)
 8008c56:	f000 bf7a 	b.w	8009b4e <__retarget_lock_acquire_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	20000660 	.word	0x20000660

08008c60 <__malloc_unlock>:
 8008c60:	4801      	ldr	r0, [pc, #4]	@ (8008c68 <__malloc_unlock+0x8>)
 8008c62:	f000 bf75 	b.w	8009b50 <__retarget_lock_release_recursive>
 8008c66:	bf00      	nop
 8008c68:	20000660 	.word	0x20000660

08008c6c <_strtol_l.isra.0>:
 8008c6c:	2b24      	cmp	r3, #36	@ 0x24
 8008c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c72:	4686      	mov	lr, r0
 8008c74:	4690      	mov	r8, r2
 8008c76:	d801      	bhi.n	8008c7c <_strtol_l.isra.0+0x10>
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d106      	bne.n	8008c8a <_strtol_l.isra.0+0x1e>
 8008c7c:	f000 ff3c 	bl	8009af8 <__errno>
 8008c80:	2316      	movs	r3, #22
 8008c82:	6003      	str	r3, [r0, #0]
 8008c84:	2000      	movs	r0, #0
 8008c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8a:	4834      	ldr	r0, [pc, #208]	@ (8008d5c <_strtol_l.isra.0+0xf0>)
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	462a      	mov	r2, r5
 8008c90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c94:	5d06      	ldrb	r6, [r0, r4]
 8008c96:	f016 0608 	ands.w	r6, r6, #8
 8008c9a:	d1f8      	bne.n	8008c8e <_strtol_l.isra.0+0x22>
 8008c9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c9e:	d110      	bne.n	8008cc2 <_strtol_l.isra.0+0x56>
 8008ca0:	782c      	ldrb	r4, [r5, #0]
 8008ca2:	2601      	movs	r6, #1
 8008ca4:	1c95      	adds	r5, r2, #2
 8008ca6:	f033 0210 	bics.w	r2, r3, #16
 8008caa:	d115      	bne.n	8008cd8 <_strtol_l.isra.0+0x6c>
 8008cac:	2c30      	cmp	r4, #48	@ 0x30
 8008cae:	d10d      	bne.n	8008ccc <_strtol_l.isra.0+0x60>
 8008cb0:	782a      	ldrb	r2, [r5, #0]
 8008cb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cb6:	2a58      	cmp	r2, #88	@ 0x58
 8008cb8:	d108      	bne.n	8008ccc <_strtol_l.isra.0+0x60>
 8008cba:	786c      	ldrb	r4, [r5, #1]
 8008cbc:	3502      	adds	r5, #2
 8008cbe:	2310      	movs	r3, #16
 8008cc0:	e00a      	b.n	8008cd8 <_strtol_l.isra.0+0x6c>
 8008cc2:	2c2b      	cmp	r4, #43	@ 0x2b
 8008cc4:	bf04      	itt	eq
 8008cc6:	782c      	ldrbeq	r4, [r5, #0]
 8008cc8:	1c95      	addeq	r5, r2, #2
 8008cca:	e7ec      	b.n	8008ca6 <_strtol_l.isra.0+0x3a>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1f6      	bne.n	8008cbe <_strtol_l.isra.0+0x52>
 8008cd0:	2c30      	cmp	r4, #48	@ 0x30
 8008cd2:	bf14      	ite	ne
 8008cd4:	230a      	movne	r3, #10
 8008cd6:	2308      	moveq	r3, #8
 8008cd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008cdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	fbbc f9f3 	udiv	r9, ip, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008cec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008cf0:	2f09      	cmp	r7, #9
 8008cf2:	d80f      	bhi.n	8008d14 <_strtol_l.isra.0+0xa8>
 8008cf4:	463c      	mov	r4, r7
 8008cf6:	42a3      	cmp	r3, r4
 8008cf8:	dd1b      	ble.n	8008d32 <_strtol_l.isra.0+0xc6>
 8008cfa:	1c57      	adds	r7, r2, #1
 8008cfc:	d007      	beq.n	8008d0e <_strtol_l.isra.0+0xa2>
 8008cfe:	4581      	cmp	r9, r0
 8008d00:	d314      	bcc.n	8008d2c <_strtol_l.isra.0+0xc0>
 8008d02:	d101      	bne.n	8008d08 <_strtol_l.isra.0+0x9c>
 8008d04:	45a2      	cmp	sl, r4
 8008d06:	db11      	blt.n	8008d2c <_strtol_l.isra.0+0xc0>
 8008d08:	fb00 4003 	mla	r0, r0, r3, r4
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d12:	e7eb      	b.n	8008cec <_strtol_l.isra.0+0x80>
 8008d14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d18:	2f19      	cmp	r7, #25
 8008d1a:	d801      	bhi.n	8008d20 <_strtol_l.isra.0+0xb4>
 8008d1c:	3c37      	subs	r4, #55	@ 0x37
 8008d1e:	e7ea      	b.n	8008cf6 <_strtol_l.isra.0+0x8a>
 8008d20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d24:	2f19      	cmp	r7, #25
 8008d26:	d804      	bhi.n	8008d32 <_strtol_l.isra.0+0xc6>
 8008d28:	3c57      	subs	r4, #87	@ 0x57
 8008d2a:	e7e4      	b.n	8008cf6 <_strtol_l.isra.0+0x8a>
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d30:	e7ed      	b.n	8008d0e <_strtol_l.isra.0+0xa2>
 8008d32:	1c53      	adds	r3, r2, #1
 8008d34:	d108      	bne.n	8008d48 <_strtol_l.isra.0+0xdc>
 8008d36:	2322      	movs	r3, #34	@ 0x22
 8008d38:	f8ce 3000 	str.w	r3, [lr]
 8008d3c:	4660      	mov	r0, ip
 8008d3e:	f1b8 0f00 	cmp.w	r8, #0
 8008d42:	d0a0      	beq.n	8008c86 <_strtol_l.isra.0+0x1a>
 8008d44:	1e69      	subs	r1, r5, #1
 8008d46:	e006      	b.n	8008d56 <_strtol_l.isra.0+0xea>
 8008d48:	b106      	cbz	r6, 8008d4c <_strtol_l.isra.0+0xe0>
 8008d4a:	4240      	negs	r0, r0
 8008d4c:	f1b8 0f00 	cmp.w	r8, #0
 8008d50:	d099      	beq.n	8008c86 <_strtol_l.isra.0+0x1a>
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	d1f6      	bne.n	8008d44 <_strtol_l.isra.0+0xd8>
 8008d56:	f8c8 1000 	str.w	r1, [r8]
 8008d5a:	e794      	b.n	8008c86 <_strtol_l.isra.0+0x1a>
 8008d5c:	0800b865 	.word	0x0800b865

08008d60 <strtol>:
 8008d60:	4613      	mov	r3, r2
 8008d62:	460a      	mov	r2, r1
 8008d64:	4601      	mov	r1, r0
 8008d66:	4802      	ldr	r0, [pc, #8]	@ (8008d70 <strtol+0x10>)
 8008d68:	6800      	ldr	r0, [r0, #0]
 8008d6a:	f7ff bf7f 	b.w	8008c6c <_strtol_l.isra.0>
 8008d6e:	bf00      	nop
 8008d70:	20000058 	.word	0x20000058

08008d74 <__cvt>:
 8008d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d78:	ec57 6b10 	vmov	r6, r7, d0
 8008d7c:	2f00      	cmp	r7, #0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	4619      	mov	r1, r3
 8008d82:	463b      	mov	r3, r7
 8008d84:	bfbb      	ittet	lt
 8008d86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008d8a:	461f      	movlt	r7, r3
 8008d8c:	2300      	movge	r3, #0
 8008d8e:	232d      	movlt	r3, #45	@ 0x2d
 8008d90:	700b      	strb	r3, [r1, #0]
 8008d92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008d98:	4691      	mov	r9, r2
 8008d9a:	f023 0820 	bic.w	r8, r3, #32
 8008d9e:	bfbc      	itt	lt
 8008da0:	4632      	movlt	r2, r6
 8008da2:	4616      	movlt	r6, r2
 8008da4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008da8:	d005      	beq.n	8008db6 <__cvt+0x42>
 8008daa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008dae:	d100      	bne.n	8008db2 <__cvt+0x3e>
 8008db0:	3401      	adds	r4, #1
 8008db2:	2102      	movs	r1, #2
 8008db4:	e000      	b.n	8008db8 <__cvt+0x44>
 8008db6:	2103      	movs	r1, #3
 8008db8:	ab03      	add	r3, sp, #12
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	ab02      	add	r3, sp, #8
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	ec47 6b10 	vmov	d0, r6, r7
 8008dc4:	4653      	mov	r3, sl
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	f000 ff4e 	bl	8009c68 <_dtoa_r>
 8008dcc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	d119      	bne.n	8008e08 <__cvt+0x94>
 8008dd4:	f019 0f01 	tst.w	r9, #1
 8008dd8:	d00e      	beq.n	8008df8 <__cvt+0x84>
 8008dda:	eb00 0904 	add.w	r9, r0, r4
 8008dde:	2200      	movs	r2, #0
 8008de0:	2300      	movs	r3, #0
 8008de2:	4630      	mov	r0, r6
 8008de4:	4639      	mov	r1, r7
 8008de6:	f7f7 fe97 	bl	8000b18 <__aeabi_dcmpeq>
 8008dea:	b108      	cbz	r0, 8008df0 <__cvt+0x7c>
 8008dec:	f8cd 900c 	str.w	r9, [sp, #12]
 8008df0:	2230      	movs	r2, #48	@ 0x30
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	454b      	cmp	r3, r9
 8008df6:	d31e      	bcc.n	8008e36 <__cvt+0xc2>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dfc:	1b5b      	subs	r3, r3, r5
 8008dfe:	4628      	mov	r0, r5
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	b004      	add	sp, #16
 8008e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e0c:	eb00 0904 	add.w	r9, r0, r4
 8008e10:	d1e5      	bne.n	8008dde <__cvt+0x6a>
 8008e12:	7803      	ldrb	r3, [r0, #0]
 8008e14:	2b30      	cmp	r3, #48	@ 0x30
 8008e16:	d10a      	bne.n	8008e2e <__cvt+0xba>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f7f7 fe7a 	bl	8000b18 <__aeabi_dcmpeq>
 8008e24:	b918      	cbnz	r0, 8008e2e <__cvt+0xba>
 8008e26:	f1c4 0401 	rsb	r4, r4, #1
 8008e2a:	f8ca 4000 	str.w	r4, [sl]
 8008e2e:	f8da 3000 	ldr.w	r3, [sl]
 8008e32:	4499      	add	r9, r3
 8008e34:	e7d3      	b.n	8008dde <__cvt+0x6a>
 8008e36:	1c59      	adds	r1, r3, #1
 8008e38:	9103      	str	r1, [sp, #12]
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	e7d9      	b.n	8008df2 <__cvt+0x7e>

08008e3e <__exponent>:
 8008e3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e40:	2900      	cmp	r1, #0
 8008e42:	bfba      	itte	lt
 8008e44:	4249      	neglt	r1, r1
 8008e46:	232d      	movlt	r3, #45	@ 0x2d
 8008e48:	232b      	movge	r3, #43	@ 0x2b
 8008e4a:	2909      	cmp	r1, #9
 8008e4c:	7002      	strb	r2, [r0, #0]
 8008e4e:	7043      	strb	r3, [r0, #1]
 8008e50:	dd29      	ble.n	8008ea6 <__exponent+0x68>
 8008e52:	f10d 0307 	add.w	r3, sp, #7
 8008e56:	461d      	mov	r5, r3
 8008e58:	270a      	movs	r7, #10
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008e60:	fb07 1416 	mls	r4, r7, r6, r1
 8008e64:	3430      	adds	r4, #48	@ 0x30
 8008e66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	2c63      	cmp	r4, #99	@ 0x63
 8008e6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e72:	4631      	mov	r1, r6
 8008e74:	dcf1      	bgt.n	8008e5a <__exponent+0x1c>
 8008e76:	3130      	adds	r1, #48	@ 0x30
 8008e78:	1e94      	subs	r4, r2, #2
 8008e7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e7e:	1c41      	adds	r1, r0, #1
 8008e80:	4623      	mov	r3, r4
 8008e82:	42ab      	cmp	r3, r5
 8008e84:	d30a      	bcc.n	8008e9c <__exponent+0x5e>
 8008e86:	f10d 0309 	add.w	r3, sp, #9
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	42ac      	cmp	r4, r5
 8008e8e:	bf88      	it	hi
 8008e90:	2300      	movhi	r3, #0
 8008e92:	3302      	adds	r3, #2
 8008e94:	4403      	add	r3, r0
 8008e96:	1a18      	subs	r0, r3, r0
 8008e98:	b003      	add	sp, #12
 8008e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ea0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008ea4:	e7ed      	b.n	8008e82 <__exponent+0x44>
 8008ea6:	2330      	movs	r3, #48	@ 0x30
 8008ea8:	3130      	adds	r1, #48	@ 0x30
 8008eaa:	7083      	strb	r3, [r0, #2]
 8008eac:	70c1      	strb	r1, [r0, #3]
 8008eae:	1d03      	adds	r3, r0, #4
 8008eb0:	e7f1      	b.n	8008e96 <__exponent+0x58>
	...

08008eb4 <_printf_float>:
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	b08d      	sub	sp, #52	@ 0x34
 8008eba:	460c      	mov	r4, r1
 8008ebc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ec0:	4616      	mov	r6, r2
 8008ec2:	461f      	mov	r7, r3
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	f000 fdbd 	bl	8009a44 <_localeconv_r>
 8008eca:	6803      	ldr	r3, [r0, #0]
 8008ecc:	9304      	str	r3, [sp, #16]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7f7 f9f6 	bl	80002c0 <strlen>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8008edc:	9005      	str	r0, [sp, #20]
 8008ede:	3307      	adds	r3, #7
 8008ee0:	f023 0307 	bic.w	r3, r3, #7
 8008ee4:	f103 0208 	add.w	r2, r3, #8
 8008ee8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008eec:	f8d4 b000 	ldr.w	fp, [r4]
 8008ef0:	f8c8 2000 	str.w	r2, [r8]
 8008ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ef8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008efc:	9307      	str	r3, [sp, #28]
 8008efe:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f0a:	4b9c      	ldr	r3, [pc, #624]	@ (800917c <_printf_float+0x2c8>)
 8008f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f10:	f7f7 fe34 	bl	8000b7c <__aeabi_dcmpun>
 8008f14:	bb70      	cbnz	r0, 8008f74 <_printf_float+0xc0>
 8008f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f1a:	4b98      	ldr	r3, [pc, #608]	@ (800917c <_printf_float+0x2c8>)
 8008f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f20:	f7f7 fe0e 	bl	8000b40 <__aeabi_dcmple>
 8008f24:	bb30      	cbnz	r0, 8008f74 <_printf_float+0xc0>
 8008f26:	2200      	movs	r2, #0
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	f7f7 fdfd 	bl	8000b2c <__aeabi_dcmplt>
 8008f32:	b110      	cbz	r0, 8008f3a <_printf_float+0x86>
 8008f34:	232d      	movs	r3, #45	@ 0x2d
 8008f36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f3a:	4a91      	ldr	r2, [pc, #580]	@ (8009180 <_printf_float+0x2cc>)
 8008f3c:	4b91      	ldr	r3, [pc, #580]	@ (8009184 <_printf_float+0x2d0>)
 8008f3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008f42:	bf8c      	ite	hi
 8008f44:	4690      	movhi	r8, r2
 8008f46:	4698      	movls	r8, r3
 8008f48:	2303      	movs	r3, #3
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	f02b 0304 	bic.w	r3, fp, #4
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	f04f 0900 	mov.w	r9, #0
 8008f56:	9700      	str	r7, [sp, #0]
 8008f58:	4633      	mov	r3, r6
 8008f5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 f9d2 	bl	8009308 <_printf_common>
 8008f64:	3001      	adds	r0, #1
 8008f66:	f040 808d 	bne.w	8009084 <_printf_float+0x1d0>
 8008f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6e:	b00d      	add	sp, #52	@ 0x34
 8008f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f74:	4642      	mov	r2, r8
 8008f76:	464b      	mov	r3, r9
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	f7f7 fdfe 	bl	8000b7c <__aeabi_dcmpun>
 8008f80:	b140      	cbz	r0, 8008f94 <_printf_float+0xe0>
 8008f82:	464b      	mov	r3, r9
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	bfbc      	itt	lt
 8008f88:	232d      	movlt	r3, #45	@ 0x2d
 8008f8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8009188 <_printf_float+0x2d4>)
 8008f90:	4b7e      	ldr	r3, [pc, #504]	@ (800918c <_printf_float+0x2d8>)
 8008f92:	e7d4      	b.n	8008f3e <_printf_float+0x8a>
 8008f94:	6863      	ldr	r3, [r4, #4]
 8008f96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008f9a:	9206      	str	r2, [sp, #24]
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	d13b      	bne.n	8009018 <_printf_float+0x164>
 8008fa0:	2306      	movs	r3, #6
 8008fa2:	6063      	str	r3, [r4, #4]
 8008fa4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008fa8:	2300      	movs	r3, #0
 8008faa:	6022      	str	r2, [r4, #0]
 8008fac:	9303      	str	r3, [sp, #12]
 8008fae:	ab0a      	add	r3, sp, #40	@ 0x28
 8008fb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008fb4:	ab09      	add	r3, sp, #36	@ 0x24
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	6861      	ldr	r1, [r4, #4]
 8008fba:	ec49 8b10 	vmov	d0, r8, r9
 8008fbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f7ff fed6 	bl	8008d74 <__cvt>
 8008fc8:	9b06      	ldr	r3, [sp, #24]
 8008fca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fcc:	2b47      	cmp	r3, #71	@ 0x47
 8008fce:	4680      	mov	r8, r0
 8008fd0:	d129      	bne.n	8009026 <_printf_float+0x172>
 8008fd2:	1cc8      	adds	r0, r1, #3
 8008fd4:	db02      	blt.n	8008fdc <_printf_float+0x128>
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	4299      	cmp	r1, r3
 8008fda:	dd41      	ble.n	8009060 <_printf_float+0x1ac>
 8008fdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8008fe0:	fa5f fa8a 	uxtb.w	sl, sl
 8008fe4:	3901      	subs	r1, #1
 8008fe6:	4652      	mov	r2, sl
 8008fe8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008fec:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fee:	f7ff ff26 	bl	8008e3e <__exponent>
 8008ff2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ff4:	1813      	adds	r3, r2, r0
 8008ff6:	2a01      	cmp	r2, #1
 8008ff8:	4681      	mov	r9, r0
 8008ffa:	6123      	str	r3, [r4, #16]
 8008ffc:	dc02      	bgt.n	8009004 <_printf_float+0x150>
 8008ffe:	6822      	ldr	r2, [r4, #0]
 8009000:	07d2      	lsls	r2, r2, #31
 8009002:	d501      	bpl.n	8009008 <_printf_float+0x154>
 8009004:	3301      	adds	r3, #1
 8009006:	6123      	str	r3, [r4, #16]
 8009008:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0a2      	beq.n	8008f56 <_printf_float+0xa2>
 8009010:	232d      	movs	r3, #45	@ 0x2d
 8009012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009016:	e79e      	b.n	8008f56 <_printf_float+0xa2>
 8009018:	9a06      	ldr	r2, [sp, #24]
 800901a:	2a47      	cmp	r2, #71	@ 0x47
 800901c:	d1c2      	bne.n	8008fa4 <_printf_float+0xf0>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1c0      	bne.n	8008fa4 <_printf_float+0xf0>
 8009022:	2301      	movs	r3, #1
 8009024:	e7bd      	b.n	8008fa2 <_printf_float+0xee>
 8009026:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800902a:	d9db      	bls.n	8008fe4 <_printf_float+0x130>
 800902c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009030:	d118      	bne.n	8009064 <_printf_float+0x1b0>
 8009032:	2900      	cmp	r1, #0
 8009034:	6863      	ldr	r3, [r4, #4]
 8009036:	dd0b      	ble.n	8009050 <_printf_float+0x19c>
 8009038:	6121      	str	r1, [r4, #16]
 800903a:	b913      	cbnz	r3, 8009042 <_printf_float+0x18e>
 800903c:	6822      	ldr	r2, [r4, #0]
 800903e:	07d0      	lsls	r0, r2, #31
 8009040:	d502      	bpl.n	8009048 <_printf_float+0x194>
 8009042:	3301      	adds	r3, #1
 8009044:	440b      	add	r3, r1
 8009046:	6123      	str	r3, [r4, #16]
 8009048:	65a1      	str	r1, [r4, #88]	@ 0x58
 800904a:	f04f 0900 	mov.w	r9, #0
 800904e:	e7db      	b.n	8009008 <_printf_float+0x154>
 8009050:	b913      	cbnz	r3, 8009058 <_printf_float+0x1a4>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	07d2      	lsls	r2, r2, #31
 8009056:	d501      	bpl.n	800905c <_printf_float+0x1a8>
 8009058:	3302      	adds	r3, #2
 800905a:	e7f4      	b.n	8009046 <_printf_float+0x192>
 800905c:	2301      	movs	r3, #1
 800905e:	e7f2      	b.n	8009046 <_printf_float+0x192>
 8009060:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009066:	4299      	cmp	r1, r3
 8009068:	db05      	blt.n	8009076 <_printf_float+0x1c2>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	6121      	str	r1, [r4, #16]
 800906e:	07d8      	lsls	r0, r3, #31
 8009070:	d5ea      	bpl.n	8009048 <_printf_float+0x194>
 8009072:	1c4b      	adds	r3, r1, #1
 8009074:	e7e7      	b.n	8009046 <_printf_float+0x192>
 8009076:	2900      	cmp	r1, #0
 8009078:	bfd4      	ite	le
 800907a:	f1c1 0202 	rsble	r2, r1, #2
 800907e:	2201      	movgt	r2, #1
 8009080:	4413      	add	r3, r2
 8009082:	e7e0      	b.n	8009046 <_printf_float+0x192>
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	055a      	lsls	r2, r3, #21
 8009088:	d407      	bmi.n	800909a <_printf_float+0x1e6>
 800908a:	6923      	ldr	r3, [r4, #16]
 800908c:	4642      	mov	r2, r8
 800908e:	4631      	mov	r1, r6
 8009090:	4628      	mov	r0, r5
 8009092:	47b8      	blx	r7
 8009094:	3001      	adds	r0, #1
 8009096:	d12b      	bne.n	80090f0 <_printf_float+0x23c>
 8009098:	e767      	b.n	8008f6a <_printf_float+0xb6>
 800909a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800909e:	f240 80dd 	bls.w	800925c <_printf_float+0x3a8>
 80090a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090a6:	2200      	movs	r2, #0
 80090a8:	2300      	movs	r3, #0
 80090aa:	f7f7 fd35 	bl	8000b18 <__aeabi_dcmpeq>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d033      	beq.n	800911a <_printf_float+0x266>
 80090b2:	4a37      	ldr	r2, [pc, #220]	@ (8009190 <_printf_float+0x2dc>)
 80090b4:	2301      	movs	r3, #1
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	f43f af54 	beq.w	8008f6a <_printf_float+0xb6>
 80090c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80090c6:	4543      	cmp	r3, r8
 80090c8:	db02      	blt.n	80090d0 <_printf_float+0x21c>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	07d8      	lsls	r0, r3, #31
 80090ce:	d50f      	bpl.n	80090f0 <_printf_float+0x23c>
 80090d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090d4:	4631      	mov	r1, r6
 80090d6:	4628      	mov	r0, r5
 80090d8:	47b8      	blx	r7
 80090da:	3001      	adds	r0, #1
 80090dc:	f43f af45 	beq.w	8008f6a <_printf_float+0xb6>
 80090e0:	f04f 0900 	mov.w	r9, #0
 80090e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80090e8:	f104 0a1a 	add.w	sl, r4, #26
 80090ec:	45c8      	cmp	r8, r9
 80090ee:	dc09      	bgt.n	8009104 <_printf_float+0x250>
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	079b      	lsls	r3, r3, #30
 80090f4:	f100 8103 	bmi.w	80092fe <_printf_float+0x44a>
 80090f8:	68e0      	ldr	r0, [r4, #12]
 80090fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090fc:	4298      	cmp	r0, r3
 80090fe:	bfb8      	it	lt
 8009100:	4618      	movlt	r0, r3
 8009102:	e734      	b.n	8008f6e <_printf_float+0xba>
 8009104:	2301      	movs	r3, #1
 8009106:	4652      	mov	r2, sl
 8009108:	4631      	mov	r1, r6
 800910a:	4628      	mov	r0, r5
 800910c:	47b8      	blx	r7
 800910e:	3001      	adds	r0, #1
 8009110:	f43f af2b 	beq.w	8008f6a <_printf_float+0xb6>
 8009114:	f109 0901 	add.w	r9, r9, #1
 8009118:	e7e8      	b.n	80090ec <_printf_float+0x238>
 800911a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911c:	2b00      	cmp	r3, #0
 800911e:	dc39      	bgt.n	8009194 <_printf_float+0x2e0>
 8009120:	4a1b      	ldr	r2, [pc, #108]	@ (8009190 <_printf_float+0x2dc>)
 8009122:	2301      	movs	r3, #1
 8009124:	4631      	mov	r1, r6
 8009126:	4628      	mov	r0, r5
 8009128:	47b8      	blx	r7
 800912a:	3001      	adds	r0, #1
 800912c:	f43f af1d 	beq.w	8008f6a <_printf_float+0xb6>
 8009130:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009134:	ea59 0303 	orrs.w	r3, r9, r3
 8009138:	d102      	bne.n	8009140 <_printf_float+0x28c>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	07d9      	lsls	r1, r3, #31
 800913e:	d5d7      	bpl.n	80090f0 <_printf_float+0x23c>
 8009140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009144:	4631      	mov	r1, r6
 8009146:	4628      	mov	r0, r5
 8009148:	47b8      	blx	r7
 800914a:	3001      	adds	r0, #1
 800914c:	f43f af0d 	beq.w	8008f6a <_printf_float+0xb6>
 8009150:	f04f 0a00 	mov.w	sl, #0
 8009154:	f104 0b1a 	add.w	fp, r4, #26
 8009158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800915a:	425b      	negs	r3, r3
 800915c:	4553      	cmp	r3, sl
 800915e:	dc01      	bgt.n	8009164 <_printf_float+0x2b0>
 8009160:	464b      	mov	r3, r9
 8009162:	e793      	b.n	800908c <_printf_float+0x1d8>
 8009164:	2301      	movs	r3, #1
 8009166:	465a      	mov	r2, fp
 8009168:	4631      	mov	r1, r6
 800916a:	4628      	mov	r0, r5
 800916c:	47b8      	blx	r7
 800916e:	3001      	adds	r0, #1
 8009170:	f43f aefb 	beq.w	8008f6a <_printf_float+0xb6>
 8009174:	f10a 0a01 	add.w	sl, sl, #1
 8009178:	e7ee      	b.n	8009158 <_printf_float+0x2a4>
 800917a:	bf00      	nop
 800917c:	7fefffff 	.word	0x7fefffff
 8009180:	0800b969 	.word	0x0800b969
 8009184:	0800b965 	.word	0x0800b965
 8009188:	0800b971 	.word	0x0800b971
 800918c:	0800b96d 	.word	0x0800b96d
 8009190:	0800b975 	.word	0x0800b975
 8009194:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009196:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800919a:	4553      	cmp	r3, sl
 800919c:	bfa8      	it	ge
 800919e:	4653      	movge	r3, sl
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	4699      	mov	r9, r3
 80091a4:	dc36      	bgt.n	8009214 <_printf_float+0x360>
 80091a6:	f04f 0b00 	mov.w	fp, #0
 80091aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ae:	f104 021a 	add.w	r2, r4, #26
 80091b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091b4:	9306      	str	r3, [sp, #24]
 80091b6:	eba3 0309 	sub.w	r3, r3, r9
 80091ba:	455b      	cmp	r3, fp
 80091bc:	dc31      	bgt.n	8009222 <_printf_float+0x36e>
 80091be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c0:	459a      	cmp	sl, r3
 80091c2:	dc3a      	bgt.n	800923a <_printf_float+0x386>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	07da      	lsls	r2, r3, #31
 80091c8:	d437      	bmi.n	800923a <_printf_float+0x386>
 80091ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091cc:	ebaa 0903 	sub.w	r9, sl, r3
 80091d0:	9b06      	ldr	r3, [sp, #24]
 80091d2:	ebaa 0303 	sub.w	r3, sl, r3
 80091d6:	4599      	cmp	r9, r3
 80091d8:	bfa8      	it	ge
 80091da:	4699      	movge	r9, r3
 80091dc:	f1b9 0f00 	cmp.w	r9, #0
 80091e0:	dc33      	bgt.n	800924a <_printf_float+0x396>
 80091e2:	f04f 0800 	mov.w	r8, #0
 80091e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ea:	f104 0b1a 	add.w	fp, r4, #26
 80091ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f0:	ebaa 0303 	sub.w	r3, sl, r3
 80091f4:	eba3 0309 	sub.w	r3, r3, r9
 80091f8:	4543      	cmp	r3, r8
 80091fa:	f77f af79 	ble.w	80090f0 <_printf_float+0x23c>
 80091fe:	2301      	movs	r3, #1
 8009200:	465a      	mov	r2, fp
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	47b8      	blx	r7
 8009208:	3001      	adds	r0, #1
 800920a:	f43f aeae 	beq.w	8008f6a <_printf_float+0xb6>
 800920e:	f108 0801 	add.w	r8, r8, #1
 8009212:	e7ec      	b.n	80091ee <_printf_float+0x33a>
 8009214:	4642      	mov	r2, r8
 8009216:	4631      	mov	r1, r6
 8009218:	4628      	mov	r0, r5
 800921a:	47b8      	blx	r7
 800921c:	3001      	adds	r0, #1
 800921e:	d1c2      	bne.n	80091a6 <_printf_float+0x2f2>
 8009220:	e6a3      	b.n	8008f6a <_printf_float+0xb6>
 8009222:	2301      	movs	r3, #1
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	9206      	str	r2, [sp, #24]
 800922a:	47b8      	blx	r7
 800922c:	3001      	adds	r0, #1
 800922e:	f43f ae9c 	beq.w	8008f6a <_printf_float+0xb6>
 8009232:	9a06      	ldr	r2, [sp, #24]
 8009234:	f10b 0b01 	add.w	fp, fp, #1
 8009238:	e7bb      	b.n	80091b2 <_printf_float+0x2fe>
 800923a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800923e:	4631      	mov	r1, r6
 8009240:	4628      	mov	r0, r5
 8009242:	47b8      	blx	r7
 8009244:	3001      	adds	r0, #1
 8009246:	d1c0      	bne.n	80091ca <_printf_float+0x316>
 8009248:	e68f      	b.n	8008f6a <_printf_float+0xb6>
 800924a:	9a06      	ldr	r2, [sp, #24]
 800924c:	464b      	mov	r3, r9
 800924e:	4442      	add	r2, r8
 8009250:	4631      	mov	r1, r6
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	d1c3      	bne.n	80091e2 <_printf_float+0x32e>
 800925a:	e686      	b.n	8008f6a <_printf_float+0xb6>
 800925c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009260:	f1ba 0f01 	cmp.w	sl, #1
 8009264:	dc01      	bgt.n	800926a <_printf_float+0x3b6>
 8009266:	07db      	lsls	r3, r3, #31
 8009268:	d536      	bpl.n	80092d8 <_printf_float+0x424>
 800926a:	2301      	movs	r3, #1
 800926c:	4642      	mov	r2, r8
 800926e:	4631      	mov	r1, r6
 8009270:	4628      	mov	r0, r5
 8009272:	47b8      	blx	r7
 8009274:	3001      	adds	r0, #1
 8009276:	f43f ae78 	beq.w	8008f6a <_printf_float+0xb6>
 800927a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	47b8      	blx	r7
 8009284:	3001      	adds	r0, #1
 8009286:	f43f ae70 	beq.w	8008f6a <_printf_float+0xb6>
 800928a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800928e:	2200      	movs	r2, #0
 8009290:	2300      	movs	r3, #0
 8009292:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009296:	f7f7 fc3f 	bl	8000b18 <__aeabi_dcmpeq>
 800929a:	b9c0      	cbnz	r0, 80092ce <_printf_float+0x41a>
 800929c:	4653      	mov	r3, sl
 800929e:	f108 0201 	add.w	r2, r8, #1
 80092a2:	4631      	mov	r1, r6
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	d10c      	bne.n	80092c6 <_printf_float+0x412>
 80092ac:	e65d      	b.n	8008f6a <_printf_float+0xb6>
 80092ae:	2301      	movs	r3, #1
 80092b0:	465a      	mov	r2, fp
 80092b2:	4631      	mov	r1, r6
 80092b4:	4628      	mov	r0, r5
 80092b6:	47b8      	blx	r7
 80092b8:	3001      	adds	r0, #1
 80092ba:	f43f ae56 	beq.w	8008f6a <_printf_float+0xb6>
 80092be:	f108 0801 	add.w	r8, r8, #1
 80092c2:	45d0      	cmp	r8, sl
 80092c4:	dbf3      	blt.n	80092ae <_printf_float+0x3fa>
 80092c6:	464b      	mov	r3, r9
 80092c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80092cc:	e6df      	b.n	800908e <_printf_float+0x1da>
 80092ce:	f04f 0800 	mov.w	r8, #0
 80092d2:	f104 0b1a 	add.w	fp, r4, #26
 80092d6:	e7f4      	b.n	80092c2 <_printf_float+0x40e>
 80092d8:	2301      	movs	r3, #1
 80092da:	4642      	mov	r2, r8
 80092dc:	e7e1      	b.n	80092a2 <_printf_float+0x3ee>
 80092de:	2301      	movs	r3, #1
 80092e0:	464a      	mov	r2, r9
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f ae3e 	beq.w	8008f6a <_printf_float+0xb6>
 80092ee:	f108 0801 	add.w	r8, r8, #1
 80092f2:	68e3      	ldr	r3, [r4, #12]
 80092f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092f6:	1a5b      	subs	r3, r3, r1
 80092f8:	4543      	cmp	r3, r8
 80092fa:	dcf0      	bgt.n	80092de <_printf_float+0x42a>
 80092fc:	e6fc      	b.n	80090f8 <_printf_float+0x244>
 80092fe:	f04f 0800 	mov.w	r8, #0
 8009302:	f104 0919 	add.w	r9, r4, #25
 8009306:	e7f4      	b.n	80092f2 <_printf_float+0x43e>

08009308 <_printf_common>:
 8009308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800930c:	4616      	mov	r6, r2
 800930e:	4698      	mov	r8, r3
 8009310:	688a      	ldr	r2, [r1, #8]
 8009312:	690b      	ldr	r3, [r1, #16]
 8009314:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009318:	4293      	cmp	r3, r2
 800931a:	bfb8      	it	lt
 800931c:	4613      	movlt	r3, r2
 800931e:	6033      	str	r3, [r6, #0]
 8009320:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009324:	4607      	mov	r7, r0
 8009326:	460c      	mov	r4, r1
 8009328:	b10a      	cbz	r2, 800932e <_printf_common+0x26>
 800932a:	3301      	adds	r3, #1
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	0699      	lsls	r1, r3, #26
 8009332:	bf42      	ittt	mi
 8009334:	6833      	ldrmi	r3, [r6, #0]
 8009336:	3302      	addmi	r3, #2
 8009338:	6033      	strmi	r3, [r6, #0]
 800933a:	6825      	ldr	r5, [r4, #0]
 800933c:	f015 0506 	ands.w	r5, r5, #6
 8009340:	d106      	bne.n	8009350 <_printf_common+0x48>
 8009342:	f104 0a19 	add.w	sl, r4, #25
 8009346:	68e3      	ldr	r3, [r4, #12]
 8009348:	6832      	ldr	r2, [r6, #0]
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	42ab      	cmp	r3, r5
 800934e:	dc26      	bgt.n	800939e <_printf_common+0x96>
 8009350:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009354:	6822      	ldr	r2, [r4, #0]
 8009356:	3b00      	subs	r3, #0
 8009358:	bf18      	it	ne
 800935a:	2301      	movne	r3, #1
 800935c:	0692      	lsls	r2, r2, #26
 800935e:	d42b      	bmi.n	80093b8 <_printf_common+0xb0>
 8009360:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009364:	4641      	mov	r1, r8
 8009366:	4638      	mov	r0, r7
 8009368:	47c8      	blx	r9
 800936a:	3001      	adds	r0, #1
 800936c:	d01e      	beq.n	80093ac <_printf_common+0xa4>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	6922      	ldr	r2, [r4, #16]
 8009372:	f003 0306 	and.w	r3, r3, #6
 8009376:	2b04      	cmp	r3, #4
 8009378:	bf02      	ittt	eq
 800937a:	68e5      	ldreq	r5, [r4, #12]
 800937c:	6833      	ldreq	r3, [r6, #0]
 800937e:	1aed      	subeq	r5, r5, r3
 8009380:	68a3      	ldr	r3, [r4, #8]
 8009382:	bf0c      	ite	eq
 8009384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009388:	2500      	movne	r5, #0
 800938a:	4293      	cmp	r3, r2
 800938c:	bfc4      	itt	gt
 800938e:	1a9b      	subgt	r3, r3, r2
 8009390:	18ed      	addgt	r5, r5, r3
 8009392:	2600      	movs	r6, #0
 8009394:	341a      	adds	r4, #26
 8009396:	42b5      	cmp	r5, r6
 8009398:	d11a      	bne.n	80093d0 <_printf_common+0xc8>
 800939a:	2000      	movs	r0, #0
 800939c:	e008      	b.n	80093b0 <_printf_common+0xa8>
 800939e:	2301      	movs	r3, #1
 80093a0:	4652      	mov	r2, sl
 80093a2:	4641      	mov	r1, r8
 80093a4:	4638      	mov	r0, r7
 80093a6:	47c8      	blx	r9
 80093a8:	3001      	adds	r0, #1
 80093aa:	d103      	bne.n	80093b4 <_printf_common+0xac>
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b4:	3501      	adds	r5, #1
 80093b6:	e7c6      	b.n	8009346 <_printf_common+0x3e>
 80093b8:	18e1      	adds	r1, r4, r3
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	2030      	movs	r0, #48	@ 0x30
 80093be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093c2:	4422      	add	r2, r4
 80093c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093cc:	3302      	adds	r3, #2
 80093ce:	e7c7      	b.n	8009360 <_printf_common+0x58>
 80093d0:	2301      	movs	r3, #1
 80093d2:	4622      	mov	r2, r4
 80093d4:	4641      	mov	r1, r8
 80093d6:	4638      	mov	r0, r7
 80093d8:	47c8      	blx	r9
 80093da:	3001      	adds	r0, #1
 80093dc:	d0e6      	beq.n	80093ac <_printf_common+0xa4>
 80093de:	3601      	adds	r6, #1
 80093e0:	e7d9      	b.n	8009396 <_printf_common+0x8e>
	...

080093e4 <_printf_i>:
 80093e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	7e0f      	ldrb	r7, [r1, #24]
 80093ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093ec:	2f78      	cmp	r7, #120	@ 0x78
 80093ee:	4691      	mov	r9, r2
 80093f0:	4680      	mov	r8, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	469a      	mov	sl, r3
 80093f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093fa:	d807      	bhi.n	800940c <_printf_i+0x28>
 80093fc:	2f62      	cmp	r7, #98	@ 0x62
 80093fe:	d80a      	bhi.n	8009416 <_printf_i+0x32>
 8009400:	2f00      	cmp	r7, #0
 8009402:	f000 80d1 	beq.w	80095a8 <_printf_i+0x1c4>
 8009406:	2f58      	cmp	r7, #88	@ 0x58
 8009408:	f000 80b8 	beq.w	800957c <_printf_i+0x198>
 800940c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009414:	e03a      	b.n	800948c <_printf_i+0xa8>
 8009416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800941a:	2b15      	cmp	r3, #21
 800941c:	d8f6      	bhi.n	800940c <_printf_i+0x28>
 800941e:	a101      	add	r1, pc, #4	@ (adr r1, 8009424 <_printf_i+0x40>)
 8009420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009424:	0800947d 	.word	0x0800947d
 8009428:	08009491 	.word	0x08009491
 800942c:	0800940d 	.word	0x0800940d
 8009430:	0800940d 	.word	0x0800940d
 8009434:	0800940d 	.word	0x0800940d
 8009438:	0800940d 	.word	0x0800940d
 800943c:	08009491 	.word	0x08009491
 8009440:	0800940d 	.word	0x0800940d
 8009444:	0800940d 	.word	0x0800940d
 8009448:	0800940d 	.word	0x0800940d
 800944c:	0800940d 	.word	0x0800940d
 8009450:	0800958f 	.word	0x0800958f
 8009454:	080094bb 	.word	0x080094bb
 8009458:	08009549 	.word	0x08009549
 800945c:	0800940d 	.word	0x0800940d
 8009460:	0800940d 	.word	0x0800940d
 8009464:	080095b1 	.word	0x080095b1
 8009468:	0800940d 	.word	0x0800940d
 800946c:	080094bb 	.word	0x080094bb
 8009470:	0800940d 	.word	0x0800940d
 8009474:	0800940d 	.word	0x0800940d
 8009478:	08009551 	.word	0x08009551
 800947c:	6833      	ldr	r3, [r6, #0]
 800947e:	1d1a      	adds	r2, r3, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	6032      	str	r2, [r6, #0]
 8009484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800948c:	2301      	movs	r3, #1
 800948e:	e09c      	b.n	80095ca <_printf_i+0x1e6>
 8009490:	6833      	ldr	r3, [r6, #0]
 8009492:	6820      	ldr	r0, [r4, #0]
 8009494:	1d19      	adds	r1, r3, #4
 8009496:	6031      	str	r1, [r6, #0]
 8009498:	0606      	lsls	r6, r0, #24
 800949a:	d501      	bpl.n	80094a0 <_printf_i+0xbc>
 800949c:	681d      	ldr	r5, [r3, #0]
 800949e:	e003      	b.n	80094a8 <_printf_i+0xc4>
 80094a0:	0645      	lsls	r5, r0, #25
 80094a2:	d5fb      	bpl.n	800949c <_printf_i+0xb8>
 80094a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	da03      	bge.n	80094b4 <_printf_i+0xd0>
 80094ac:	232d      	movs	r3, #45	@ 0x2d
 80094ae:	426d      	negs	r5, r5
 80094b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094b4:	4858      	ldr	r0, [pc, #352]	@ (8009618 <_printf_i+0x234>)
 80094b6:	230a      	movs	r3, #10
 80094b8:	e011      	b.n	80094de <_printf_i+0xfa>
 80094ba:	6821      	ldr	r1, [r4, #0]
 80094bc:	6833      	ldr	r3, [r6, #0]
 80094be:	0608      	lsls	r0, r1, #24
 80094c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80094c4:	d402      	bmi.n	80094cc <_printf_i+0xe8>
 80094c6:	0649      	lsls	r1, r1, #25
 80094c8:	bf48      	it	mi
 80094ca:	b2ad      	uxthmi	r5, r5
 80094cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80094ce:	4852      	ldr	r0, [pc, #328]	@ (8009618 <_printf_i+0x234>)
 80094d0:	6033      	str	r3, [r6, #0]
 80094d2:	bf14      	ite	ne
 80094d4:	230a      	movne	r3, #10
 80094d6:	2308      	moveq	r3, #8
 80094d8:	2100      	movs	r1, #0
 80094da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094de:	6866      	ldr	r6, [r4, #4]
 80094e0:	60a6      	str	r6, [r4, #8]
 80094e2:	2e00      	cmp	r6, #0
 80094e4:	db05      	blt.n	80094f2 <_printf_i+0x10e>
 80094e6:	6821      	ldr	r1, [r4, #0]
 80094e8:	432e      	orrs	r6, r5
 80094ea:	f021 0104 	bic.w	r1, r1, #4
 80094ee:	6021      	str	r1, [r4, #0]
 80094f0:	d04b      	beq.n	800958a <_printf_i+0x1a6>
 80094f2:	4616      	mov	r6, r2
 80094f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80094f8:	fb03 5711 	mls	r7, r3, r1, r5
 80094fc:	5dc7      	ldrb	r7, [r0, r7]
 80094fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009502:	462f      	mov	r7, r5
 8009504:	42bb      	cmp	r3, r7
 8009506:	460d      	mov	r5, r1
 8009508:	d9f4      	bls.n	80094f4 <_printf_i+0x110>
 800950a:	2b08      	cmp	r3, #8
 800950c:	d10b      	bne.n	8009526 <_printf_i+0x142>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	07df      	lsls	r7, r3, #31
 8009512:	d508      	bpl.n	8009526 <_printf_i+0x142>
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	6861      	ldr	r1, [r4, #4]
 8009518:	4299      	cmp	r1, r3
 800951a:	bfde      	ittt	le
 800951c:	2330      	movle	r3, #48	@ 0x30
 800951e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009522:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009526:	1b92      	subs	r2, r2, r6
 8009528:	6122      	str	r2, [r4, #16]
 800952a:	f8cd a000 	str.w	sl, [sp]
 800952e:	464b      	mov	r3, r9
 8009530:	aa03      	add	r2, sp, #12
 8009532:	4621      	mov	r1, r4
 8009534:	4640      	mov	r0, r8
 8009536:	f7ff fee7 	bl	8009308 <_printf_common>
 800953a:	3001      	adds	r0, #1
 800953c:	d14a      	bne.n	80095d4 <_printf_i+0x1f0>
 800953e:	f04f 30ff 	mov.w	r0, #4294967295
 8009542:	b004      	add	sp, #16
 8009544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	f043 0320 	orr.w	r3, r3, #32
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	4832      	ldr	r0, [pc, #200]	@ (800961c <_printf_i+0x238>)
 8009552:	2778      	movs	r7, #120	@ 0x78
 8009554:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	6831      	ldr	r1, [r6, #0]
 800955c:	061f      	lsls	r7, r3, #24
 800955e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009562:	d402      	bmi.n	800956a <_printf_i+0x186>
 8009564:	065f      	lsls	r7, r3, #25
 8009566:	bf48      	it	mi
 8009568:	b2ad      	uxthmi	r5, r5
 800956a:	6031      	str	r1, [r6, #0]
 800956c:	07d9      	lsls	r1, r3, #31
 800956e:	bf44      	itt	mi
 8009570:	f043 0320 	orrmi.w	r3, r3, #32
 8009574:	6023      	strmi	r3, [r4, #0]
 8009576:	b11d      	cbz	r5, 8009580 <_printf_i+0x19c>
 8009578:	2310      	movs	r3, #16
 800957a:	e7ad      	b.n	80094d8 <_printf_i+0xf4>
 800957c:	4826      	ldr	r0, [pc, #152]	@ (8009618 <_printf_i+0x234>)
 800957e:	e7e9      	b.n	8009554 <_printf_i+0x170>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	f023 0320 	bic.w	r3, r3, #32
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	e7f6      	b.n	8009578 <_printf_i+0x194>
 800958a:	4616      	mov	r6, r2
 800958c:	e7bd      	b.n	800950a <_printf_i+0x126>
 800958e:	6833      	ldr	r3, [r6, #0]
 8009590:	6825      	ldr	r5, [r4, #0]
 8009592:	6961      	ldr	r1, [r4, #20]
 8009594:	1d18      	adds	r0, r3, #4
 8009596:	6030      	str	r0, [r6, #0]
 8009598:	062e      	lsls	r6, r5, #24
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	d501      	bpl.n	80095a2 <_printf_i+0x1be>
 800959e:	6019      	str	r1, [r3, #0]
 80095a0:	e002      	b.n	80095a8 <_printf_i+0x1c4>
 80095a2:	0668      	lsls	r0, r5, #25
 80095a4:	d5fb      	bpl.n	800959e <_printf_i+0x1ba>
 80095a6:	8019      	strh	r1, [r3, #0]
 80095a8:	2300      	movs	r3, #0
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	4616      	mov	r6, r2
 80095ae:	e7bc      	b.n	800952a <_printf_i+0x146>
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	1d1a      	adds	r2, r3, #4
 80095b4:	6032      	str	r2, [r6, #0]
 80095b6:	681e      	ldr	r6, [r3, #0]
 80095b8:	6862      	ldr	r2, [r4, #4]
 80095ba:	2100      	movs	r1, #0
 80095bc:	4630      	mov	r0, r6
 80095be:	f7f6 fe2f 	bl	8000220 <memchr>
 80095c2:	b108      	cbz	r0, 80095c8 <_printf_i+0x1e4>
 80095c4:	1b80      	subs	r0, r0, r6
 80095c6:	6060      	str	r0, [r4, #4]
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	6123      	str	r3, [r4, #16]
 80095cc:	2300      	movs	r3, #0
 80095ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095d2:	e7aa      	b.n	800952a <_printf_i+0x146>
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	4632      	mov	r2, r6
 80095d8:	4649      	mov	r1, r9
 80095da:	4640      	mov	r0, r8
 80095dc:	47d0      	blx	sl
 80095de:	3001      	adds	r0, #1
 80095e0:	d0ad      	beq.n	800953e <_printf_i+0x15a>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	079b      	lsls	r3, r3, #30
 80095e6:	d413      	bmi.n	8009610 <_printf_i+0x22c>
 80095e8:	68e0      	ldr	r0, [r4, #12]
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	4298      	cmp	r0, r3
 80095ee:	bfb8      	it	lt
 80095f0:	4618      	movlt	r0, r3
 80095f2:	e7a6      	b.n	8009542 <_printf_i+0x15e>
 80095f4:	2301      	movs	r3, #1
 80095f6:	4632      	mov	r2, r6
 80095f8:	4649      	mov	r1, r9
 80095fa:	4640      	mov	r0, r8
 80095fc:	47d0      	blx	sl
 80095fe:	3001      	adds	r0, #1
 8009600:	d09d      	beq.n	800953e <_printf_i+0x15a>
 8009602:	3501      	adds	r5, #1
 8009604:	68e3      	ldr	r3, [r4, #12]
 8009606:	9903      	ldr	r1, [sp, #12]
 8009608:	1a5b      	subs	r3, r3, r1
 800960a:	42ab      	cmp	r3, r5
 800960c:	dcf2      	bgt.n	80095f4 <_printf_i+0x210>
 800960e:	e7eb      	b.n	80095e8 <_printf_i+0x204>
 8009610:	2500      	movs	r5, #0
 8009612:	f104 0619 	add.w	r6, r4, #25
 8009616:	e7f5      	b.n	8009604 <_printf_i+0x220>
 8009618:	0800b977 	.word	0x0800b977
 800961c:	0800b988 	.word	0x0800b988

08009620 <std>:
 8009620:	2300      	movs	r3, #0
 8009622:	b510      	push	{r4, lr}
 8009624:	4604      	mov	r4, r0
 8009626:	e9c0 3300 	strd	r3, r3, [r0]
 800962a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800962e:	6083      	str	r3, [r0, #8]
 8009630:	8181      	strh	r1, [r0, #12]
 8009632:	6643      	str	r3, [r0, #100]	@ 0x64
 8009634:	81c2      	strh	r2, [r0, #14]
 8009636:	6183      	str	r3, [r0, #24]
 8009638:	4619      	mov	r1, r3
 800963a:	2208      	movs	r2, #8
 800963c:	305c      	adds	r0, #92	@ 0x5c
 800963e:	f000 f9f9 	bl	8009a34 <memset>
 8009642:	4b0d      	ldr	r3, [pc, #52]	@ (8009678 <std+0x58>)
 8009644:	6263      	str	r3, [r4, #36]	@ 0x24
 8009646:	4b0d      	ldr	r3, [pc, #52]	@ (800967c <std+0x5c>)
 8009648:	62a3      	str	r3, [r4, #40]	@ 0x28
 800964a:	4b0d      	ldr	r3, [pc, #52]	@ (8009680 <std+0x60>)
 800964c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800964e:	4b0d      	ldr	r3, [pc, #52]	@ (8009684 <std+0x64>)
 8009650:	6323      	str	r3, [r4, #48]	@ 0x30
 8009652:	4b0d      	ldr	r3, [pc, #52]	@ (8009688 <std+0x68>)
 8009654:	6224      	str	r4, [r4, #32]
 8009656:	429c      	cmp	r4, r3
 8009658:	d006      	beq.n	8009668 <std+0x48>
 800965a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800965e:	4294      	cmp	r4, r2
 8009660:	d002      	beq.n	8009668 <std+0x48>
 8009662:	33d0      	adds	r3, #208	@ 0xd0
 8009664:	429c      	cmp	r4, r3
 8009666:	d105      	bne.n	8009674 <std+0x54>
 8009668:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800966c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009670:	f000 ba6c 	b.w	8009b4c <__retarget_lock_init_recursive>
 8009674:	bd10      	pop	{r4, pc}
 8009676:	bf00      	nop
 8009678:	08009885 	.word	0x08009885
 800967c:	080098a7 	.word	0x080098a7
 8009680:	080098df 	.word	0x080098df
 8009684:	08009903 	.word	0x08009903
 8009688:	20000520 	.word	0x20000520

0800968c <stdio_exit_handler>:
 800968c:	4a02      	ldr	r2, [pc, #8]	@ (8009698 <stdio_exit_handler+0xc>)
 800968e:	4903      	ldr	r1, [pc, #12]	@ (800969c <stdio_exit_handler+0x10>)
 8009690:	4803      	ldr	r0, [pc, #12]	@ (80096a0 <stdio_exit_handler+0x14>)
 8009692:	f000 b869 	b.w	8009768 <_fwalk_sglue>
 8009696:	bf00      	nop
 8009698:	2000004c 	.word	0x2000004c
 800969c:	0800b31d 	.word	0x0800b31d
 80096a0:	2000005c 	.word	0x2000005c

080096a4 <cleanup_stdio>:
 80096a4:	6841      	ldr	r1, [r0, #4]
 80096a6:	4b0c      	ldr	r3, [pc, #48]	@ (80096d8 <cleanup_stdio+0x34>)
 80096a8:	4299      	cmp	r1, r3
 80096aa:	b510      	push	{r4, lr}
 80096ac:	4604      	mov	r4, r0
 80096ae:	d001      	beq.n	80096b4 <cleanup_stdio+0x10>
 80096b0:	f001 fe34 	bl	800b31c <_fflush_r>
 80096b4:	68a1      	ldr	r1, [r4, #8]
 80096b6:	4b09      	ldr	r3, [pc, #36]	@ (80096dc <cleanup_stdio+0x38>)
 80096b8:	4299      	cmp	r1, r3
 80096ba:	d002      	beq.n	80096c2 <cleanup_stdio+0x1e>
 80096bc:	4620      	mov	r0, r4
 80096be:	f001 fe2d 	bl	800b31c <_fflush_r>
 80096c2:	68e1      	ldr	r1, [r4, #12]
 80096c4:	4b06      	ldr	r3, [pc, #24]	@ (80096e0 <cleanup_stdio+0x3c>)
 80096c6:	4299      	cmp	r1, r3
 80096c8:	d004      	beq.n	80096d4 <cleanup_stdio+0x30>
 80096ca:	4620      	mov	r0, r4
 80096cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096d0:	f001 be24 	b.w	800b31c <_fflush_r>
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	bf00      	nop
 80096d8:	20000520 	.word	0x20000520
 80096dc:	20000588 	.word	0x20000588
 80096e0:	200005f0 	.word	0x200005f0

080096e4 <global_stdio_init.part.0>:
 80096e4:	b510      	push	{r4, lr}
 80096e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009714 <global_stdio_init.part.0+0x30>)
 80096e8:	4c0b      	ldr	r4, [pc, #44]	@ (8009718 <global_stdio_init.part.0+0x34>)
 80096ea:	4a0c      	ldr	r2, [pc, #48]	@ (800971c <global_stdio_init.part.0+0x38>)
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	4620      	mov	r0, r4
 80096f0:	2200      	movs	r2, #0
 80096f2:	2104      	movs	r1, #4
 80096f4:	f7ff ff94 	bl	8009620 <std>
 80096f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80096fc:	2201      	movs	r2, #1
 80096fe:	2109      	movs	r1, #9
 8009700:	f7ff ff8e 	bl	8009620 <std>
 8009704:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009708:	2202      	movs	r2, #2
 800970a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800970e:	2112      	movs	r1, #18
 8009710:	f7ff bf86 	b.w	8009620 <std>
 8009714:	20000658 	.word	0x20000658
 8009718:	20000520 	.word	0x20000520
 800971c:	0800968d 	.word	0x0800968d

08009720 <__sfp_lock_acquire>:
 8009720:	4801      	ldr	r0, [pc, #4]	@ (8009728 <__sfp_lock_acquire+0x8>)
 8009722:	f000 ba14 	b.w	8009b4e <__retarget_lock_acquire_recursive>
 8009726:	bf00      	nop
 8009728:	20000661 	.word	0x20000661

0800972c <__sfp_lock_release>:
 800972c:	4801      	ldr	r0, [pc, #4]	@ (8009734 <__sfp_lock_release+0x8>)
 800972e:	f000 ba0f 	b.w	8009b50 <__retarget_lock_release_recursive>
 8009732:	bf00      	nop
 8009734:	20000661 	.word	0x20000661

08009738 <__sinit>:
 8009738:	b510      	push	{r4, lr}
 800973a:	4604      	mov	r4, r0
 800973c:	f7ff fff0 	bl	8009720 <__sfp_lock_acquire>
 8009740:	6a23      	ldr	r3, [r4, #32]
 8009742:	b11b      	cbz	r3, 800974c <__sinit+0x14>
 8009744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009748:	f7ff bff0 	b.w	800972c <__sfp_lock_release>
 800974c:	4b04      	ldr	r3, [pc, #16]	@ (8009760 <__sinit+0x28>)
 800974e:	6223      	str	r3, [r4, #32]
 8009750:	4b04      	ldr	r3, [pc, #16]	@ (8009764 <__sinit+0x2c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1f5      	bne.n	8009744 <__sinit+0xc>
 8009758:	f7ff ffc4 	bl	80096e4 <global_stdio_init.part.0>
 800975c:	e7f2      	b.n	8009744 <__sinit+0xc>
 800975e:	bf00      	nop
 8009760:	080096a5 	.word	0x080096a5
 8009764:	20000658 	.word	0x20000658

08009768 <_fwalk_sglue>:
 8009768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800976c:	4607      	mov	r7, r0
 800976e:	4688      	mov	r8, r1
 8009770:	4614      	mov	r4, r2
 8009772:	2600      	movs	r6, #0
 8009774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009778:	f1b9 0901 	subs.w	r9, r9, #1
 800977c:	d505      	bpl.n	800978a <_fwalk_sglue+0x22>
 800977e:	6824      	ldr	r4, [r4, #0]
 8009780:	2c00      	cmp	r4, #0
 8009782:	d1f7      	bne.n	8009774 <_fwalk_sglue+0xc>
 8009784:	4630      	mov	r0, r6
 8009786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d907      	bls.n	80097a0 <_fwalk_sglue+0x38>
 8009790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009794:	3301      	adds	r3, #1
 8009796:	d003      	beq.n	80097a0 <_fwalk_sglue+0x38>
 8009798:	4629      	mov	r1, r5
 800979a:	4638      	mov	r0, r7
 800979c:	47c0      	blx	r8
 800979e:	4306      	orrs	r6, r0
 80097a0:	3568      	adds	r5, #104	@ 0x68
 80097a2:	e7e9      	b.n	8009778 <_fwalk_sglue+0x10>

080097a4 <iprintf>:
 80097a4:	b40f      	push	{r0, r1, r2, r3}
 80097a6:	b507      	push	{r0, r1, r2, lr}
 80097a8:	4906      	ldr	r1, [pc, #24]	@ (80097c4 <iprintf+0x20>)
 80097aa:	ab04      	add	r3, sp, #16
 80097ac:	6808      	ldr	r0, [r1, #0]
 80097ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b2:	6881      	ldr	r1, [r0, #8]
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	f001 fc15 	bl	800afe4 <_vfiprintf_r>
 80097ba:	b003      	add	sp, #12
 80097bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80097c0:	b004      	add	sp, #16
 80097c2:	4770      	bx	lr
 80097c4:	20000058 	.word	0x20000058

080097c8 <_puts_r>:
 80097c8:	6a03      	ldr	r3, [r0, #32]
 80097ca:	b570      	push	{r4, r5, r6, lr}
 80097cc:	6884      	ldr	r4, [r0, #8]
 80097ce:	4605      	mov	r5, r0
 80097d0:	460e      	mov	r6, r1
 80097d2:	b90b      	cbnz	r3, 80097d8 <_puts_r+0x10>
 80097d4:	f7ff ffb0 	bl	8009738 <__sinit>
 80097d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097da:	07db      	lsls	r3, r3, #31
 80097dc:	d405      	bmi.n	80097ea <_puts_r+0x22>
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	0598      	lsls	r0, r3, #22
 80097e2:	d402      	bmi.n	80097ea <_puts_r+0x22>
 80097e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097e6:	f000 f9b2 	bl	8009b4e <__retarget_lock_acquire_recursive>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	0719      	lsls	r1, r3, #28
 80097ee:	d502      	bpl.n	80097f6 <_puts_r+0x2e>
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d135      	bne.n	8009862 <_puts_r+0x9a>
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 f8c5 	bl	8009988 <__swsetup_r>
 80097fe:	b380      	cbz	r0, 8009862 <_puts_r+0x9a>
 8009800:	f04f 35ff 	mov.w	r5, #4294967295
 8009804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009806:	07da      	lsls	r2, r3, #31
 8009808:	d405      	bmi.n	8009816 <_puts_r+0x4e>
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	059b      	lsls	r3, r3, #22
 800980e:	d402      	bmi.n	8009816 <_puts_r+0x4e>
 8009810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009812:	f000 f99d 	bl	8009b50 <__retarget_lock_release_recursive>
 8009816:	4628      	mov	r0, r5
 8009818:	bd70      	pop	{r4, r5, r6, pc}
 800981a:	2b00      	cmp	r3, #0
 800981c:	da04      	bge.n	8009828 <_puts_r+0x60>
 800981e:	69a2      	ldr	r2, [r4, #24]
 8009820:	429a      	cmp	r2, r3
 8009822:	dc17      	bgt.n	8009854 <_puts_r+0x8c>
 8009824:	290a      	cmp	r1, #10
 8009826:	d015      	beq.n	8009854 <_puts_r+0x8c>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	6022      	str	r2, [r4, #0]
 800982e:	7019      	strb	r1, [r3, #0]
 8009830:	68a3      	ldr	r3, [r4, #8]
 8009832:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009836:	3b01      	subs	r3, #1
 8009838:	60a3      	str	r3, [r4, #8]
 800983a:	2900      	cmp	r1, #0
 800983c:	d1ed      	bne.n	800981a <_puts_r+0x52>
 800983e:	2b00      	cmp	r3, #0
 8009840:	da11      	bge.n	8009866 <_puts_r+0x9e>
 8009842:	4622      	mov	r2, r4
 8009844:	210a      	movs	r1, #10
 8009846:	4628      	mov	r0, r5
 8009848:	f000 f85f 	bl	800990a <__swbuf_r>
 800984c:	3001      	adds	r0, #1
 800984e:	d0d7      	beq.n	8009800 <_puts_r+0x38>
 8009850:	250a      	movs	r5, #10
 8009852:	e7d7      	b.n	8009804 <_puts_r+0x3c>
 8009854:	4622      	mov	r2, r4
 8009856:	4628      	mov	r0, r5
 8009858:	f000 f857 	bl	800990a <__swbuf_r>
 800985c:	3001      	adds	r0, #1
 800985e:	d1e7      	bne.n	8009830 <_puts_r+0x68>
 8009860:	e7ce      	b.n	8009800 <_puts_r+0x38>
 8009862:	3e01      	subs	r6, #1
 8009864:	e7e4      	b.n	8009830 <_puts_r+0x68>
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	6022      	str	r2, [r4, #0]
 800986c:	220a      	movs	r2, #10
 800986e:	701a      	strb	r2, [r3, #0]
 8009870:	e7ee      	b.n	8009850 <_puts_r+0x88>
	...

08009874 <puts>:
 8009874:	4b02      	ldr	r3, [pc, #8]	@ (8009880 <puts+0xc>)
 8009876:	4601      	mov	r1, r0
 8009878:	6818      	ldr	r0, [r3, #0]
 800987a:	f7ff bfa5 	b.w	80097c8 <_puts_r>
 800987e:	bf00      	nop
 8009880:	20000058 	.word	0x20000058

08009884 <__sread>:
 8009884:	b510      	push	{r4, lr}
 8009886:	460c      	mov	r4, r1
 8009888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800988c:	f000 f900 	bl	8009a90 <_read_r>
 8009890:	2800      	cmp	r0, #0
 8009892:	bfab      	itete	ge
 8009894:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009896:	89a3      	ldrhlt	r3, [r4, #12]
 8009898:	181b      	addge	r3, r3, r0
 800989a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800989e:	bfac      	ite	ge
 80098a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80098a2:	81a3      	strhlt	r3, [r4, #12]
 80098a4:	bd10      	pop	{r4, pc}

080098a6 <__swrite>:
 80098a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098aa:	461f      	mov	r7, r3
 80098ac:	898b      	ldrh	r3, [r1, #12]
 80098ae:	05db      	lsls	r3, r3, #23
 80098b0:	4605      	mov	r5, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	4616      	mov	r6, r2
 80098b6:	d505      	bpl.n	80098c4 <__swrite+0x1e>
 80098b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098bc:	2302      	movs	r3, #2
 80098be:	2200      	movs	r2, #0
 80098c0:	f000 f8d4 	bl	8009a6c <_lseek_r>
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098ce:	81a3      	strh	r3, [r4, #12]
 80098d0:	4632      	mov	r2, r6
 80098d2:	463b      	mov	r3, r7
 80098d4:	4628      	mov	r0, r5
 80098d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098da:	f000 b8fb 	b.w	8009ad4 <_write_r>

080098de <__sseek>:
 80098de:	b510      	push	{r4, lr}
 80098e0:	460c      	mov	r4, r1
 80098e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e6:	f000 f8c1 	bl	8009a6c <_lseek_r>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	bf15      	itete	ne
 80098f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80098f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80098f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80098fa:	81a3      	strheq	r3, [r4, #12]
 80098fc:	bf18      	it	ne
 80098fe:	81a3      	strhne	r3, [r4, #12]
 8009900:	bd10      	pop	{r4, pc}

08009902 <__sclose>:
 8009902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009906:	f000 b8a1 	b.w	8009a4c <_close_r>

0800990a <__swbuf_r>:
 800990a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990c:	460e      	mov	r6, r1
 800990e:	4614      	mov	r4, r2
 8009910:	4605      	mov	r5, r0
 8009912:	b118      	cbz	r0, 800991c <__swbuf_r+0x12>
 8009914:	6a03      	ldr	r3, [r0, #32]
 8009916:	b90b      	cbnz	r3, 800991c <__swbuf_r+0x12>
 8009918:	f7ff ff0e 	bl	8009738 <__sinit>
 800991c:	69a3      	ldr	r3, [r4, #24]
 800991e:	60a3      	str	r3, [r4, #8]
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	071a      	lsls	r2, r3, #28
 8009924:	d501      	bpl.n	800992a <__swbuf_r+0x20>
 8009926:	6923      	ldr	r3, [r4, #16]
 8009928:	b943      	cbnz	r3, 800993c <__swbuf_r+0x32>
 800992a:	4621      	mov	r1, r4
 800992c:	4628      	mov	r0, r5
 800992e:	f000 f82b 	bl	8009988 <__swsetup_r>
 8009932:	b118      	cbz	r0, 800993c <__swbuf_r+0x32>
 8009934:	f04f 37ff 	mov.w	r7, #4294967295
 8009938:	4638      	mov	r0, r7
 800993a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	6922      	ldr	r2, [r4, #16]
 8009940:	1a98      	subs	r0, r3, r2
 8009942:	6963      	ldr	r3, [r4, #20]
 8009944:	b2f6      	uxtb	r6, r6
 8009946:	4283      	cmp	r3, r0
 8009948:	4637      	mov	r7, r6
 800994a:	dc05      	bgt.n	8009958 <__swbuf_r+0x4e>
 800994c:	4621      	mov	r1, r4
 800994e:	4628      	mov	r0, r5
 8009950:	f001 fce4 	bl	800b31c <_fflush_r>
 8009954:	2800      	cmp	r0, #0
 8009956:	d1ed      	bne.n	8009934 <__swbuf_r+0x2a>
 8009958:	68a3      	ldr	r3, [r4, #8]
 800995a:	3b01      	subs	r3, #1
 800995c:	60a3      	str	r3, [r4, #8]
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	6022      	str	r2, [r4, #0]
 8009964:	701e      	strb	r6, [r3, #0]
 8009966:	6962      	ldr	r2, [r4, #20]
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	429a      	cmp	r2, r3
 800996c:	d004      	beq.n	8009978 <__swbuf_r+0x6e>
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	07db      	lsls	r3, r3, #31
 8009972:	d5e1      	bpl.n	8009938 <__swbuf_r+0x2e>
 8009974:	2e0a      	cmp	r6, #10
 8009976:	d1df      	bne.n	8009938 <__swbuf_r+0x2e>
 8009978:	4621      	mov	r1, r4
 800997a:	4628      	mov	r0, r5
 800997c:	f001 fcce 	bl	800b31c <_fflush_r>
 8009980:	2800      	cmp	r0, #0
 8009982:	d0d9      	beq.n	8009938 <__swbuf_r+0x2e>
 8009984:	e7d6      	b.n	8009934 <__swbuf_r+0x2a>
	...

08009988 <__swsetup_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4b29      	ldr	r3, [pc, #164]	@ (8009a30 <__swsetup_r+0xa8>)
 800998c:	4605      	mov	r5, r0
 800998e:	6818      	ldr	r0, [r3, #0]
 8009990:	460c      	mov	r4, r1
 8009992:	b118      	cbz	r0, 800999c <__swsetup_r+0x14>
 8009994:	6a03      	ldr	r3, [r0, #32]
 8009996:	b90b      	cbnz	r3, 800999c <__swsetup_r+0x14>
 8009998:	f7ff fece 	bl	8009738 <__sinit>
 800999c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a0:	0719      	lsls	r1, r3, #28
 80099a2:	d422      	bmi.n	80099ea <__swsetup_r+0x62>
 80099a4:	06da      	lsls	r2, r3, #27
 80099a6:	d407      	bmi.n	80099b8 <__swsetup_r+0x30>
 80099a8:	2209      	movs	r2, #9
 80099aa:	602a      	str	r2, [r5, #0]
 80099ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295
 80099b6:	e033      	b.n	8009a20 <__swsetup_r+0x98>
 80099b8:	0758      	lsls	r0, r3, #29
 80099ba:	d512      	bpl.n	80099e2 <__swsetup_r+0x5a>
 80099bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099be:	b141      	cbz	r1, 80099d2 <__swsetup_r+0x4a>
 80099c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099c4:	4299      	cmp	r1, r3
 80099c6:	d002      	beq.n	80099ce <__swsetup_r+0x46>
 80099c8:	4628      	mov	r0, r5
 80099ca:	f000 ff1d 	bl	800a808 <_free_r>
 80099ce:	2300      	movs	r3, #0
 80099d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	2300      	movs	r3, #0
 80099dc:	6063      	str	r3, [r4, #4]
 80099de:	6923      	ldr	r3, [r4, #16]
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	f043 0308 	orr.w	r3, r3, #8
 80099e8:	81a3      	strh	r3, [r4, #12]
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	b94b      	cbnz	r3, 8009a02 <__swsetup_r+0x7a>
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80099f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099f8:	d003      	beq.n	8009a02 <__swsetup_r+0x7a>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f001 fcdb 	bl	800b3b8 <__smakebuf_r>
 8009a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a06:	f013 0201 	ands.w	r2, r3, #1
 8009a0a:	d00a      	beq.n	8009a22 <__swsetup_r+0x9a>
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	60a2      	str	r2, [r4, #8]
 8009a10:	6962      	ldr	r2, [r4, #20]
 8009a12:	4252      	negs	r2, r2
 8009a14:	61a2      	str	r2, [r4, #24]
 8009a16:	6922      	ldr	r2, [r4, #16]
 8009a18:	b942      	cbnz	r2, 8009a2c <__swsetup_r+0xa4>
 8009a1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a1e:	d1c5      	bne.n	80099ac <__swsetup_r+0x24>
 8009a20:	bd38      	pop	{r3, r4, r5, pc}
 8009a22:	0799      	lsls	r1, r3, #30
 8009a24:	bf58      	it	pl
 8009a26:	6962      	ldrpl	r2, [r4, #20]
 8009a28:	60a2      	str	r2, [r4, #8]
 8009a2a:	e7f4      	b.n	8009a16 <__swsetup_r+0x8e>
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	e7f7      	b.n	8009a20 <__swsetup_r+0x98>
 8009a30:	20000058 	.word	0x20000058

08009a34 <memset>:
 8009a34:	4402      	add	r2, r0
 8009a36:	4603      	mov	r3, r0
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d100      	bne.n	8009a3e <memset+0xa>
 8009a3c:	4770      	bx	lr
 8009a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a42:	e7f9      	b.n	8009a38 <memset+0x4>

08009a44 <_localeconv_r>:
 8009a44:	4800      	ldr	r0, [pc, #0]	@ (8009a48 <_localeconv_r+0x4>)
 8009a46:	4770      	bx	lr
 8009a48:	20000198 	.word	0x20000198

08009a4c <_close_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4d06      	ldr	r5, [pc, #24]	@ (8009a68 <_close_r+0x1c>)
 8009a50:	2300      	movs	r3, #0
 8009a52:	4604      	mov	r4, r0
 8009a54:	4608      	mov	r0, r1
 8009a56:	602b      	str	r3, [r5, #0]
 8009a58:	f7f8 fc1b 	bl	8002292 <_close>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	d102      	bne.n	8009a66 <_close_r+0x1a>
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	b103      	cbz	r3, 8009a66 <_close_r+0x1a>
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	2000065c 	.word	0x2000065c

08009a6c <_lseek_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4d07      	ldr	r5, [pc, #28]	@ (8009a8c <_lseek_r+0x20>)
 8009a70:	4604      	mov	r4, r0
 8009a72:	4608      	mov	r0, r1
 8009a74:	4611      	mov	r1, r2
 8009a76:	2200      	movs	r2, #0
 8009a78:	602a      	str	r2, [r5, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f7f8 fc30 	bl	80022e0 <_lseek>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_lseek_r+0x1e>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_lseek_r+0x1e>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	2000065c 	.word	0x2000065c

08009a90 <_read_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d07      	ldr	r5, [pc, #28]	@ (8009ab0 <_read_r+0x20>)
 8009a94:	4604      	mov	r4, r0
 8009a96:	4608      	mov	r0, r1
 8009a98:	4611      	mov	r1, r2
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	602a      	str	r2, [r5, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f7f8 fbbe 	bl	8002220 <_read>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_read_r+0x1e>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_read_r+0x1e>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	2000065c 	.word	0x2000065c

08009ab4 <_sbrk_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d06      	ldr	r5, [pc, #24]	@ (8009ad0 <_sbrk_r+0x1c>)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	602b      	str	r3, [r5, #0]
 8009ac0:	f7f8 fc1c 	bl	80022fc <_sbrk>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_sbrk_r+0x1a>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_sbrk_r+0x1a>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	2000065c 	.word	0x2000065c

08009ad4 <_write_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d07      	ldr	r5, [pc, #28]	@ (8009af4 <_write_r+0x20>)
 8009ad8:	4604      	mov	r4, r0
 8009ada:	4608      	mov	r0, r1
 8009adc:	4611      	mov	r1, r2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	602a      	str	r2, [r5, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7f8 fbb9 	bl	800225a <_write>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_write_r+0x1e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_write_r+0x1e>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	2000065c 	.word	0x2000065c

08009af8 <__errno>:
 8009af8:	4b01      	ldr	r3, [pc, #4]	@ (8009b00 <__errno+0x8>)
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	20000058 	.word	0x20000058

08009b04 <__libc_init_array>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	4d0d      	ldr	r5, [pc, #52]	@ (8009b3c <__libc_init_array+0x38>)
 8009b08:	4c0d      	ldr	r4, [pc, #52]	@ (8009b40 <__libc_init_array+0x3c>)
 8009b0a:	1b64      	subs	r4, r4, r5
 8009b0c:	10a4      	asrs	r4, r4, #2
 8009b0e:	2600      	movs	r6, #0
 8009b10:	42a6      	cmp	r6, r4
 8009b12:	d109      	bne.n	8009b28 <__libc_init_array+0x24>
 8009b14:	4d0b      	ldr	r5, [pc, #44]	@ (8009b44 <__libc_init_array+0x40>)
 8009b16:	4c0c      	ldr	r4, [pc, #48]	@ (8009b48 <__libc_init_array+0x44>)
 8009b18:	f001 fd6a 	bl	800b5f0 <_init>
 8009b1c:	1b64      	subs	r4, r4, r5
 8009b1e:	10a4      	asrs	r4, r4, #2
 8009b20:	2600      	movs	r6, #0
 8009b22:	42a6      	cmp	r6, r4
 8009b24:	d105      	bne.n	8009b32 <__libc_init_array+0x2e>
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b2c:	4798      	blx	r3
 8009b2e:	3601      	adds	r6, #1
 8009b30:	e7ee      	b.n	8009b10 <__libc_init_array+0xc>
 8009b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b36:	4798      	blx	r3
 8009b38:	3601      	adds	r6, #1
 8009b3a:	e7f2      	b.n	8009b22 <__libc_init_array+0x1e>
 8009b3c:	0800bbe0 	.word	0x0800bbe0
 8009b40:	0800bbe0 	.word	0x0800bbe0
 8009b44:	0800bbe0 	.word	0x0800bbe0
 8009b48:	0800bbe4 	.word	0x0800bbe4

08009b4c <__retarget_lock_init_recursive>:
 8009b4c:	4770      	bx	lr

08009b4e <__retarget_lock_acquire_recursive>:
 8009b4e:	4770      	bx	lr

08009b50 <__retarget_lock_release_recursive>:
 8009b50:	4770      	bx	lr

08009b52 <quorem>:
 8009b52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b56:	6903      	ldr	r3, [r0, #16]
 8009b58:	690c      	ldr	r4, [r1, #16]
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	db7e      	blt.n	8009c5e <quorem+0x10c>
 8009b60:	3c01      	subs	r4, #1
 8009b62:	f101 0814 	add.w	r8, r1, #20
 8009b66:	00a3      	lsls	r3, r4, #2
 8009b68:	f100 0514 	add.w	r5, r0, #20
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b84:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b88:	d32e      	bcc.n	8009be8 <quorem+0x96>
 8009b8a:	f04f 0a00 	mov.w	sl, #0
 8009b8e:	46c4      	mov	ip, r8
 8009b90:	46ae      	mov	lr, r5
 8009b92:	46d3      	mov	fp, sl
 8009b94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b98:	b298      	uxth	r0, r3
 8009b9a:	fb06 a000 	mla	r0, r6, r0, sl
 8009b9e:	0c02      	lsrs	r2, r0, #16
 8009ba0:	0c1b      	lsrs	r3, r3, #16
 8009ba2:	fb06 2303 	mla	r3, r6, r3, r2
 8009ba6:	f8de 2000 	ldr.w	r2, [lr]
 8009baa:	b280      	uxth	r0, r0
 8009bac:	b292      	uxth	r2, r2
 8009bae:	1a12      	subs	r2, r2, r0
 8009bb0:	445a      	add	r2, fp
 8009bb2:	f8de 0000 	ldr.w	r0, [lr]
 8009bb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009bc0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009bc4:	b292      	uxth	r2, r2
 8009bc6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009bca:	45e1      	cmp	r9, ip
 8009bcc:	f84e 2b04 	str.w	r2, [lr], #4
 8009bd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009bd4:	d2de      	bcs.n	8009b94 <quorem+0x42>
 8009bd6:	9b00      	ldr	r3, [sp, #0]
 8009bd8:	58eb      	ldr	r3, [r5, r3]
 8009bda:	b92b      	cbnz	r3, 8009be8 <quorem+0x96>
 8009bdc:	9b01      	ldr	r3, [sp, #4]
 8009bde:	3b04      	subs	r3, #4
 8009be0:	429d      	cmp	r5, r3
 8009be2:	461a      	mov	r2, r3
 8009be4:	d32f      	bcc.n	8009c46 <quorem+0xf4>
 8009be6:	613c      	str	r4, [r7, #16]
 8009be8:	4638      	mov	r0, r7
 8009bea:	f001 f8c9 	bl	800ad80 <__mcmp>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	db25      	blt.n	8009c3e <quorem+0xec>
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bfa:	f8d1 c000 	ldr.w	ip, [r1]
 8009bfe:	fa1f fe82 	uxth.w	lr, r2
 8009c02:	fa1f f38c 	uxth.w	r3, ip
 8009c06:	eba3 030e 	sub.w	r3, r3, lr
 8009c0a:	4403      	add	r3, r0
 8009c0c:	0c12      	lsrs	r2, r2, #16
 8009c0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c1c:	45c1      	cmp	r9, r8
 8009c1e:	f841 3b04 	str.w	r3, [r1], #4
 8009c22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c26:	d2e6      	bcs.n	8009bf6 <quorem+0xa4>
 8009c28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c30:	b922      	cbnz	r2, 8009c3c <quorem+0xea>
 8009c32:	3b04      	subs	r3, #4
 8009c34:	429d      	cmp	r5, r3
 8009c36:	461a      	mov	r2, r3
 8009c38:	d30b      	bcc.n	8009c52 <quorem+0x100>
 8009c3a:	613c      	str	r4, [r7, #16]
 8009c3c:	3601      	adds	r6, #1
 8009c3e:	4630      	mov	r0, r6
 8009c40:	b003      	add	sp, #12
 8009c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c46:	6812      	ldr	r2, [r2, #0]
 8009c48:	3b04      	subs	r3, #4
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	d1cb      	bne.n	8009be6 <quorem+0x94>
 8009c4e:	3c01      	subs	r4, #1
 8009c50:	e7c6      	b.n	8009be0 <quorem+0x8e>
 8009c52:	6812      	ldr	r2, [r2, #0]
 8009c54:	3b04      	subs	r3, #4
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	d1ef      	bne.n	8009c3a <quorem+0xe8>
 8009c5a:	3c01      	subs	r4, #1
 8009c5c:	e7ea      	b.n	8009c34 <quorem+0xe2>
 8009c5e:	2000      	movs	r0, #0
 8009c60:	e7ee      	b.n	8009c40 <quorem+0xee>
 8009c62:	0000      	movs	r0, r0
 8009c64:	0000      	movs	r0, r0
	...

08009c68 <_dtoa_r>:
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	69c7      	ldr	r7, [r0, #28]
 8009c6e:	b097      	sub	sp, #92	@ 0x5c
 8009c70:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009c74:	ec55 4b10 	vmov	r4, r5, d0
 8009c78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009c7a:	9107      	str	r1, [sp, #28]
 8009c7c:	4681      	mov	r9, r0
 8009c7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c80:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c82:	b97f      	cbnz	r7, 8009ca4 <_dtoa_r+0x3c>
 8009c84:	2010      	movs	r0, #16
 8009c86:	f7fe ff33 	bl	8008af0 <malloc>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009c90:	b920      	cbnz	r0, 8009c9c <_dtoa_r+0x34>
 8009c92:	4ba9      	ldr	r3, [pc, #676]	@ (8009f38 <_dtoa_r+0x2d0>)
 8009c94:	21ef      	movs	r1, #239	@ 0xef
 8009c96:	48a9      	ldr	r0, [pc, #676]	@ (8009f3c <_dtoa_r+0x2d4>)
 8009c98:	f001 fbfa 	bl	800b490 <__assert_func>
 8009c9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009ca0:	6007      	str	r7, [r0, #0]
 8009ca2:	60c7      	str	r7, [r0, #12]
 8009ca4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ca8:	6819      	ldr	r1, [r3, #0]
 8009caa:	b159      	cbz	r1, 8009cc4 <_dtoa_r+0x5c>
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	604a      	str	r2, [r1, #4]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4093      	lsls	r3, r2
 8009cb4:	608b      	str	r3, [r1, #8]
 8009cb6:	4648      	mov	r0, r9
 8009cb8:	f000 fe30 	bl	800a91c <_Bfree>
 8009cbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	1e2b      	subs	r3, r5, #0
 8009cc6:	bfb9      	ittee	lt
 8009cc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009ccc:	9305      	strlt	r3, [sp, #20]
 8009cce:	2300      	movge	r3, #0
 8009cd0:	6033      	strge	r3, [r6, #0]
 8009cd2:	9f05      	ldr	r7, [sp, #20]
 8009cd4:	4b9a      	ldr	r3, [pc, #616]	@ (8009f40 <_dtoa_r+0x2d8>)
 8009cd6:	bfbc      	itt	lt
 8009cd8:	2201      	movlt	r2, #1
 8009cda:	6032      	strlt	r2, [r6, #0]
 8009cdc:	43bb      	bics	r3, r7
 8009cde:	d112      	bne.n	8009d06 <_dtoa_r+0x9e>
 8009ce0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009ce2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cec:	4323      	orrs	r3, r4
 8009cee:	f000 855a 	beq.w	800a7a6 <_dtoa_r+0xb3e>
 8009cf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009cf4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009f54 <_dtoa_r+0x2ec>
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 855c 	beq.w	800a7b6 <_dtoa_r+0xb4e>
 8009cfe:	f10a 0303 	add.w	r3, sl, #3
 8009d02:	f000 bd56 	b.w	800a7b2 <_dtoa_r+0xb4a>
 8009d06:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	ec51 0b17 	vmov	r0, r1, d7
 8009d10:	2300      	movs	r3, #0
 8009d12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009d16:	f7f6 feff 	bl	8000b18 <__aeabi_dcmpeq>
 8009d1a:	4680      	mov	r8, r0
 8009d1c:	b158      	cbz	r0, 8009d36 <_dtoa_r+0xce>
 8009d1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d20:	2301      	movs	r3, #1
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d26:	b113      	cbz	r3, 8009d2e <_dtoa_r+0xc6>
 8009d28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009d2a:	4b86      	ldr	r3, [pc, #536]	@ (8009f44 <_dtoa_r+0x2dc>)
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009f58 <_dtoa_r+0x2f0>
 8009d32:	f000 bd40 	b.w	800a7b6 <_dtoa_r+0xb4e>
 8009d36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009d3a:	aa14      	add	r2, sp, #80	@ 0x50
 8009d3c:	a915      	add	r1, sp, #84	@ 0x54
 8009d3e:	4648      	mov	r0, r9
 8009d40:	f001 f8ce 	bl	800aee0 <__d2b>
 8009d44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009d48:	9002      	str	r0, [sp, #8]
 8009d4a:	2e00      	cmp	r6, #0
 8009d4c:	d078      	beq.n	8009e40 <_dtoa_r+0x1d8>
 8009d4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009d5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d68:	4619      	mov	r1, r3
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	4b76      	ldr	r3, [pc, #472]	@ (8009f48 <_dtoa_r+0x2e0>)
 8009d6e:	f7f6 fab3 	bl	80002d8 <__aeabi_dsub>
 8009d72:	a36b      	add	r3, pc, #428	@ (adr r3, 8009f20 <_dtoa_r+0x2b8>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f7f6 fc66 	bl	8000648 <__aeabi_dmul>
 8009d7c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009f28 <_dtoa_r+0x2c0>)
 8009d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d82:	f7f6 faab 	bl	80002dc <__adddf3>
 8009d86:	4604      	mov	r4, r0
 8009d88:	4630      	mov	r0, r6
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	f7f6 fbf2 	bl	8000574 <__aeabi_i2d>
 8009d90:	a367      	add	r3, pc, #412	@ (adr r3, 8009f30 <_dtoa_r+0x2c8>)
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	f7f6 fc57 	bl	8000648 <__aeabi_dmul>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7f6 fa9b 	bl	80002dc <__adddf3>
 8009da6:	4604      	mov	r4, r0
 8009da8:	460d      	mov	r5, r1
 8009daa:	f7f6 fefd 	bl	8000ba8 <__aeabi_d2iz>
 8009dae:	2200      	movs	r2, #0
 8009db0:	4607      	mov	r7, r0
 8009db2:	2300      	movs	r3, #0
 8009db4:	4620      	mov	r0, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 feb8 	bl	8000b2c <__aeabi_dcmplt>
 8009dbc:	b140      	cbz	r0, 8009dd0 <_dtoa_r+0x168>
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	f7f6 fbd8 	bl	8000574 <__aeabi_i2d>
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	f7f6 fea6 	bl	8000b18 <__aeabi_dcmpeq>
 8009dcc:	b900      	cbnz	r0, 8009dd0 <_dtoa_r+0x168>
 8009dce:	3f01      	subs	r7, #1
 8009dd0:	2f16      	cmp	r7, #22
 8009dd2:	d852      	bhi.n	8009e7a <_dtoa_r+0x212>
 8009dd4:	4b5d      	ldr	r3, [pc, #372]	@ (8009f4c <_dtoa_r+0x2e4>)
 8009dd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009de2:	f7f6 fea3 	bl	8000b2c <__aeabi_dcmplt>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d049      	beq.n	8009e7e <_dtoa_r+0x216>
 8009dea:	3f01      	subs	r7, #1
 8009dec:	2300      	movs	r3, #0
 8009dee:	9310      	str	r3, [sp, #64]	@ 0x40
 8009df0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009df2:	1b9b      	subs	r3, r3, r6
 8009df4:	1e5a      	subs	r2, r3, #1
 8009df6:	bf45      	ittet	mi
 8009df8:	f1c3 0301 	rsbmi	r3, r3, #1
 8009dfc:	9300      	strmi	r3, [sp, #0]
 8009dfe:	2300      	movpl	r3, #0
 8009e00:	2300      	movmi	r3, #0
 8009e02:	9206      	str	r2, [sp, #24]
 8009e04:	bf54      	ite	pl
 8009e06:	9300      	strpl	r3, [sp, #0]
 8009e08:	9306      	strmi	r3, [sp, #24]
 8009e0a:	2f00      	cmp	r7, #0
 8009e0c:	db39      	blt.n	8009e82 <_dtoa_r+0x21a>
 8009e0e:	9b06      	ldr	r3, [sp, #24]
 8009e10:	970d      	str	r7, [sp, #52]	@ 0x34
 8009e12:	443b      	add	r3, r7
 8009e14:	9306      	str	r3, [sp, #24]
 8009e16:	2300      	movs	r3, #0
 8009e18:	9308      	str	r3, [sp, #32]
 8009e1a:	9b07      	ldr	r3, [sp, #28]
 8009e1c:	2b09      	cmp	r3, #9
 8009e1e:	d863      	bhi.n	8009ee8 <_dtoa_r+0x280>
 8009e20:	2b05      	cmp	r3, #5
 8009e22:	bfc4      	itt	gt
 8009e24:	3b04      	subgt	r3, #4
 8009e26:	9307      	strgt	r3, [sp, #28]
 8009e28:	9b07      	ldr	r3, [sp, #28]
 8009e2a:	f1a3 0302 	sub.w	r3, r3, #2
 8009e2e:	bfcc      	ite	gt
 8009e30:	2400      	movgt	r4, #0
 8009e32:	2401      	movle	r4, #1
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	d863      	bhi.n	8009f00 <_dtoa_r+0x298>
 8009e38:	e8df f003 	tbb	[pc, r3]
 8009e3c:	2b375452 	.word	0x2b375452
 8009e40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009e44:	441e      	add	r6, r3
 8009e46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e4a:	2b20      	cmp	r3, #32
 8009e4c:	bfc1      	itttt	gt
 8009e4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e52:	409f      	lslgt	r7, r3
 8009e54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e58:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e5c:	bfd6      	itet	le
 8009e5e:	f1c3 0320 	rsble	r3, r3, #32
 8009e62:	ea47 0003 	orrgt.w	r0, r7, r3
 8009e66:	fa04 f003 	lslle.w	r0, r4, r3
 8009e6a:	f7f6 fb73 	bl	8000554 <__aeabi_ui2d>
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e74:	3e01      	subs	r6, #1
 8009e76:	9212      	str	r2, [sp, #72]	@ 0x48
 8009e78:	e776      	b.n	8009d68 <_dtoa_r+0x100>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e7b7      	b.n	8009dee <_dtoa_r+0x186>
 8009e7e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009e80:	e7b6      	b.n	8009df0 <_dtoa_r+0x188>
 8009e82:	9b00      	ldr	r3, [sp, #0]
 8009e84:	1bdb      	subs	r3, r3, r7
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	427b      	negs	r3, r7
 8009e8a:	9308      	str	r3, [sp, #32]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e90:	e7c3      	b.n	8009e1a <_dtoa_r+0x1b2>
 8009e92:	2301      	movs	r3, #1
 8009e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e98:	eb07 0b03 	add.w	fp, r7, r3
 8009e9c:	f10b 0301 	add.w	r3, fp, #1
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	9303      	str	r3, [sp, #12]
 8009ea4:	bfb8      	it	lt
 8009ea6:	2301      	movlt	r3, #1
 8009ea8:	e006      	b.n	8009eb8 <_dtoa_r+0x250>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dd28      	ble.n	8009f06 <_dtoa_r+0x29e>
 8009eb4:	469b      	mov	fp, r3
 8009eb6:	9303      	str	r3, [sp, #12]
 8009eb8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	f102 0514 	add.w	r5, r2, #20
 8009ec4:	429d      	cmp	r5, r3
 8009ec6:	d926      	bls.n	8009f16 <_dtoa_r+0x2ae>
 8009ec8:	6041      	str	r1, [r0, #4]
 8009eca:	4648      	mov	r0, r9
 8009ecc:	f000 fce6 	bl	800a89c <_Balloc>
 8009ed0:	4682      	mov	sl, r0
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d142      	bne.n	8009f5c <_dtoa_r+0x2f4>
 8009ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8009f50 <_dtoa_r+0x2e8>)
 8009ed8:	4602      	mov	r2, r0
 8009eda:	f240 11af 	movw	r1, #431	@ 0x1af
 8009ede:	e6da      	b.n	8009c96 <_dtoa_r+0x2e>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	e7e3      	b.n	8009eac <_dtoa_r+0x244>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	e7d5      	b.n	8009e94 <_dtoa_r+0x22c>
 8009ee8:	2401      	movs	r4, #1
 8009eea:	2300      	movs	r3, #0
 8009eec:	9307      	str	r3, [sp, #28]
 8009eee:	9409      	str	r4, [sp, #36]	@ 0x24
 8009ef0:	f04f 3bff 	mov.w	fp, #4294967295
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f8cd b00c 	str.w	fp, [sp, #12]
 8009efa:	2312      	movs	r3, #18
 8009efc:	920c      	str	r2, [sp, #48]	@ 0x30
 8009efe:	e7db      	b.n	8009eb8 <_dtoa_r+0x250>
 8009f00:	2301      	movs	r3, #1
 8009f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f04:	e7f4      	b.n	8009ef0 <_dtoa_r+0x288>
 8009f06:	f04f 0b01 	mov.w	fp, #1
 8009f0a:	f8cd b00c 	str.w	fp, [sp, #12]
 8009f0e:	465b      	mov	r3, fp
 8009f10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009f14:	e7d0      	b.n	8009eb8 <_dtoa_r+0x250>
 8009f16:	3101      	adds	r1, #1
 8009f18:	0052      	lsls	r2, r2, #1
 8009f1a:	e7d1      	b.n	8009ec0 <_dtoa_r+0x258>
 8009f1c:	f3af 8000 	nop.w
 8009f20:	636f4361 	.word	0x636f4361
 8009f24:	3fd287a7 	.word	0x3fd287a7
 8009f28:	8b60c8b3 	.word	0x8b60c8b3
 8009f2c:	3fc68a28 	.word	0x3fc68a28
 8009f30:	509f79fb 	.word	0x509f79fb
 8009f34:	3fd34413 	.word	0x3fd34413
 8009f38:	0800b9a6 	.word	0x0800b9a6
 8009f3c:	0800b9bd 	.word	0x0800b9bd
 8009f40:	7ff00000 	.word	0x7ff00000
 8009f44:	0800b976 	.word	0x0800b976
 8009f48:	3ff80000 	.word	0x3ff80000
 8009f4c:	0800bb10 	.word	0x0800bb10
 8009f50:	0800ba15 	.word	0x0800ba15
 8009f54:	0800b9a2 	.word	0x0800b9a2
 8009f58:	0800b975 	.word	0x0800b975
 8009f5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f60:	6018      	str	r0, [r3, #0]
 8009f62:	9b03      	ldr	r3, [sp, #12]
 8009f64:	2b0e      	cmp	r3, #14
 8009f66:	f200 80a1 	bhi.w	800a0ac <_dtoa_r+0x444>
 8009f6a:	2c00      	cmp	r4, #0
 8009f6c:	f000 809e 	beq.w	800a0ac <_dtoa_r+0x444>
 8009f70:	2f00      	cmp	r7, #0
 8009f72:	dd33      	ble.n	8009fdc <_dtoa_r+0x374>
 8009f74:	4b9c      	ldr	r3, [pc, #624]	@ (800a1e8 <_dtoa_r+0x580>)
 8009f76:	f007 020f 	and.w	r2, r7, #15
 8009f7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f7e:	ed93 7b00 	vldr	d7, [r3]
 8009f82:	05f8      	lsls	r0, r7, #23
 8009f84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009f88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009f8c:	d516      	bpl.n	8009fbc <_dtoa_r+0x354>
 8009f8e:	4b97      	ldr	r3, [pc, #604]	@ (800a1ec <_dtoa_r+0x584>)
 8009f90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f98:	f7f6 fc80 	bl	800089c <__aeabi_ddiv>
 8009f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fa0:	f004 040f 	and.w	r4, r4, #15
 8009fa4:	2603      	movs	r6, #3
 8009fa6:	4d91      	ldr	r5, [pc, #580]	@ (800a1ec <_dtoa_r+0x584>)
 8009fa8:	b954      	cbnz	r4, 8009fc0 <_dtoa_r+0x358>
 8009faa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fb2:	f7f6 fc73 	bl	800089c <__aeabi_ddiv>
 8009fb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fba:	e028      	b.n	800a00e <_dtoa_r+0x3a6>
 8009fbc:	2602      	movs	r6, #2
 8009fbe:	e7f2      	b.n	8009fa6 <_dtoa_r+0x33e>
 8009fc0:	07e1      	lsls	r1, r4, #31
 8009fc2:	d508      	bpl.n	8009fd6 <_dtoa_r+0x36e>
 8009fc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009fc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fcc:	f7f6 fb3c 	bl	8000648 <__aeabi_dmul>
 8009fd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009fd4:	3601      	adds	r6, #1
 8009fd6:	1064      	asrs	r4, r4, #1
 8009fd8:	3508      	adds	r5, #8
 8009fda:	e7e5      	b.n	8009fa8 <_dtoa_r+0x340>
 8009fdc:	f000 80af 	beq.w	800a13e <_dtoa_r+0x4d6>
 8009fe0:	427c      	negs	r4, r7
 8009fe2:	4b81      	ldr	r3, [pc, #516]	@ (800a1e8 <_dtoa_r+0x580>)
 8009fe4:	4d81      	ldr	r5, [pc, #516]	@ (800a1ec <_dtoa_r+0x584>)
 8009fe6:	f004 020f 	and.w	r2, r4, #15
 8009fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009ff6:	f7f6 fb27 	bl	8000648 <__aeabi_dmul>
 8009ffa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ffe:	1124      	asrs	r4, r4, #4
 800a000:	2300      	movs	r3, #0
 800a002:	2602      	movs	r6, #2
 800a004:	2c00      	cmp	r4, #0
 800a006:	f040 808f 	bne.w	800a128 <_dtoa_r+0x4c0>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1d3      	bne.n	8009fb6 <_dtoa_r+0x34e>
 800a00e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a010:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 8094 	beq.w	800a142 <_dtoa_r+0x4da>
 800a01a:	4b75      	ldr	r3, [pc, #468]	@ (800a1f0 <_dtoa_r+0x588>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	4620      	mov	r0, r4
 800a020:	4629      	mov	r1, r5
 800a022:	f7f6 fd83 	bl	8000b2c <__aeabi_dcmplt>
 800a026:	2800      	cmp	r0, #0
 800a028:	f000 808b 	beq.w	800a142 <_dtoa_r+0x4da>
 800a02c:	9b03      	ldr	r3, [sp, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 8087 	beq.w	800a142 <_dtoa_r+0x4da>
 800a034:	f1bb 0f00 	cmp.w	fp, #0
 800a038:	dd34      	ble.n	800a0a4 <_dtoa_r+0x43c>
 800a03a:	4620      	mov	r0, r4
 800a03c:	4b6d      	ldr	r3, [pc, #436]	@ (800a1f4 <_dtoa_r+0x58c>)
 800a03e:	2200      	movs	r2, #0
 800a040:	4629      	mov	r1, r5
 800a042:	f7f6 fb01 	bl	8000648 <__aeabi_dmul>
 800a046:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a04a:	f107 38ff 	add.w	r8, r7, #4294967295
 800a04e:	3601      	adds	r6, #1
 800a050:	465c      	mov	r4, fp
 800a052:	4630      	mov	r0, r6
 800a054:	f7f6 fa8e 	bl	8000574 <__aeabi_i2d>
 800a058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a05c:	f7f6 faf4 	bl	8000648 <__aeabi_dmul>
 800a060:	4b65      	ldr	r3, [pc, #404]	@ (800a1f8 <_dtoa_r+0x590>)
 800a062:	2200      	movs	r2, #0
 800a064:	f7f6 f93a 	bl	80002dc <__adddf3>
 800a068:	4605      	mov	r5, r0
 800a06a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a06e:	2c00      	cmp	r4, #0
 800a070:	d16a      	bne.n	800a148 <_dtoa_r+0x4e0>
 800a072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a076:	4b61      	ldr	r3, [pc, #388]	@ (800a1fc <_dtoa_r+0x594>)
 800a078:	2200      	movs	r2, #0
 800a07a:	f7f6 f92d 	bl	80002d8 <__aeabi_dsub>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a086:	462a      	mov	r2, r5
 800a088:	4633      	mov	r3, r6
 800a08a:	f7f6 fd6d 	bl	8000b68 <__aeabi_dcmpgt>
 800a08e:	2800      	cmp	r0, #0
 800a090:	f040 8298 	bne.w	800a5c4 <_dtoa_r+0x95c>
 800a094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a098:	462a      	mov	r2, r5
 800a09a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a09e:	f7f6 fd45 	bl	8000b2c <__aeabi_dcmplt>
 800a0a2:	bb38      	cbnz	r0, 800a0f4 <_dtoa_r+0x48c>
 800a0a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a0a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a0ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f2c0 8157 	blt.w	800a362 <_dtoa_r+0x6fa>
 800a0b4:	2f0e      	cmp	r7, #14
 800a0b6:	f300 8154 	bgt.w	800a362 <_dtoa_r+0x6fa>
 800a0ba:	4b4b      	ldr	r3, [pc, #300]	@ (800a1e8 <_dtoa_r+0x580>)
 800a0bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0c0:	ed93 7b00 	vldr	d7, [r3]
 800a0c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	ed8d 7b00 	vstr	d7, [sp]
 800a0cc:	f280 80e5 	bge.w	800a29a <_dtoa_r+0x632>
 800a0d0:	9b03      	ldr	r3, [sp, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f300 80e1 	bgt.w	800a29a <_dtoa_r+0x632>
 800a0d8:	d10c      	bne.n	800a0f4 <_dtoa_r+0x48c>
 800a0da:	4b48      	ldr	r3, [pc, #288]	@ (800a1fc <_dtoa_r+0x594>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	ec51 0b17 	vmov	r0, r1, d7
 800a0e2:	f7f6 fab1 	bl	8000648 <__aeabi_dmul>
 800a0e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ea:	f7f6 fd33 	bl	8000b54 <__aeabi_dcmpge>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f000 8266 	beq.w	800a5c0 <_dtoa_r+0x958>
 800a0f4:	2400      	movs	r4, #0
 800a0f6:	4625      	mov	r5, r4
 800a0f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0fa:	4656      	mov	r6, sl
 800a0fc:	ea6f 0803 	mvn.w	r8, r3
 800a100:	2700      	movs	r7, #0
 800a102:	4621      	mov	r1, r4
 800a104:	4648      	mov	r0, r9
 800a106:	f000 fc09 	bl	800a91c <_Bfree>
 800a10a:	2d00      	cmp	r5, #0
 800a10c:	f000 80bd 	beq.w	800a28a <_dtoa_r+0x622>
 800a110:	b12f      	cbz	r7, 800a11e <_dtoa_r+0x4b6>
 800a112:	42af      	cmp	r7, r5
 800a114:	d003      	beq.n	800a11e <_dtoa_r+0x4b6>
 800a116:	4639      	mov	r1, r7
 800a118:	4648      	mov	r0, r9
 800a11a:	f000 fbff 	bl	800a91c <_Bfree>
 800a11e:	4629      	mov	r1, r5
 800a120:	4648      	mov	r0, r9
 800a122:	f000 fbfb 	bl	800a91c <_Bfree>
 800a126:	e0b0      	b.n	800a28a <_dtoa_r+0x622>
 800a128:	07e2      	lsls	r2, r4, #31
 800a12a:	d505      	bpl.n	800a138 <_dtoa_r+0x4d0>
 800a12c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a130:	f7f6 fa8a 	bl	8000648 <__aeabi_dmul>
 800a134:	3601      	adds	r6, #1
 800a136:	2301      	movs	r3, #1
 800a138:	1064      	asrs	r4, r4, #1
 800a13a:	3508      	adds	r5, #8
 800a13c:	e762      	b.n	800a004 <_dtoa_r+0x39c>
 800a13e:	2602      	movs	r6, #2
 800a140:	e765      	b.n	800a00e <_dtoa_r+0x3a6>
 800a142:	9c03      	ldr	r4, [sp, #12]
 800a144:	46b8      	mov	r8, r7
 800a146:	e784      	b.n	800a052 <_dtoa_r+0x3ea>
 800a148:	4b27      	ldr	r3, [pc, #156]	@ (800a1e8 <_dtoa_r+0x580>)
 800a14a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a14c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a150:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a154:	4454      	add	r4, sl
 800a156:	2900      	cmp	r1, #0
 800a158:	d054      	beq.n	800a204 <_dtoa_r+0x59c>
 800a15a:	4929      	ldr	r1, [pc, #164]	@ (800a200 <_dtoa_r+0x598>)
 800a15c:	2000      	movs	r0, #0
 800a15e:	f7f6 fb9d 	bl	800089c <__aeabi_ddiv>
 800a162:	4633      	mov	r3, r6
 800a164:	462a      	mov	r2, r5
 800a166:	f7f6 f8b7 	bl	80002d8 <__aeabi_dsub>
 800a16a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a16e:	4656      	mov	r6, sl
 800a170:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a174:	f7f6 fd18 	bl	8000ba8 <__aeabi_d2iz>
 800a178:	4605      	mov	r5, r0
 800a17a:	f7f6 f9fb 	bl	8000574 <__aeabi_i2d>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a186:	f7f6 f8a7 	bl	80002d8 <__aeabi_dsub>
 800a18a:	3530      	adds	r5, #48	@ 0x30
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a194:	f806 5b01 	strb.w	r5, [r6], #1
 800a198:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a19c:	f7f6 fcc6 	bl	8000b2c <__aeabi_dcmplt>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d172      	bne.n	800a28a <_dtoa_r+0x622>
 800a1a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a8:	4911      	ldr	r1, [pc, #68]	@ (800a1f0 <_dtoa_r+0x588>)
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	f7f6 f894 	bl	80002d8 <__aeabi_dsub>
 800a1b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a1b4:	f7f6 fcba 	bl	8000b2c <__aeabi_dcmplt>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	f040 80b4 	bne.w	800a326 <_dtoa_r+0x6be>
 800a1be:	42a6      	cmp	r6, r4
 800a1c0:	f43f af70 	beq.w	800a0a4 <_dtoa_r+0x43c>
 800a1c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a1c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a1f4 <_dtoa_r+0x58c>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f7f6 fa3c 	bl	8000648 <__aeabi_dmul>
 800a1d0:	4b08      	ldr	r3, [pc, #32]	@ (800a1f4 <_dtoa_r+0x58c>)
 800a1d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1dc:	f7f6 fa34 	bl	8000648 <__aeabi_dmul>
 800a1e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1e4:	e7c4      	b.n	800a170 <_dtoa_r+0x508>
 800a1e6:	bf00      	nop
 800a1e8:	0800bb10 	.word	0x0800bb10
 800a1ec:	0800bae8 	.word	0x0800bae8
 800a1f0:	3ff00000 	.word	0x3ff00000
 800a1f4:	40240000 	.word	0x40240000
 800a1f8:	401c0000 	.word	0x401c0000
 800a1fc:	40140000 	.word	0x40140000
 800a200:	3fe00000 	.word	0x3fe00000
 800a204:	4631      	mov	r1, r6
 800a206:	4628      	mov	r0, r5
 800a208:	f7f6 fa1e 	bl	8000648 <__aeabi_dmul>
 800a20c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a210:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a212:	4656      	mov	r6, sl
 800a214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a218:	f7f6 fcc6 	bl	8000ba8 <__aeabi_d2iz>
 800a21c:	4605      	mov	r5, r0
 800a21e:	f7f6 f9a9 	bl	8000574 <__aeabi_i2d>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a22a:	f7f6 f855 	bl	80002d8 <__aeabi_dsub>
 800a22e:	3530      	adds	r5, #48	@ 0x30
 800a230:	f806 5b01 	strb.w	r5, [r6], #1
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	42a6      	cmp	r6, r4
 800a23a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a23e:	f04f 0200 	mov.w	r2, #0
 800a242:	d124      	bne.n	800a28e <_dtoa_r+0x626>
 800a244:	4baf      	ldr	r3, [pc, #700]	@ (800a504 <_dtoa_r+0x89c>)
 800a246:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a24a:	f7f6 f847 	bl	80002dc <__adddf3>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a256:	f7f6 fc87 	bl	8000b68 <__aeabi_dcmpgt>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d163      	bne.n	800a326 <_dtoa_r+0x6be>
 800a25e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a262:	49a8      	ldr	r1, [pc, #672]	@ (800a504 <_dtoa_r+0x89c>)
 800a264:	2000      	movs	r0, #0
 800a266:	f7f6 f837 	bl	80002d8 <__aeabi_dsub>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a272:	f7f6 fc5b 	bl	8000b2c <__aeabi_dcmplt>
 800a276:	2800      	cmp	r0, #0
 800a278:	f43f af14 	beq.w	800a0a4 <_dtoa_r+0x43c>
 800a27c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a27e:	1e73      	subs	r3, r6, #1
 800a280:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a282:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a286:	2b30      	cmp	r3, #48	@ 0x30
 800a288:	d0f8      	beq.n	800a27c <_dtoa_r+0x614>
 800a28a:	4647      	mov	r7, r8
 800a28c:	e03b      	b.n	800a306 <_dtoa_r+0x69e>
 800a28e:	4b9e      	ldr	r3, [pc, #632]	@ (800a508 <_dtoa_r+0x8a0>)
 800a290:	f7f6 f9da 	bl	8000648 <__aeabi_dmul>
 800a294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a298:	e7bc      	b.n	800a214 <_dtoa_r+0x5ac>
 800a29a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a29e:	4656      	mov	r6, sl
 800a2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	f7f6 faf8 	bl	800089c <__aeabi_ddiv>
 800a2ac:	f7f6 fc7c 	bl	8000ba8 <__aeabi_d2iz>
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	f7f6 f95f 	bl	8000574 <__aeabi_i2d>
 800a2b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ba:	f7f6 f9c5 	bl	8000648 <__aeabi_dmul>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a2ca:	f7f6 f805 	bl	80002d8 <__aeabi_dsub>
 800a2ce:	f806 4b01 	strb.w	r4, [r6], #1
 800a2d2:	9d03      	ldr	r5, [sp, #12]
 800a2d4:	eba6 040a 	sub.w	r4, r6, sl
 800a2d8:	42a5      	cmp	r5, r4
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	d133      	bne.n	800a348 <_dtoa_r+0x6e0>
 800a2e0:	f7f5 fffc 	bl	80002dc <__adddf3>
 800a2e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	f7f6 fc3c 	bl	8000b68 <__aeabi_dcmpgt>
 800a2f0:	b9c0      	cbnz	r0, 800a324 <_dtoa_r+0x6bc>
 800a2f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	f7f6 fc0d 	bl	8000b18 <__aeabi_dcmpeq>
 800a2fe:	b110      	cbz	r0, 800a306 <_dtoa_r+0x69e>
 800a300:	f018 0f01 	tst.w	r8, #1
 800a304:	d10e      	bne.n	800a324 <_dtoa_r+0x6bc>
 800a306:	9902      	ldr	r1, [sp, #8]
 800a308:	4648      	mov	r0, r9
 800a30a:	f000 fb07 	bl	800a91c <_Bfree>
 800a30e:	2300      	movs	r3, #0
 800a310:	7033      	strb	r3, [r6, #0]
 800a312:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a314:	3701      	adds	r7, #1
 800a316:	601f      	str	r7, [r3, #0]
 800a318:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f000 824b 	beq.w	800a7b6 <_dtoa_r+0xb4e>
 800a320:	601e      	str	r6, [r3, #0]
 800a322:	e248      	b.n	800a7b6 <_dtoa_r+0xb4e>
 800a324:	46b8      	mov	r8, r7
 800a326:	4633      	mov	r3, r6
 800a328:	461e      	mov	r6, r3
 800a32a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a32e:	2a39      	cmp	r2, #57	@ 0x39
 800a330:	d106      	bne.n	800a340 <_dtoa_r+0x6d8>
 800a332:	459a      	cmp	sl, r3
 800a334:	d1f8      	bne.n	800a328 <_dtoa_r+0x6c0>
 800a336:	2230      	movs	r2, #48	@ 0x30
 800a338:	f108 0801 	add.w	r8, r8, #1
 800a33c:	f88a 2000 	strb.w	r2, [sl]
 800a340:	781a      	ldrb	r2, [r3, #0]
 800a342:	3201      	adds	r2, #1
 800a344:	701a      	strb	r2, [r3, #0]
 800a346:	e7a0      	b.n	800a28a <_dtoa_r+0x622>
 800a348:	4b6f      	ldr	r3, [pc, #444]	@ (800a508 <_dtoa_r+0x8a0>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	f7f6 f97c 	bl	8000648 <__aeabi_dmul>
 800a350:	2200      	movs	r2, #0
 800a352:	2300      	movs	r3, #0
 800a354:	4604      	mov	r4, r0
 800a356:	460d      	mov	r5, r1
 800a358:	f7f6 fbde 	bl	8000b18 <__aeabi_dcmpeq>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d09f      	beq.n	800a2a0 <_dtoa_r+0x638>
 800a360:	e7d1      	b.n	800a306 <_dtoa_r+0x69e>
 800a362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a364:	2a00      	cmp	r2, #0
 800a366:	f000 80ea 	beq.w	800a53e <_dtoa_r+0x8d6>
 800a36a:	9a07      	ldr	r2, [sp, #28]
 800a36c:	2a01      	cmp	r2, #1
 800a36e:	f300 80cd 	bgt.w	800a50c <_dtoa_r+0x8a4>
 800a372:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a374:	2a00      	cmp	r2, #0
 800a376:	f000 80c1 	beq.w	800a4fc <_dtoa_r+0x894>
 800a37a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a37e:	9c08      	ldr	r4, [sp, #32]
 800a380:	9e00      	ldr	r6, [sp, #0]
 800a382:	9a00      	ldr	r2, [sp, #0]
 800a384:	441a      	add	r2, r3
 800a386:	9200      	str	r2, [sp, #0]
 800a388:	9a06      	ldr	r2, [sp, #24]
 800a38a:	2101      	movs	r1, #1
 800a38c:	441a      	add	r2, r3
 800a38e:	4648      	mov	r0, r9
 800a390:	9206      	str	r2, [sp, #24]
 800a392:	f000 fb77 	bl	800aa84 <__i2b>
 800a396:	4605      	mov	r5, r0
 800a398:	b166      	cbz	r6, 800a3b4 <_dtoa_r+0x74c>
 800a39a:	9b06      	ldr	r3, [sp, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	dd09      	ble.n	800a3b4 <_dtoa_r+0x74c>
 800a3a0:	42b3      	cmp	r3, r6
 800a3a2:	9a00      	ldr	r2, [sp, #0]
 800a3a4:	bfa8      	it	ge
 800a3a6:	4633      	movge	r3, r6
 800a3a8:	1ad2      	subs	r2, r2, r3
 800a3aa:	9200      	str	r2, [sp, #0]
 800a3ac:	9a06      	ldr	r2, [sp, #24]
 800a3ae:	1af6      	subs	r6, r6, r3
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	9306      	str	r3, [sp, #24]
 800a3b4:	9b08      	ldr	r3, [sp, #32]
 800a3b6:	b30b      	cbz	r3, 800a3fc <_dtoa_r+0x794>
 800a3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f000 80c6 	beq.w	800a54c <_dtoa_r+0x8e4>
 800a3c0:	2c00      	cmp	r4, #0
 800a3c2:	f000 80c0 	beq.w	800a546 <_dtoa_r+0x8de>
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	4648      	mov	r0, r9
 800a3cc:	f000 fc12 	bl	800abf4 <__pow5mult>
 800a3d0:	9a02      	ldr	r2, [sp, #8]
 800a3d2:	4601      	mov	r1, r0
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	4648      	mov	r0, r9
 800a3d8:	f000 fb6a 	bl	800aab0 <__multiply>
 800a3dc:	9902      	ldr	r1, [sp, #8]
 800a3de:	4680      	mov	r8, r0
 800a3e0:	4648      	mov	r0, r9
 800a3e2:	f000 fa9b 	bl	800a91c <_Bfree>
 800a3e6:	9b08      	ldr	r3, [sp, #32]
 800a3e8:	1b1b      	subs	r3, r3, r4
 800a3ea:	9308      	str	r3, [sp, #32]
 800a3ec:	f000 80b1 	beq.w	800a552 <_dtoa_r+0x8ea>
 800a3f0:	9a08      	ldr	r2, [sp, #32]
 800a3f2:	4641      	mov	r1, r8
 800a3f4:	4648      	mov	r0, r9
 800a3f6:	f000 fbfd 	bl	800abf4 <__pow5mult>
 800a3fa:	9002      	str	r0, [sp, #8]
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	4648      	mov	r0, r9
 800a400:	f000 fb40 	bl	800aa84 <__i2b>
 800a404:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a406:	4604      	mov	r4, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 81d8 	beq.w	800a7be <_dtoa_r+0xb56>
 800a40e:	461a      	mov	r2, r3
 800a410:	4601      	mov	r1, r0
 800a412:	4648      	mov	r0, r9
 800a414:	f000 fbee 	bl	800abf4 <__pow5mult>
 800a418:	9b07      	ldr	r3, [sp, #28]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	4604      	mov	r4, r0
 800a41e:	f300 809f 	bgt.w	800a560 <_dtoa_r+0x8f8>
 800a422:	9b04      	ldr	r3, [sp, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f040 8097 	bne.w	800a558 <_dtoa_r+0x8f0>
 800a42a:	9b05      	ldr	r3, [sp, #20]
 800a42c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a430:	2b00      	cmp	r3, #0
 800a432:	f040 8093 	bne.w	800a55c <_dtoa_r+0x8f4>
 800a436:	9b05      	ldr	r3, [sp, #20]
 800a438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a43c:	0d1b      	lsrs	r3, r3, #20
 800a43e:	051b      	lsls	r3, r3, #20
 800a440:	b133      	cbz	r3, 800a450 <_dtoa_r+0x7e8>
 800a442:	9b00      	ldr	r3, [sp, #0]
 800a444:	3301      	adds	r3, #1
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	9b06      	ldr	r3, [sp, #24]
 800a44a:	3301      	adds	r3, #1
 800a44c:	9306      	str	r3, [sp, #24]
 800a44e:	2301      	movs	r3, #1
 800a450:	9308      	str	r3, [sp, #32]
 800a452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 81b8 	beq.w	800a7ca <_dtoa_r+0xb62>
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a460:	6918      	ldr	r0, [r3, #16]
 800a462:	f000 fac3 	bl	800a9ec <__hi0bits>
 800a466:	f1c0 0020 	rsb	r0, r0, #32
 800a46a:	9b06      	ldr	r3, [sp, #24]
 800a46c:	4418      	add	r0, r3
 800a46e:	f010 001f 	ands.w	r0, r0, #31
 800a472:	f000 8082 	beq.w	800a57a <_dtoa_r+0x912>
 800a476:	f1c0 0320 	rsb	r3, r0, #32
 800a47a:	2b04      	cmp	r3, #4
 800a47c:	dd73      	ble.n	800a566 <_dtoa_r+0x8fe>
 800a47e:	9b00      	ldr	r3, [sp, #0]
 800a480:	f1c0 001c 	rsb	r0, r0, #28
 800a484:	4403      	add	r3, r0
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	9b06      	ldr	r3, [sp, #24]
 800a48a:	4403      	add	r3, r0
 800a48c:	4406      	add	r6, r0
 800a48e:	9306      	str	r3, [sp, #24]
 800a490:	9b00      	ldr	r3, [sp, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	dd05      	ble.n	800a4a2 <_dtoa_r+0x83a>
 800a496:	9902      	ldr	r1, [sp, #8]
 800a498:	461a      	mov	r2, r3
 800a49a:	4648      	mov	r0, r9
 800a49c:	f000 fc04 	bl	800aca8 <__lshift>
 800a4a0:	9002      	str	r0, [sp, #8]
 800a4a2:	9b06      	ldr	r3, [sp, #24]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	dd05      	ble.n	800a4b4 <_dtoa_r+0x84c>
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	4648      	mov	r0, r9
 800a4ae:	f000 fbfb 	bl	800aca8 <__lshift>
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d061      	beq.n	800a57e <_dtoa_r+0x916>
 800a4ba:	9802      	ldr	r0, [sp, #8]
 800a4bc:	4621      	mov	r1, r4
 800a4be:	f000 fc5f 	bl	800ad80 <__mcmp>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	da5b      	bge.n	800a57e <_dtoa_r+0x916>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	9902      	ldr	r1, [sp, #8]
 800a4ca:	220a      	movs	r2, #10
 800a4cc:	4648      	mov	r0, r9
 800a4ce:	f000 fa47 	bl	800a960 <__multadd>
 800a4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4d4:	9002      	str	r0, [sp, #8]
 800a4d6:	f107 38ff 	add.w	r8, r7, #4294967295
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f000 8177 	beq.w	800a7ce <_dtoa_r+0xb66>
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	220a      	movs	r2, #10
 800a4e6:	4648      	mov	r0, r9
 800a4e8:	f000 fa3a 	bl	800a960 <__multadd>
 800a4ec:	f1bb 0f00 	cmp.w	fp, #0
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	dc6f      	bgt.n	800a5d4 <_dtoa_r+0x96c>
 800a4f4:	9b07      	ldr	r3, [sp, #28]
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	dc49      	bgt.n	800a58e <_dtoa_r+0x926>
 800a4fa:	e06b      	b.n	800a5d4 <_dtoa_r+0x96c>
 800a4fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a502:	e73c      	b.n	800a37e <_dtoa_r+0x716>
 800a504:	3fe00000 	.word	0x3fe00000
 800a508:	40240000 	.word	0x40240000
 800a50c:	9b03      	ldr	r3, [sp, #12]
 800a50e:	1e5c      	subs	r4, r3, #1
 800a510:	9b08      	ldr	r3, [sp, #32]
 800a512:	42a3      	cmp	r3, r4
 800a514:	db09      	blt.n	800a52a <_dtoa_r+0x8c2>
 800a516:	1b1c      	subs	r4, r3, r4
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f6bf af30 	bge.w	800a380 <_dtoa_r+0x718>
 800a520:	9b00      	ldr	r3, [sp, #0]
 800a522:	9a03      	ldr	r2, [sp, #12]
 800a524:	1a9e      	subs	r6, r3, r2
 800a526:	2300      	movs	r3, #0
 800a528:	e72b      	b.n	800a382 <_dtoa_r+0x71a>
 800a52a:	9b08      	ldr	r3, [sp, #32]
 800a52c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a52e:	9408      	str	r4, [sp, #32]
 800a530:	1ae3      	subs	r3, r4, r3
 800a532:	441a      	add	r2, r3
 800a534:	9e00      	ldr	r6, [sp, #0]
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	920d      	str	r2, [sp, #52]	@ 0x34
 800a53a:	2400      	movs	r4, #0
 800a53c:	e721      	b.n	800a382 <_dtoa_r+0x71a>
 800a53e:	9c08      	ldr	r4, [sp, #32]
 800a540:	9e00      	ldr	r6, [sp, #0]
 800a542:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a544:	e728      	b.n	800a398 <_dtoa_r+0x730>
 800a546:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a54a:	e751      	b.n	800a3f0 <_dtoa_r+0x788>
 800a54c:	9a08      	ldr	r2, [sp, #32]
 800a54e:	9902      	ldr	r1, [sp, #8]
 800a550:	e750      	b.n	800a3f4 <_dtoa_r+0x78c>
 800a552:	f8cd 8008 	str.w	r8, [sp, #8]
 800a556:	e751      	b.n	800a3fc <_dtoa_r+0x794>
 800a558:	2300      	movs	r3, #0
 800a55a:	e779      	b.n	800a450 <_dtoa_r+0x7e8>
 800a55c:	9b04      	ldr	r3, [sp, #16]
 800a55e:	e777      	b.n	800a450 <_dtoa_r+0x7e8>
 800a560:	2300      	movs	r3, #0
 800a562:	9308      	str	r3, [sp, #32]
 800a564:	e779      	b.n	800a45a <_dtoa_r+0x7f2>
 800a566:	d093      	beq.n	800a490 <_dtoa_r+0x828>
 800a568:	9a00      	ldr	r2, [sp, #0]
 800a56a:	331c      	adds	r3, #28
 800a56c:	441a      	add	r2, r3
 800a56e:	9200      	str	r2, [sp, #0]
 800a570:	9a06      	ldr	r2, [sp, #24]
 800a572:	441a      	add	r2, r3
 800a574:	441e      	add	r6, r3
 800a576:	9206      	str	r2, [sp, #24]
 800a578:	e78a      	b.n	800a490 <_dtoa_r+0x828>
 800a57a:	4603      	mov	r3, r0
 800a57c:	e7f4      	b.n	800a568 <_dtoa_r+0x900>
 800a57e:	9b03      	ldr	r3, [sp, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	46b8      	mov	r8, r7
 800a584:	dc20      	bgt.n	800a5c8 <_dtoa_r+0x960>
 800a586:	469b      	mov	fp, r3
 800a588:	9b07      	ldr	r3, [sp, #28]
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	dd1e      	ble.n	800a5cc <_dtoa_r+0x964>
 800a58e:	f1bb 0f00 	cmp.w	fp, #0
 800a592:	f47f adb1 	bne.w	800a0f8 <_dtoa_r+0x490>
 800a596:	4621      	mov	r1, r4
 800a598:	465b      	mov	r3, fp
 800a59a:	2205      	movs	r2, #5
 800a59c:	4648      	mov	r0, r9
 800a59e:	f000 f9df 	bl	800a960 <__multadd>
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	9802      	ldr	r0, [sp, #8]
 800a5a8:	f000 fbea 	bl	800ad80 <__mcmp>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	f77f ada3 	ble.w	800a0f8 <_dtoa_r+0x490>
 800a5b2:	4656      	mov	r6, sl
 800a5b4:	2331      	movs	r3, #49	@ 0x31
 800a5b6:	f806 3b01 	strb.w	r3, [r6], #1
 800a5ba:	f108 0801 	add.w	r8, r8, #1
 800a5be:	e59f      	b.n	800a100 <_dtoa_r+0x498>
 800a5c0:	9c03      	ldr	r4, [sp, #12]
 800a5c2:	46b8      	mov	r8, r7
 800a5c4:	4625      	mov	r5, r4
 800a5c6:	e7f4      	b.n	800a5b2 <_dtoa_r+0x94a>
 800a5c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 8101 	beq.w	800a7d6 <_dtoa_r+0xb6e>
 800a5d4:	2e00      	cmp	r6, #0
 800a5d6:	dd05      	ble.n	800a5e4 <_dtoa_r+0x97c>
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4632      	mov	r2, r6
 800a5dc:	4648      	mov	r0, r9
 800a5de:	f000 fb63 	bl	800aca8 <__lshift>
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	9b08      	ldr	r3, [sp, #32]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d05c      	beq.n	800a6a4 <_dtoa_r+0xa3c>
 800a5ea:	6869      	ldr	r1, [r5, #4]
 800a5ec:	4648      	mov	r0, r9
 800a5ee:	f000 f955 	bl	800a89c <_Balloc>
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	b928      	cbnz	r0, 800a602 <_dtoa_r+0x99a>
 800a5f6:	4b82      	ldr	r3, [pc, #520]	@ (800a800 <_dtoa_r+0xb98>)
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a5fe:	f7ff bb4a 	b.w	8009c96 <_dtoa_r+0x2e>
 800a602:	692a      	ldr	r2, [r5, #16]
 800a604:	3202      	adds	r2, #2
 800a606:	0092      	lsls	r2, r2, #2
 800a608:	f105 010c 	add.w	r1, r5, #12
 800a60c:	300c      	adds	r0, #12
 800a60e:	f000 ff31 	bl	800b474 <memcpy>
 800a612:	2201      	movs	r2, #1
 800a614:	4631      	mov	r1, r6
 800a616:	4648      	mov	r0, r9
 800a618:	f000 fb46 	bl	800aca8 <__lshift>
 800a61c:	f10a 0301 	add.w	r3, sl, #1
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	eb0a 030b 	add.w	r3, sl, fp
 800a626:	9308      	str	r3, [sp, #32]
 800a628:	9b04      	ldr	r3, [sp, #16]
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	462f      	mov	r7, r5
 800a630:	9306      	str	r3, [sp, #24]
 800a632:	4605      	mov	r5, r0
 800a634:	9b00      	ldr	r3, [sp, #0]
 800a636:	9802      	ldr	r0, [sp, #8]
 800a638:	4621      	mov	r1, r4
 800a63a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a63e:	f7ff fa88 	bl	8009b52 <quorem>
 800a642:	4603      	mov	r3, r0
 800a644:	3330      	adds	r3, #48	@ 0x30
 800a646:	9003      	str	r0, [sp, #12]
 800a648:	4639      	mov	r1, r7
 800a64a:	9802      	ldr	r0, [sp, #8]
 800a64c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a64e:	f000 fb97 	bl	800ad80 <__mcmp>
 800a652:	462a      	mov	r2, r5
 800a654:	9004      	str	r0, [sp, #16]
 800a656:	4621      	mov	r1, r4
 800a658:	4648      	mov	r0, r9
 800a65a:	f000 fbad 	bl	800adb8 <__mdiff>
 800a65e:	68c2      	ldr	r2, [r0, #12]
 800a660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a662:	4606      	mov	r6, r0
 800a664:	bb02      	cbnz	r2, 800a6a8 <_dtoa_r+0xa40>
 800a666:	4601      	mov	r1, r0
 800a668:	9802      	ldr	r0, [sp, #8]
 800a66a:	f000 fb89 	bl	800ad80 <__mcmp>
 800a66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a670:	4602      	mov	r2, r0
 800a672:	4631      	mov	r1, r6
 800a674:	4648      	mov	r0, r9
 800a676:	920c      	str	r2, [sp, #48]	@ 0x30
 800a678:	9309      	str	r3, [sp, #36]	@ 0x24
 800a67a:	f000 f94f 	bl	800a91c <_Bfree>
 800a67e:	9b07      	ldr	r3, [sp, #28]
 800a680:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a682:	9e00      	ldr	r6, [sp, #0]
 800a684:	ea42 0103 	orr.w	r1, r2, r3
 800a688:	9b06      	ldr	r3, [sp, #24]
 800a68a:	4319      	orrs	r1, r3
 800a68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a68e:	d10d      	bne.n	800a6ac <_dtoa_r+0xa44>
 800a690:	2b39      	cmp	r3, #57	@ 0x39
 800a692:	d027      	beq.n	800a6e4 <_dtoa_r+0xa7c>
 800a694:	9a04      	ldr	r2, [sp, #16]
 800a696:	2a00      	cmp	r2, #0
 800a698:	dd01      	ble.n	800a69e <_dtoa_r+0xa36>
 800a69a:	9b03      	ldr	r3, [sp, #12]
 800a69c:	3331      	adds	r3, #49	@ 0x31
 800a69e:	f88b 3000 	strb.w	r3, [fp]
 800a6a2:	e52e      	b.n	800a102 <_dtoa_r+0x49a>
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	e7b9      	b.n	800a61c <_dtoa_r+0x9b4>
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	e7e2      	b.n	800a672 <_dtoa_r+0xa0a>
 800a6ac:	9904      	ldr	r1, [sp, #16]
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	db04      	blt.n	800a6bc <_dtoa_r+0xa54>
 800a6b2:	9807      	ldr	r0, [sp, #28]
 800a6b4:	4301      	orrs	r1, r0
 800a6b6:	9806      	ldr	r0, [sp, #24]
 800a6b8:	4301      	orrs	r1, r0
 800a6ba:	d120      	bne.n	800a6fe <_dtoa_r+0xa96>
 800a6bc:	2a00      	cmp	r2, #0
 800a6be:	ddee      	ble.n	800a69e <_dtoa_r+0xa36>
 800a6c0:	9902      	ldr	r1, [sp, #8]
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	4648      	mov	r0, r9
 800a6c8:	f000 faee 	bl	800aca8 <__lshift>
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	9002      	str	r0, [sp, #8]
 800a6d0:	f000 fb56 	bl	800ad80 <__mcmp>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	9b00      	ldr	r3, [sp, #0]
 800a6d8:	dc02      	bgt.n	800a6e0 <_dtoa_r+0xa78>
 800a6da:	d1e0      	bne.n	800a69e <_dtoa_r+0xa36>
 800a6dc:	07da      	lsls	r2, r3, #31
 800a6de:	d5de      	bpl.n	800a69e <_dtoa_r+0xa36>
 800a6e0:	2b39      	cmp	r3, #57	@ 0x39
 800a6e2:	d1da      	bne.n	800a69a <_dtoa_r+0xa32>
 800a6e4:	2339      	movs	r3, #57	@ 0x39
 800a6e6:	f88b 3000 	strb.w	r3, [fp]
 800a6ea:	4633      	mov	r3, r6
 800a6ec:	461e      	mov	r6, r3
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a6f4:	2a39      	cmp	r2, #57	@ 0x39
 800a6f6:	d04e      	beq.n	800a796 <_dtoa_r+0xb2e>
 800a6f8:	3201      	adds	r2, #1
 800a6fa:	701a      	strb	r2, [r3, #0]
 800a6fc:	e501      	b.n	800a102 <_dtoa_r+0x49a>
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	dd03      	ble.n	800a70a <_dtoa_r+0xaa2>
 800a702:	2b39      	cmp	r3, #57	@ 0x39
 800a704:	d0ee      	beq.n	800a6e4 <_dtoa_r+0xa7c>
 800a706:	3301      	adds	r3, #1
 800a708:	e7c9      	b.n	800a69e <_dtoa_r+0xa36>
 800a70a:	9a00      	ldr	r2, [sp, #0]
 800a70c:	9908      	ldr	r1, [sp, #32]
 800a70e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a712:	428a      	cmp	r2, r1
 800a714:	d028      	beq.n	800a768 <_dtoa_r+0xb00>
 800a716:	9902      	ldr	r1, [sp, #8]
 800a718:	2300      	movs	r3, #0
 800a71a:	220a      	movs	r2, #10
 800a71c:	4648      	mov	r0, r9
 800a71e:	f000 f91f 	bl	800a960 <__multadd>
 800a722:	42af      	cmp	r7, r5
 800a724:	9002      	str	r0, [sp, #8]
 800a726:	f04f 0300 	mov.w	r3, #0
 800a72a:	f04f 020a 	mov.w	r2, #10
 800a72e:	4639      	mov	r1, r7
 800a730:	4648      	mov	r0, r9
 800a732:	d107      	bne.n	800a744 <_dtoa_r+0xadc>
 800a734:	f000 f914 	bl	800a960 <__multadd>
 800a738:	4607      	mov	r7, r0
 800a73a:	4605      	mov	r5, r0
 800a73c:	9b00      	ldr	r3, [sp, #0]
 800a73e:	3301      	adds	r3, #1
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	e777      	b.n	800a634 <_dtoa_r+0x9cc>
 800a744:	f000 f90c 	bl	800a960 <__multadd>
 800a748:	4629      	mov	r1, r5
 800a74a:	4607      	mov	r7, r0
 800a74c:	2300      	movs	r3, #0
 800a74e:	220a      	movs	r2, #10
 800a750:	4648      	mov	r0, r9
 800a752:	f000 f905 	bl	800a960 <__multadd>
 800a756:	4605      	mov	r5, r0
 800a758:	e7f0      	b.n	800a73c <_dtoa_r+0xad4>
 800a75a:	f1bb 0f00 	cmp.w	fp, #0
 800a75e:	bfcc      	ite	gt
 800a760:	465e      	movgt	r6, fp
 800a762:	2601      	movle	r6, #1
 800a764:	4456      	add	r6, sl
 800a766:	2700      	movs	r7, #0
 800a768:	9902      	ldr	r1, [sp, #8]
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	2201      	movs	r2, #1
 800a76e:	4648      	mov	r0, r9
 800a770:	f000 fa9a 	bl	800aca8 <__lshift>
 800a774:	4621      	mov	r1, r4
 800a776:	9002      	str	r0, [sp, #8]
 800a778:	f000 fb02 	bl	800ad80 <__mcmp>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	dcb4      	bgt.n	800a6ea <_dtoa_r+0xa82>
 800a780:	d102      	bne.n	800a788 <_dtoa_r+0xb20>
 800a782:	9b00      	ldr	r3, [sp, #0]
 800a784:	07db      	lsls	r3, r3, #31
 800a786:	d4b0      	bmi.n	800a6ea <_dtoa_r+0xa82>
 800a788:	4633      	mov	r3, r6
 800a78a:	461e      	mov	r6, r3
 800a78c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a790:	2a30      	cmp	r2, #48	@ 0x30
 800a792:	d0fa      	beq.n	800a78a <_dtoa_r+0xb22>
 800a794:	e4b5      	b.n	800a102 <_dtoa_r+0x49a>
 800a796:	459a      	cmp	sl, r3
 800a798:	d1a8      	bne.n	800a6ec <_dtoa_r+0xa84>
 800a79a:	2331      	movs	r3, #49	@ 0x31
 800a79c:	f108 0801 	add.w	r8, r8, #1
 800a7a0:	f88a 3000 	strb.w	r3, [sl]
 800a7a4:	e4ad      	b.n	800a102 <_dtoa_r+0x49a>
 800a7a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a804 <_dtoa_r+0xb9c>
 800a7ac:	b11b      	cbz	r3, 800a7b6 <_dtoa_r+0xb4e>
 800a7ae:	f10a 0308 	add.w	r3, sl, #8
 800a7b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	4650      	mov	r0, sl
 800a7b8:	b017      	add	sp, #92	@ 0x5c
 800a7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7be:	9b07      	ldr	r3, [sp, #28]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	f77f ae2e 	ble.w	800a422 <_dtoa_r+0x7ba>
 800a7c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7c8:	9308      	str	r3, [sp, #32]
 800a7ca:	2001      	movs	r0, #1
 800a7cc:	e64d      	b.n	800a46a <_dtoa_r+0x802>
 800a7ce:	f1bb 0f00 	cmp.w	fp, #0
 800a7d2:	f77f aed9 	ble.w	800a588 <_dtoa_r+0x920>
 800a7d6:	4656      	mov	r6, sl
 800a7d8:	9802      	ldr	r0, [sp, #8]
 800a7da:	4621      	mov	r1, r4
 800a7dc:	f7ff f9b9 	bl	8009b52 <quorem>
 800a7e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a7e4:	f806 3b01 	strb.w	r3, [r6], #1
 800a7e8:	eba6 020a 	sub.w	r2, r6, sl
 800a7ec:	4593      	cmp	fp, r2
 800a7ee:	ddb4      	ble.n	800a75a <_dtoa_r+0xaf2>
 800a7f0:	9902      	ldr	r1, [sp, #8]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	220a      	movs	r2, #10
 800a7f6:	4648      	mov	r0, r9
 800a7f8:	f000 f8b2 	bl	800a960 <__multadd>
 800a7fc:	9002      	str	r0, [sp, #8]
 800a7fe:	e7eb      	b.n	800a7d8 <_dtoa_r+0xb70>
 800a800:	0800ba15 	.word	0x0800ba15
 800a804:	0800b999 	.word	0x0800b999

0800a808 <_free_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4605      	mov	r5, r0
 800a80c:	2900      	cmp	r1, #0
 800a80e:	d041      	beq.n	800a894 <_free_r+0x8c>
 800a810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a814:	1f0c      	subs	r4, r1, #4
 800a816:	2b00      	cmp	r3, #0
 800a818:	bfb8      	it	lt
 800a81a:	18e4      	addlt	r4, r4, r3
 800a81c:	f7fe fa1a 	bl	8008c54 <__malloc_lock>
 800a820:	4a1d      	ldr	r2, [pc, #116]	@ (800a898 <_free_r+0x90>)
 800a822:	6813      	ldr	r3, [r2, #0]
 800a824:	b933      	cbnz	r3, 800a834 <_free_r+0x2c>
 800a826:	6063      	str	r3, [r4, #4]
 800a828:	6014      	str	r4, [r2, #0]
 800a82a:	4628      	mov	r0, r5
 800a82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a830:	f7fe ba16 	b.w	8008c60 <__malloc_unlock>
 800a834:	42a3      	cmp	r3, r4
 800a836:	d908      	bls.n	800a84a <_free_r+0x42>
 800a838:	6820      	ldr	r0, [r4, #0]
 800a83a:	1821      	adds	r1, r4, r0
 800a83c:	428b      	cmp	r3, r1
 800a83e:	bf01      	itttt	eq
 800a840:	6819      	ldreq	r1, [r3, #0]
 800a842:	685b      	ldreq	r3, [r3, #4]
 800a844:	1809      	addeq	r1, r1, r0
 800a846:	6021      	streq	r1, [r4, #0]
 800a848:	e7ed      	b.n	800a826 <_free_r+0x1e>
 800a84a:	461a      	mov	r2, r3
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	b10b      	cbz	r3, 800a854 <_free_r+0x4c>
 800a850:	42a3      	cmp	r3, r4
 800a852:	d9fa      	bls.n	800a84a <_free_r+0x42>
 800a854:	6811      	ldr	r1, [r2, #0]
 800a856:	1850      	adds	r0, r2, r1
 800a858:	42a0      	cmp	r0, r4
 800a85a:	d10b      	bne.n	800a874 <_free_r+0x6c>
 800a85c:	6820      	ldr	r0, [r4, #0]
 800a85e:	4401      	add	r1, r0
 800a860:	1850      	adds	r0, r2, r1
 800a862:	4283      	cmp	r3, r0
 800a864:	6011      	str	r1, [r2, #0]
 800a866:	d1e0      	bne.n	800a82a <_free_r+0x22>
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	6053      	str	r3, [r2, #4]
 800a86e:	4408      	add	r0, r1
 800a870:	6010      	str	r0, [r2, #0]
 800a872:	e7da      	b.n	800a82a <_free_r+0x22>
 800a874:	d902      	bls.n	800a87c <_free_r+0x74>
 800a876:	230c      	movs	r3, #12
 800a878:	602b      	str	r3, [r5, #0]
 800a87a:	e7d6      	b.n	800a82a <_free_r+0x22>
 800a87c:	6820      	ldr	r0, [r4, #0]
 800a87e:	1821      	adds	r1, r4, r0
 800a880:	428b      	cmp	r3, r1
 800a882:	bf04      	itt	eq
 800a884:	6819      	ldreq	r1, [r3, #0]
 800a886:	685b      	ldreq	r3, [r3, #4]
 800a888:	6063      	str	r3, [r4, #4]
 800a88a:	bf04      	itt	eq
 800a88c:	1809      	addeq	r1, r1, r0
 800a88e:	6021      	streq	r1, [r4, #0]
 800a890:	6054      	str	r4, [r2, #4]
 800a892:	e7ca      	b.n	800a82a <_free_r+0x22>
 800a894:	bd38      	pop	{r3, r4, r5, pc}
 800a896:	bf00      	nop
 800a898:	2000051c 	.word	0x2000051c

0800a89c <_Balloc>:
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	69c6      	ldr	r6, [r0, #28]
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	460d      	mov	r5, r1
 800a8a4:	b976      	cbnz	r6, 800a8c4 <_Balloc+0x28>
 800a8a6:	2010      	movs	r0, #16
 800a8a8:	f7fe f922 	bl	8008af0 <malloc>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	61e0      	str	r0, [r4, #28]
 800a8b0:	b920      	cbnz	r0, 800a8bc <_Balloc+0x20>
 800a8b2:	4b18      	ldr	r3, [pc, #96]	@ (800a914 <_Balloc+0x78>)
 800a8b4:	4818      	ldr	r0, [pc, #96]	@ (800a918 <_Balloc+0x7c>)
 800a8b6:	216b      	movs	r1, #107	@ 0x6b
 800a8b8:	f000 fdea 	bl	800b490 <__assert_func>
 800a8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8c0:	6006      	str	r6, [r0, #0]
 800a8c2:	60c6      	str	r6, [r0, #12]
 800a8c4:	69e6      	ldr	r6, [r4, #28]
 800a8c6:	68f3      	ldr	r3, [r6, #12]
 800a8c8:	b183      	cbz	r3, 800a8ec <_Balloc+0x50>
 800a8ca:	69e3      	ldr	r3, [r4, #28]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8d2:	b9b8      	cbnz	r0, 800a904 <_Balloc+0x68>
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	fa01 f605 	lsl.w	r6, r1, r5
 800a8da:	1d72      	adds	r2, r6, #5
 800a8dc:	0092      	lsls	r2, r2, #2
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 fdf4 	bl	800b4cc <_calloc_r>
 800a8e4:	b160      	cbz	r0, 800a900 <_Balloc+0x64>
 800a8e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8ea:	e00e      	b.n	800a90a <_Balloc+0x6e>
 800a8ec:	2221      	movs	r2, #33	@ 0x21
 800a8ee:	2104      	movs	r1, #4
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f000 fdeb 	bl	800b4cc <_calloc_r>
 800a8f6:	69e3      	ldr	r3, [r4, #28]
 800a8f8:	60f0      	str	r0, [r6, #12]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1e4      	bne.n	800a8ca <_Balloc+0x2e>
 800a900:	2000      	movs	r0, #0
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	6802      	ldr	r2, [r0, #0]
 800a906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a90a:	2300      	movs	r3, #0
 800a90c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a910:	e7f7      	b.n	800a902 <_Balloc+0x66>
 800a912:	bf00      	nop
 800a914:	0800b9a6 	.word	0x0800b9a6
 800a918:	0800ba26 	.word	0x0800ba26

0800a91c <_Bfree>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	69c6      	ldr	r6, [r0, #28]
 800a920:	4605      	mov	r5, r0
 800a922:	460c      	mov	r4, r1
 800a924:	b976      	cbnz	r6, 800a944 <_Bfree+0x28>
 800a926:	2010      	movs	r0, #16
 800a928:	f7fe f8e2 	bl	8008af0 <malloc>
 800a92c:	4602      	mov	r2, r0
 800a92e:	61e8      	str	r0, [r5, #28]
 800a930:	b920      	cbnz	r0, 800a93c <_Bfree+0x20>
 800a932:	4b09      	ldr	r3, [pc, #36]	@ (800a958 <_Bfree+0x3c>)
 800a934:	4809      	ldr	r0, [pc, #36]	@ (800a95c <_Bfree+0x40>)
 800a936:	218f      	movs	r1, #143	@ 0x8f
 800a938:	f000 fdaa 	bl	800b490 <__assert_func>
 800a93c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a940:	6006      	str	r6, [r0, #0]
 800a942:	60c6      	str	r6, [r0, #12]
 800a944:	b13c      	cbz	r4, 800a956 <_Bfree+0x3a>
 800a946:	69eb      	ldr	r3, [r5, #28]
 800a948:	6862      	ldr	r2, [r4, #4]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a950:	6021      	str	r1, [r4, #0]
 800a952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a956:	bd70      	pop	{r4, r5, r6, pc}
 800a958:	0800b9a6 	.word	0x0800b9a6
 800a95c:	0800ba26 	.word	0x0800ba26

0800a960 <__multadd>:
 800a960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a964:	690d      	ldr	r5, [r1, #16]
 800a966:	4607      	mov	r7, r0
 800a968:	460c      	mov	r4, r1
 800a96a:	461e      	mov	r6, r3
 800a96c:	f101 0c14 	add.w	ip, r1, #20
 800a970:	2000      	movs	r0, #0
 800a972:	f8dc 3000 	ldr.w	r3, [ip]
 800a976:	b299      	uxth	r1, r3
 800a978:	fb02 6101 	mla	r1, r2, r1, r6
 800a97c:	0c1e      	lsrs	r6, r3, #16
 800a97e:	0c0b      	lsrs	r3, r1, #16
 800a980:	fb02 3306 	mla	r3, r2, r6, r3
 800a984:	b289      	uxth	r1, r1
 800a986:	3001      	adds	r0, #1
 800a988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a98c:	4285      	cmp	r5, r0
 800a98e:	f84c 1b04 	str.w	r1, [ip], #4
 800a992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a996:	dcec      	bgt.n	800a972 <__multadd+0x12>
 800a998:	b30e      	cbz	r6, 800a9de <__multadd+0x7e>
 800a99a:	68a3      	ldr	r3, [r4, #8]
 800a99c:	42ab      	cmp	r3, r5
 800a99e:	dc19      	bgt.n	800a9d4 <__multadd+0x74>
 800a9a0:	6861      	ldr	r1, [r4, #4]
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	3101      	adds	r1, #1
 800a9a6:	f7ff ff79 	bl	800a89c <_Balloc>
 800a9aa:	4680      	mov	r8, r0
 800a9ac:	b928      	cbnz	r0, 800a9ba <__multadd+0x5a>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a9e4 <__multadd+0x84>)
 800a9b2:	480d      	ldr	r0, [pc, #52]	@ (800a9e8 <__multadd+0x88>)
 800a9b4:	21ba      	movs	r1, #186	@ 0xba
 800a9b6:	f000 fd6b 	bl	800b490 <__assert_func>
 800a9ba:	6922      	ldr	r2, [r4, #16]
 800a9bc:	3202      	adds	r2, #2
 800a9be:	f104 010c 	add.w	r1, r4, #12
 800a9c2:	0092      	lsls	r2, r2, #2
 800a9c4:	300c      	adds	r0, #12
 800a9c6:	f000 fd55 	bl	800b474 <memcpy>
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	f7ff ffa5 	bl	800a91c <_Bfree>
 800a9d2:	4644      	mov	r4, r8
 800a9d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9d8:	3501      	adds	r5, #1
 800a9da:	615e      	str	r6, [r3, #20]
 800a9dc:	6125      	str	r5, [r4, #16]
 800a9de:	4620      	mov	r0, r4
 800a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e4:	0800ba15 	.word	0x0800ba15
 800a9e8:	0800ba26 	.word	0x0800ba26

0800a9ec <__hi0bits>:
 800a9ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	bf36      	itet	cc
 800a9f4:	0403      	lslcc	r3, r0, #16
 800a9f6:	2000      	movcs	r0, #0
 800a9f8:	2010      	movcc	r0, #16
 800a9fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9fe:	bf3c      	itt	cc
 800aa00:	021b      	lslcc	r3, r3, #8
 800aa02:	3008      	addcc	r0, #8
 800aa04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa08:	bf3c      	itt	cc
 800aa0a:	011b      	lslcc	r3, r3, #4
 800aa0c:	3004      	addcc	r0, #4
 800aa0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa12:	bf3c      	itt	cc
 800aa14:	009b      	lslcc	r3, r3, #2
 800aa16:	3002      	addcc	r0, #2
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	db05      	blt.n	800aa28 <__hi0bits+0x3c>
 800aa1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aa20:	f100 0001 	add.w	r0, r0, #1
 800aa24:	bf08      	it	eq
 800aa26:	2020      	moveq	r0, #32
 800aa28:	4770      	bx	lr

0800aa2a <__lo0bits>:
 800aa2a:	6803      	ldr	r3, [r0, #0]
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	f013 0007 	ands.w	r0, r3, #7
 800aa32:	d00b      	beq.n	800aa4c <__lo0bits+0x22>
 800aa34:	07d9      	lsls	r1, r3, #31
 800aa36:	d421      	bmi.n	800aa7c <__lo0bits+0x52>
 800aa38:	0798      	lsls	r0, r3, #30
 800aa3a:	bf49      	itett	mi
 800aa3c:	085b      	lsrmi	r3, r3, #1
 800aa3e:	089b      	lsrpl	r3, r3, #2
 800aa40:	2001      	movmi	r0, #1
 800aa42:	6013      	strmi	r3, [r2, #0]
 800aa44:	bf5c      	itt	pl
 800aa46:	6013      	strpl	r3, [r2, #0]
 800aa48:	2002      	movpl	r0, #2
 800aa4a:	4770      	bx	lr
 800aa4c:	b299      	uxth	r1, r3
 800aa4e:	b909      	cbnz	r1, 800aa54 <__lo0bits+0x2a>
 800aa50:	0c1b      	lsrs	r3, r3, #16
 800aa52:	2010      	movs	r0, #16
 800aa54:	b2d9      	uxtb	r1, r3
 800aa56:	b909      	cbnz	r1, 800aa5c <__lo0bits+0x32>
 800aa58:	3008      	adds	r0, #8
 800aa5a:	0a1b      	lsrs	r3, r3, #8
 800aa5c:	0719      	lsls	r1, r3, #28
 800aa5e:	bf04      	itt	eq
 800aa60:	091b      	lsreq	r3, r3, #4
 800aa62:	3004      	addeq	r0, #4
 800aa64:	0799      	lsls	r1, r3, #30
 800aa66:	bf04      	itt	eq
 800aa68:	089b      	lsreq	r3, r3, #2
 800aa6a:	3002      	addeq	r0, #2
 800aa6c:	07d9      	lsls	r1, r3, #31
 800aa6e:	d403      	bmi.n	800aa78 <__lo0bits+0x4e>
 800aa70:	085b      	lsrs	r3, r3, #1
 800aa72:	f100 0001 	add.w	r0, r0, #1
 800aa76:	d003      	beq.n	800aa80 <__lo0bits+0x56>
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	4770      	bx	lr
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	4770      	bx	lr
 800aa80:	2020      	movs	r0, #32
 800aa82:	4770      	bx	lr

0800aa84 <__i2b>:
 800aa84:	b510      	push	{r4, lr}
 800aa86:	460c      	mov	r4, r1
 800aa88:	2101      	movs	r1, #1
 800aa8a:	f7ff ff07 	bl	800a89c <_Balloc>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	b928      	cbnz	r0, 800aa9e <__i2b+0x1a>
 800aa92:	4b05      	ldr	r3, [pc, #20]	@ (800aaa8 <__i2b+0x24>)
 800aa94:	4805      	ldr	r0, [pc, #20]	@ (800aaac <__i2b+0x28>)
 800aa96:	f240 1145 	movw	r1, #325	@ 0x145
 800aa9a:	f000 fcf9 	bl	800b490 <__assert_func>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	6144      	str	r4, [r0, #20]
 800aaa2:	6103      	str	r3, [r0, #16]
 800aaa4:	bd10      	pop	{r4, pc}
 800aaa6:	bf00      	nop
 800aaa8:	0800ba15 	.word	0x0800ba15
 800aaac:	0800ba26 	.word	0x0800ba26

0800aab0 <__multiply>:
 800aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab4:	4617      	mov	r7, r2
 800aab6:	690a      	ldr	r2, [r1, #16]
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	bfa8      	it	ge
 800aabe:	463b      	movge	r3, r7
 800aac0:	4689      	mov	r9, r1
 800aac2:	bfa4      	itt	ge
 800aac4:	460f      	movge	r7, r1
 800aac6:	4699      	movge	r9, r3
 800aac8:	693d      	ldr	r5, [r7, #16]
 800aaca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	6879      	ldr	r1, [r7, #4]
 800aad2:	eb05 060a 	add.w	r6, r5, sl
 800aad6:	42b3      	cmp	r3, r6
 800aad8:	b085      	sub	sp, #20
 800aada:	bfb8      	it	lt
 800aadc:	3101      	addlt	r1, #1
 800aade:	f7ff fedd 	bl	800a89c <_Balloc>
 800aae2:	b930      	cbnz	r0, 800aaf2 <__multiply+0x42>
 800aae4:	4602      	mov	r2, r0
 800aae6:	4b41      	ldr	r3, [pc, #260]	@ (800abec <__multiply+0x13c>)
 800aae8:	4841      	ldr	r0, [pc, #260]	@ (800abf0 <__multiply+0x140>)
 800aaea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aaee:	f000 fccf 	bl	800b490 <__assert_func>
 800aaf2:	f100 0414 	add.w	r4, r0, #20
 800aaf6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800aafa:	4623      	mov	r3, r4
 800aafc:	2200      	movs	r2, #0
 800aafe:	4573      	cmp	r3, lr
 800ab00:	d320      	bcc.n	800ab44 <__multiply+0x94>
 800ab02:	f107 0814 	add.w	r8, r7, #20
 800ab06:	f109 0114 	add.w	r1, r9, #20
 800ab0a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ab0e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ab12:	9302      	str	r3, [sp, #8]
 800ab14:	1beb      	subs	r3, r5, r7
 800ab16:	3b15      	subs	r3, #21
 800ab18:	f023 0303 	bic.w	r3, r3, #3
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	3715      	adds	r7, #21
 800ab20:	42bd      	cmp	r5, r7
 800ab22:	bf38      	it	cc
 800ab24:	2304      	movcc	r3, #4
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	9b02      	ldr	r3, [sp, #8]
 800ab2a:	9103      	str	r1, [sp, #12]
 800ab2c:	428b      	cmp	r3, r1
 800ab2e:	d80c      	bhi.n	800ab4a <__multiply+0x9a>
 800ab30:	2e00      	cmp	r6, #0
 800ab32:	dd03      	ble.n	800ab3c <__multiply+0x8c>
 800ab34:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d055      	beq.n	800abe8 <__multiply+0x138>
 800ab3c:	6106      	str	r6, [r0, #16]
 800ab3e:	b005      	add	sp, #20
 800ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab44:	f843 2b04 	str.w	r2, [r3], #4
 800ab48:	e7d9      	b.n	800aafe <__multiply+0x4e>
 800ab4a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ab4e:	f1ba 0f00 	cmp.w	sl, #0
 800ab52:	d01f      	beq.n	800ab94 <__multiply+0xe4>
 800ab54:	46c4      	mov	ip, r8
 800ab56:	46a1      	mov	r9, r4
 800ab58:	2700      	movs	r7, #0
 800ab5a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab5e:	f8d9 3000 	ldr.w	r3, [r9]
 800ab62:	fa1f fb82 	uxth.w	fp, r2
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	fb0a 330b 	mla	r3, sl, fp, r3
 800ab6c:	443b      	add	r3, r7
 800ab6e:	f8d9 7000 	ldr.w	r7, [r9]
 800ab72:	0c12      	lsrs	r2, r2, #16
 800ab74:	0c3f      	lsrs	r7, r7, #16
 800ab76:	fb0a 7202 	mla	r2, sl, r2, r7
 800ab7a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab84:	4565      	cmp	r5, ip
 800ab86:	f849 3b04 	str.w	r3, [r9], #4
 800ab8a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ab8e:	d8e4      	bhi.n	800ab5a <__multiply+0xaa>
 800ab90:	9b01      	ldr	r3, [sp, #4]
 800ab92:	50e7      	str	r7, [r4, r3]
 800ab94:	9b03      	ldr	r3, [sp, #12]
 800ab96:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ab9a:	3104      	adds	r1, #4
 800ab9c:	f1b9 0f00 	cmp.w	r9, #0
 800aba0:	d020      	beq.n	800abe4 <__multiply+0x134>
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	4647      	mov	r7, r8
 800aba6:	46a4      	mov	ip, r4
 800aba8:	f04f 0a00 	mov.w	sl, #0
 800abac:	f8b7 b000 	ldrh.w	fp, [r7]
 800abb0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800abb4:	fb09 220b 	mla	r2, r9, fp, r2
 800abb8:	4452      	add	r2, sl
 800abba:	b29b      	uxth	r3, r3
 800abbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abc0:	f84c 3b04 	str.w	r3, [ip], #4
 800abc4:	f857 3b04 	ldr.w	r3, [r7], #4
 800abc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abcc:	f8bc 3000 	ldrh.w	r3, [ip]
 800abd0:	fb09 330a 	mla	r3, r9, sl, r3
 800abd4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800abd8:	42bd      	cmp	r5, r7
 800abda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abde:	d8e5      	bhi.n	800abac <__multiply+0xfc>
 800abe0:	9a01      	ldr	r2, [sp, #4]
 800abe2:	50a3      	str	r3, [r4, r2]
 800abe4:	3404      	adds	r4, #4
 800abe6:	e79f      	b.n	800ab28 <__multiply+0x78>
 800abe8:	3e01      	subs	r6, #1
 800abea:	e7a1      	b.n	800ab30 <__multiply+0x80>
 800abec:	0800ba15 	.word	0x0800ba15
 800abf0:	0800ba26 	.word	0x0800ba26

0800abf4 <__pow5mult>:
 800abf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf8:	4615      	mov	r5, r2
 800abfa:	f012 0203 	ands.w	r2, r2, #3
 800abfe:	4607      	mov	r7, r0
 800ac00:	460e      	mov	r6, r1
 800ac02:	d007      	beq.n	800ac14 <__pow5mult+0x20>
 800ac04:	4c25      	ldr	r4, [pc, #148]	@ (800ac9c <__pow5mult+0xa8>)
 800ac06:	3a01      	subs	r2, #1
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac0e:	f7ff fea7 	bl	800a960 <__multadd>
 800ac12:	4606      	mov	r6, r0
 800ac14:	10ad      	asrs	r5, r5, #2
 800ac16:	d03d      	beq.n	800ac94 <__pow5mult+0xa0>
 800ac18:	69fc      	ldr	r4, [r7, #28]
 800ac1a:	b97c      	cbnz	r4, 800ac3c <__pow5mult+0x48>
 800ac1c:	2010      	movs	r0, #16
 800ac1e:	f7fd ff67 	bl	8008af0 <malloc>
 800ac22:	4602      	mov	r2, r0
 800ac24:	61f8      	str	r0, [r7, #28]
 800ac26:	b928      	cbnz	r0, 800ac34 <__pow5mult+0x40>
 800ac28:	4b1d      	ldr	r3, [pc, #116]	@ (800aca0 <__pow5mult+0xac>)
 800ac2a:	481e      	ldr	r0, [pc, #120]	@ (800aca4 <__pow5mult+0xb0>)
 800ac2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ac30:	f000 fc2e 	bl	800b490 <__assert_func>
 800ac34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac38:	6004      	str	r4, [r0, #0]
 800ac3a:	60c4      	str	r4, [r0, #12]
 800ac3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ac40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac44:	b94c      	cbnz	r4, 800ac5a <__pow5mult+0x66>
 800ac46:	f240 2171 	movw	r1, #625	@ 0x271
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	f7ff ff1a 	bl	800aa84 <__i2b>
 800ac50:	2300      	movs	r3, #0
 800ac52:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac56:	4604      	mov	r4, r0
 800ac58:	6003      	str	r3, [r0, #0]
 800ac5a:	f04f 0900 	mov.w	r9, #0
 800ac5e:	07eb      	lsls	r3, r5, #31
 800ac60:	d50a      	bpl.n	800ac78 <__pow5mult+0x84>
 800ac62:	4631      	mov	r1, r6
 800ac64:	4622      	mov	r2, r4
 800ac66:	4638      	mov	r0, r7
 800ac68:	f7ff ff22 	bl	800aab0 <__multiply>
 800ac6c:	4631      	mov	r1, r6
 800ac6e:	4680      	mov	r8, r0
 800ac70:	4638      	mov	r0, r7
 800ac72:	f7ff fe53 	bl	800a91c <_Bfree>
 800ac76:	4646      	mov	r6, r8
 800ac78:	106d      	asrs	r5, r5, #1
 800ac7a:	d00b      	beq.n	800ac94 <__pow5mult+0xa0>
 800ac7c:	6820      	ldr	r0, [r4, #0]
 800ac7e:	b938      	cbnz	r0, 800ac90 <__pow5mult+0x9c>
 800ac80:	4622      	mov	r2, r4
 800ac82:	4621      	mov	r1, r4
 800ac84:	4638      	mov	r0, r7
 800ac86:	f7ff ff13 	bl	800aab0 <__multiply>
 800ac8a:	6020      	str	r0, [r4, #0]
 800ac8c:	f8c0 9000 	str.w	r9, [r0]
 800ac90:	4604      	mov	r4, r0
 800ac92:	e7e4      	b.n	800ac5e <__pow5mult+0x6a>
 800ac94:	4630      	mov	r0, r6
 800ac96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9a:	bf00      	nop
 800ac9c:	0800bad8 	.word	0x0800bad8
 800aca0:	0800b9a6 	.word	0x0800b9a6
 800aca4:	0800ba26 	.word	0x0800ba26

0800aca8 <__lshift>:
 800aca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acac:	460c      	mov	r4, r1
 800acae:	6849      	ldr	r1, [r1, #4]
 800acb0:	6923      	ldr	r3, [r4, #16]
 800acb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	4607      	mov	r7, r0
 800acba:	4691      	mov	r9, r2
 800acbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acc0:	f108 0601 	add.w	r6, r8, #1
 800acc4:	42b3      	cmp	r3, r6
 800acc6:	db0b      	blt.n	800ace0 <__lshift+0x38>
 800acc8:	4638      	mov	r0, r7
 800acca:	f7ff fde7 	bl	800a89c <_Balloc>
 800acce:	4605      	mov	r5, r0
 800acd0:	b948      	cbnz	r0, 800ace6 <__lshift+0x3e>
 800acd2:	4602      	mov	r2, r0
 800acd4:	4b28      	ldr	r3, [pc, #160]	@ (800ad78 <__lshift+0xd0>)
 800acd6:	4829      	ldr	r0, [pc, #164]	@ (800ad7c <__lshift+0xd4>)
 800acd8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800acdc:	f000 fbd8 	bl	800b490 <__assert_func>
 800ace0:	3101      	adds	r1, #1
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	e7ee      	b.n	800acc4 <__lshift+0x1c>
 800ace6:	2300      	movs	r3, #0
 800ace8:	f100 0114 	add.w	r1, r0, #20
 800acec:	f100 0210 	add.w	r2, r0, #16
 800acf0:	4618      	mov	r0, r3
 800acf2:	4553      	cmp	r3, sl
 800acf4:	db33      	blt.n	800ad5e <__lshift+0xb6>
 800acf6:	6920      	ldr	r0, [r4, #16]
 800acf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acfc:	f104 0314 	add.w	r3, r4, #20
 800ad00:	f019 091f 	ands.w	r9, r9, #31
 800ad04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad0c:	d02b      	beq.n	800ad66 <__lshift+0xbe>
 800ad0e:	f1c9 0e20 	rsb	lr, r9, #32
 800ad12:	468a      	mov	sl, r1
 800ad14:	2200      	movs	r2, #0
 800ad16:	6818      	ldr	r0, [r3, #0]
 800ad18:	fa00 f009 	lsl.w	r0, r0, r9
 800ad1c:	4310      	orrs	r0, r2
 800ad1e:	f84a 0b04 	str.w	r0, [sl], #4
 800ad22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad26:	459c      	cmp	ip, r3
 800ad28:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad2c:	d8f3      	bhi.n	800ad16 <__lshift+0x6e>
 800ad2e:	ebac 0304 	sub.w	r3, ip, r4
 800ad32:	3b15      	subs	r3, #21
 800ad34:	f023 0303 	bic.w	r3, r3, #3
 800ad38:	3304      	adds	r3, #4
 800ad3a:	f104 0015 	add.w	r0, r4, #21
 800ad3e:	4560      	cmp	r0, ip
 800ad40:	bf88      	it	hi
 800ad42:	2304      	movhi	r3, #4
 800ad44:	50ca      	str	r2, [r1, r3]
 800ad46:	b10a      	cbz	r2, 800ad4c <__lshift+0xa4>
 800ad48:	f108 0602 	add.w	r6, r8, #2
 800ad4c:	3e01      	subs	r6, #1
 800ad4e:	4638      	mov	r0, r7
 800ad50:	612e      	str	r6, [r5, #16]
 800ad52:	4621      	mov	r1, r4
 800ad54:	f7ff fde2 	bl	800a91c <_Bfree>
 800ad58:	4628      	mov	r0, r5
 800ad5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad62:	3301      	adds	r3, #1
 800ad64:	e7c5      	b.n	800acf2 <__lshift+0x4a>
 800ad66:	3904      	subs	r1, #4
 800ad68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad70:	459c      	cmp	ip, r3
 800ad72:	d8f9      	bhi.n	800ad68 <__lshift+0xc0>
 800ad74:	e7ea      	b.n	800ad4c <__lshift+0xa4>
 800ad76:	bf00      	nop
 800ad78:	0800ba15 	.word	0x0800ba15
 800ad7c:	0800ba26 	.word	0x0800ba26

0800ad80 <__mcmp>:
 800ad80:	690a      	ldr	r2, [r1, #16]
 800ad82:	4603      	mov	r3, r0
 800ad84:	6900      	ldr	r0, [r0, #16]
 800ad86:	1a80      	subs	r0, r0, r2
 800ad88:	b530      	push	{r4, r5, lr}
 800ad8a:	d10e      	bne.n	800adaa <__mcmp+0x2a>
 800ad8c:	3314      	adds	r3, #20
 800ad8e:	3114      	adds	r1, #20
 800ad90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ada0:	4295      	cmp	r5, r2
 800ada2:	d003      	beq.n	800adac <__mcmp+0x2c>
 800ada4:	d205      	bcs.n	800adb2 <__mcmp+0x32>
 800ada6:	f04f 30ff 	mov.w	r0, #4294967295
 800adaa:	bd30      	pop	{r4, r5, pc}
 800adac:	42a3      	cmp	r3, r4
 800adae:	d3f3      	bcc.n	800ad98 <__mcmp+0x18>
 800adb0:	e7fb      	b.n	800adaa <__mcmp+0x2a>
 800adb2:	2001      	movs	r0, #1
 800adb4:	e7f9      	b.n	800adaa <__mcmp+0x2a>
	...

0800adb8 <__mdiff>:
 800adb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	4689      	mov	r9, r1
 800adbe:	4606      	mov	r6, r0
 800adc0:	4611      	mov	r1, r2
 800adc2:	4648      	mov	r0, r9
 800adc4:	4614      	mov	r4, r2
 800adc6:	f7ff ffdb 	bl	800ad80 <__mcmp>
 800adca:	1e05      	subs	r5, r0, #0
 800adcc:	d112      	bne.n	800adf4 <__mdiff+0x3c>
 800adce:	4629      	mov	r1, r5
 800add0:	4630      	mov	r0, r6
 800add2:	f7ff fd63 	bl	800a89c <_Balloc>
 800add6:	4602      	mov	r2, r0
 800add8:	b928      	cbnz	r0, 800ade6 <__mdiff+0x2e>
 800adda:	4b3f      	ldr	r3, [pc, #252]	@ (800aed8 <__mdiff+0x120>)
 800addc:	f240 2137 	movw	r1, #567	@ 0x237
 800ade0:	483e      	ldr	r0, [pc, #248]	@ (800aedc <__mdiff+0x124>)
 800ade2:	f000 fb55 	bl	800b490 <__assert_func>
 800ade6:	2301      	movs	r3, #1
 800ade8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adec:	4610      	mov	r0, r2
 800adee:	b003      	add	sp, #12
 800adf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf4:	bfbc      	itt	lt
 800adf6:	464b      	movlt	r3, r9
 800adf8:	46a1      	movlt	r9, r4
 800adfa:	4630      	mov	r0, r6
 800adfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae00:	bfba      	itte	lt
 800ae02:	461c      	movlt	r4, r3
 800ae04:	2501      	movlt	r5, #1
 800ae06:	2500      	movge	r5, #0
 800ae08:	f7ff fd48 	bl	800a89c <_Balloc>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	b918      	cbnz	r0, 800ae18 <__mdiff+0x60>
 800ae10:	4b31      	ldr	r3, [pc, #196]	@ (800aed8 <__mdiff+0x120>)
 800ae12:	f240 2145 	movw	r1, #581	@ 0x245
 800ae16:	e7e3      	b.n	800ade0 <__mdiff+0x28>
 800ae18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ae1c:	6926      	ldr	r6, [r4, #16]
 800ae1e:	60c5      	str	r5, [r0, #12]
 800ae20:	f109 0310 	add.w	r3, r9, #16
 800ae24:	f109 0514 	add.w	r5, r9, #20
 800ae28:	f104 0e14 	add.w	lr, r4, #20
 800ae2c:	f100 0b14 	add.w	fp, r0, #20
 800ae30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ae34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	46d9      	mov	r9, fp
 800ae3c:	f04f 0c00 	mov.w	ip, #0
 800ae40:	9b01      	ldr	r3, [sp, #4]
 800ae42:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ae46:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ae4a:	9301      	str	r3, [sp, #4]
 800ae4c:	fa1f f38a 	uxth.w	r3, sl
 800ae50:	4619      	mov	r1, r3
 800ae52:	b283      	uxth	r3, r0
 800ae54:	1acb      	subs	r3, r1, r3
 800ae56:	0c00      	lsrs	r0, r0, #16
 800ae58:	4463      	add	r3, ip
 800ae5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ae5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ae68:	4576      	cmp	r6, lr
 800ae6a:	f849 3b04 	str.w	r3, [r9], #4
 800ae6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae72:	d8e5      	bhi.n	800ae40 <__mdiff+0x88>
 800ae74:	1b33      	subs	r3, r6, r4
 800ae76:	3b15      	subs	r3, #21
 800ae78:	f023 0303 	bic.w	r3, r3, #3
 800ae7c:	3415      	adds	r4, #21
 800ae7e:	3304      	adds	r3, #4
 800ae80:	42a6      	cmp	r6, r4
 800ae82:	bf38      	it	cc
 800ae84:	2304      	movcc	r3, #4
 800ae86:	441d      	add	r5, r3
 800ae88:	445b      	add	r3, fp
 800ae8a:	461e      	mov	r6, r3
 800ae8c:	462c      	mov	r4, r5
 800ae8e:	4544      	cmp	r4, r8
 800ae90:	d30e      	bcc.n	800aeb0 <__mdiff+0xf8>
 800ae92:	f108 0103 	add.w	r1, r8, #3
 800ae96:	1b49      	subs	r1, r1, r5
 800ae98:	f021 0103 	bic.w	r1, r1, #3
 800ae9c:	3d03      	subs	r5, #3
 800ae9e:	45a8      	cmp	r8, r5
 800aea0:	bf38      	it	cc
 800aea2:	2100      	movcc	r1, #0
 800aea4:	440b      	add	r3, r1
 800aea6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aeaa:	b191      	cbz	r1, 800aed2 <__mdiff+0x11a>
 800aeac:	6117      	str	r7, [r2, #16]
 800aeae:	e79d      	b.n	800adec <__mdiff+0x34>
 800aeb0:	f854 1b04 	ldr.w	r1, [r4], #4
 800aeb4:	46e6      	mov	lr, ip
 800aeb6:	0c08      	lsrs	r0, r1, #16
 800aeb8:	fa1c fc81 	uxtah	ip, ip, r1
 800aebc:	4471      	add	r1, lr
 800aebe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aec2:	b289      	uxth	r1, r1
 800aec4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aec8:	f846 1b04 	str.w	r1, [r6], #4
 800aecc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aed0:	e7dd      	b.n	800ae8e <__mdiff+0xd6>
 800aed2:	3f01      	subs	r7, #1
 800aed4:	e7e7      	b.n	800aea6 <__mdiff+0xee>
 800aed6:	bf00      	nop
 800aed8:	0800ba15 	.word	0x0800ba15
 800aedc:	0800ba26 	.word	0x0800ba26

0800aee0 <__d2b>:
 800aee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aee4:	460f      	mov	r7, r1
 800aee6:	2101      	movs	r1, #1
 800aee8:	ec59 8b10 	vmov	r8, r9, d0
 800aeec:	4616      	mov	r6, r2
 800aeee:	f7ff fcd5 	bl	800a89c <_Balloc>
 800aef2:	4604      	mov	r4, r0
 800aef4:	b930      	cbnz	r0, 800af04 <__d2b+0x24>
 800aef6:	4602      	mov	r2, r0
 800aef8:	4b23      	ldr	r3, [pc, #140]	@ (800af88 <__d2b+0xa8>)
 800aefa:	4824      	ldr	r0, [pc, #144]	@ (800af8c <__d2b+0xac>)
 800aefc:	f240 310f 	movw	r1, #783	@ 0x30f
 800af00:	f000 fac6 	bl	800b490 <__assert_func>
 800af04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af0c:	b10d      	cbz	r5, 800af12 <__d2b+0x32>
 800af0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	f1b8 0300 	subs.w	r3, r8, #0
 800af18:	d023      	beq.n	800af62 <__d2b+0x82>
 800af1a:	4668      	mov	r0, sp
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	f7ff fd84 	bl	800aa2a <__lo0bits>
 800af22:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af26:	b1d0      	cbz	r0, 800af5e <__d2b+0x7e>
 800af28:	f1c0 0320 	rsb	r3, r0, #32
 800af2c:	fa02 f303 	lsl.w	r3, r2, r3
 800af30:	430b      	orrs	r3, r1
 800af32:	40c2      	lsrs	r2, r0
 800af34:	6163      	str	r3, [r4, #20]
 800af36:	9201      	str	r2, [sp, #4]
 800af38:	9b01      	ldr	r3, [sp, #4]
 800af3a:	61a3      	str	r3, [r4, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bf0c      	ite	eq
 800af40:	2201      	moveq	r2, #1
 800af42:	2202      	movne	r2, #2
 800af44:	6122      	str	r2, [r4, #16]
 800af46:	b1a5      	cbz	r5, 800af72 <__d2b+0x92>
 800af48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800af4c:	4405      	add	r5, r0
 800af4e:	603d      	str	r5, [r7, #0]
 800af50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800af54:	6030      	str	r0, [r6, #0]
 800af56:	4620      	mov	r0, r4
 800af58:	b003      	add	sp, #12
 800af5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af5e:	6161      	str	r1, [r4, #20]
 800af60:	e7ea      	b.n	800af38 <__d2b+0x58>
 800af62:	a801      	add	r0, sp, #4
 800af64:	f7ff fd61 	bl	800aa2a <__lo0bits>
 800af68:	9b01      	ldr	r3, [sp, #4]
 800af6a:	6163      	str	r3, [r4, #20]
 800af6c:	3020      	adds	r0, #32
 800af6e:	2201      	movs	r2, #1
 800af70:	e7e8      	b.n	800af44 <__d2b+0x64>
 800af72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800af7a:	6038      	str	r0, [r7, #0]
 800af7c:	6918      	ldr	r0, [r3, #16]
 800af7e:	f7ff fd35 	bl	800a9ec <__hi0bits>
 800af82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af86:	e7e5      	b.n	800af54 <__d2b+0x74>
 800af88:	0800ba15 	.word	0x0800ba15
 800af8c:	0800ba26 	.word	0x0800ba26

0800af90 <__sfputc_r>:
 800af90:	6893      	ldr	r3, [r2, #8]
 800af92:	3b01      	subs	r3, #1
 800af94:	2b00      	cmp	r3, #0
 800af96:	b410      	push	{r4}
 800af98:	6093      	str	r3, [r2, #8]
 800af9a:	da08      	bge.n	800afae <__sfputc_r+0x1e>
 800af9c:	6994      	ldr	r4, [r2, #24]
 800af9e:	42a3      	cmp	r3, r4
 800afa0:	db01      	blt.n	800afa6 <__sfputc_r+0x16>
 800afa2:	290a      	cmp	r1, #10
 800afa4:	d103      	bne.n	800afae <__sfputc_r+0x1e>
 800afa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afaa:	f7fe bcae 	b.w	800990a <__swbuf_r>
 800afae:	6813      	ldr	r3, [r2, #0]
 800afb0:	1c58      	adds	r0, r3, #1
 800afb2:	6010      	str	r0, [r2, #0]
 800afb4:	7019      	strb	r1, [r3, #0]
 800afb6:	4608      	mov	r0, r1
 800afb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <__sfputs_r>:
 800afbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc0:	4606      	mov	r6, r0
 800afc2:	460f      	mov	r7, r1
 800afc4:	4614      	mov	r4, r2
 800afc6:	18d5      	adds	r5, r2, r3
 800afc8:	42ac      	cmp	r4, r5
 800afca:	d101      	bne.n	800afd0 <__sfputs_r+0x12>
 800afcc:	2000      	movs	r0, #0
 800afce:	e007      	b.n	800afe0 <__sfputs_r+0x22>
 800afd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd4:	463a      	mov	r2, r7
 800afd6:	4630      	mov	r0, r6
 800afd8:	f7ff ffda 	bl	800af90 <__sfputc_r>
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	d1f3      	bne.n	800afc8 <__sfputs_r+0xa>
 800afe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afe4 <_vfiprintf_r>:
 800afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	460d      	mov	r5, r1
 800afea:	b09d      	sub	sp, #116	@ 0x74
 800afec:	4614      	mov	r4, r2
 800afee:	4698      	mov	r8, r3
 800aff0:	4606      	mov	r6, r0
 800aff2:	b118      	cbz	r0, 800affc <_vfiprintf_r+0x18>
 800aff4:	6a03      	ldr	r3, [r0, #32]
 800aff6:	b90b      	cbnz	r3, 800affc <_vfiprintf_r+0x18>
 800aff8:	f7fe fb9e 	bl	8009738 <__sinit>
 800affc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800affe:	07d9      	lsls	r1, r3, #31
 800b000:	d405      	bmi.n	800b00e <_vfiprintf_r+0x2a>
 800b002:	89ab      	ldrh	r3, [r5, #12]
 800b004:	059a      	lsls	r2, r3, #22
 800b006:	d402      	bmi.n	800b00e <_vfiprintf_r+0x2a>
 800b008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b00a:	f7fe fda0 	bl	8009b4e <__retarget_lock_acquire_recursive>
 800b00e:	89ab      	ldrh	r3, [r5, #12]
 800b010:	071b      	lsls	r3, r3, #28
 800b012:	d501      	bpl.n	800b018 <_vfiprintf_r+0x34>
 800b014:	692b      	ldr	r3, [r5, #16]
 800b016:	b99b      	cbnz	r3, 800b040 <_vfiprintf_r+0x5c>
 800b018:	4629      	mov	r1, r5
 800b01a:	4630      	mov	r0, r6
 800b01c:	f7fe fcb4 	bl	8009988 <__swsetup_r>
 800b020:	b170      	cbz	r0, 800b040 <_vfiprintf_r+0x5c>
 800b022:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b024:	07dc      	lsls	r4, r3, #31
 800b026:	d504      	bpl.n	800b032 <_vfiprintf_r+0x4e>
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	b01d      	add	sp, #116	@ 0x74
 800b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	0598      	lsls	r0, r3, #22
 800b036:	d4f7      	bmi.n	800b028 <_vfiprintf_r+0x44>
 800b038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b03a:	f7fe fd89 	bl	8009b50 <__retarget_lock_release_recursive>
 800b03e:	e7f3      	b.n	800b028 <_vfiprintf_r+0x44>
 800b040:	2300      	movs	r3, #0
 800b042:	9309      	str	r3, [sp, #36]	@ 0x24
 800b044:	2320      	movs	r3, #32
 800b046:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b04a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b04e:	2330      	movs	r3, #48	@ 0x30
 800b050:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b200 <_vfiprintf_r+0x21c>
 800b054:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b058:	f04f 0901 	mov.w	r9, #1
 800b05c:	4623      	mov	r3, r4
 800b05e:	469a      	mov	sl, r3
 800b060:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b064:	b10a      	cbz	r2, 800b06a <_vfiprintf_r+0x86>
 800b066:	2a25      	cmp	r2, #37	@ 0x25
 800b068:	d1f9      	bne.n	800b05e <_vfiprintf_r+0x7a>
 800b06a:	ebba 0b04 	subs.w	fp, sl, r4
 800b06e:	d00b      	beq.n	800b088 <_vfiprintf_r+0xa4>
 800b070:	465b      	mov	r3, fp
 800b072:	4622      	mov	r2, r4
 800b074:	4629      	mov	r1, r5
 800b076:	4630      	mov	r0, r6
 800b078:	f7ff ffa1 	bl	800afbe <__sfputs_r>
 800b07c:	3001      	adds	r0, #1
 800b07e:	f000 80a7 	beq.w	800b1d0 <_vfiprintf_r+0x1ec>
 800b082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b084:	445a      	add	r2, fp
 800b086:	9209      	str	r2, [sp, #36]	@ 0x24
 800b088:	f89a 3000 	ldrb.w	r3, [sl]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 809f 	beq.w	800b1d0 <_vfiprintf_r+0x1ec>
 800b092:	2300      	movs	r3, #0
 800b094:	f04f 32ff 	mov.w	r2, #4294967295
 800b098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b09c:	f10a 0a01 	add.w	sl, sl, #1
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	9307      	str	r3, [sp, #28]
 800b0a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0aa:	4654      	mov	r4, sl
 800b0ac:	2205      	movs	r2, #5
 800b0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b2:	4853      	ldr	r0, [pc, #332]	@ (800b200 <_vfiprintf_r+0x21c>)
 800b0b4:	f7f5 f8b4 	bl	8000220 <memchr>
 800b0b8:	9a04      	ldr	r2, [sp, #16]
 800b0ba:	b9d8      	cbnz	r0, 800b0f4 <_vfiprintf_r+0x110>
 800b0bc:	06d1      	lsls	r1, r2, #27
 800b0be:	bf44      	itt	mi
 800b0c0:	2320      	movmi	r3, #32
 800b0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0c6:	0713      	lsls	r3, r2, #28
 800b0c8:	bf44      	itt	mi
 800b0ca:	232b      	movmi	r3, #43	@ 0x2b
 800b0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0d6:	d015      	beq.n	800b104 <_vfiprintf_r+0x120>
 800b0d8:	9a07      	ldr	r2, [sp, #28]
 800b0da:	4654      	mov	r4, sl
 800b0dc:	2000      	movs	r0, #0
 800b0de:	f04f 0c0a 	mov.w	ip, #10
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e8:	3b30      	subs	r3, #48	@ 0x30
 800b0ea:	2b09      	cmp	r3, #9
 800b0ec:	d94b      	bls.n	800b186 <_vfiprintf_r+0x1a2>
 800b0ee:	b1b0      	cbz	r0, 800b11e <_vfiprintf_r+0x13a>
 800b0f0:	9207      	str	r2, [sp, #28]
 800b0f2:	e014      	b.n	800b11e <_vfiprintf_r+0x13a>
 800b0f4:	eba0 0308 	sub.w	r3, r0, r8
 800b0f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	46a2      	mov	sl, r4
 800b102:	e7d2      	b.n	800b0aa <_vfiprintf_r+0xc6>
 800b104:	9b03      	ldr	r3, [sp, #12]
 800b106:	1d19      	adds	r1, r3, #4
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	9103      	str	r1, [sp, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bfbb      	ittet	lt
 800b110:	425b      	neglt	r3, r3
 800b112:	f042 0202 	orrlt.w	r2, r2, #2
 800b116:	9307      	strge	r3, [sp, #28]
 800b118:	9307      	strlt	r3, [sp, #28]
 800b11a:	bfb8      	it	lt
 800b11c:	9204      	strlt	r2, [sp, #16]
 800b11e:	7823      	ldrb	r3, [r4, #0]
 800b120:	2b2e      	cmp	r3, #46	@ 0x2e
 800b122:	d10a      	bne.n	800b13a <_vfiprintf_r+0x156>
 800b124:	7863      	ldrb	r3, [r4, #1]
 800b126:	2b2a      	cmp	r3, #42	@ 0x2a
 800b128:	d132      	bne.n	800b190 <_vfiprintf_r+0x1ac>
 800b12a:	9b03      	ldr	r3, [sp, #12]
 800b12c:	1d1a      	adds	r2, r3, #4
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	9203      	str	r2, [sp, #12]
 800b132:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b136:	3402      	adds	r4, #2
 800b138:	9305      	str	r3, [sp, #20]
 800b13a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b210 <_vfiprintf_r+0x22c>
 800b13e:	7821      	ldrb	r1, [r4, #0]
 800b140:	2203      	movs	r2, #3
 800b142:	4650      	mov	r0, sl
 800b144:	f7f5 f86c 	bl	8000220 <memchr>
 800b148:	b138      	cbz	r0, 800b15a <_vfiprintf_r+0x176>
 800b14a:	9b04      	ldr	r3, [sp, #16]
 800b14c:	eba0 000a 	sub.w	r0, r0, sl
 800b150:	2240      	movs	r2, #64	@ 0x40
 800b152:	4082      	lsls	r2, r0
 800b154:	4313      	orrs	r3, r2
 800b156:	3401      	adds	r4, #1
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b15e:	4829      	ldr	r0, [pc, #164]	@ (800b204 <_vfiprintf_r+0x220>)
 800b160:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b164:	2206      	movs	r2, #6
 800b166:	f7f5 f85b 	bl	8000220 <memchr>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d03f      	beq.n	800b1ee <_vfiprintf_r+0x20a>
 800b16e:	4b26      	ldr	r3, [pc, #152]	@ (800b208 <_vfiprintf_r+0x224>)
 800b170:	bb1b      	cbnz	r3, 800b1ba <_vfiprintf_r+0x1d6>
 800b172:	9b03      	ldr	r3, [sp, #12]
 800b174:	3307      	adds	r3, #7
 800b176:	f023 0307 	bic.w	r3, r3, #7
 800b17a:	3308      	adds	r3, #8
 800b17c:	9303      	str	r3, [sp, #12]
 800b17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b180:	443b      	add	r3, r7
 800b182:	9309      	str	r3, [sp, #36]	@ 0x24
 800b184:	e76a      	b.n	800b05c <_vfiprintf_r+0x78>
 800b186:	fb0c 3202 	mla	r2, ip, r2, r3
 800b18a:	460c      	mov	r4, r1
 800b18c:	2001      	movs	r0, #1
 800b18e:	e7a8      	b.n	800b0e2 <_vfiprintf_r+0xfe>
 800b190:	2300      	movs	r3, #0
 800b192:	3401      	adds	r4, #1
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	4619      	mov	r1, r3
 800b198:	f04f 0c0a 	mov.w	ip, #10
 800b19c:	4620      	mov	r0, r4
 800b19e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a2:	3a30      	subs	r2, #48	@ 0x30
 800b1a4:	2a09      	cmp	r2, #9
 800b1a6:	d903      	bls.n	800b1b0 <_vfiprintf_r+0x1cc>
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d0c6      	beq.n	800b13a <_vfiprintf_r+0x156>
 800b1ac:	9105      	str	r1, [sp, #20]
 800b1ae:	e7c4      	b.n	800b13a <_vfiprintf_r+0x156>
 800b1b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e7f0      	b.n	800b19c <_vfiprintf_r+0x1b8>
 800b1ba:	ab03      	add	r3, sp, #12
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	462a      	mov	r2, r5
 800b1c0:	4b12      	ldr	r3, [pc, #72]	@ (800b20c <_vfiprintf_r+0x228>)
 800b1c2:	a904      	add	r1, sp, #16
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f7fd fe75 	bl	8008eb4 <_printf_float>
 800b1ca:	4607      	mov	r7, r0
 800b1cc:	1c78      	adds	r0, r7, #1
 800b1ce:	d1d6      	bne.n	800b17e <_vfiprintf_r+0x19a>
 800b1d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1d2:	07d9      	lsls	r1, r3, #31
 800b1d4:	d405      	bmi.n	800b1e2 <_vfiprintf_r+0x1fe>
 800b1d6:	89ab      	ldrh	r3, [r5, #12]
 800b1d8:	059a      	lsls	r2, r3, #22
 800b1da:	d402      	bmi.n	800b1e2 <_vfiprintf_r+0x1fe>
 800b1dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1de:	f7fe fcb7 	bl	8009b50 <__retarget_lock_release_recursive>
 800b1e2:	89ab      	ldrh	r3, [r5, #12]
 800b1e4:	065b      	lsls	r3, r3, #25
 800b1e6:	f53f af1f 	bmi.w	800b028 <_vfiprintf_r+0x44>
 800b1ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1ec:	e71e      	b.n	800b02c <_vfiprintf_r+0x48>
 800b1ee:	ab03      	add	r3, sp, #12
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	462a      	mov	r2, r5
 800b1f4:	4b05      	ldr	r3, [pc, #20]	@ (800b20c <_vfiprintf_r+0x228>)
 800b1f6:	a904      	add	r1, sp, #16
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f7fe f8f3 	bl	80093e4 <_printf_i>
 800b1fe:	e7e4      	b.n	800b1ca <_vfiprintf_r+0x1e6>
 800b200:	0800ba7f 	.word	0x0800ba7f
 800b204:	0800ba89 	.word	0x0800ba89
 800b208:	08008eb5 	.word	0x08008eb5
 800b20c:	0800afbf 	.word	0x0800afbf
 800b210:	0800ba85 	.word	0x0800ba85

0800b214 <__sflush_r>:
 800b214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b21c:	0716      	lsls	r6, r2, #28
 800b21e:	4605      	mov	r5, r0
 800b220:	460c      	mov	r4, r1
 800b222:	d454      	bmi.n	800b2ce <__sflush_r+0xba>
 800b224:	684b      	ldr	r3, [r1, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	dc02      	bgt.n	800b230 <__sflush_r+0x1c>
 800b22a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dd48      	ble.n	800b2c2 <__sflush_r+0xae>
 800b230:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b232:	2e00      	cmp	r6, #0
 800b234:	d045      	beq.n	800b2c2 <__sflush_r+0xae>
 800b236:	2300      	movs	r3, #0
 800b238:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b23c:	682f      	ldr	r7, [r5, #0]
 800b23e:	6a21      	ldr	r1, [r4, #32]
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	d030      	beq.n	800b2a6 <__sflush_r+0x92>
 800b244:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	0759      	lsls	r1, r3, #29
 800b24a:	d505      	bpl.n	800b258 <__sflush_r+0x44>
 800b24c:	6863      	ldr	r3, [r4, #4]
 800b24e:	1ad2      	subs	r2, r2, r3
 800b250:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b252:	b10b      	cbz	r3, 800b258 <__sflush_r+0x44>
 800b254:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b256:	1ad2      	subs	r2, r2, r3
 800b258:	2300      	movs	r3, #0
 800b25a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b25c:	6a21      	ldr	r1, [r4, #32]
 800b25e:	4628      	mov	r0, r5
 800b260:	47b0      	blx	r6
 800b262:	1c43      	adds	r3, r0, #1
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	d106      	bne.n	800b276 <__sflush_r+0x62>
 800b268:	6829      	ldr	r1, [r5, #0]
 800b26a:	291d      	cmp	r1, #29
 800b26c:	d82b      	bhi.n	800b2c6 <__sflush_r+0xb2>
 800b26e:	4a2a      	ldr	r2, [pc, #168]	@ (800b318 <__sflush_r+0x104>)
 800b270:	40ca      	lsrs	r2, r1
 800b272:	07d6      	lsls	r6, r2, #31
 800b274:	d527      	bpl.n	800b2c6 <__sflush_r+0xb2>
 800b276:	2200      	movs	r2, #0
 800b278:	6062      	str	r2, [r4, #4]
 800b27a:	04d9      	lsls	r1, r3, #19
 800b27c:	6922      	ldr	r2, [r4, #16]
 800b27e:	6022      	str	r2, [r4, #0]
 800b280:	d504      	bpl.n	800b28c <__sflush_r+0x78>
 800b282:	1c42      	adds	r2, r0, #1
 800b284:	d101      	bne.n	800b28a <__sflush_r+0x76>
 800b286:	682b      	ldr	r3, [r5, #0]
 800b288:	b903      	cbnz	r3, 800b28c <__sflush_r+0x78>
 800b28a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b28c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b28e:	602f      	str	r7, [r5, #0]
 800b290:	b1b9      	cbz	r1, 800b2c2 <__sflush_r+0xae>
 800b292:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b296:	4299      	cmp	r1, r3
 800b298:	d002      	beq.n	800b2a0 <__sflush_r+0x8c>
 800b29a:	4628      	mov	r0, r5
 800b29c:	f7ff fab4 	bl	800a808 <_free_r>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2a4:	e00d      	b.n	800b2c2 <__sflush_r+0xae>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	47b0      	blx	r6
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	1c50      	adds	r0, r2, #1
 800b2b0:	d1c9      	bne.n	800b246 <__sflush_r+0x32>
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d0c6      	beq.n	800b246 <__sflush_r+0x32>
 800b2b8:	2b1d      	cmp	r3, #29
 800b2ba:	d001      	beq.n	800b2c0 <__sflush_r+0xac>
 800b2bc:	2b16      	cmp	r3, #22
 800b2be:	d11e      	bne.n	800b2fe <__sflush_r+0xea>
 800b2c0:	602f      	str	r7, [r5, #0]
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	e022      	b.n	800b30c <__sflush_r+0xf8>
 800b2c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ca:	b21b      	sxth	r3, r3
 800b2cc:	e01b      	b.n	800b306 <__sflush_r+0xf2>
 800b2ce:	690f      	ldr	r7, [r1, #16]
 800b2d0:	2f00      	cmp	r7, #0
 800b2d2:	d0f6      	beq.n	800b2c2 <__sflush_r+0xae>
 800b2d4:	0793      	lsls	r3, r2, #30
 800b2d6:	680e      	ldr	r6, [r1, #0]
 800b2d8:	bf08      	it	eq
 800b2da:	694b      	ldreq	r3, [r1, #20]
 800b2dc:	600f      	str	r7, [r1, #0]
 800b2de:	bf18      	it	ne
 800b2e0:	2300      	movne	r3, #0
 800b2e2:	eba6 0807 	sub.w	r8, r6, r7
 800b2e6:	608b      	str	r3, [r1, #8]
 800b2e8:	f1b8 0f00 	cmp.w	r8, #0
 800b2ec:	dde9      	ble.n	800b2c2 <__sflush_r+0xae>
 800b2ee:	6a21      	ldr	r1, [r4, #32]
 800b2f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b2f2:	4643      	mov	r3, r8
 800b2f4:	463a      	mov	r2, r7
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	47b0      	blx	r6
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	dc08      	bgt.n	800b310 <__sflush_r+0xfc>
 800b2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b306:	81a3      	strh	r3, [r4, #12]
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b310:	4407      	add	r7, r0
 800b312:	eba8 0800 	sub.w	r8, r8, r0
 800b316:	e7e7      	b.n	800b2e8 <__sflush_r+0xd4>
 800b318:	20400001 	.word	0x20400001

0800b31c <_fflush_r>:
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	690b      	ldr	r3, [r1, #16]
 800b320:	4605      	mov	r5, r0
 800b322:	460c      	mov	r4, r1
 800b324:	b913      	cbnz	r3, 800b32c <_fflush_r+0x10>
 800b326:	2500      	movs	r5, #0
 800b328:	4628      	mov	r0, r5
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	b118      	cbz	r0, 800b336 <_fflush_r+0x1a>
 800b32e:	6a03      	ldr	r3, [r0, #32]
 800b330:	b90b      	cbnz	r3, 800b336 <_fflush_r+0x1a>
 800b332:	f7fe fa01 	bl	8009738 <__sinit>
 800b336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0f3      	beq.n	800b326 <_fflush_r+0xa>
 800b33e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b340:	07d0      	lsls	r0, r2, #31
 800b342:	d404      	bmi.n	800b34e <_fflush_r+0x32>
 800b344:	0599      	lsls	r1, r3, #22
 800b346:	d402      	bmi.n	800b34e <_fflush_r+0x32>
 800b348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b34a:	f7fe fc00 	bl	8009b4e <__retarget_lock_acquire_recursive>
 800b34e:	4628      	mov	r0, r5
 800b350:	4621      	mov	r1, r4
 800b352:	f7ff ff5f 	bl	800b214 <__sflush_r>
 800b356:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b358:	07da      	lsls	r2, r3, #31
 800b35a:	4605      	mov	r5, r0
 800b35c:	d4e4      	bmi.n	800b328 <_fflush_r+0xc>
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	059b      	lsls	r3, r3, #22
 800b362:	d4e1      	bmi.n	800b328 <_fflush_r+0xc>
 800b364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b366:	f7fe fbf3 	bl	8009b50 <__retarget_lock_release_recursive>
 800b36a:	e7dd      	b.n	800b328 <_fflush_r+0xc>

0800b36c <__swhatbuf_r>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	460c      	mov	r4, r1
 800b370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b374:	2900      	cmp	r1, #0
 800b376:	b096      	sub	sp, #88	@ 0x58
 800b378:	4615      	mov	r5, r2
 800b37a:	461e      	mov	r6, r3
 800b37c:	da0d      	bge.n	800b39a <__swhatbuf_r+0x2e>
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b384:	f04f 0100 	mov.w	r1, #0
 800b388:	bf14      	ite	ne
 800b38a:	2340      	movne	r3, #64	@ 0x40
 800b38c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b390:	2000      	movs	r0, #0
 800b392:	6031      	str	r1, [r6, #0]
 800b394:	602b      	str	r3, [r5, #0]
 800b396:	b016      	add	sp, #88	@ 0x58
 800b398:	bd70      	pop	{r4, r5, r6, pc}
 800b39a:	466a      	mov	r2, sp
 800b39c:	f000 f848 	bl	800b430 <_fstat_r>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	dbec      	blt.n	800b37e <__swhatbuf_r+0x12>
 800b3a4:	9901      	ldr	r1, [sp, #4]
 800b3a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b3aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3ae:	4259      	negs	r1, r3
 800b3b0:	4159      	adcs	r1, r3
 800b3b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3b6:	e7eb      	b.n	800b390 <__swhatbuf_r+0x24>

0800b3b8 <__smakebuf_r>:
 800b3b8:	898b      	ldrh	r3, [r1, #12]
 800b3ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3bc:	079d      	lsls	r5, r3, #30
 800b3be:	4606      	mov	r6, r0
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	d507      	bpl.n	800b3d4 <__smakebuf_r+0x1c>
 800b3c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	6123      	str	r3, [r4, #16]
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	6163      	str	r3, [r4, #20]
 800b3d0:	b003      	add	sp, #12
 800b3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3d4:	ab01      	add	r3, sp, #4
 800b3d6:	466a      	mov	r2, sp
 800b3d8:	f7ff ffc8 	bl	800b36c <__swhatbuf_r>
 800b3dc:	9f00      	ldr	r7, [sp, #0]
 800b3de:	4605      	mov	r5, r0
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7fd fbb6 	bl	8008b54 <_malloc_r>
 800b3e8:	b948      	cbnz	r0, 800b3fe <__smakebuf_r+0x46>
 800b3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ee:	059a      	lsls	r2, r3, #22
 800b3f0:	d4ee      	bmi.n	800b3d0 <__smakebuf_r+0x18>
 800b3f2:	f023 0303 	bic.w	r3, r3, #3
 800b3f6:	f043 0302 	orr.w	r3, r3, #2
 800b3fa:	81a3      	strh	r3, [r4, #12]
 800b3fc:	e7e2      	b.n	800b3c4 <__smakebuf_r+0xc>
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	6020      	str	r0, [r4, #0]
 800b402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b406:	81a3      	strh	r3, [r4, #12]
 800b408:	9b01      	ldr	r3, [sp, #4]
 800b40a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b40e:	b15b      	cbz	r3, 800b428 <__smakebuf_r+0x70>
 800b410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b414:	4630      	mov	r0, r6
 800b416:	f000 f81d 	bl	800b454 <_isatty_r>
 800b41a:	b128      	cbz	r0, 800b428 <__smakebuf_r+0x70>
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	f023 0303 	bic.w	r3, r3, #3
 800b422:	f043 0301 	orr.w	r3, r3, #1
 800b426:	81a3      	strh	r3, [r4, #12]
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	431d      	orrs	r5, r3
 800b42c:	81a5      	strh	r5, [r4, #12]
 800b42e:	e7cf      	b.n	800b3d0 <__smakebuf_r+0x18>

0800b430 <_fstat_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4d07      	ldr	r5, [pc, #28]	@ (800b450 <_fstat_r+0x20>)
 800b434:	2300      	movs	r3, #0
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	4611      	mov	r1, r2
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	f7f6 ff34 	bl	80022aa <_fstat>
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	d102      	bne.n	800b44c <_fstat_r+0x1c>
 800b446:	682b      	ldr	r3, [r5, #0]
 800b448:	b103      	cbz	r3, 800b44c <_fstat_r+0x1c>
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	bd38      	pop	{r3, r4, r5, pc}
 800b44e:	bf00      	nop
 800b450:	2000065c 	.word	0x2000065c

0800b454 <_isatty_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4d06      	ldr	r5, [pc, #24]	@ (800b470 <_isatty_r+0x1c>)
 800b458:	2300      	movs	r3, #0
 800b45a:	4604      	mov	r4, r0
 800b45c:	4608      	mov	r0, r1
 800b45e:	602b      	str	r3, [r5, #0]
 800b460:	f7f6 ff33 	bl	80022ca <_isatty>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d102      	bne.n	800b46e <_isatty_r+0x1a>
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	b103      	cbz	r3, 800b46e <_isatty_r+0x1a>
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	2000065c 	.word	0x2000065c

0800b474 <memcpy>:
 800b474:	440a      	add	r2, r1
 800b476:	4291      	cmp	r1, r2
 800b478:	f100 33ff 	add.w	r3, r0, #4294967295
 800b47c:	d100      	bne.n	800b480 <memcpy+0xc>
 800b47e:	4770      	bx	lr
 800b480:	b510      	push	{r4, lr}
 800b482:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b48a:	4291      	cmp	r1, r2
 800b48c:	d1f9      	bne.n	800b482 <memcpy+0xe>
 800b48e:	bd10      	pop	{r4, pc}

0800b490 <__assert_func>:
 800b490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b492:	4614      	mov	r4, r2
 800b494:	461a      	mov	r2, r3
 800b496:	4b09      	ldr	r3, [pc, #36]	@ (800b4bc <__assert_func+0x2c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4605      	mov	r5, r0
 800b49c:	68d8      	ldr	r0, [r3, #12]
 800b49e:	b14c      	cbz	r4, 800b4b4 <__assert_func+0x24>
 800b4a0:	4b07      	ldr	r3, [pc, #28]	@ (800b4c0 <__assert_func+0x30>)
 800b4a2:	9100      	str	r1, [sp, #0]
 800b4a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4a8:	4906      	ldr	r1, [pc, #24]	@ (800b4c4 <__assert_func+0x34>)
 800b4aa:	462b      	mov	r3, r5
 800b4ac:	f000 f842 	bl	800b534 <fiprintf>
 800b4b0:	f000 f852 	bl	800b558 <abort>
 800b4b4:	4b04      	ldr	r3, [pc, #16]	@ (800b4c8 <__assert_func+0x38>)
 800b4b6:	461c      	mov	r4, r3
 800b4b8:	e7f3      	b.n	800b4a2 <__assert_func+0x12>
 800b4ba:	bf00      	nop
 800b4bc:	20000058 	.word	0x20000058
 800b4c0:	0800ba9a 	.word	0x0800ba9a
 800b4c4:	0800baa7 	.word	0x0800baa7
 800b4c8:	0800bad5 	.word	0x0800bad5

0800b4cc <_calloc_r>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	fba1 5402 	umull	r5, r4, r1, r2
 800b4d2:	b934      	cbnz	r4, 800b4e2 <_calloc_r+0x16>
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	f7fd fb3d 	bl	8008b54 <_malloc_r>
 800b4da:	4606      	mov	r6, r0
 800b4dc:	b928      	cbnz	r0, 800b4ea <_calloc_r+0x1e>
 800b4de:	4630      	mov	r0, r6
 800b4e0:	bd70      	pop	{r4, r5, r6, pc}
 800b4e2:	220c      	movs	r2, #12
 800b4e4:	6002      	str	r2, [r0, #0]
 800b4e6:	2600      	movs	r6, #0
 800b4e8:	e7f9      	b.n	800b4de <_calloc_r+0x12>
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	f7fe faa1 	bl	8009a34 <memset>
 800b4f2:	e7f4      	b.n	800b4de <_calloc_r+0x12>

0800b4f4 <__ascii_mbtowc>:
 800b4f4:	b082      	sub	sp, #8
 800b4f6:	b901      	cbnz	r1, 800b4fa <__ascii_mbtowc+0x6>
 800b4f8:	a901      	add	r1, sp, #4
 800b4fa:	b142      	cbz	r2, 800b50e <__ascii_mbtowc+0x1a>
 800b4fc:	b14b      	cbz	r3, 800b512 <__ascii_mbtowc+0x1e>
 800b4fe:	7813      	ldrb	r3, [r2, #0]
 800b500:	600b      	str	r3, [r1, #0]
 800b502:	7812      	ldrb	r2, [r2, #0]
 800b504:	1e10      	subs	r0, r2, #0
 800b506:	bf18      	it	ne
 800b508:	2001      	movne	r0, #1
 800b50a:	b002      	add	sp, #8
 800b50c:	4770      	bx	lr
 800b50e:	4610      	mov	r0, r2
 800b510:	e7fb      	b.n	800b50a <__ascii_mbtowc+0x16>
 800b512:	f06f 0001 	mvn.w	r0, #1
 800b516:	e7f8      	b.n	800b50a <__ascii_mbtowc+0x16>

0800b518 <__ascii_wctomb>:
 800b518:	4603      	mov	r3, r0
 800b51a:	4608      	mov	r0, r1
 800b51c:	b141      	cbz	r1, 800b530 <__ascii_wctomb+0x18>
 800b51e:	2aff      	cmp	r2, #255	@ 0xff
 800b520:	d904      	bls.n	800b52c <__ascii_wctomb+0x14>
 800b522:	228a      	movs	r2, #138	@ 0x8a
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	f04f 30ff 	mov.w	r0, #4294967295
 800b52a:	4770      	bx	lr
 800b52c:	700a      	strb	r2, [r1, #0]
 800b52e:	2001      	movs	r0, #1
 800b530:	4770      	bx	lr
	...

0800b534 <fiprintf>:
 800b534:	b40e      	push	{r1, r2, r3}
 800b536:	b503      	push	{r0, r1, lr}
 800b538:	4601      	mov	r1, r0
 800b53a:	ab03      	add	r3, sp, #12
 800b53c:	4805      	ldr	r0, [pc, #20]	@ (800b554 <fiprintf+0x20>)
 800b53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b542:	6800      	ldr	r0, [r0, #0]
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	f7ff fd4d 	bl	800afe4 <_vfiprintf_r>
 800b54a:	b002      	add	sp, #8
 800b54c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b550:	b003      	add	sp, #12
 800b552:	4770      	bx	lr
 800b554:	20000058 	.word	0x20000058

0800b558 <abort>:
 800b558:	b508      	push	{r3, lr}
 800b55a:	2006      	movs	r0, #6
 800b55c:	f000 f82c 	bl	800b5b8 <raise>
 800b560:	2001      	movs	r0, #1
 800b562:	f7f6 fe52 	bl	800220a <_exit>

0800b566 <_raise_r>:
 800b566:	291f      	cmp	r1, #31
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4605      	mov	r5, r0
 800b56c:	460c      	mov	r4, r1
 800b56e:	d904      	bls.n	800b57a <_raise_r+0x14>
 800b570:	2316      	movs	r3, #22
 800b572:	6003      	str	r3, [r0, #0]
 800b574:	f04f 30ff 	mov.w	r0, #4294967295
 800b578:	bd38      	pop	{r3, r4, r5, pc}
 800b57a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b57c:	b112      	cbz	r2, 800b584 <_raise_r+0x1e>
 800b57e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b582:	b94b      	cbnz	r3, 800b598 <_raise_r+0x32>
 800b584:	4628      	mov	r0, r5
 800b586:	f000 f831 	bl	800b5ec <_getpid_r>
 800b58a:	4622      	mov	r2, r4
 800b58c:	4601      	mov	r1, r0
 800b58e:	4628      	mov	r0, r5
 800b590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b594:	f000 b818 	b.w	800b5c8 <_kill_r>
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d00a      	beq.n	800b5b2 <_raise_r+0x4c>
 800b59c:	1c59      	adds	r1, r3, #1
 800b59e:	d103      	bne.n	800b5a8 <_raise_r+0x42>
 800b5a0:	2316      	movs	r3, #22
 800b5a2:	6003      	str	r3, [r0, #0]
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	e7e7      	b.n	800b578 <_raise_r+0x12>
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	4798      	blx	r3
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e7e0      	b.n	800b578 <_raise_r+0x12>
	...

0800b5b8 <raise>:
 800b5b8:	4b02      	ldr	r3, [pc, #8]	@ (800b5c4 <raise+0xc>)
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	f7ff bfd2 	b.w	800b566 <_raise_r>
 800b5c2:	bf00      	nop
 800b5c4:	20000058 	.word	0x20000058

0800b5c8 <_kill_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d07      	ldr	r5, [pc, #28]	@ (800b5e8 <_kill_r+0x20>)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4608      	mov	r0, r1
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	602b      	str	r3, [r5, #0]
 800b5d6:	f7f6 fe08 	bl	80021ea <_kill>
 800b5da:	1c43      	adds	r3, r0, #1
 800b5dc:	d102      	bne.n	800b5e4 <_kill_r+0x1c>
 800b5de:	682b      	ldr	r3, [r5, #0]
 800b5e0:	b103      	cbz	r3, 800b5e4 <_kill_r+0x1c>
 800b5e2:	6023      	str	r3, [r4, #0]
 800b5e4:	bd38      	pop	{r3, r4, r5, pc}
 800b5e6:	bf00      	nop
 800b5e8:	2000065c 	.word	0x2000065c

0800b5ec <_getpid_r>:
 800b5ec:	f7f6 bdf5 	b.w	80021da <_getpid>

0800b5f0 <_init>:
 800b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f2:	bf00      	nop
 800b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f6:	bc08      	pop	{r3}
 800b5f8:	469e      	mov	lr, r3
 800b5fa:	4770      	bx	lr

0800b5fc <_fini>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr
