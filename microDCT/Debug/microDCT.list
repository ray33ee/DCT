
microDCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac10  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800adf0  0800adf0  0000bdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b378  0800b378  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b378  0800b378  0000c378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b380  0800b380  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b380  0800b380  0000c380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b384  0800b384  0000c384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b388  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  200001d4  0800b55c  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  0800b55c  0000d614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d402  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3a  00000000  00000000  0002a606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  0002e140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e9  00000000  00000000  0002faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6e4  00000000  00000000  00030ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000207e8  00000000  00000000  0005c5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117fa2  00000000  00000000  0007cda5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00194d47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007eec  00000000  00000000  00194d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0019cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800add8 	.word	0x0800add8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800add8 	.word	0x0800add8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <executable_init>:
 *      Author: Will
 */

#include "executable.h"

void executable_init(struct Executable_State* executable) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	executable->rom = NULL;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
	executable->rom_length = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <get_length_from_uart>:

void get_length_from_uart(struct Executable_State* executable) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09c      	sub	sp, #112	@ 0x70
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]


	uint8_t buff[100];


	read_uart_into_buffer(buff, 100, '\n');
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	220a      	movs	r2, #10
 8000f52:	2164      	movs	r1, #100	@ 0x64
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 f91b 	bl	8002190 <read_uart_into_buffer>

	uint32_t len = atoi(buff);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f007 f9b8 	bl	80082d4 <atoi>
 8000f64:	4603      	mov	r3, r0
 8000f66:	66fb      	str	r3, [r7, #108]	@ 0x6c

	//If len == 0 there is an issue

	executable->rom_length = len;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000f6c:	605a      	str	r2, [r3, #4]
}
 8000f6e:	bf00      	nop
 8000f70:	3770      	adds	r7, #112	@ 0x70
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <get_rom_from_uart>:

void get_rom_from_uart(struct Executable_State* executable) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	free(executable->rom);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f007 f9b2 	bl	80082ec <free>

	executable->rom = malloc(executable->rom_length);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 f9a5 	bl	80082dc <malloc>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]

	//If executable->rom is null, allocation failed

	read_uart_into_buffer(executable->rom, executable->rom_length, '\n');
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	220a      	movs	r2, #10
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f001 f8f3 	bl	8002190 <read_uart_into_buffer>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fb8:	b0a4      	sub	sp, #144	@ 0x90
 8000fba:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f001 ff13 	bl	8002de6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f920 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f000 fb9e 	bl	8001704 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fc8:	f000 fa8c 	bl	80014e4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000fcc:	f000 fb4e 	bl	800166c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fd0:	f000 fa32 	bl	8001438 <MX_I2C1_Init>
  MX_ADC2_Init();
 8000fd4:	f000 f962 	bl	800129c <MX_ADC2_Init>
  MX_ADC5_Init();
 8000fd8:	f000 f9c8 	bl	800136c <MX_ADC5_Init>
  MX_RNG_Init();
 8000fdc:	f000 fa6c 	bl	80014b8 <MX_RNG_Init>
  MX_TIM3_Init();
 8000fe0:	f000 faf6 	bl	80015d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //Timer 3 is used in misc_delay_us
  HAL_TIM_Base_Start(&htim3);
 8000fe4:	4879      	ldr	r0, [pc, #484]	@ (80011cc <main+0x218>)
 8000fe6:	f005 f86d 	bl	80060c4 <HAL_TIM_Base_Start>

  uint8_t buff[100];

  /* Setup PP */

  pp_init(&pp_state, &hi2c1);
 8000fea:	4979      	ldr	r1, [pc, #484]	@ (80011d0 <main+0x21c>)
 8000fec:	4879      	ldr	r0, [pc, #484]	@ (80011d4 <main+0x220>)
 8000fee:	f000 fc3b 	bl	8001868 <pp_init>

  /* Setup VM */

  const uint32_t call_stack_size = 100;
 8000ff2:	2364      	movs	r3, #100	@ 0x64
 8000ff4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  const uint32_t operand_stack_size = 100;
 8000ff8:	2364      	movs	r3, #100	@ 0x64
 8000ffa:	67fb      	str	r3, [r7, #124]	@ 0x7c

  uint32_t call_stack[call_stack_size];
 8000ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001000:	3b01      	subs	r3, #1
 8001002:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001004:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001008:	2200      	movs	r2, #0
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	014b      	lsls	r3, r1, #5
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	014a      	lsls	r2, r1, #5
 8001024:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001028:	2200      	movs	r2, #0
 800102a:	469a      	mov	sl, r3
 800102c:	4693      	mov	fp, r2
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800103a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800103e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001042:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	3307      	adds	r3, #7
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	ebad 0d03 	sub.w	sp, sp, r3
 8001052:	ab02      	add	r3, sp, #8
 8001054:	3303      	adds	r3, #3
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t operand_stack[operand_stack_size];
 800105c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800105e:	3b01      	subs	r3, #1
 8001060:	673b      	str	r3, [r7, #112]	@ 0x70
 8001062:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001064:	2200      	movs	r2, #0
 8001066:	4698      	mov	r8, r3
 8001068:	4691      	mov	r9, r2
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001076:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800107a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800107e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001080:	2200      	movs	r2, #0
 8001082:	461c      	mov	r4, r3
 8001084:	4615      	mov	r5, r2
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	016b      	lsls	r3, r5, #5
 8001090:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001094:	0162      	lsls	r2, r4, #5
 8001096:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	3307      	adds	r3, #7
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	ebad 0d03 	sub.w	sp, sp, r3
 80010a4:	ab02      	add	r3, sp, #8
 80010a6:	3303      	adds	r3, #3
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	66fb      	str	r3, [r7, #108]	@ 0x6c

  executable_init(&exec_state);
 80010ae:	484a      	ldr	r0, [pc, #296]	@ (80011d8 <main+0x224>)
 80010b0:	f7ff ff38 	bl	8000f24 <executable_init>

  vm_init(&vm_state, call_stack, operand_stack, call_stack_size, operand_stack_size, &exec_state);
 80010b4:	4b48      	ldr	r3, [pc, #288]	@ (80011d8 <main+0x224>)
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010c2:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80010c4:	4845      	ldr	r0, [pc, #276]	@ (80011dc <main+0x228>)
 80010c6:	f001 f8ea 	bl	800229e <vm_init>

  /* Setup RNG */

  rng_global_init(&hrng);
 80010ca:	4845      	ldr	r0, [pc, #276]	@ (80011e0 <main+0x22c>)
 80010cc:	f000 fcce 	bl	8001a6c <rng_global_init>
  int r1 = soft_i2c_receive(&h2i2c, 0x3c, &who_am_i, 1);

  printf("Soft i2c %i\n", who_am_i);*/


  psu_init(&psu_state, &hadc2, &hadc5, &htim2, &TIM2->CCR1, TIM_CHANNEL_1);
 80010d0:	2300      	movs	r3, #0
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	4b43      	ldr	r3, [pc, #268]	@ (80011e4 <main+0x230>)
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	4b43      	ldr	r3, [pc, #268]	@ (80011e8 <main+0x234>)
 80010da:	4a44      	ldr	r2, [pc, #272]	@ (80011ec <main+0x238>)
 80010dc:	4944      	ldr	r1, [pc, #272]	@ (80011f0 <main+0x23c>)
 80010de:	4845      	ldr	r0, [pc, #276]	@ (80011f4 <main+0x240>)
 80010e0:	f000 fc9c 	bl	8001a1c <psu_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  read_uart_into_buffer(buff, 100, '\n');
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	220a      	movs	r2, #10
 80010ea:	2164      	movs	r1, #100	@ 0x64
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 f84f 	bl	8002190 <read_uart_into_buffer>

	  if (buff[0] == '0') {
 80010f2:	7a3b      	ldrb	r3, [r7, #8]
 80010f4:	2b30      	cmp	r3, #48	@ 0x30
 80010f6:	d106      	bne.n	8001106 <main+0x152>
		  get_length_from_uart(&exec_state);
 80010f8:	4837      	ldr	r0, [pc, #220]	@ (80011d8 <main+0x224>)
 80010fa:	f7ff ff23 	bl	8000f44 <get_length_from_uart>

		  get_rom_from_uart(&exec_state);
 80010fe:	4836      	ldr	r0, [pc, #216]	@ (80011d8 <main+0x224>)
 8001100:	f7ff ff39 	bl	8000f76 <get_rom_from_uart>
 8001104:	e7ee      	b.n	80010e4 <main+0x130>


	  } else if (buff[0] == '1') {
 8001106:	7a3b      	ldrb	r3, [r7, #8]
 8001108:	2b31      	cmp	r3, #49	@ 0x31
 800110a:	d12b      	bne.n	8001164 <main+0x1b0>

		  printf("%i\n", (int)vm_state.pc);
 800110c:	4b33      	ldr	r3, [pc, #204]	@ (80011dc <main+0x228>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4619      	mov	r1, r3
 8001112:	4839      	ldr	r0, [pc, #228]	@ (80011f8 <main+0x244>)
 8001114:	f007 ff3c 	bl	8008f90 <iprintf>
		  printf("%i\n", (int)vm_state.osp);
 8001118:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <main+0x228>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4619      	mov	r1, r3
 800111e:	4836      	ldr	r0, [pc, #216]	@ (80011f8 <main+0x244>)
 8001120:	f007 ff36 	bl	8008f90 <iprintf>
		  printf("%i\n", (int)vm_state.csp);
 8001124:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <main+0x228>)
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	4619      	mov	r1, r3
 800112a:	4833      	ldr	r0, [pc, #204]	@ (80011f8 <main+0x244>)
 800112c:	f007 ff30 	bl	8008f90 <iprintf>
		  printf("%i\n", (int)vm_state.exec->rom[vm_state.pc]);
 8001130:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <main+0x228>)
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <main+0x228>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4619      	mov	r1, r3
 8001140:	482d      	ldr	r0, [pc, #180]	@ (80011f8 <main+0x244>)
 8001142:	f007 ff25 	bl	8008f90 <iprintf>
		  printf("%i\n", (int)vm_peek_ops(&vm_state));
 8001146:	4825      	ldr	r0, [pc, #148]	@ (80011dc <main+0x228>)
 8001148:	f001 f898 	bl	800227c <vm_peek_ops>
 800114c:	4603      	mov	r3, r0
 800114e:	4619      	mov	r1, r3
 8001150:	4829      	ldr	r0, [pc, #164]	@ (80011f8 <main+0x244>)
 8001152:	f007 ff1d 	bl	8008f90 <iprintf>
		  printf("%i\n", (int)vm_state.bp);
 8001156:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <main+0x228>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	4826      	ldr	r0, [pc, #152]	@ (80011f8 <main+0x244>)
 800115e:	f007 ff17 	bl	8008f90 <iprintf>
 8001162:	e7bf      	b.n	80010e4 <main+0x130>

	  } else if (buff[0] == '2') {
 8001164:	7a3b      	ldrb	r3, [r7, #8]
 8001166:	2b32      	cmp	r3, #50	@ 0x32
 8001168:	d124      	bne.n	80011b4 <main+0x200>
		  uint32_t r = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

		  vm_reset(&vm_state);
 8001170:	481a      	ldr	r0, [pc, #104]	@ (80011dc <main+0x228>)
 8001172:	f001 f8b1 	bl	80022d8 <vm_reset>

		  while (r == 0) {
 8001176:	e004      	b.n	8001182 <main+0x1ce>
			  r = vm_execute(&vm_state);
 8001178:	4818      	ldr	r0, [pc, #96]	@ (80011dc <main+0x228>)
 800117a:	f001 f8c5 	bl	8002308 <vm_execute>
 800117e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		  while (r == 0) {
 8001182:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f6      	beq.n	8001178 <main+0x1c4>
		  }

		  printf("done\n");
 800118a:	481c      	ldr	r0, [pc, #112]	@ (80011fc <main+0x248>)
 800118c:	f007 ff68 	bl	8009060 <puts>

		  printf("%i\n", r);
 8001190:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001194:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <main+0x244>)
 8001196:	f007 fefb 	bl	8008f90 <iprintf>

		  if (r == FAILURE) {
 800119a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d1a0      	bne.n	80010e4 <main+0x130>
			  //If the result was a failure, send the top of the stack as the error code or reason
			  printf("%i\n", vm_peek_ops(&vm_state));
 80011a2:	480e      	ldr	r0, [pc, #56]	@ (80011dc <main+0x228>)
 80011a4:	f001 f86a 	bl	800227c <vm_peek_ops>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <main+0x244>)
 80011ae:	f007 feef 	bl	8008f90 <iprintf>
 80011b2:	e797      	b.n	80010e4 <main+0x130>
		  }
	  } else if (buff[0] == '3') {
 80011b4:	7a3b      	ldrb	r3, [r7, #8]
 80011b6:	2b33      	cmp	r3, #51	@ 0x33
 80011b8:	d194      	bne.n	80010e4 <main+0x130>

		  read_uart_into_buffer(pp_state.pin_configs, 16, '\n');
 80011ba:	220a      	movs	r2, #10
 80011bc:	2110      	movs	r1, #16
 80011be:	4810      	ldr	r0, [pc, #64]	@ (8001200 <main+0x24c>)
 80011c0:	f000 ffe6 	bl	8002190 <read_uart_into_buffer>

		  pp_setup(&pp_state);
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <main+0x220>)
 80011c6:	f000 fb77 	bl	80018b8 <pp_setup>
	  read_uart_into_buffer(buff, 100, '\n');
 80011ca:	e78b      	b.n	80010e4 <main+0x130>
 80011cc:	2000037c 	.word	0x2000037c
 80011d0:	200002c8 	.word	0x200002c8
 80011d4:	200004a0 	.word	0x200004a0
 80011d8:	2000045c 	.word	0x2000045c
 80011dc:	20000464 	.word	0x20000464
 80011e0:	2000031c 	.word	0x2000031c
 80011e4:	40000034 	.word	0x40000034
 80011e8:	20000330 	.word	0x20000330
 80011ec:	2000025c 	.word	0x2000025c
 80011f0:	200001f0 	.word	0x200001f0
 80011f4:	2000048c 	.word	0x2000048c
 80011f8:	0800adf0 	.word	0x0800adf0
 80011fc:	0800adf4 	.word	0x0800adf4
 8001200:	200004a8 	.word	0x200004a8

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b094      	sub	sp, #80	@ 0x50
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	2238      	movs	r2, #56	@ 0x38
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f008 f804 	bl	8009220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001226:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800122a:	f003 fe39 	bl	8004ea0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001238:	2340      	movs	r3, #64	@ 0x40
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123c:	2302      	movs	r3, #2
 800123e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001240:	2302      	movs	r3, #2
 8001242:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001244:	2301      	movs	r3, #1
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001248:	230c      	movs	r3, #12
 800124a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124c:	2302      	movs	r3, #2
 800124e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001250:	2304      	movs	r3, #4
 8001252:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	4618      	mov	r0, r3
 800125e:	f003 fed3 	bl	8005008 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001268:	f000 fa88 	bl	800177c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	2303      	movs	r3, #3
 8001272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2103      	movs	r1, #3
 8001284:	4618      	mov	r0, r3
 8001286:	f004 f9d1 	bl	800562c <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001290:	f000 fa74 	bl	800177c <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3750      	adds	r7, #80	@ 0x50
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f007 ffb9 	bl	8009220 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001360 <MX_ADC2_Init+0xc4>)
 80012b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012b4:	4b29      	ldr	r3, [pc, #164]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012bc:	4b27      	ldr	r3, [pc, #156]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80012c8:	4b24      	ldr	r3, [pc, #144]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ce:	4b23      	ldr	r3, [pc, #140]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d4:	4b21      	ldr	r3, [pc, #132]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012d6:	2204      	movs	r2, #4
 80012d8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_ADC2_Init+0xc0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <MX_ADC2_Init+0xc0>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_ADC2_Init+0xc0>)
 800130a:	2200      	movs	r2, #0
 800130c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <MX_ADC2_Init+0xc0>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001316:	4811      	ldr	r0, [pc, #68]	@ (800135c <MX_ADC2_Init+0xc0>)
 8001318:	f001 fff4 	bl	8003304 <HAL_ADC_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001322:	f000 fa2b 	bl	800177c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <MX_ADC2_Init+0xc8>)
 8001328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800132a:	2306      	movs	r3, #6
 800132c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <MX_ADC2_Init+0xcc>)
 8001334:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001336:	2304      	movs	r3, #4
 8001338:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_ADC2_Init+0xc0>)
 8001344:	f002 f99a 	bl	800367c <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800134e:	f000 fa15 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200001f0 	.word	0x200001f0
 8001360:	50000100 	.word	0x50000100
 8001364:	0c900008 	.word	0x0c900008
 8001368:	407f0000 	.word	0x407f0000

0800136c <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2220      	movs	r2, #32
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f007 ff51 	bl	8009220 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800137e:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <MX_ADC5_Init+0xc0>)
 8001380:	4a2b      	ldr	r2, [pc, #172]	@ (8001430 <MX_ADC5_Init+0xc4>)
 8001382:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001384:	4b29      	ldr	r3, [pc, #164]	@ (800142c <MX_ADC5_Init+0xc0>)
 8001386:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800138a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800138c:	4b27      	ldr	r3, [pc, #156]	@ (800142c <MX_ADC5_Init+0xc0>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001392:	4b26      	ldr	r3, [pc, #152]	@ (800142c <MX_ADC5_Init+0xc0>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <MX_ADC5_Init+0xc0>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139e:	4b23      	ldr	r3, [pc, #140]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a4:	4b21      	ldr	r3, [pc, #132]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013a6:	2204      	movs	r2, #4
 80013a8:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c4:	4b19      	ldr	r3, [pc, #100]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80013de:	4b13      	ldr	r3, [pc, #76]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80013e6:	4811      	ldr	r0, [pc, #68]	@ (800142c <MX_ADC5_Init+0xc0>)
 80013e8:	f001 ff8c 	bl	8003304 <HAL_ADC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80013f2:	f000 f9c3 	bl	800177c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_ADC5_Init+0xc8>)
 80013f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013fa:	2306      	movs	r3, #6
 80013fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001402:	237f      	movs	r3, #127	@ 0x7f
 8001404:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001406:	2304      	movs	r3, #4
 8001408:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	@ (800142c <MX_ADC5_Init+0xc0>)
 8001414:	f002 f932 	bl	800367c <HAL_ADC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800141e:	f000 f9ad 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000025c 	.word	0x2000025c
 8001430:	50000600 	.word	0x50000600
 8001434:	04300002 	.word	0x04300002

08001438 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <MX_I2C1_Init+0x74>)
 800143e:	4a1c      	ldr	r2, [pc, #112]	@ (80014b0 <MX_I2C1_Init+0x78>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B17DB6;
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_I2C1_Init+0x74>)
 8001444:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <MX_I2C1_Init+0x7c>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <MX_I2C1_Init+0x74>)
 8001450:	2201      	movs	r2, #1
 8001452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <MX_I2C1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_I2C1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_I2C1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_I2C1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_I2C1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001472:	480e      	ldr	r0, [pc, #56]	@ (80014ac <MX_I2C1_Init+0x74>)
 8001474:	f003 f8ae 	bl	80045d4 <HAL_I2C_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800147e:	f000 f97d 	bl	800177c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	4809      	ldr	r0, [pc, #36]	@ (80014ac <MX_I2C1_Init+0x74>)
 8001486:	f003 fc73 	bl	8004d70 <HAL_I2CEx_ConfigAnalogFilter>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001490:	f000 f974 	bl	800177c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_I2C1_Init+0x74>)
 8001498:	f003 fcb5 	bl	8004e06 <HAL_I2CEx_ConfigDigitalFilter>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014a2:	f000 f96b 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002c8 	.word	0x200002c8
 80014b0:	40005400 	.word	0x40005400
 80014b4:	20b17db6 	.word	0x20b17db6

080014b8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80014bc:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <MX_RNG_Init+0x24>)
 80014be:	4a08      	ldr	r2, [pc, #32]	@ (80014e0 <MX_RNG_Init+0x28>)
 80014c0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_RNG_Init+0x24>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	@ (80014dc <MX_RNG_Init+0x24>)
 80014ca:	f004 fd19 	bl	8005f00 <HAL_RNG_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80014d4:	f000 f952 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000031c 	.word	0x2000031c
 80014e0:	50060800 	.word	0x50060800

080014e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	@ 0x38
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <MX_TIM2_Init+0xe8>)
 8001518:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800151c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800151e:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <MX_TIM2_Init+0xe8>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <MX_TIM2_Init+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 800152a:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <MX_TIM2_Init+0xe8>)
 800152c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8001530:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <MX_TIM2_Init+0xe8>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <MX_TIM2_Init+0xe8>)
 800153a:	2280      	movs	r2, #128	@ 0x80
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800153e:	4823      	ldr	r0, [pc, #140]	@ (80015cc <MX_TIM2_Init+0xe8>)
 8001540:	f004 fd69 	bl	8006016 <HAL_TIM_Base_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800154a:	f000 f917 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001554:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001558:	4619      	mov	r1, r3
 800155a:	481c      	ldr	r0, [pc, #112]	@ (80015cc <MX_TIM2_Init+0xe8>)
 800155c:	f005 f8aa 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001566:	f000 f909 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800156a:	4818      	ldr	r0, [pc, #96]	@ (80015cc <MX_TIM2_Init+0xe8>)
 800156c:	f004 fe1a 	bl	80061a4 <HAL_TIM_PWM_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001576:	f000 f901 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	4810      	ldr	r0, [pc, #64]	@ (80015cc <MX_TIM2_Init+0xe8>)
 800158a:	f005 fe49 	bl	8007220 <HAL_TIMEx_MasterConfigSynchronization>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001594:	f000 f8f2 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001598:	2360      	movs	r3, #96	@ 0x60
 800159a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4807      	ldr	r0, [pc, #28]	@ (80015cc <MX_TIM2_Init+0xe8>)
 80015b0:	f004 ff6c 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015ba:	f000 f8df 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015be:	4803      	ldr	r0, [pc, #12]	@ (80015cc <MX_TIM2_Init+0xe8>)
 80015c0:	f000 fc40 	bl	8001e44 <HAL_TIM_MspPostInit>

}
 80015c4:	bf00      	nop
 80015c6:	3738      	adds	r7, #56	@ 0x38
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000330 	.word	0x20000330

080015d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <MX_TIM3_Init+0x94>)
 80015f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001668 <MX_TIM3_Init+0x98>)
 80015f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <MX_TIM3_Init+0x94>)
 80015f6:	225f      	movs	r2, #95	@ 0x5f
 80015f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <MX_TIM3_Init+0x94>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <MX_TIM3_Init+0x94>)
 8001602:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001606:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <MX_TIM3_Init+0x94>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <MX_TIM3_Init+0x94>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001614:	4813      	ldr	r0, [pc, #76]	@ (8001664 <MX_TIM3_Init+0x94>)
 8001616:	f004 fcfe 	bl	8006016 <HAL_TIM_Base_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001620:	f000 f8ac 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001628:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	@ (8001664 <MX_TIM3_Init+0x94>)
 8001632:	f005 f83f 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800163c:	f000 f89e 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_TIM3_Init+0x94>)
 800164e:	f005 fde7 	bl	8007220 <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001658:	f000 f890 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000037c 	.word	0x2000037c
 8001668:	40000400 	.word	0x40000400

0800166c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001670:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001672:	4a23      	ldr	r2, [pc, #140]	@ (8001700 <MX_USART2_UART_Init+0x94>)
 8001674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a8:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ae:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b4:	4811      	ldr	r0, [pc, #68]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016b6:	f005 fe49 	bl	800734c <HAL_UART_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016c0:	f000 f85c 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c4:	2100      	movs	r1, #0
 80016c6:	480d      	ldr	r0, [pc, #52]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016c8:	f006 fd3a 	bl	8008140 <HAL_UARTEx_SetTxFifoThreshold>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016d2:	f000 f853 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4808      	ldr	r0, [pc, #32]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016da:	f006 fd6f 	bl	80081bc <HAL_UARTEx_SetRxFifoThreshold>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f000 f84a 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016ea:	f006 fcf0 	bl	80080ce <HAL_UARTEx_DisableFifoMode>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f000 f842 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200003c8 	.word	0x200003c8
 8001700:	40004400 	.word	0x40004400

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <MX_GPIO_Init+0x74>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <MX_GPIO_Init+0x74>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <MX_GPIO_Init+0x74>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <MX_GPIO_Init+0x74>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <MX_GPIO_Init+0x74>)
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172e:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <MX_GPIO_Init+0x74>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <MX_GPIO_Init+0x74>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <MX_GPIO_Init+0x74>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <MX_GPIO_Init+0x74>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <MX_GPIO_Init+0x74>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <MX_GPIO_Init+0x74>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <MX_GPIO_Init+0x74>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <Error_Handler+0x8>

08001788 <mcp23017_init>:

#include "mcp23017.h"



void mcp23017_init(struct MCP23017_HANDLE * mcp_handle, uint16_t opcode, I2C_HandleTypeDef* _hi2c) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	460b      	mov	r3, r1
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	817b      	strh	r3, [r7, #10]
	const uint8_t CLEAR_GPIO_MESSAGE[] = {GPIOA_REGISTER_ADDRESS, 0x00, 0x00};
 8001796:	4a1a      	ldr	r2, [pc, #104]	@ (8001800 <mcp23017_init+0x78>)
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	4611      	mov	r1, r2
 80017a0:	8019      	strh	r1, [r3, #0]
 80017a2:	3302      	adds	r3, #2
 80017a4:	0c12      	lsrs	r2, r2, #16
 80017a6:	701a      	strb	r2, [r3, #0]
	const uint8_t SET_OUTPUT_MESSAGE[] = {IODIRA_REGISTER_ADDRESS, 0x00, 0x00};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2100      	movs	r1, #0
 80017ae:	460a      	mov	r2, r1
 80017b0:	801a      	strh	r2, [r3, #0]
 80017b2:	460a      	mov	r2, r1
 80017b4:	709a      	strb	r2, [r3, #2]

	//Clear the GPIOA and GPIOB registers BEFORE we set the GPIO to outputs
	if (HAL_I2C_Master_Transmit(_hi2c, opcode, CLEAR_GPIO_MESSAGE, sizeof(CLEAR_GPIO_MESSAGE), 10) != HAL_OK) {
 80017b6:	f107 0214 	add.w	r2, r7, #20
 80017ba:	8979      	ldrh	r1, [r7, #10]
 80017bc:	230a      	movs	r3, #10
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2303      	movs	r3, #3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f002 ffa2 	bl	800470c <HAL_I2C_Master_Transmit>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <mcp23017_init+0x4c>
		//error
		printf("mcp23017_init clear registers error\n");
 80017ce:	480d      	ldr	r0, [pc, #52]	@ (8001804 <mcp23017_init+0x7c>)
 80017d0:	f007 fc46 	bl	8009060 <puts>
	}

	//Set all the GPIO pins to output
	if (HAL_I2C_Master_Transmit(_hi2c, opcode, SET_OUTPUT_MESSAGE, sizeof(SET_OUTPUT_MESSAGE), 10) != HAL_OK) {
 80017d4:	f107 0210 	add.w	r2, r7, #16
 80017d8:	8979      	ldrh	r1, [r7, #10]
 80017da:	230a      	movs	r3, #10
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2303      	movs	r3, #3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f002 ff93 	bl	800470c <HAL_I2C_Master_Transmit>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <mcp23017_init+0x6a>
		//error
		printf("mcp23017_init set pins to output error\n");
 80017ec:	4806      	ldr	r0, [pc, #24]	@ (8001808 <mcp23017_init+0x80>)
 80017ee:	f007 fc37 	bl	8009060 <puts>
	}

	mcp_handle->hi2c = _hi2c;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	0800ae48 	.word	0x0800ae48
 8001804:	0800adfc 	.word	0x0800adfc
 8001808:	0800ae20 	.word	0x0800ae20

0800180c <mcp23017_gpio>:

void mcp23017_gpio(struct MCP23017_HANDLE * mcp_handle, uint16_t opcode, uint16_t gpio_a_b) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af02      	add	r7, sp, #8
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	803b      	strh	r3, [r7, #0]
	const uint8_t WRITE_GPIO_MESSAGE[] = {GPIOA_REGISTER_ADDRESS, 0x00, 0x00};
 800181c:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <mcp23017_gpio+0x54>)
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	4611      	mov	r1, r2
 8001826:	8019      	strh	r1, [r3, #0]
 8001828:	3302      	adds	r3, #2
 800182a:	0c12      	lsrs	r2, r2, #16
 800182c:	701a      	strb	r2, [r3, #0]

	*(uint16_t*)(WRITE_GPIO_MESSAGE+1) = gpio_a_b;
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	3301      	adds	r3, #1
 8001834:	883a      	ldrh	r2, [r7, #0]
 8001836:	801a      	strh	r2, [r3, #0]

	if (HAL_I2C_Master_Transmit(mcp_handle->hi2c, opcode, WRITE_GPIO_MESSAGE, sizeof(WRITE_GPIO_MESSAGE), 10) != HAL_OK) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	f107 020c 	add.w	r2, r7, #12
 8001840:	8879      	ldrh	r1, [r7, #2]
 8001842:	230a      	movs	r3, #10
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2303      	movs	r3, #3
 8001848:	f002 ff60 	bl	800470c <HAL_I2C_Master_Transmit>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <mcp23017_gpio+0x4c>
		//error
		printf("mcp23017_gpio write registers error\n");
 8001852:	4804      	ldr	r0, [pc, #16]	@ (8001864 <mcp23017_gpio+0x58>)
 8001854:	f007 fc04 	bl	8009060 <puts>
	}
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	0800ae48 	.word	0x0800ae48
 8001864:	0800ae4c 	.word	0x0800ae4c

08001868 <pp_init>:
	0, 9, 8, (uint32_t)GPIOB, GPIO_PIN_5, //Pin 16

};

/* Setup MCP expanders and set all STM GPIO to inputs */
void pp_init(struct PP_HANDLE* pp_handle, I2C_HandleTypeDef* hi2c) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]

	//Setup both MCP devices
	mcp23017_init(&pp_handle->u2_handle, MCP_U2_ADDR, hi2c);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	2140      	movs	r1, #64	@ 0x40
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff85 	bl	8001788 <mcp23017_init>
	mcp23017_init(&pp_handle->u3_handle, MCP_U3_ADDR, hi2c);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3304      	adds	r3, #4
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	214e      	movs	r1, #78	@ 0x4e
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff7e 	bl	8001788 <mcp23017_init>

	//On startup, setup the device as though all pins are not connected. I.e. VCC off, GND off and STM GPIO as inputs
	for (int i = 0; i < PP_COUNT; i++) {
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e008      	b.n	80018a4 <pp_init+0x3c>
		pp_handle->pin_configs[i] = NC;
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	3308      	adds	r3, #8
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PP_COUNT; i++) {
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	ddf3      	ble.n	8001892 <pp_init+0x2a>
	}

	pp_setup(pp_handle);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f804 	bl	80018b8 <pp_setup>

}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <pp_setup>:

/* Setup all physical pins as either input, output, vcc or gnd according to pp_handle->pin_configs */
void pp_setup(struct PP_HANDLE* pp_handle) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	@ 0x38
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	//Extract relevant information via 'GS_HVS_SELECT_MAP'
	//Setup GS and HVS bits
	//Setup STM GPIO

	//Two 16 bit numbers represent all 4 banks of GPIO (port A and B for both MCPs)
	uint16_t mcp_gpio_registers[] = {0, 0};
 80018c0:	2300      	movs	r3, #0
 80018c2:	83bb      	strh	r3, [r7, #28]
 80018c4:	2300      	movs	r3, #0
 80018c6:	83fb      	strh	r3, [r7, #30]

	for (int i = 0; i < PP_COUNT; i++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80018cc:	e08f      	b.n	80019ee <pp_setup+0x136>
		uint32_t mcp_index = GS_HVS_SELECT_MAP[i*5];
 80018ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	4a50      	ldr	r2, [pc, #320]	@ (8001a18 <pp_setup+0x160>)
 80018d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_TypeDef* stm_gpio_port = (GPIO_TypeDef*)GS_HVS_SELECT_MAP[i*5+3];
 80018de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	3303      	adds	r3, #3
 80018e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001a18 <pp_setup+0x160>)
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		uint16_t stm_gpio_pin = GS_HVS_SELECT_MAP[i*5+4];
 80018f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3304      	adds	r3, #4
 80018fa:	4a47      	ldr	r2, [pc, #284]	@ (8001a18 <pp_setup+0x160>)
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	857b      	strh	r3, [r7, #42]	@ 0x2a

		/* Set up the STM GPIO as an (input) or (output and set value) */
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

		GPIO_InitStruct.Pin = stm_gpio_pin;
 8001912:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001914:	60bb      	str	r3, [r7, #8]

		if (pp_handle->pin_configs[i] == OUTPUT) {
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800191a:	4413      	add	r3, r2
 800191c:	3308      	adds	r3, #8
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d10c      	bne.n	800193e <pp_setup+0x86>
			//Set all outputs to 0 by default
			HAL_GPIO_WritePin(stm_gpio_port, stm_gpio_pin, 0);
 8001924:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800192c:	f002 fe3a 	bl	80045a4 <HAL_GPIO_WritePin>

			//Setup gpio as input
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e003      	b.n	8001946 <pp_setup+0x8e>
		} else {
			//If the PP is a vcc, gnd or input, set stm gpio as input
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
		}

		HAL_GPIO_Init(stm_gpio_port, &GPIO_InitStruct);
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	4619      	mov	r1, r3
 800194c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800194e:	f002 fca7 	bl	80042a0 <HAL_GPIO_Init>

		if (pp_handle->pin_configs[i] == VCC) {
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001956:	4413      	add	r3, r2
 8001958:	3308      	adds	r3, #8
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d11e      	bne.n	800199e <pp_setup+0xe6>
			uint32_t hvs_pin = GS_HVS_SELECT_MAP[i*5+2];
 8001960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	3302      	adds	r3, #2
 800196a:	4a2b      	ldr	r2, [pc, #172]	@ (8001a18 <pp_setup+0x160>)
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	623b      	str	r3, [r7, #32]

			mcp_gpio_registers[mcp_index] |= 1 << hvs_pin;
 8001972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	3338      	adds	r3, #56	@ 0x38
 8001978:	443b      	add	r3, r7
 800197a:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800197e:	b21a      	sxth	r2, r3
 8001980:	2101      	movs	r1, #1
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	b21b      	sxth	r3, r3
 800198a:	4313      	orrs	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	b29a      	uxth	r2, r3
 8001990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	3338      	adds	r3, #56	@ 0x38
 8001996:	443b      	add	r3, r7
 8001998:	f823 2c1c 	strh.w	r2, [r3, #-28]
 800199c:	e024      	b.n	80019e8 <pp_setup+0x130>
		} else if (pp_handle->pin_configs[i] == GND) {
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a2:	4413      	add	r3, r2
 80019a4:	3308      	adds	r3, #8
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d11d      	bne.n	80019e8 <pp_setup+0x130>
			uint32_t gs_pin = GS_HVS_SELECT_MAP[i*5+1];
 80019ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3301      	adds	r3, #1
 80019b6:	4a18      	ldr	r2, [pc, #96]	@ (8001a18 <pp_setup+0x160>)
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24

			mcp_gpio_registers[mcp_index] |= 1 << gs_pin;
 80019be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	3338      	adds	r3, #56	@ 0x38
 80019c4:	443b      	add	r3, r7
 80019c6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	2101      	movs	r1, #1
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b21b      	sxth	r3, r3
 80019da:	b29a      	uxth	r2, r3
 80019dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	3338      	adds	r3, #56	@ 0x38
 80019e2:	443b      	add	r3, r7
 80019e4:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for (int i = 0; i < PP_COUNT; i++) {
 80019e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ea:	3301      	adds	r3, #1
 80019ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	f77f af6c 	ble.w	80018ce <pp_setup+0x16>

		}
	}

	/* Write mcp_gpio_registers to MCP devices */
	mcp23017_gpio(&pp_handle->u2_handle, MCP_U2_ADDR, mcp_gpio_registers[0]);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	8bba      	ldrh	r2, [r7, #28]
 80019fa:	2140      	movs	r1, #64	@ 0x40
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff05 	bl	800180c <mcp23017_gpio>
	mcp23017_gpio(&pp_handle->u2_handle, MCP_U3_ADDR, mcp_gpio_registers[1]);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	8bfa      	ldrh	r2, [r7, #30]
 8001a06:	214e      	movs	r1, #78	@ 0x4e
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff feff 	bl	800180c <mcp23017_gpio>

}
 8001a0e:	bf00      	nop
 8001a10:	3738      	adds	r7, #56	@ 0x38
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0800ae88 	.word	0x0800ae88

08001a1c <psu_init>:
		struct PSU_STATE* psu_handle,
		ADC_HandleTypeDef* _adc_diff,
		ADC_HandleTypeDef* _adc_single,
		TIM_HandleTypeDef* _pwm_timer,
		volatile uint32_t* _ccr,
		uint32_t pwm_channel) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]

	psu_handle->adc_diff = _adc_diff;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	605a      	str	r2, [r3, #4]
	psu_handle->adc_single = _adc_single;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	601a      	str	r2, [r3, #0]
	psu_handle->pwm_timer = _pwm_timer;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	609a      	str	r2, [r3, #8]

	psu_handle->ccr = _ccr;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	60da      	str	r2, [r3, #12]

	HAL_TIM_PWM_Start(_pwm_timer, pwm_channel);
 8001a42:	69f9      	ldr	r1, [r7, #28]
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f004 fc0f 	bl	8006268 <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(_adc_single, ADC_SINGLE_ENDED);
 8001a4a:	217f      	movs	r1, #127	@ 0x7f
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f002 fae1 	bl	8004014 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(_adc_diff, ADC_DIFFERENTIAL_ENDED);
 8001a52:	4905      	ldr	r1, [pc, #20]	@ (8001a68 <psu_init+0x4c>)
 8001a54:	68b8      	ldr	r0, [r7, #8]
 8001a56:	f002 fadd 	bl	8004014 <HAL_ADCEx_Calibration_Start>


	*_ccr = 0;
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	407f0000 	.word	0x407f0000

08001a6c <rng_global_init>:
#include "rng.h"

struct RNG_State GLOBAL_RNG_STATE;

/* Initialise the rng state with a seed from the RNG peripheral */
void rng_global_init(RNG_HandleTypeDef* _hrng) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	if (HAL_RNG_GenerateRandomNumber(_hrng, &(GLOBAL_RNG_STATE._state)) != HAL_OK) {
 8001a74:	4907      	ldr	r1, [pc, #28]	@ (8001a94 <rng_global_init+0x28>)
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f004 fa77 	bl	8005f6a <HAL_RNG_GenerateRandomNumber>
		//error
	}

	//Zero is a fixed point so we map it to 1 instead
	if (GLOBAL_RNG_STATE._state == 0) {
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <rng_global_init+0x28>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <rng_global_init+0x1e>
		GLOBAL_RNG_STATE._state = 1;
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <rng_global_init+0x28>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200004b8 	.word	0x200004b8

08001a98 <rng_global_seed>:

/* Function to allow user to use their own seed for reproducability */
void rng_global_seed(uint32_t seed) {
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	if (seed == 0) { //Zero is a fixed point so we map it to 1 instead
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <rng_global_seed+0x16>
		GLOBAL_RNG_STATE._state = 1;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <rng_global_seed+0x28>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
	} else {
		GLOBAL_RNG_STATE._state = seed;
	}
}
 8001aac:	e002      	b.n	8001ab4 <rng_global_seed+0x1c>
		GLOBAL_RNG_STATE._state = seed;
 8001aae:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <rng_global_seed+0x28>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	200004b8 	.word	0x200004b8

08001ac4 <rng_global_next32>:

/* Use xorshift32 to generate the next seed */
uint32_t rng_global_next32() {
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state << 13;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <rng_global_next32+0x44>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <rng_global_next32+0x44>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	035b      	lsls	r3, r3, #13
 8001ad2:	4053      	eors	r3, r2
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b08 <rng_global_next32+0x44>)
 8001ad6:	6013      	str	r3, [r2, #0]
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state >> 17;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <rng_global_next32+0x44>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <rng_global_next32+0x44>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0c5b      	lsrs	r3, r3, #17
 8001ae2:	4053      	eors	r3, r2
 8001ae4:	4a08      	ldr	r2, [pc, #32]	@ (8001b08 <rng_global_next32+0x44>)
 8001ae6:	6013      	str	r3, [r2, #0]
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state << 5;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <rng_global_next32+0x44>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <rng_global_next32+0x44>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	015b      	lsls	r3, r3, #5
 8001af2:	4053      	eors	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <rng_global_next32+0x44>)
 8001af6:	6013      	str	r3, [r2, #0]
	return GLOBAL_RNG_STATE._state;
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <rng_global_next32+0x44>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200004b8 	.word	0x200004b8

08001b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_MspInit+0x44>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b16:	4a0e      	ldr	r2, [pc, #56]	@ (8001b50 <HAL_MspInit+0x44>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <HAL_MspInit+0x44>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_MspInit+0x44>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_MspInit+0x44>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_MspInit+0x44>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b42:	f003 fa51 	bl	8004fe8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b0a0      	sub	sp, #128	@ 0x80
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	2254      	movs	r2, #84	@ 0x54
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f007 fb53 	bl	8009220 <memset>
  if(hadc->Instance==ADC2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c70 <HAL_ADC_MspInit+0x11c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d135      	bne.n	8001bf0 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b8a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b90:	f107 0318 	add.w	r3, r7, #24
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 ff65 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ba0:	f7ff fdec 	bl	800177c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ba4:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	4a32      	ldr	r2, [pc, #200]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001baa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb0:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd4:	23c0      	movs	r3, #192	@ 0xc0
 8001bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bea:	f002 fb59 	bl	80042a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001bee:	e03a      	b.n	8001c66 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC5)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a20      	ldr	r2, [pc, #128]	@ (8001c78 <HAL_ADC_MspInit+0x124>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d135      	bne.n	8001c66 <HAL_ADC_MspInit+0x112>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001bfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001c00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001c04:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c06:	f107 0318 	add.w	r3, r7, #24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 ff2a 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_ADC_MspInit+0xc6>
      Error_Handler();
 8001c16:	f7ff fdb1 	bl	800177c <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	4a15      	ldr	r2, [pc, #84]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c26:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	4a0f      	ldr	r2, [pc, #60]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_ADC_MspInit+0x120>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c50:	2303      	movs	r3, #3
 8001c52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c62:	f002 fb1d 	bl	80042a0 <HAL_GPIO_Init>
}
 8001c66:	bf00      	nop
 8001c68:	3780      	adds	r7, #128	@ 0x80
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	50000100 	.word	0x50000100
 8001c74:	40021000 	.word	0x40021000
 8001c78:	50000600 	.word	0x50000600

08001c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b0a0      	sub	sp, #128	@ 0x80
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c94:	f107 0318 	add.w	r3, r7, #24
 8001c98:	2254      	movs	r2, #84	@ 0x54
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f007 fabf 	bl	8009220 <memset>
  if(hi2c->Instance==I2C1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a30      	ldr	r2, [pc, #192]	@ (8001d68 <HAL_I2C_MspInit+0xec>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d159      	bne.n	8001d60 <HAL_I2C_MspInit+0xe4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cac:	2340      	movs	r3, #64	@ 0x40
 8001cae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb4:	f107 0318 	add.w	r3, r7, #24
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fed3 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cc4:	f7ff fd5a 	bl	800177c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <HAL_I2C_MspInit+0xf0>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ccc:	4a27      	ldr	r2, [pc, #156]	@ (8001d6c <HAL_I2C_MspInit+0xf0>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_I2C_MspInit+0xf0>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <HAL_I2C_MspInit+0xf0>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce4:	4a21      	ldr	r2, [pc, #132]	@ (8001d6c <HAL_I2C_MspInit+0xf0>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cec:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <HAL_I2C_MspInit+0xf0>)
 8001cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfe:	2312      	movs	r3, #18
 8001d00:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d18:	f002 fac2 	bl	80042a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d20:	2312      	movs	r3, #18
 8001d22:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d34:	4619      	mov	r1, r3
 8001d36:	480e      	ldr	r0, [pc, #56]	@ (8001d70 <HAL_I2C_MspInit+0xf4>)
 8001d38:	f002 fab2 	bl	80042a0 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <HAL_I2C_MspInit+0xf8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4a0c      	ldr	r2, [pc, #48]	@ (8001d74 <HAL_I2C_MspInit+0xf8>)
 8001d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d46:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <HAL_I2C_MspInit+0xf0>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4c:	4a07      	ldr	r2, [pc, #28]	@ (8001d6c <HAL_I2C_MspInit+0xf0>)
 8001d4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_I2C_MspInit+0xf0>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d60:	bf00      	nop
 8001d62:	3780      	adds	r7, #128	@ 0x80
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48000400 	.word	0x48000400
 8001d74:	40010000 	.word	0x40010000

08001d78 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b098      	sub	sp, #96	@ 0x60
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	2254      	movs	r2, #84	@ 0x54
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f007 fa49 	bl	8009220 <memset>
  if(hrng->Instance==RNG)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a11      	ldr	r2, [pc, #68]	@ (8001dd8 <HAL_RNG_MspInit+0x60>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d11b      	bne.n	8001dd0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001d98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d9c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8001d9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fe5b 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001db4:	f7ff fce2 	bl	800177c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <HAL_RNG_MspInit+0x64>)
 8001dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <HAL_RNG_MspInit+0x64>)
 8001dbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001dc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <HAL_RNG_MspInit+0x64>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3760      	adds	r7, #96	@ 0x60
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	50060800 	.word	0x50060800
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df0:	d10c      	bne.n	8001e0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df2:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <HAL_TIM_Base_MspInit+0x5c>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	4a11      	ldr	r2, [pc, #68]	@ (8001e3c <HAL_TIM_Base_MspInit+0x5c>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <HAL_TIM_Base_MspInit+0x5c>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e0a:	e010      	b.n	8001e2e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0b      	ldr	r2, [pc, #44]	@ (8001e40 <HAL_TIM_Base_MspInit+0x60>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10b      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_TIM_Base_MspInit+0x5c>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1a:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <HAL_TIM_Base_MspInit+0x5c>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_TIM_Base_MspInit+0x5c>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40000400 	.word	0x40000400

08001e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e64:	d11c      	bne.n	8001ea0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_TIM_MspPostInit+0x64>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea8 <HAL_TIM_MspPostInit+0x64>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_TIM_MspPostInit+0x64>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9c:	f002 fa00 	bl	80042a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b09e      	sub	sp, #120	@ 0x78
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	2254      	movs	r2, #84	@ 0x54
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f007 f9a7 	bl	8009220 <memset>
  if(huart->Instance==USART2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f54 <HAL_UART_MspInit+0xa8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d136      	bne.n	8001f4a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001edc:	2302      	movs	r3, #2
 8001ede:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fdbb 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef4:	f7ff fc42 	bl	800177c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <HAL_UART_MspInit+0xac>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efc:	4a16      	ldr	r2, [pc, #88]	@ (8001f58 <HAL_UART_MspInit+0xac>)
 8001efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <HAL_UART_MspInit+0xac>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <HAL_UART_MspInit+0xac>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f14:	4a10      	ldr	r2, [pc, #64]	@ (8001f58 <HAL_UART_MspInit+0xac>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_UART_MspInit+0xac>)
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f38:	2307      	movs	r3, #7
 8001f3a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f40:	4619      	mov	r1, r3
 8001f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f46:	f002 f9ab 	bl	80042a0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3778      	adds	r7, #120	@ 0x78
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40004400 	.word	0x40004400
 8001f58:	40021000 	.word	0x40021000

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <NMI_Handler+0x4>

08001f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <MemManage_Handler+0x4>

08001f74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb2:	f000 ff6b 	bl	8002e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  return 1;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_kill>:

int _kill(int pid, int sig)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fd4:	f007 f986 	bl	80092e4 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2216      	movs	r2, #22
 8001fdc:	601a      	str	r2, [r3, #0]
  return -1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_exit>:

void _exit (int status)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffe7 	bl	8001fca <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <_exit+0x12>

08002000 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e00a      	b.n	8002028 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002012:	f3af 8000 	nop.w
 8002016:	4601      	mov	r1, r0
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	60ba      	str	r2, [r7, #8]
 800201e:	b2ca      	uxtb	r2, r1
 8002020:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	dbf0      	blt.n	8002012 <_read+0x12>
  }

  return len;
 8002030:	687b      	ldr	r3, [r7, #4]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e009      	b.n	8002060 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	60ba      	str	r2, [r7, #8]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f000 f889 	bl	800216c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	dbf1      	blt.n	800204c <_write+0x12>
  }
  return len;
 8002068:	687b      	ldr	r3, [r7, #4]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <_close>:

int _close(int file)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800209a:	605a      	str	r2, [r3, #4]
  return 0;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_isatty>:

int _isatty(int file)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e4:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <_sbrk+0x5c>)
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <_sbrk+0x60>)
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f8:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <_sbrk+0x64>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	@ (8002144 <_sbrk+0x68>)
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	429a      	cmp	r2, r3
 800210a:	d207      	bcs.n	800211c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800210c:	f007 f8ea 	bl	80092e4 <__errno>
 8002110:	4603      	mov	r3, r0
 8002112:	220c      	movs	r2, #12
 8002114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	e009      	b.n	8002130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002122:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <_sbrk+0x64>)
 800212c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20020000 	.word	0x20020000
 800213c:	00000400 	.word	0x00000400
 8002140:	200004c0 	.word	0x200004c0
 8002144:	20000618 	.word	0x20000618

08002148 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <SystemInit+0x20>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <SystemInit+0x20>)
 8002154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002174:	1d39      	adds	r1, r7, #4
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	2201      	movs	r2, #1
 800217c:	4803      	ldr	r0, [pc, #12]	@ (800218c <__io_putchar+0x20>)
 800217e:	f005 f935 	bl	80073ec <HAL_UART_Transmit>
  return ch;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200003c8 	.word	0x200003c8

08002190 <read_uart_into_buffer>:

uint32_t read_uart_into_buffer(uint8_t* buffer, uint32_t buffer_size, uint8_t stop_character) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	4613      	mov	r3, r2
 800219c:	71fb      	strb	r3, [r7, #7]
	//Keep reading into the until either a) the stop character is reached or b) we run out of buffer space
	uint32_t count = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]

	while (1) {


		if (count >= buffer_size) {
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d302      	bcc.n	80021b0 <read_uart_into_buffer+0x20>
			return -1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	e01f      	b.n	80021f0 <read_uart_into_buffer+0x60>
		}

		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <read_uart_into_buffer+0x68>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2208      	movs	r2, #8
 80021b6:	621a      	str	r2, [r3, #32]

		HAL_UART_Receive(&huart2, buffer + count, 1, HAL_MAX_DELAY);
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	18d1      	adds	r1, r2, r3
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	2201      	movs	r2, #1
 80021c4:	480c      	ldr	r0, [pc, #48]	@ (80021f8 <read_uart_into_buffer+0x68>)
 80021c6:	f005 f99f 	bl	8007508 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart2, buffer + count, 1, HAL_MAX_DELAY);

		if (buffer[count] == stop_character) {
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	4413      	add	r3, r2
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	79fa      	ldrb	r2, [r7, #7]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d107      	bne.n	80021e8 <read_uart_into_buffer+0x58>
			buffer[count] = '\0';
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4413      	add	r3, r2
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
			return count+1;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	e003      	b.n	80021f0 <read_uart_into_buffer+0x60>
		}

		count += 1;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	3301      	adds	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
		if (count >= buffer_size) {
 80021ee:	e7d8      	b.n	80021a2 <read_uart_into_buffer+0x12>
	}
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200003c8 	.word	0x200003c8

080021fc <__vm_fetch>:
 *      Author: Will
 */

#include "vm.h"

uint8_t __vm_fetch(struct VM_State* state) {
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	state->instruction_length = BYTECODE_OPCODE_LEN;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	615a      	str	r2, [r3, #20]
	return state->exec->rom[state->pc];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <advance_pc>:

void advance_pc(struct VM_State* state) {
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	state->pc = state->pc + state->instruction_length;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	441a      	add	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <get_immediate>:

uint32_t get_immediate(struct VM_State* state) {
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
	uint32_t v = *(uint32_t*)&state->exec->rom[state->pc + state->instruction_length];
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6999      	ldr	r1, [r3, #24]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	440b      	add	r3, r1
 800225e:	4413      	add	r3, r2
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
	state->instruction_length += BYTECODE_IMMEDIATE_LEN;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	1d1a      	adds	r2, r3, #4
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	615a      	str	r2, [r3, #20]
	return v;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <vm_peek_ops>:

uint32_t vm_peek_ops(struct VM_State* state) {
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	return state->operand_stack[state->osp];
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	681b      	ldr	r3, [r3, #0]
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <vm_init>:
		struct VM_State* state,
		uint32_t* _call_stack,
		uint32_t* _operand_stack,
		uint32_t _call_stack_size,
		uint32_t _operand_stack_size,
		struct Executable_State* _exec) {
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	603b      	str	r3, [r7, #0]

	state->call_stack = _call_stack;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	601a      	str	r2, [r3, #0]
	state->operand_stack = _operand_stack;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	605a      	str	r2, [r3, #4]
	state->call_stack_size = _call_stack_size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	609a      	str	r2, [r3, #8]
	state->operand_stack_size = _operand_stack_size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
	state->exec = _exec;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	611a      	str	r2, [r3, #16]

	vm_reset(state);
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f804 	bl	80022d8 <vm_reset>
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <vm_reset>:

void vm_reset(struct VM_State* state) {
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	state->pc = 0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
	state->bp = 0;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	625a      	str	r2, [r3, #36]	@ 0x24
	state->csp = -1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f04f 32ff 	mov.w	r2, #4294967295
 80022f2:	61da      	str	r2, [r3, #28]
	state->osp = -1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f04f 32ff 	mov.w	r2, #4294967295
 80022fa:	621a      	str	r2, [r3, #32]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <vm_execute>:

/* Execute the next instruction */
uint32_t vm_execute(struct VM_State* state) {
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b091      	sub	sp, #68	@ 0x44
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

	if (state->exec->rom_length == 0) {
		//No code is loaded, error
	}

	uint8_t opcode = __vm_fetch(state);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff73 	bl	80021fc <__vm_fetch>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	switch (opcode) {
 800231c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002320:	2bca      	cmp	r3, #202	@ 0xca
 8002322:	f200 8527 	bhi.w	8002d74 <vm_execute+0xa6c>
 8002326:	a201      	add	r2, pc, #4	@ (adr r2, 800232c <vm_execute+0x24>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	08002659 	.word	0x08002659
 8002330:	08002699 	.word	0x08002699
 8002334:	080026d9 	.word	0x080026d9
 8002338:	0800271b 	.word	0x0800271b
 800233c:	08002741 	.word	0x08002741
 8002340:	08002d75 	.word	0x08002d75
 8002344:	08002d75 	.word	0x08002d75
 8002348:	08002d75 	.word	0x08002d75
 800234c:	08002d75 	.word	0x08002d75
 8002350:	08002d75 	.word	0x08002d75
 8002354:	08002d75 	.word	0x08002d75
 8002358:	08002d75 	.word	0x08002d75
 800235c:	08002d75 	.word	0x08002d75
 8002360:	08002d75 	.word	0x08002d75
 8002364:	08002d75 	.word	0x08002d75
 8002368:	08002d75 	.word	0x08002d75
 800236c:	08002d75 	.word	0x08002d75
 8002370:	08002d75 	.word	0x08002d75
 8002374:	08002d75 	.word	0x08002d75
 8002378:	08002d75 	.word	0x08002d75
 800237c:	08002769 	.word	0x08002769
 8002380:	080027a9 	.word	0x080027a9
 8002384:	080027e9 	.word	0x080027e9
 8002388:	08002829 	.word	0x08002829
 800238c:	0800284f 	.word	0x0800284f
 8002390:	08002875 	.word	0x08002875
 8002394:	080028b7 	.word	0x080028b7
 8002398:	080028f9 	.word	0x080028f9
 800239c:	08002923 	.word	0x08002923
 80023a0:	08002d75 	.word	0x08002d75
 80023a4:	08002d75 	.word	0x08002d75
 80023a8:	08002d75 	.word	0x08002d75
 80023ac:	08002d75 	.word	0x08002d75
 80023b0:	08002d75 	.word	0x08002d75
 80023b4:	08002d75 	.word	0x08002d75
 80023b8:	08002d75 	.word	0x08002d75
 80023bc:	08002d75 	.word	0x08002d75
 80023c0:	08002d75 	.word	0x08002d75
 80023c4:	08002d75 	.word	0x08002d75
 80023c8:	08002d75 	.word	0x08002d75
 80023cc:	0800295f 	.word	0x0800295f
 80023d0:	0800296f 	.word	0x0800296f
 80023d4:	080029af 	.word	0x080029af
 80023d8:	080029e1 	.word	0x080029e1
 80023dc:	08002a3b 	.word	0x08002a3b
 80023e0:	08002a85 	.word	0x08002a85
 80023e4:	08002acf 	.word	0x08002acf
 80023e8:	08002b19 	.word	0x08002b19
 80023ec:	08002b63 	.word	0x08002b63
 80023f0:	08002bad 	.word	0x08002bad
 80023f4:	08002bf7 	.word	0x08002bf7
 80023f8:	08002c2b 	.word	0x08002c2b
 80023fc:	08002d75 	.word	0x08002d75
 8002400:	08002d75 	.word	0x08002d75
 8002404:	08002d75 	.word	0x08002d75
 8002408:	08002d75 	.word	0x08002d75
 800240c:	08002d75 	.word	0x08002d75
 8002410:	08002d75 	.word	0x08002d75
 8002414:	08002d75 	.word	0x08002d75
 8002418:	08002d75 	.word	0x08002d75
 800241c:	08002c5f 	.word	0x08002c5f
 8002420:	08002c89 	.word	0x08002c89
 8002424:	08002cc1 	.word	0x08002cc1
 8002428:	08002cfb 	.word	0x08002cfb
 800242c:	08002d35 	.word	0x08002d35
 8002430:	08002d75 	.word	0x08002d75
 8002434:	08002d75 	.word	0x08002d75
 8002438:	08002d75 	.word	0x08002d75
 800243c:	08002d75 	.word	0x08002d75
 8002440:	08002d75 	.word	0x08002d75
 8002444:	08002d75 	.word	0x08002d75
 8002448:	08002d75 	.word	0x08002d75
 800244c:	08002d75 	.word	0x08002d75
 8002450:	08002d75 	.word	0x08002d75
 8002454:	08002d75 	.word	0x08002d75
 8002458:	08002d75 	.word	0x08002d75
 800245c:	08002d75 	.word	0x08002d75
 8002460:	08002d75 	.word	0x08002d75
 8002464:	08002d75 	.word	0x08002d75
 8002468:	08002d75 	.word	0x08002d75
 800246c:	08002d75 	.word	0x08002d75
 8002470:	08002d83 	.word	0x08002d83
 8002474:	08002d83 	.word	0x08002d83
 8002478:	08002d75 	.word	0x08002d75
 800247c:	08002d75 	.word	0x08002d75
 8002480:	08002d75 	.word	0x08002d75
 8002484:	08002d75 	.word	0x08002d75
 8002488:	08002d75 	.word	0x08002d75
 800248c:	08002d75 	.word	0x08002d75
 8002490:	08002d75 	.word	0x08002d75
 8002494:	08002d75 	.word	0x08002d75
 8002498:	08002d75 	.word	0x08002d75
 800249c:	08002d75 	.word	0x08002d75
 80024a0:	08002d75 	.word	0x08002d75
 80024a4:	08002d75 	.word	0x08002d75
 80024a8:	08002d75 	.word	0x08002d75
 80024ac:	08002d75 	.word	0x08002d75
 80024b0:	08002d75 	.word	0x08002d75
 80024b4:	08002d75 	.word	0x08002d75
 80024b8:	08002d75 	.word	0x08002d75
 80024bc:	08002d47 	.word	0x08002d47
 80024c0:	08002d75 	.word	0x08002d75
 80024c4:	08002d75 	.word	0x08002d75
 80024c8:	08002d75 	.word	0x08002d75
 80024cc:	08002d75 	.word	0x08002d75
 80024d0:	08002d75 	.word	0x08002d75
 80024d4:	08002d75 	.word	0x08002d75
 80024d8:	08002d75 	.word	0x08002d75
 80024dc:	08002d75 	.word	0x08002d75
 80024e0:	08002d75 	.word	0x08002d75
 80024e4:	08002d75 	.word	0x08002d75
 80024e8:	08002d75 	.word	0x08002d75
 80024ec:	08002d75 	.word	0x08002d75
 80024f0:	08002d75 	.word	0x08002d75
 80024f4:	08002d75 	.word	0x08002d75
 80024f8:	08002d75 	.word	0x08002d75
 80024fc:	08002d75 	.word	0x08002d75
 8002500:	08002d75 	.word	0x08002d75
 8002504:	08002d75 	.word	0x08002d75
 8002508:	08002d75 	.word	0x08002d75
 800250c:	08002d75 	.word	0x08002d75
 8002510:	08002d75 	.word	0x08002d75
 8002514:	08002d75 	.word	0x08002d75
 8002518:	08002d75 	.word	0x08002d75
 800251c:	08002d75 	.word	0x08002d75
 8002520:	08002d75 	.word	0x08002d75
 8002524:	08002d75 	.word	0x08002d75
 8002528:	08002d75 	.word	0x08002d75
 800252c:	08002d75 	.word	0x08002d75
 8002530:	08002d75 	.word	0x08002d75
 8002534:	08002d75 	.word	0x08002d75
 8002538:	08002d75 	.word	0x08002d75
 800253c:	08002d75 	.word	0x08002d75
 8002540:	08002d75 	.word	0x08002d75
 8002544:	08002d75 	.word	0x08002d75
 8002548:	08002d75 	.word	0x08002d75
 800254c:	08002d75 	.word	0x08002d75
 8002550:	08002d75 	.word	0x08002d75
 8002554:	08002d75 	.word	0x08002d75
 8002558:	08002d75 	.word	0x08002d75
 800255c:	08002d75 	.word	0x08002d75
 8002560:	08002d75 	.word	0x08002d75
 8002564:	08002d75 	.word	0x08002d75
 8002568:	08002d75 	.word	0x08002d75
 800256c:	08002d75 	.word	0x08002d75
 8002570:	08002d75 	.word	0x08002d75
 8002574:	08002d75 	.word	0x08002d75
 8002578:	08002d75 	.word	0x08002d75
 800257c:	08002d75 	.word	0x08002d75
 8002580:	08002d75 	.word	0x08002d75
 8002584:	08002d75 	.word	0x08002d75
 8002588:	08002d75 	.word	0x08002d75
 800258c:	08002d75 	.word	0x08002d75
 8002590:	08002d75 	.word	0x08002d75
 8002594:	08002d75 	.word	0x08002d75
 8002598:	08002d75 	.word	0x08002d75
 800259c:	08002d75 	.word	0x08002d75
 80025a0:	08002d75 	.word	0x08002d75
 80025a4:	08002d75 	.word	0x08002d75
 80025a8:	08002d75 	.word	0x08002d75
 80025ac:	08002d75 	.word	0x08002d75
 80025b0:	08002d75 	.word	0x08002d75
 80025b4:	08002d75 	.word	0x08002d75
 80025b8:	08002d75 	.word	0x08002d75
 80025bc:	08002d75 	.word	0x08002d75
 80025c0:	08002d75 	.word	0x08002d75
 80025c4:	08002d75 	.word	0x08002d75
 80025c8:	08002d75 	.word	0x08002d75
 80025cc:	08002d75 	.word	0x08002d75
 80025d0:	08002d75 	.word	0x08002d75
 80025d4:	08002d75 	.word	0x08002d75
 80025d8:	08002d75 	.word	0x08002d75
 80025dc:	08002d75 	.word	0x08002d75
 80025e0:	08002d75 	.word	0x08002d75
 80025e4:	08002d75 	.word	0x08002d75
 80025e8:	08002d75 	.word	0x08002d75
 80025ec:	08002d75 	.word	0x08002d75
 80025f0:	08002d75 	.word	0x08002d75
 80025f4:	08002d75 	.word	0x08002d75
 80025f8:	08002d75 	.word	0x08002d75
 80025fc:	08002d75 	.word	0x08002d75
 8002600:	08002d75 	.word	0x08002d75
 8002604:	08002d75 	.word	0x08002d75
 8002608:	08002d75 	.word	0x08002d75
 800260c:	08002d75 	.word	0x08002d75
 8002610:	08002d75 	.word	0x08002d75
 8002614:	08002d75 	.word	0x08002d75
 8002618:	08002d75 	.word	0x08002d75
 800261c:	08002d75 	.word	0x08002d75
 8002620:	08002d75 	.word	0x08002d75
 8002624:	08002d75 	.word	0x08002d75
 8002628:	08002d75 	.word	0x08002d75
 800262c:	08002d75 	.word	0x08002d75
 8002630:	08002d75 	.word	0x08002d75
 8002634:	08002d75 	.word	0x08002d75
 8002638:	08002d75 	.word	0x08002d75
 800263c:	08002d75 	.word	0x08002d75
 8002640:	08002d75 	.word	0x08002d75
 8002644:	08002d75 	.word	0x08002d75
 8002648:	08002d75 	.word	0x08002d75
 800264c:	08002d75 	.word	0x08002d75
 8002650:	08002d6d 	.word	0x08002d6d
 8002654:	08002d71 	.word	0x08002d71
		/* Math */
	    case 0: {//ADD
	        state->osp -= 1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] + state->operand_stack[state->osp+1];
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	3301      	adds	r3, #1
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6858      	ldr	r0, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4403      	add	r3, r0
 800268c:	440a      	add	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fdc7 	bl	8002224 <advance_pc>

	        break;
 8002696:	e375      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 1: {//SUB
	        state->osp -= 1;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] - state->operand_stack[state->osp+1];
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	6819      	ldr	r1, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	3301      	adds	r3, #1
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6858      	ldr	r0, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4403      	add	r3, r0
 80026cc:	1a8a      	subs	r2, r1, r2
 80026ce:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fda7 	bl	8002224 <advance_pc>

	        break;
 80026d6:	e355      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 2: {//MUL
	        state->osp -= 1;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] * state->operand_stack[state->osp+1];
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	3301      	adds	r3, #1
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6858      	ldr	r0, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4403      	add	r3, r0
 800270c:	fb01 f202 	mul.w	r2, r1, r2
 8002710:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff fd86 	bl	8002224 <advance_pc>

	        break;
 8002718:	e334      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 3: {//RNG
	        state->osp += 1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = rng_global_next32();
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	18d4      	adds	r4, r2, r3
 8002730:	f7ff f9c8 	bl	8001ac4 <rng_global_next32>
 8002734:	4603      	mov	r3, r0
 8002736:	6023      	str	r3, [r4, #0]

	        advance_pc(state);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fd73 	bl	8002224 <advance_pc>

	        break;
 800273e:	e321      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 4: {//SEED

	    	uint32_t seed = state->operand_stack[state->osp];
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]

	        state->osp -= 1;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	621a      	str	r2, [r3, #32]

	    	rng_global_seed(seed);
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff f99c 	bl	8001a98 <rng_global_seed>

	        advance_pc(state);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fd5f 	bl	8002224 <advance_pc>

	    	break;
 8002766:	e30d      	b.n	8002d84 <vm_execute+0xa7c>

	    }
	    /* Bitwise Logic */
	    case 20: {//OR
	        state->osp -= 1;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	1e5a      	subs	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] | state->operand_stack[state->osp+1];
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	3301      	adds	r3, #1
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6858      	ldr	r0, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4403      	add	r3, r0
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff fd3f 	bl	8002224 <advance_pc>

	        break;
 80027a6:	e2ed      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 21: {//XOR
	        state->osp -= 1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	1e5a      	subs	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] ^ state->operand_stack[state->osp+1];
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	6819      	ldr	r1, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	3301      	adds	r3, #1
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6858      	ldr	r0, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4403      	add	r3, r0
 80027dc:	404a      	eors	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff fd1f 	bl	8002224 <advance_pc>

	        break;
 80027e6:	e2cd      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 22: {//AND
	        state->osp -= 1;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	1e5a      	subs	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] & state->operand_stack[state->osp+1];
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	3301      	adds	r3, #1
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6858      	ldr	r0, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4403      	add	r3, r0
 800281c:	400a      	ands	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fcff 	bl	8002224 <advance_pc>

	        break;
 8002826:	e2ad      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 23: {//INV
	        state->operand_stack[state->osp] = ~state->operand_stack[state->osp];
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	43d2      	mvns	r2, r2
 8002844:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fcec 	bl	8002224 <advance_pc>

	        break;
 800284c:	e29a      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 24: {//NEG
	        state->operand_stack[state->osp] = -state->operand_stack[state->osp];
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	4252      	negs	r2, r2
 800286a:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fcd9 	bl	8002224 <advance_pc>

	        break;
 8002872:	e287      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 25: {//SHL
	        state->osp -= 1;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	1e5a      	subs	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] << state->operand_stack[state->osp+1];
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	3301      	adds	r3, #1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6858      	ldr	r0, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4403      	add	r3, r0
 80028a8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ac:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fcb8 	bl	8002224 <advance_pc>

	        break;
 80028b4:	e266      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 26: {//SHR
	        state->osp -= 1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	1e5a      	subs	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] >> state->operand_stack[state->osp+1];
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	3301      	adds	r3, #1
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6858      	ldr	r0, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4403      	add	r3, r0
 80028ea:	fa21 f202 	lsr.w	r2, r1, r2
 80028ee:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fc97 	bl	8002224 <advance_pc>

	        break;
 80028f6:	e245      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 27: {//BOOL
	        if (state->operand_stack[state->osp])
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <vm_execute+0x612>
	            state->operand_stack[state->osp] = 1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff fc82 	bl	8002224 <advance_pc>

	        break;
 8002920:	e230      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 28: {//NOT
	        if (state->operand_stack[state->osp])
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <vm_execute+0x63e>
	            state->operand_stack[state->osp] = 0;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e007      	b.n	8002956 <vm_execute+0x64e>
	        else
	            state->operand_stack[state->osp] = 1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fc64 	bl	8002224 <advance_pc>

	        break;
 800295c:	e212      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    /* Control Flow */
	    case 40: {//JMP K
	        uint32_t K = get_immediate(state);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fc71 	bl	8002246 <get_immediate>
 8002964:	6138      	str	r0, [r7, #16]

	        state->pc = K;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	619a      	str	r2, [r3, #24]

	        break;
 800296c:	e20a      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 41: {//ALLOC K
	        uint32_t K = get_immediate(state);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fc69 	bl	8002246 <get_immediate>
 8002974:	6178      	str	r0, [r7, #20]

	        state->csp += 1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	61da      	str	r2, [r3, #28]
	        state->call_stack[state->csp] = state->bp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002990:	601a      	str	r2, [r3, #0]

	        state->bp = state->csp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24

	        state->csp += K;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69da      	ldr	r2, [r3, #28]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	441a      	add	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	61da      	str	r2, [r3, #28]

	        advance_pc(state);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fc3c 	bl	8002224 <advance_pc>

	        break;
 80029ac:	e1ea      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 42: {//CALL K
	      uint32_t K = get_immediate(state);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff fc49 	bl	8002246 <get_immediate>
 80029b4:	61f8      	str	r0, [r7, #28]

	      //get the link address
	      uint32_t link = state->pc + BYTECODE_OPCODE_LEN + BYTECODE_IMMEDIATE_LEN;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	3305      	adds	r3, #5
 80029bc:	61bb      	str	r3, [r7, #24]

	      // Push the link on the call stack
	      state->csp += 1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	61da      	str	r2, [r3, #28]
	      state->call_stack[state->csp] = link;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]

	      //Jump to the call location
	      state->pc = K;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	619a      	str	r2, [r3, #24]

	      break;
 80029de:	e1d1      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 43: {//RET K
	      uint32_t K = get_immediate(state);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fc30 	bl	8002246 <get_immediate>
 80029e6:	6278      	str	r0, [r7, #36]	@ 0x24

	      //Free local variables
	      state->csp = state->bp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	61da      	str	r2, [r3, #28]

	      //Pop old base pointer off stack
	      state->bp = state->call_stack[state->csp];
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	@ 0x24
	      state->csp -= 1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	1e5a      	subs	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	61da      	str	r2, [r3, #28]

	      //Pop link address
	      uint32_t link = state->call_stack[state->csp];
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	623b      	str	r3, [r7, #32]
	      state->csp -= 1;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	61da      	str	r2, [r3, #28]

	      //Drop parameters passed into function, if any
	      state->csp -= K;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	1ad2      	subs	r2, r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	61da      	str	r2, [r3, #28]

	      state->pc = link;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a3a      	ldr	r2, [r7, #32]
 8002a36:	619a      	str	r2, [r3, #24]

	      break;
 8002a38:	e1a4      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 44: {//EQ
	        state->osp -= 1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] == state->operand_stack[state->osp+1];
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2d9      	uxtb	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	460a      	mov	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fbd1 	bl	8002224 <advance_pc>

	        break;
 8002a82:	e17f      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 45: {//NE
	        state->osp -= 1;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	1e5a      	subs	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] != state->operand_stack[state->osp+1];
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2d9      	uxtb	r1, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	460a      	mov	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fbac 	bl	8002224 <advance_pc>

	        break;
 8002acc:	e15a      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 46: {//GT
	        state->osp -= 1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] > state->operand_stack[state->osp+1];
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	3301      	adds	r3, #1
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	bf8c      	ite	hi
 8002afa:	2301      	movhi	r3, #1
 8002afc:	2300      	movls	r3, #0
 8002afe:	b2d9      	uxtb	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff fb87 	bl	8002224 <advance_pc>

	        break;
 8002b16:	e135      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 47: {//LT
	        state->osp -= 1;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	1e5a      	subs	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] < state->operand_stack[state->osp+1];
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	bf34      	ite	cc
 8002b44:	2301      	movcc	r3, #1
 8002b46:	2300      	movcs	r3, #0
 8002b48:	b2d9      	uxtb	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	460a      	mov	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fb62 	bl	8002224 <advance_pc>

	        break;
 8002b60:	e110      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 48: {//GE
	        state->osp -= 1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	1e5a      	subs	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] >= state->operand_stack[state->osp+1];
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6859      	ldr	r1, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	3301      	adds	r3, #1
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	bf2c      	ite	cs
 8002b8e:	2301      	movcs	r3, #1
 8002b90:	2300      	movcc	r3, #0
 8002b92:	b2d9      	uxtb	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	460a      	mov	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fb3d 	bl	8002224 <advance_pc>

	        break;
 8002baa:	e0eb      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 49: {//LE
	        state->osp -= 1;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	1e5a      	subs	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] <= state->operand_stack[state->osp+1];
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	bf94      	ite	ls
 8002bd8:	2301      	movls	r3, #1
 8002bda:	2300      	movhi	r3, #0
 8002bdc:	b2d9      	uxtb	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	460a      	mov	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff fb18 	bl	8002224 <advance_pc>

	        break;
 8002bf4:	e0c6      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 50: {//JT K
	        uint32_t K = get_immediate(state);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fb25 	bl	8002246 <get_immediate>
 8002bfc:	62b8      	str	r0, [r7, #40]	@ 0x28

	        if (state->operand_stack[state->osp] != 0)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <vm_execute+0x910>
	        	state->pc = K;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c14:	619a      	str	r2, [r3, #24]
 8002c16:	e002      	b.n	8002c1e <vm_execute+0x916>
	        else
	            advance_pc(state);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fb03 	bl	8002224 <advance_pc>

	        state->osp -= 1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	1e5a      	subs	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	621a      	str	r2, [r3, #32]

	        break;
 8002c28:	e0ac      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 51: {//JF K
	        uint32_t K = get_immediate(state);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff fb0b 	bl	8002246 <get_immediate>
 8002c30:	62f8      	str	r0, [r7, #44]	@ 0x2c

	        if (state->operand_stack[state->osp] == 0)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <vm_execute+0x944>
	        	state->pc = K;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c48:	619a      	str	r2, [r3, #24]
 8002c4a:	e002      	b.n	8002c52 <vm_execute+0x94a>
	        else
	            advance_pc(state);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fae9 	bl	8002224 <advance_pc>

	        state->osp -= 1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	1e5a      	subs	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	621a      	str	r2, [r3, #32]

	        break;
 8002c5c:	e092      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    /* Data Transfer */
	    case 60: {//PUSHI K
	        uint32_t K = get_immediate(state);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff faf1 	bl	8002246 <get_immediate>
 8002c64:	6338      	str	r0, [r7, #48]	@ 0x30


	        state->osp += 1;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = K;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c7e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff facf 	bl	8002224 <advance_pc>

	        break;
 8002c86:	e07d      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 61: {//POPC

	        state->csp += 1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	61da      	str	r2, [r3, #28]
	        state->call_stack[state->csp] = state->operand_stack[state->osp];
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6819      	ldr	r1, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	601a      	str	r2, [r3, #0]
	        state->osp -= 1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	1e5a      	subs	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	621a      	str	r2, [r3, #32]

	        advance_pc(state);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fab3 	bl	8002224 <advance_pc>

	        break;
 8002cbe:	e061      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 62: {//PUSHL K
	        uint32_t K = get_immediate(state);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff fac0 	bl	8002246 <get_immediate>
 8002cc6:	6378      	str	r0, [r7, #52]	@ 0x34

	        state->osp += 1;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->call_stack[state->bp+K];
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cdc:	440b      	add	r3, r1
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	441a      	add	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fa96 	bl	8002224 <advance_pc>

	        break;
 8002cf8:	e044      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 63: {//POPL K
	        uint32_t K = get_immediate(state);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff faa3 	bl	8002246 <get_immediate>
 8002d00:	63b8      	str	r0, [r7, #56]	@ 0x38

	        state->call_stack[state->bp+K] = state->operand_stack[state->osp];
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	441a      	add	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d18:	4403      	add	r3, r0
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	601a      	str	r2, [r3, #0]

	        state->osp -= 1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	1e5a      	subs	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	621a      	str	r2, [r3, #32]



	        advance_pc(state);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fa79 	bl	8002224 <advance_pc>
	        break;
 8002d32:	e027      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    case 64: {//DROP

	        state->osp -= 1;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	1e5a      	subs	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	621a      	str	r2, [r3, #32]

	        advance_pc(state);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fa70 	bl	8002224 <advance_pc>
	        break;
 8002d44:	e01e      	b.n	8002d84 <vm_execute+0xa7c>
	    	break;
	    }
	    /* Timing */
	    case 100: {//DLA

	      HAL_Delay(state->operand_stack[state->osp]);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f8b7 	bl	8002ec8 <HAL_Delay>
	      state->osp -= 1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	1e5a      	subs	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	621a      	str	r2, [r3, #32]

	      advance_pc(state);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff fa5d 	bl	8002224 <advance_pc>

	      break;
 8002d6a:	e00b      	b.n	8002d84 <vm_execute+0xa7c>
	    }
	    /* Misc */
	    case 201: {//SUC

	    	return SUCCESS;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e00a      	b.n	8002d86 <vm_execute+0xa7e>

	      break;
	    }
	    case 202: {//FAIL

	    	return FAILURE;
 8002d70:	2302      	movs	r3, #2
 8002d72:	e008      	b.n	8002d86 <vm_execute+0xa7e>

	      break;
	    }
	    default: {
	    	printf("Invalid command - (%i)\n", (int)opcode);
 8002d74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4805      	ldr	r0, [pc, #20]	@ (8002d90 <vm_execute+0xa88>)
 8002d7c:	f006 f908 	bl	8008f90 <iprintf>

	      break;
 8002d80:	e000      	b.n	8002d84 <vm_execute+0xa7c>
	    	break;
 8002d82:	bf00      	nop
	    }

	  }


	return RUNNING;
 8002d84:	2300      	movs	r3, #0

}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3744      	adds	r7, #68	@ 0x44
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd90      	pop	{r4, r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	0800ae70 	.word	0x0800ae70

08002d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d94:	480d      	ldr	r0, [pc, #52]	@ (8002dcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d98:	f7ff f9d6 	bl	8002148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d9c:	480c      	ldr	r0, [pc, #48]	@ (8002dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d9e:	490d      	ldr	r1, [pc, #52]	@ (8002dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da0:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd8 <LoopForever+0xe>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002db4:	4c0a      	ldr	r4, [pc, #40]	@ (8002de0 <LoopForever+0x16>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f006 fa95 	bl	80092f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dc6:	f7fe f8f5 	bl	8000fb4 <main>

08002dca <LoopForever>:

LoopForever:
    b LoopForever
 8002dca:	e7fe      	b.n	8002dca <LoopForever>
  ldr   r0, =_estack
 8002dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002dd8:	0800b388 	.word	0x0800b388
  ldr r2, =_sbss
 8002ddc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002de0:	20000614 	.word	0x20000614

08002de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <ADC1_2_IRQHandler>

08002de6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df0:	2003      	movs	r0, #3
 8002df2:	f001 fa23 	bl	800423c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002df6:	2000      	movs	r0, #0
 8002df8:	f000 f80e 	bl	8002e18 <HAL_InitTick>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	71fb      	strb	r3, [r7, #7]
 8002e06:	e001      	b.n	8002e0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e08:	f7fe fe80 	bl	8001b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e0c:	79fb      	ldrb	r3, [r7, #7]

}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e24:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <HAL_InitTick+0x68>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d022      	beq.n	8002e72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e2c:	4b15      	ldr	r3, [pc, #84]	@ (8002e84 <HAL_InitTick+0x6c>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <HAL_InitTick+0x68>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 fa20 	bl	8004286 <HAL_SYSTICK_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10f      	bne.n	8002e6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	d809      	bhi.n	8002e66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e52:	2200      	movs	r2, #0
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5a:	f001 f9fa 	bl	8004252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <HAL_InitTick+0x70>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e007      	b.n	8002e76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
 8002e6a:	e004      	b.n	8002e76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	e001      	b.n	8002e76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000008 	.word	0x20000008
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20000004 	.word	0x20000004

08002e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e90:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <HAL_IncTick+0x1c>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b05      	ldr	r3, [pc, #20]	@ (8002eac <HAL_IncTick+0x20>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a03      	ldr	r2, [pc, #12]	@ (8002ea8 <HAL_IncTick+0x1c>)
 8002e9c:	6013      	str	r3, [r2, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	200004c4 	.word	0x200004c4
 8002eac:	20000008 	.word	0x20000008

08002eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	@ (8002ec4 <HAL_GetTick+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	200004c4 	.word	0x200004c4

08002ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7ff ffee 	bl	8002eb0 <HAL_GetTick>
 8002ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d004      	beq.n	8002eec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_Delay+0x40>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eec:	bf00      	nop
 8002eee:	f7ff ffdf 	bl	8002eb0 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d8f7      	bhi.n	8002eee <HAL_Delay+0x26>
  {
  }
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000008 	.word	0x20000008

08002f0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	609a      	str	r2, [r3, #8]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3360      	adds	r3, #96	@ 0x60
 8002f86:	461a      	mov	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <LL_ADC_SetOffset+0x44>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002fac:	bf00      	nop
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	03fff000 	.word	0x03fff000

08002fbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3360      	adds	r3, #96	@ 0x60
 8002fca:	461a      	mov	r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3360      	adds	r3, #96	@ 0x60
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	431a      	orrs	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800301e:	b480      	push	{r7}
 8003020:	b087      	sub	sp, #28
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3360      	adds	r3, #96	@ 0x60
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	431a      	orrs	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3360      	adds	r3, #96	@ 0x60
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	431a      	orrs	r2, r3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	615a      	str	r2, [r3, #20]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3330      	adds	r3, #48	@ 0x30
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	f003 030c 	and.w	r3, r3, #12
 80030cc:	4413      	add	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	211f      	movs	r1, #31
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	401a      	ands	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	0e9b      	lsrs	r3, r3, #26
 80030e8:	f003 011f 	and.w	r1, r3, #31
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	431a      	orrs	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3314      	adds	r3, #20
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	0e5b      	lsrs	r3, r3, #25
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	4413      	add	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	0d1b      	lsrs	r3, r3, #20
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2107      	movs	r1, #7
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	401a      	ands	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	0d1b      	lsrs	r3, r3, #20
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	431a      	orrs	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003178:	43db      	mvns	r3, r3
 800317a:	401a      	ands	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f003 0318 	and.w	r3, r3, #24
 8003182:	4908      	ldr	r1, [pc, #32]	@ (80031a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003184:	40d9      	lsrs	r1, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	400b      	ands	r3, r1
 800318a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318e:	431a      	orrs	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	0007ffff 	.word	0x0007ffff

080031a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80031b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6093      	str	r3, [r2, #8]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031e0:	d101      	bne.n	80031e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003204:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003208:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003230:	d101      	bne.n	8003236 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003258:	f043 0202 	orr.w	r2, r3, #2
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <LL_ADC_IsEnabled+0x18>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <LL_ADC_IsEnabled+0x1a>
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d101      	bne.n	80032aa <LL_ADC_IsDisableOngoing+0x18>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_ADC_IsDisableOngoing+0x1a>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d101      	bne.n	80032d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d101      	bne.n	80032f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b089      	sub	sp, #36	@ 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e1a9      	b.n	8003672 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fe fc11 	bl	8001b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff41 	bl	80031cc <LL_ADC_IsDeepPowerDownEnabled>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff27 	bl	80031a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff ff5c 	bl	800321c <LL_ADC_IsInternalRegulatorEnabled>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d115      	bne.n	8003396 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff40 	bl	80031f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003374:	4b9c      	ldr	r3, [pc, #624]	@ (80035e8 <HAL_ADC_Init+0x2e4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	4a9c      	ldr	r2, [pc, #624]	@ (80035ec <HAL_ADC_Init+0x2e8>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	3301      	adds	r3, #1
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003388:	e002      	b.n	8003390 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3b01      	subs	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f9      	bne.n	800338a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff3e 	bl	800321c <LL_ADC_IsInternalRegulatorEnabled>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033aa:	f043 0210 	orr.w	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff ff76 	bl	80032b8 <LL_ADC_REG_IsConversionOngoing>
 80033cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 8142 	bne.w	8003660 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 813e 	bne.w	8003660 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033ec:	f043 0202 	orr.w	r2, r3, #2
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff37 	bl	800326c <LL_ADC_IsEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d141      	bne.n	8003488 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800340c:	d004      	beq.n	8003418 <HAL_ADC_Init+0x114>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a77      	ldr	r2, [pc, #476]	@ (80035f0 <HAL_ADC_Init+0x2ec>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10f      	bne.n	8003438 <HAL_ADC_Init+0x134>
 8003418:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800341c:	f7ff ff26 	bl	800326c <LL_ADC_IsEnabled>
 8003420:	4604      	mov	r4, r0
 8003422:	4873      	ldr	r0, [pc, #460]	@ (80035f0 <HAL_ADC_Init+0x2ec>)
 8003424:	f7ff ff22 	bl	800326c <LL_ADC_IsEnabled>
 8003428:	4603      	mov	r3, r0
 800342a:	4323      	orrs	r3, r4
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e012      	b.n	800345e <HAL_ADC_Init+0x15a>
 8003438:	486e      	ldr	r0, [pc, #440]	@ (80035f4 <HAL_ADC_Init+0x2f0>)
 800343a:	f7ff ff17 	bl	800326c <LL_ADC_IsEnabled>
 800343e:	4604      	mov	r4, r0
 8003440:	486d      	ldr	r0, [pc, #436]	@ (80035f8 <HAL_ADC_Init+0x2f4>)
 8003442:	f7ff ff13 	bl	800326c <LL_ADC_IsEnabled>
 8003446:	4603      	mov	r3, r0
 8003448:	431c      	orrs	r4, r3
 800344a:	486c      	ldr	r0, [pc, #432]	@ (80035fc <HAL_ADC_Init+0x2f8>)
 800344c:	f7ff ff0e 	bl	800326c <LL_ADC_IsEnabled>
 8003450:	4603      	mov	r3, r0
 8003452:	4323      	orrs	r3, r4
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d012      	beq.n	8003488 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800346a:	d004      	beq.n	8003476 <HAL_ADC_Init+0x172>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a5f      	ldr	r2, [pc, #380]	@ (80035f0 <HAL_ADC_Init+0x2ec>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_ADC_Init+0x176>
 8003476:	4a62      	ldr	r2, [pc, #392]	@ (8003600 <HAL_ADC_Init+0x2fc>)
 8003478:	e000      	b.n	800347c <HAL_ADC_Init+0x178>
 800347a:	4a62      	ldr	r2, [pc, #392]	@ (8003604 <HAL_ADC_Init+0x300>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f7ff fd42 	bl	8002f0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	7f5b      	ldrb	r3, [r3, #29]
 800348c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003492:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003498:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800349e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d106      	bne.n	80034c4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	3b01      	subs	r3, #1
 80034bc:	045b      	lsls	r3, r3, #17
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	4b48      	ldr	r3, [pc, #288]	@ (8003608 <HAL_ADC_Init+0x304>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	69b9      	ldr	r1, [r7, #24]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fee5 	bl	80032de <LL_ADC_INJ_IsConversionOngoing>
 8003514:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d17f      	bne.n	800361c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d17c      	bne.n	800361c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003526:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800352e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800353e:	f023 0302 	bic.w	r3, r3, #2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	430b      	orrs	r3, r1
 800354a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d017      	beq.n	8003584 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003562:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800356c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003570:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6911      	ldr	r1, [r2, #16]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	430b      	orrs	r3, r1
 800357e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003582:	e013      	b.n	80035ac <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003592:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80035a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035a8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d12a      	bne.n	800360c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035cc:	4311      	orrs	r1, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035d8:	430a      	orrs	r2, r1
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	611a      	str	r2, [r3, #16]
 80035e6:	e019      	b.n	800361c <HAL_ADC_Init+0x318>
 80035e8:	20000000 	.word	0x20000000
 80035ec:	053e2d63 	.word	0x053e2d63
 80035f0:	50000100 	.word	0x50000100
 80035f4:	50000400 	.word	0x50000400
 80035f8:	50000500 	.word	0x50000500
 80035fc:	50000600 	.word	0x50000600
 8003600:	50000300 	.word	0x50000300
 8003604:	50000700 	.word	0x50000700
 8003608:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d10c      	bne.n	800363e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	f023 010f 	bic.w	r1, r3, #15
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	1e5a      	subs	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
 800363c:	e007      	b.n	800364e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 020f 	bic.w	r2, r2, #15
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003652:	f023 0303 	bic.w	r3, r3, #3
 8003656:	f043 0201 	orr.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800365e:	e007      	b.n	8003670 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	f043 0210 	orr.w	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003670:	7ffb      	ldrb	r3, [r7, #31]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3724      	adds	r7, #36	@ 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd90      	pop	{r4, r7, pc}
 800367a:	bf00      	nop

0800367c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b0b6      	sub	sp, #216	@ 0xd8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003696:	2b01      	cmp	r3, #1
 8003698:	d102      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x24>
 800369a:	2302      	movs	r3, #2
 800369c:	f000 bc13 	b.w	8003ec6 <HAL_ADC_ConfigChannel+0x84a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fe03 	bl	80032b8 <LL_ADC_REG_IsConversionOngoing>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 83f3 	bne.w	8003ea0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6859      	ldr	r1, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f7ff fcf2 	bl	80030b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fdf1 	bl	80032b8 <LL_ADC_REG_IsConversionOngoing>
 80036d6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fdfd 	bl	80032de <LL_ADC_INJ_IsConversionOngoing>
 80036e4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 81d9 	bne.w	8003aa4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f040 81d4 	bne.w	8003aa4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003704:	d10f      	bne.n	8003726 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2200      	movs	r2, #0
 8003710:	4619      	mov	r1, r3
 8003712:	f7ff fcf9 	bl	8003108 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fcb3 	bl	800308a <LL_ADC_SetSamplingTimeCommonConfig>
 8003724:	e00e      	b.n	8003744 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	461a      	mov	r2, r3
 8003734:	f7ff fce8 	bl	8003108 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fca3 	bl	800308a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	08db      	lsrs	r3, r3, #3
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b04      	cmp	r3, #4
 8003764:	d022      	beq.n	80037ac <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6919      	ldr	r1, [r3, #16]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003776:	f7ff fbfd 	bl	8002f74 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6919      	ldr	r1, [r3, #16]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	461a      	mov	r2, r3
 8003788:	f7ff fc49 	bl	800301e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003798:	2b01      	cmp	r3, #1
 800379a:	d102      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x126>
 800379c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037a0:	e000      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x128>
 80037a2:	2300      	movs	r3, #0
 80037a4:	461a      	mov	r2, r3
 80037a6:	f7ff fc55 	bl	8003054 <LL_ADC_SetOffsetSaturation>
 80037aa:	e17b      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fc02 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x15c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fbf7 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	f003 021f 	and.w	r2, r3, #31
 80037d6:	e01e      	b.n	8003816 <HAL_ADC_ConfigChannel+0x19a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fbec 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80037fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003806:	2320      	movs	r3, #32
 8003808:	e004      	b.n	8003814 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800380a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <HAL_ADC_ConfigChannel+0x1b2>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	e018      	b.n	8003860 <HAL_ADC_ConfigChannel+0x1e4>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800384a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003852:	2320      	movs	r3, #32
 8003854:	e004      	b.n	8003860 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003860:	429a      	cmp	r2, r3
 8003862:	d106      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2200      	movs	r2, #0
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fbbb 	bl	8002fe8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fb9f 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 800387e:	4603      	mov	r3, r0
 8003880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_ADC_ConfigChannel+0x222>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fb94 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 8003894:	4603      	mov	r3, r0
 8003896:	0e9b      	lsrs	r3, r3, #26
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	e01e      	b.n	80038dc <HAL_ADC_ConfigChannel+0x260>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fb89 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80038bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80038c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80038cc:	2320      	movs	r3, #32
 80038ce:	e004      	b.n	80038da <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80038d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x278>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	0e9b      	lsrs	r3, r3, #26
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	e018      	b.n	8003926 <HAL_ADC_ConfigChannel+0x2aa>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003908:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800390c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003910:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003918:	2320      	movs	r3, #32
 800391a:	e004      	b.n	8003926 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800391c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003926:	429a      	cmp	r2, r3
 8003928:	d106      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fb58 	bl	8002fe8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2102      	movs	r1, #2
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fb3c 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 8003944:	4603      	mov	r3, r0
 8003946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10a      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x2e8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2102      	movs	r1, #2
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fb31 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 800395a:	4603      	mov	r3, r0
 800395c:	0e9b      	lsrs	r3, r3, #26
 800395e:	f003 021f 	and.w	r2, r3, #31
 8003962:	e01e      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x326>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2102      	movs	r1, #2
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fb26 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 8003970:	4603      	mov	r3, r0
 8003972:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003982:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003986:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800398a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003992:	2320      	movs	r3, #32
 8003994:	e004      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003996:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d105      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x33e>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	0e9b      	lsrs	r3, r3, #26
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	e016      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x36c>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80039cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80039d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80039da:	2320      	movs	r3, #32
 80039dc:	e004      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80039de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d106      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2102      	movs	r1, #2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff faf7 	bl	8002fe8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2103      	movs	r1, #3
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fadb 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x3aa>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2103      	movs	r1, #3
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fad0 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	0e9b      	lsrs	r3, r3, #26
 8003a20:	f003 021f 	and.w	r2, r3, #31
 8003a24:	e017      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x3da>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2103      	movs	r1, #3
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff fac5 	bl	8002fbc <LL_ADC_GetOffsetChannel>
 8003a32:	4603      	mov	r3, r0
 8003a34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a40:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003a48:	2320      	movs	r3, #32
 8003a4a:	e003      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x3f2>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	0e9b      	lsrs	r3, r3, #26
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	e011      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x416>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003a86:	2320      	movs	r3, #32
 8003a88:	e003      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a8c:	fab3 f383 	clz	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d106      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2103      	movs	r1, #3
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff faa2 	bl	8002fe8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fbdf 	bl	800326c <LL_ADC_IsEnabled>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f040 813d 	bne.w	8003d30 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f7ff fb4c 	bl	8003160 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4aa2      	ldr	r2, [pc, #648]	@ (8003d58 <HAL_ADC_ConfigChannel+0x6dc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	f040 812e 	bne.w	8003d30 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x480>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	0e9b      	lsrs	r3, r3, #26
 8003aea:	3301      	adds	r3, #1
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2b09      	cmp	r3, #9
 8003af2:	bf94      	ite	ls
 8003af4:	2301      	movls	r3, #1
 8003af6:	2300      	movhi	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e019      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x4b4>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b0c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b14:	2320      	movs	r3, #32
 8003b16:	e003      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	3301      	adds	r3, #1
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2b09      	cmp	r3, #9
 8003b28:	bf94      	ite	ls
 8003b2a:	2301      	movls	r3, #1
 8003b2c:	2300      	movhi	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d079      	beq.n	8003c28 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d107      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x4d4>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0e9b      	lsrs	r3, r3, #26
 8003b46:	3301      	adds	r3, #1
 8003b48:	069b      	lsls	r3, r3, #26
 8003b4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b4e:	e015      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x500>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b60:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003b68:	2320      	movs	r3, #32
 8003b6a:	e003      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	3301      	adds	r3, #1
 8003b76:	069b      	lsls	r3, r3, #26
 8003b78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d109      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x520>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	e017      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x550>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	e003      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003bb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	ea42 0103 	orr.w	r1, r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x576>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	0e9b      	lsrs	r3, r3, #26
 8003be2:	3301      	adds	r3, #1
 8003be4:	f003 021f 	and.w	r2, r3, #31
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	051b      	lsls	r3, r3, #20
 8003bf0:	e018      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x5a8>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	e003      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	3301      	adds	r3, #1
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c24:	430b      	orrs	r3, r1
 8003c26:	e07e      	b.n	8003d26 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x5c8>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0e9b      	lsrs	r3, r3, #26
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	069b      	lsls	r3, r3, #26
 8003c3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c42:	e015      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x5f4>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c54:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e003      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	069b      	lsls	r3, r3, #26
 8003c6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x614>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0e9b      	lsrs	r3, r3, #26
 8003c82:	3301      	adds	r3, #1
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	e017      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x644>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	61fb      	str	r3, [r7, #28]
  return result;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ca8:	2320      	movs	r3, #32
 8003caa:	e003      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2101      	movs	r1, #1
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	ea42 0103 	orr.w	r1, r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10d      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x670>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0e9b      	lsrs	r3, r3, #26
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3b1e      	subs	r3, #30
 8003ce4:	051b      	lsls	r3, r3, #20
 8003ce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cea:	e01b      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x6a8>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	613b      	str	r3, [r7, #16]
  return result;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d04:	2320      	movs	r3, #32
 8003d06:	e003      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fab3 f383 	clz	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	f003 021f 	and.w	r2, r3, #31
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3b1e      	subs	r3, #30
 8003d1e:	051b      	lsls	r3, r3, #20
 8003d20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d24:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f7ff f9ec 	bl	8003108 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <HAL_ADC_ConfigChannel+0x6e0>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80be 	beq.w	8003eba <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d46:	d004      	beq.n	8003d52 <HAL_ADC_ConfigChannel+0x6d6>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a04      	ldr	r2, [pc, #16]	@ (8003d60 <HAL_ADC_ConfigChannel+0x6e4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10a      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x6ec>
 8003d52:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <HAL_ADC_ConfigChannel+0x6e8>)
 8003d54:	e009      	b.n	8003d6a <HAL_ADC_ConfigChannel+0x6ee>
 8003d56:	bf00      	nop
 8003d58:	407f0000 	.word	0x407f0000
 8003d5c:	80080000 	.word	0x80080000
 8003d60:	50000100 	.word	0x50000100
 8003d64:	50000300 	.word	0x50000300
 8003d68:	4b59      	ldr	r3, [pc, #356]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x854>)
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff f8f4 	bl	8002f58 <LL_ADC_GetCommonPathInternalCh>
 8003d70:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a56      	ldr	r2, [pc, #344]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x858>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_ADC_ConfigChannel+0x70c>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a55      	ldr	r2, [pc, #340]	@ (8003ed8 <HAL_ADC_ConfigChannel+0x85c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d13a      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d134      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d9c:	d005      	beq.n	8003daa <HAL_ADC_ConfigChannel+0x72e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a4e      	ldr	r2, [pc, #312]	@ (8003edc <HAL_ADC_ConfigChannel+0x860>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	f040 8085 	bne.w	8003eb4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db2:	d004      	beq.n	8003dbe <HAL_ADC_ConfigChannel+0x742>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a49      	ldr	r2, [pc, #292]	@ (8003ee0 <HAL_ADC_ConfigChannel+0x864>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x746>
 8003dbe:	4a49      	ldr	r2, [pc, #292]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x868>)
 8003dc0:	e000      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x748>
 8003dc2:	4a43      	ldr	r2, [pc, #268]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x854>)
 8003dc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f7ff f8af 	bl	8002f32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dd4:	4b44      	ldr	r3, [pc, #272]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x86c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	099b      	lsrs	r3, r3, #6
 8003dda:	4a44      	ldr	r2, [pc, #272]	@ (8003eec <HAL_ADC_ConfigChannel+0x870>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	099b      	lsrs	r3, r3, #6
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	4613      	mov	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dee:	e002      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f9      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dfc:	e05a      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3b      	ldr	r2, [pc, #236]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x874>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d125      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11f      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a31      	ldr	r2, [pc, #196]	@ (8003ee0 <HAL_ADC_ConfigChannel+0x864>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d104      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x7ac>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a34      	ldr	r2, [pc, #208]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x878>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d047      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e30:	d004      	beq.n	8003e3c <HAL_ADC_ConfigChannel+0x7c0>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a2a      	ldr	r2, [pc, #168]	@ (8003ee0 <HAL_ADC_ConfigChannel+0x864>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d101      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x7c4>
 8003e3c:	4a29      	ldr	r2, [pc, #164]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x868>)
 8003e3e:	e000      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x7c6>
 8003e40:	4a23      	ldr	r2, [pc, #140]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x854>)
 8003e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7ff f870 	bl	8002f32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e52:	e031      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a27      	ldr	r2, [pc, #156]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x87c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d12d      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d127      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee0 <HAL_ADC_ConfigChannel+0x864>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e7c:	d004      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x80c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a17      	ldr	r2, [pc, #92]	@ (8003ee0 <HAL_ADC_ConfigChannel+0x864>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x810>
 8003e88:	4a16      	ldr	r2, [pc, #88]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x868>)
 8003e8a:	e000      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x812>
 8003e8c:	4a10      	ldr	r2, [pc, #64]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x854>)
 8003e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f7ff f84a 	bl	8002f32 <LL_ADC_SetCommonPathInternalCh>
 8003e9e:	e00c      	b.n	8003eba <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003eb2:	e002      	b.n	8003eba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ec2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	37d8      	adds	r7, #216	@ 0xd8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	50000700 	.word	0x50000700
 8003ed4:	c3210000 	.word	0xc3210000
 8003ed8:	90c00010 	.word	0x90c00010
 8003edc:	50000600 	.word	0x50000600
 8003ee0:	50000100 	.word	0x50000100
 8003ee4:	50000300 	.word	0x50000300
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	053e2d63 	.word	0x053e2d63
 8003ef0:	c7520000 	.word	0xc7520000
 8003ef4:	50000500 	.word	0x50000500
 8003ef8:	cb840000 	.word	0xcb840000

08003efc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff f9c2 	bl	8003292 <LL_ADC_IsDisableOngoing>
 8003f0e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff f9a9 	bl	800326c <LL_ADC_IsEnabled>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d047      	beq.n	8003fb0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d144      	bne.n	8003fb0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 030d 	and.w	r3, r3, #13
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10c      	bne.n	8003f4e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff f983 	bl	8003244 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2203      	movs	r2, #3
 8003f44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f46:	f7fe ffb3 	bl	8002eb0 <HAL_GetTick>
 8003f4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f4c:	e029      	b.n	8003fa2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f52:	f043 0210 	orr.w	r2, r3, #16
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5e:	f043 0201 	orr.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e023      	b.n	8003fb2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f6a:	f7fe ffa1 	bl	8002eb0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d914      	bls.n	8003fa2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	f043 0210 	orr.w	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e007      	b.n	8003fb2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1dc      	bne.n	8003f6a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <LL_ADC_StartCalibration>:
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003fcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	609a      	str	r2, [r3, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_ADC_IsCalibrationOnGoing>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004000:	d101      	bne.n	8004006 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_ADCEx_Calibration_Start+0x1c>
 800402c:	2302      	movs	r3, #2
 800402e:	e04d      	b.n	80040cc <HAL_ADCEx_Calibration_Start+0xb8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff5f 	bl	8003efc <ADC_Disable>
 800403e:	4603      	mov	r3, r0
 8004040:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d136      	bne.n	80040b6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004050:	f023 0302 	bic.w	r3, r3, #2
 8004054:	f043 0202 	orr.w	r2, r3, #2
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6839      	ldr	r1, [r7, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff ffa9 	bl	8003fba <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004068:	e014      	b.n	8004094 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	3301      	adds	r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4a18      	ldr	r2, [pc, #96]	@ (80040d4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d90d      	bls.n	8004094 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407c:	f023 0312 	bic.w	r3, r3, #18
 8004080:	f043 0210 	orr.w	r2, r3, #16
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e01b      	b.n	80040cc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ffa7 	bl	8003fec <LL_ADC_IsCalibrationOnGoing>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e2      	bne.n	800406a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a8:	f023 0303 	bic.w	r3, r3, #3
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040b4:	e005      	b.n	80040c2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ba:	f043 0210 	orr.w	r2, r3, #16
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	0004de01 	.word	0x0004de01

080040d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e8:	4b0c      	ldr	r3, [pc, #48]	@ (800411c <__NVIC_SetPriorityGrouping+0x44>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040f4:	4013      	ands	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800410a:	4a04      	ldr	r2, [pc, #16]	@ (800411c <__NVIC_SetPriorityGrouping+0x44>)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	60d3      	str	r3, [r2, #12]
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	e000ed00 	.word	0xe000ed00

08004120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004124:	4b04      	ldr	r3, [pc, #16]	@ (8004138 <__NVIC_GetPriorityGrouping+0x18>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	f003 0307 	and.w	r3, r3, #7
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414c:	2b00      	cmp	r3, #0
 800414e:	db0a      	blt.n	8004166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b2da      	uxtb	r2, r3
 8004154:	490c      	ldr	r1, [pc, #48]	@ (8004188 <__NVIC_SetPriority+0x4c>)
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	440b      	add	r3, r1
 8004160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004164:	e00a      	b.n	800417c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4908      	ldr	r1, [pc, #32]	@ (800418c <__NVIC_SetPriority+0x50>)
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	3b04      	subs	r3, #4
 8004174:	0112      	lsls	r2, r2, #4
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	440b      	add	r3, r1
 800417a:	761a      	strb	r2, [r3, #24]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000e100 	.word	0xe000e100
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	@ 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f1c3 0307 	rsb	r3, r3, #7
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	bf28      	it	cs
 80041ae:	2304      	movcs	r3, #4
 80041b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3304      	adds	r3, #4
 80041b6:	2b06      	cmp	r3, #6
 80041b8:	d902      	bls.n	80041c0 <NVIC_EncodePriority+0x30>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3b03      	subs	r3, #3
 80041be:	e000      	b.n	80041c2 <NVIC_EncodePriority+0x32>
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	f04f 32ff 	mov.w	r2, #4294967295
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43da      	mvns	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	401a      	ands	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041d8:	f04f 31ff 	mov.w	r1, #4294967295
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	43d9      	mvns	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e8:	4313      	orrs	r3, r2
         );
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	@ 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3b01      	subs	r3, #1
 8004204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004208:	d301      	bcc.n	800420e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800420a:	2301      	movs	r3, #1
 800420c:	e00f      	b.n	800422e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800420e:	4a0a      	ldr	r2, [pc, #40]	@ (8004238 <SysTick_Config+0x40>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004216:	210f      	movs	r1, #15
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	f7ff ff8e 	bl	800413c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004220:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <SysTick_Config+0x40>)
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004226:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <SysTick_Config+0x40>)
 8004228:	2207      	movs	r2, #7
 800422a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	e000e010 	.word	0xe000e010

0800423c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff47 	bl	80040d8 <__NVIC_SetPriorityGrouping>
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	4603      	mov	r3, r0
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004260:	f7ff ff5e 	bl	8004120 <__NVIC_GetPriorityGrouping>
 8004264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	6978      	ldr	r0, [r7, #20]
 800426c:	f7ff ff90 	bl	8004190 <NVIC_EncodePriority>
 8004270:	4602      	mov	r2, r0
 8004272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff5f 	bl	800413c <__NVIC_SetPriority>
}
 800427e:	bf00      	nop
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff ffb2 	bl	80041f8 <SysTick_Config>
 8004294:	4603      	mov	r3, r0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042ae:	e15a      	b.n	8004566 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2101      	movs	r1, #1
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	4013      	ands	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 814c 	beq.w	8004560 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d005      	beq.n	80042e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d130      	bne.n	8004342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004316:	2201      	movs	r2, #1
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	091b      	lsrs	r3, r3, #4
 800432c:	f003 0201 	and.w	r2, r3, #1
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b03      	cmp	r3, #3
 800434c:	d017      	beq.n	800437e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	2203      	movs	r2, #3
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4013      	ands	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d123      	bne.n	80043d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	08da      	lsrs	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3208      	adds	r2, #8
 8004392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	220f      	movs	r2, #15
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4013      	ands	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	08da      	lsrs	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3208      	adds	r2, #8
 80043cc:	6939      	ldr	r1, [r7, #16]
 80043ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	2203      	movs	r2, #3
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 0203 	and.w	r2, r3, #3
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80a6 	beq.w	8004560 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004414:	4b5b      	ldr	r3, [pc, #364]	@ (8004584 <HAL_GPIO_Init+0x2e4>)
 8004416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004418:	4a5a      	ldr	r2, [pc, #360]	@ (8004584 <HAL_GPIO_Init+0x2e4>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004420:	4b58      	ldr	r3, [pc, #352]	@ (8004584 <HAL_GPIO_Init+0x2e4>)
 8004422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800442c:	4a56      	ldr	r2, [pc, #344]	@ (8004588 <HAL_GPIO_Init+0x2e8>)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	3302      	adds	r3, #2
 8004434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	220f      	movs	r2, #15
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4013      	ands	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004456:	d01f      	beq.n	8004498 <HAL_GPIO_Init+0x1f8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a4c      	ldr	r2, [pc, #304]	@ (800458c <HAL_GPIO_Init+0x2ec>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d019      	beq.n	8004494 <HAL_GPIO_Init+0x1f4>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a4b      	ldr	r2, [pc, #300]	@ (8004590 <HAL_GPIO_Init+0x2f0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_GPIO_Init+0x1f0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a4a      	ldr	r2, [pc, #296]	@ (8004594 <HAL_GPIO_Init+0x2f4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00d      	beq.n	800448c <HAL_GPIO_Init+0x1ec>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a49      	ldr	r2, [pc, #292]	@ (8004598 <HAL_GPIO_Init+0x2f8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <HAL_GPIO_Init+0x1e8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a48      	ldr	r2, [pc, #288]	@ (800459c <HAL_GPIO_Init+0x2fc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_GPIO_Init+0x1e4>
 8004480:	2305      	movs	r3, #5
 8004482:	e00a      	b.n	800449a <HAL_GPIO_Init+0x1fa>
 8004484:	2306      	movs	r3, #6
 8004486:	e008      	b.n	800449a <HAL_GPIO_Init+0x1fa>
 8004488:	2304      	movs	r3, #4
 800448a:	e006      	b.n	800449a <HAL_GPIO_Init+0x1fa>
 800448c:	2303      	movs	r3, #3
 800448e:	e004      	b.n	800449a <HAL_GPIO_Init+0x1fa>
 8004490:	2302      	movs	r3, #2
 8004492:	e002      	b.n	800449a <HAL_GPIO_Init+0x1fa>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <HAL_GPIO_Init+0x1fa>
 8004498:	2300      	movs	r3, #0
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	f002 0203 	and.w	r2, r2, #3
 80044a0:	0092      	lsls	r2, r2, #2
 80044a2:	4093      	lsls	r3, r2
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044aa:	4937      	ldr	r1, [pc, #220]	@ (8004588 <HAL_GPIO_Init+0x2e8>)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	3302      	adds	r3, #2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044b8:	4b39      	ldr	r3, [pc, #228]	@ (80045a0 <HAL_GPIO_Init+0x300>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044dc:	4a30      	ldr	r2, [pc, #192]	@ (80045a0 <HAL_GPIO_Init+0x300>)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044e2:	4b2f      	ldr	r3, [pc, #188]	@ (80045a0 <HAL_GPIO_Init+0x300>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	43db      	mvns	r3, r3
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004506:	4a26      	ldr	r2, [pc, #152]	@ (80045a0 <HAL_GPIO_Init+0x300>)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800450c:	4b24      	ldr	r3, [pc, #144]	@ (80045a0 <HAL_GPIO_Init+0x300>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	43db      	mvns	r3, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004530:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <HAL_GPIO_Init+0x300>)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004536:	4b1a      	ldr	r3, [pc, #104]	@ (80045a0 <HAL_GPIO_Init+0x300>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	43db      	mvns	r3, r3
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4013      	ands	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800455a:	4a11      	ldr	r2, [pc, #68]	@ (80045a0 <HAL_GPIO_Init+0x300>)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	3301      	adds	r3, #1
 8004564:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	f47f ae9d 	bne.w	80042b0 <HAL_GPIO_Init+0x10>
  }
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	40021000 	.word	0x40021000
 8004588:	40010000 	.word	0x40010000
 800458c:	48000400 	.word	0x48000400
 8004590:	48000800 	.word	0x48000800
 8004594:	48000c00 	.word	0x48000c00
 8004598:	48001000 	.word	0x48001000
 800459c:	48001400 	.word	0x48001400
 80045a0:	40010400 	.word	0x40010400

080045a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	807b      	strh	r3, [r7, #2]
 80045b0:	4613      	mov	r3, r2
 80045b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045b4:	787b      	ldrb	r3, [r7, #1]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045ba:	887a      	ldrh	r2, [r7, #2]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045c0:	e002      	b.n	80045c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045c2:	887a      	ldrh	r2, [r7, #2]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e08d      	b.n	8004702 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd fb3e 	bl	8001c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2224      	movs	r2, #36	@ 0x24
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004624:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004634:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d107      	bne.n	800464e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	e006      	b.n	800465c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800465a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d108      	bne.n	8004676 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	e007      	b.n	8004686 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69d9      	ldr	r1, [r3, #28]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	461a      	mov	r2, r3
 8004718:	460b      	mov	r3, r1
 800471a:	817b      	strh	r3, [r7, #10]
 800471c:	4613      	mov	r3, r2
 800471e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b20      	cmp	r3, #32
 800472a:	f040 80fd 	bne.w	8004928 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_I2C_Master_Transmit+0x30>
 8004738:	2302      	movs	r3, #2
 800473a:	e0f6      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004744:	f7fe fbb4 	bl	8002eb0 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2319      	movs	r3, #25
 8004750:	2201      	movs	r2, #1
 8004752:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f914 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0e1      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2221      	movs	r2, #33	@ 0x21
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2210      	movs	r2, #16
 8004772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	893a      	ldrh	r2, [r7, #8]
 8004786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	2bff      	cmp	r3, #255	@ 0xff
 8004796:	d906      	bls.n	80047a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	22ff      	movs	r2, #255	@ 0xff
 800479c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800479e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e007      	b.n	80047b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80047b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d024      	beq.n	8004808 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	3301      	adds	r3, #1
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	8979      	ldrh	r1, [r7, #10]
 80047fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004934 <HAL_I2C_Master_Transmit+0x228>)
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fa83 	bl	8004d0c <I2C_TransferConfig>
 8004806:	e066      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480c:	b2da      	uxtb	r2, r3
 800480e:	8979      	ldrh	r1, [r7, #10]
 8004810:	4b48      	ldr	r3, [pc, #288]	@ (8004934 <HAL_I2C_Master_Transmit+0x228>)
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fa78 	bl	8004d0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800481c:	e05b      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	6a39      	ldr	r1, [r7, #32]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f907 	bl	8004a36 <I2C_WaitOnTXISFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e07b      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	781a      	ldrb	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d034      	beq.n	80048d6 <HAL_I2C_Master_Transmit+0x1ca>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d130      	bne.n	80048d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	2200      	movs	r2, #0
 800487c:	2180      	movs	r1, #128	@ 0x80
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f880 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e04d      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	2bff      	cmp	r3, #255	@ 0xff
 8004896:	d90e      	bls.n	80048b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	22ff      	movs	r2, #255	@ 0xff
 800489c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	8979      	ldrh	r1, [r7, #10]
 80048a6:	2300      	movs	r3, #0
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fa2c 	bl	8004d0c <I2C_TransferConfig>
 80048b4:	e00f      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	8979      	ldrh	r1, [r7, #10]
 80048c8:	2300      	movs	r3, #0
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fa1b 	bl	8004d0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d19e      	bne.n	800481e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	6a39      	ldr	r1, [r7, #32]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f8ed 	bl	8004ac4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e01a      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2220      	movs	r2, #32
 80048fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b0c      	ldr	r3, [pc, #48]	@ (8004938 <HAL_I2C_Master_Transmit+0x22c>)
 8004908:	400b      	ands	r3, r1
 800490a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	80002000 	.word	0x80002000
 8004938:	fe00e800 	.word	0xfe00e800

0800493c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b02      	cmp	r3, #2
 8004950:	d103      	bne.n	800495a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d007      	beq.n	8004978 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	619a      	str	r2, [r3, #24]
  }
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004994:	e03b      	b.n	8004a0e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	6839      	ldr	r1, [r7, #0]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f8d6 	bl	8004b4c <I2C_IsErrorOccurred>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e041      	b.n	8004a2e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d02d      	beq.n	8004a0e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b2:	f7fe fa7d 	bl	8002eb0 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d302      	bcc.n	80049c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d122      	bne.n	8004a0e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4013      	ands	r3, r2
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d113      	bne.n	8004a0e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e00f      	b.n	8004a2e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d0b4      	beq.n	8004996 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a42:	e033      	b.n	8004aac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f87f 	bl	8004b4c <I2C_IsErrorOccurred>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e031      	b.n	8004abc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d025      	beq.n	8004aac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a60:	f7fe fa26 	bl	8002eb0 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d302      	bcc.n	8004a76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d11a      	bne.n	8004aac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d013      	beq.n	8004aac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a88:	f043 0220 	orr.w	r2, r3, #32
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e007      	b.n	8004abc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d1c4      	bne.n	8004a44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ad0:	e02f      	b.n	8004b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f838 	bl	8004b4c <I2C_IsErrorOccurred>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e02d      	b.n	8004b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae6:	f7fe f9e3 	bl	8002eb0 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11a      	bne.n	8004b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d013      	beq.n	8004b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e007      	b.n	8004b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d1c8      	bne.n	8004ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	@ 0x28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d068      	beq.n	8004c4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2210      	movs	r2, #16
 8004b7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b80:	e049      	b.n	8004c16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d045      	beq.n	8004c16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b8a:	f7fe f991 	bl	8002eb0 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <I2C_IsErrorOccurred+0x54>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d13a      	bne.n	8004c16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004baa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bc2:	d121      	bne.n	8004c08 <I2C_IsErrorOccurred+0xbc>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bca:	d01d      	beq.n	8004c08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d01a      	beq.n	8004c08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004be0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004be2:	f7fe f965 	bl	8002eb0 <HAL_GetTick>
 8004be6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004be8:	e00e      	b.n	8004c08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004bea:	f7fe f961 	bl	8002eb0 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b19      	cmp	r3, #25
 8004bf6:	d907      	bls.n	8004c08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	f043 0320 	orr.w	r3, r3, #32
 8004bfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004c06:	e006      	b.n	8004c16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d1e9      	bne.n	8004bea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d003      	beq.n	8004c2c <I2C_IsErrorOccurred+0xe0>
 8004c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0aa      	beq.n	8004b82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	f043 0304 	orr.w	r3, r3, #4
 8004c42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00b      	beq.n	8004c96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f043 0308 	orr.w	r3, r3, #8
 8004c84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f043 0302 	orr.w	r3, r3, #2
 8004ca6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01c      	beq.n	8004cfa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff fe3b 	bl	800493c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004d08 <I2C_IsErrorOccurred+0x1bc>)
 8004cd2:	400b      	ands	r3, r1
 8004cd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3728      	adds	r7, #40	@ 0x28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	fe00e800 	.word	0xfe00e800

08004d0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	817b      	strh	r3, [r7, #10]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d1e:	897b      	ldrh	r3, [r7, #10]
 8004d20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d24:	7a7b      	ldrb	r3, [r7, #9]
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	0d5b      	lsrs	r3, r3, #21
 8004d46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004d4a:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <I2C_TransferConfig+0x60>)
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	ea02 0103 	and.w	r1, r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	03ff63ff 	.word	0x03ff63ff

08004d70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d138      	bne.n	8004df8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e032      	b.n	8004dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2224      	movs	r2, #36	@ 0x24
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	e000      	b.n	8004dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
  }
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d139      	bne.n	8004e90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e033      	b.n	8004e92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2224      	movs	r2, #36	@ 0x24
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d141      	bne.n	8004f32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eae:	4b4b      	ldr	r3, [pc, #300]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eba:	d131      	bne.n	8004f20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ebc:	4b47      	ldr	r3, [pc, #284]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ec2:	4a46      	ldr	r2, [pc, #280]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ec8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ecc:	4b43      	ldr	r3, [pc, #268]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ed4:	4a41      	ldr	r2, [pc, #260]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004edc:	4b40      	ldr	r3, [pc, #256]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2232      	movs	r2, #50	@ 0x32
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	4a3f      	ldr	r2, [pc, #252]	@ (8004fe4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	0c9b      	lsrs	r3, r3, #18
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ef2:	e002      	b.n	8004efa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004efa:	4b38      	ldr	r3, [pc, #224]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f06:	d102      	bne.n	8004f0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f2      	bne.n	8004ef4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f0e:	4b33      	ldr	r3, [pc, #204]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f1a:	d158      	bne.n	8004fce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e057      	b.n	8004fd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f20:	4b2e      	ldr	r3, [pc, #184]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f26:	4a2d      	ldr	r2, [pc, #180]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f30:	e04d      	b.n	8004fce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f38:	d141      	bne.n	8004fbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f3a:	4b28      	ldr	r3, [pc, #160]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f46:	d131      	bne.n	8004fac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f48:	4b24      	ldr	r3, [pc, #144]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f4e:	4a23      	ldr	r2, [pc, #140]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f58:	4b20      	ldr	r3, [pc, #128]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f60:	4a1e      	ldr	r2, [pc, #120]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f68:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2232      	movs	r2, #50	@ 0x32
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	0c9b      	lsrs	r3, r3, #18
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f7e:	e002      	b.n	8004f86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f86:	4b15      	ldr	r3, [pc, #84]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f92:	d102      	bne.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f2      	bne.n	8004f80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f9a:	4b10      	ldr	r3, [pc, #64]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa6:	d112      	bne.n	8004fce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e011      	b.n	8004fd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fac:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fbc:	e007      	b.n	8004fce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fbe:	4b07      	ldr	r3, [pc, #28]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fc6:	4a05      	ldr	r2, [pc, #20]	@ (8004fdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fcc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40007000 	.word	0x40007000
 8004fe0:	20000000 	.word	0x20000000
 8004fe4:	431bde83 	.word	0x431bde83

08004fe8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	4a04      	ldr	r2, [pc, #16]	@ (8005004 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ff6:	6093      	str	r3, [r2, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40007000 	.word	0x40007000

08005008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e2fe      	b.n	8005618 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d075      	beq.n	8005112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005026:	4b97      	ldr	r3, [pc, #604]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005030:	4b94      	ldr	r3, [pc, #592]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b0c      	cmp	r3, #12
 800503e:	d102      	bne.n	8005046 <HAL_RCC_OscConfig+0x3e>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d002      	beq.n	800504c <HAL_RCC_OscConfig+0x44>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d10b      	bne.n	8005064 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504c:	4b8d      	ldr	r3, [pc, #564]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d05b      	beq.n	8005110 <HAL_RCC_OscConfig+0x108>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d157      	bne.n	8005110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e2d9      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506c:	d106      	bne.n	800507c <HAL_RCC_OscConfig+0x74>
 800506e:	4b85      	ldr	r3, [pc, #532]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a84      	ldr	r2, [pc, #528]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	e01d      	b.n	80050b8 <HAL_RCC_OscConfig+0xb0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x98>
 8005086:	4b7f      	ldr	r3, [pc, #508]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7e      	ldr	r2, [pc, #504]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 800508c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	4b7c      	ldr	r3, [pc, #496]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a7b      	ldr	r2, [pc, #492]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e00b      	b.n	80050b8 <HAL_RCC_OscConfig+0xb0>
 80050a0:	4b78      	ldr	r3, [pc, #480]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a77      	ldr	r2, [pc, #476]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80050a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	4b75      	ldr	r3, [pc, #468]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a74      	ldr	r2, [pc, #464]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80050b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fd fef6 	bl	8002eb0 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c8:	f7fd fef2 	bl	8002eb0 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	@ 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e29e      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050da:	4b6a      	ldr	r3, [pc, #424]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0xc0>
 80050e6:	e014      	b.n	8005112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fd fee2 	bl	8002eb0 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fd fede 	bl	8002eb0 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	@ 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e28a      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005102:	4b60      	ldr	r3, [pc, #384]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0xe8>
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d075      	beq.n	800520a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511e:	4b59      	ldr	r3, [pc, #356]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005128:	4b56      	ldr	r3, [pc, #344]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d102      	bne.n	800513e <HAL_RCC_OscConfig+0x136>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d002      	beq.n	8005144 <HAL_RCC_OscConfig+0x13c>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d11f      	bne.n	8005184 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005144:	4b4f      	ldr	r3, [pc, #316]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_RCC_OscConfig+0x154>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e25d      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515c:	4b49      	ldr	r3, [pc, #292]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	4946      	ldr	r1, [pc, #280]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005170:	4b45      	ldr	r3, [pc, #276]	@ (8005288 <HAL_RCC_OscConfig+0x280>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f7fd fe4f 	bl	8002e18 <HAL_InitTick>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d043      	beq.n	8005208 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e249      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d023      	beq.n	80051d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800518c:	4b3d      	ldr	r3, [pc, #244]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a3c      	ldr	r2, [pc, #240]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fd fe8a 	bl	8002eb0 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a0:	f7fd fe86 	bl	8002eb0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e232      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051b2:	4b34      	ldr	r3, [pc, #208]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051be:	4b31      	ldr	r3, [pc, #196]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	061b      	lsls	r3, r3, #24
 80051cc:	492d      	ldr	r1, [pc, #180]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
 80051d2:	e01a      	b.n	800520a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80051da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd fe66 	bl	8002eb0 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e8:	f7fd fe62 	bl	8002eb0 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e20e      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051fa:	4b22      	ldr	r3, [pc, #136]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x1e0>
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005208:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d041      	beq.n	800529a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01c      	beq.n	8005258 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800521e:	4b19      	ldr	r3, [pc, #100]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005224:	4a17      	ldr	r2, [pc, #92]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522e:	f7fd fe3f 	bl	8002eb0 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005236:	f7fd fe3b 	bl	8002eb0 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e1e7      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005248:	4b0e      	ldr	r3, [pc, #56]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 800524a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0ef      	beq.n	8005236 <HAL_RCC_OscConfig+0x22e>
 8005256:	e020      	b.n	800529a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005258:	4b0a      	ldr	r3, [pc, #40]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 800525a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525e:	4a09      	ldr	r2, [pc, #36]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005260:	f023 0301 	bic.w	r3, r3, #1
 8005264:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fd fe22 	bl	8002eb0 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800526e:	e00d      	b.n	800528c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005270:	f7fd fe1e 	bl	8002eb0 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d906      	bls.n	800528c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e1ca      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000
 8005288:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800528c:	4b8c      	ldr	r3, [pc, #560]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 800528e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1ea      	bne.n	8005270 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80a6 	beq.w	80053f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a8:	2300      	movs	r3, #0
 80052aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052ac:	4b84      	ldr	r3, [pc, #528]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 80052ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_RCC_OscConfig+0x2b4>
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <HAL_RCC_OscConfig+0x2b6>
 80052bc:	2300      	movs	r3, #0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00d      	beq.n	80052de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c2:	4b7f      	ldr	r3, [pc, #508]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 80052c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c6:	4a7e      	ldr	r2, [pc, #504]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 80052c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ce:	4b7c      	ldr	r3, [pc, #496]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 80052d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052da:	2301      	movs	r3, #1
 80052dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052de:	4b79      	ldr	r3, [pc, #484]	@ (80054c4 <HAL_RCC_OscConfig+0x4bc>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d118      	bne.n	800531c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ea:	4b76      	ldr	r3, [pc, #472]	@ (80054c4 <HAL_RCC_OscConfig+0x4bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a75      	ldr	r2, [pc, #468]	@ (80054c4 <HAL_RCC_OscConfig+0x4bc>)
 80052f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052f6:	f7fd fddb 	bl	8002eb0 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052fe:	f7fd fdd7 	bl	8002eb0 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e183      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005310:	4b6c      	ldr	r3, [pc, #432]	@ (80054c4 <HAL_RCC_OscConfig+0x4bc>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d108      	bne.n	8005336 <HAL_RCC_OscConfig+0x32e>
 8005324:	4b66      	ldr	r3, [pc, #408]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532a:	4a65      	ldr	r2, [pc, #404]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005334:	e024      	b.n	8005380 <HAL_RCC_OscConfig+0x378>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b05      	cmp	r3, #5
 800533c:	d110      	bne.n	8005360 <HAL_RCC_OscConfig+0x358>
 800533e:	4b60      	ldr	r3, [pc, #384]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005344:	4a5e      	ldr	r2, [pc, #376]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005346:	f043 0304 	orr.w	r3, r3, #4
 800534a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800534e:	4b5c      	ldr	r3, [pc, #368]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005354:	4a5a      	ldr	r2, [pc, #360]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800535e:	e00f      	b.n	8005380 <HAL_RCC_OscConfig+0x378>
 8005360:	4b57      	ldr	r3, [pc, #348]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005366:	4a56      	ldr	r2, [pc, #344]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005368:	f023 0301 	bic.w	r3, r3, #1
 800536c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005370:	4b53      	ldr	r3, [pc, #332]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005376:	4a52      	ldr	r2, [pc, #328]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005378:	f023 0304 	bic.w	r3, r3, #4
 800537c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d016      	beq.n	80053b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fd fd92 	bl	8002eb0 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800538e:	e00a      	b.n	80053a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005390:	f7fd fd8e 	bl	8002eb0 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e138      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a6:	4b46      	ldr	r3, [pc, #280]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0ed      	beq.n	8005390 <HAL_RCC_OscConfig+0x388>
 80053b4:	e015      	b.n	80053e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b6:	f7fd fd7b 	bl	8002eb0 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053bc:	e00a      	b.n	80053d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053be:	f7fd fd77 	bl	8002eb0 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e121      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053d4:	4b3a      	ldr	r3, [pc, #232]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1ed      	bne.n	80053be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053e2:	7ffb      	ldrb	r3, [r7, #31]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d105      	bne.n	80053f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e8:	4b35      	ldr	r3, [pc, #212]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 80053ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ec:	4a34      	ldr	r2, [pc, #208]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 80053ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d03c      	beq.n	800547a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01c      	beq.n	8005442 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005408:	4b2d      	ldr	r3, [pc, #180]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 800540a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800540e:	4a2c      	ldr	r2, [pc, #176]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005418:	f7fd fd4a 	bl	8002eb0 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005420:	f7fd fd46 	bl	8002eb0 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e0f2      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005432:	4b23      	ldr	r3, [pc, #140]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005434:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0ef      	beq.n	8005420 <HAL_RCC_OscConfig+0x418>
 8005440:	e01b      	b.n	800547a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005442:	4b1f      	ldr	r3, [pc, #124]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005444:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005448:	4a1d      	ldr	r2, [pc, #116]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fd fd2d 	bl	8002eb0 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800545a:	f7fd fd29 	bl	8002eb0 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e0d5      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800546c:	4b14      	ldr	r3, [pc, #80]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 800546e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1ef      	bne.n	800545a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80c9 	beq.w	8005616 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005484:	4b0e      	ldr	r3, [pc, #56]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 030c 	and.w	r3, r3, #12
 800548c:	2b0c      	cmp	r3, #12
 800548e:	f000 8083 	beq.w	8005598 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d15e      	bne.n	8005558 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549a:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a08      	ldr	r2, [pc, #32]	@ (80054c0 <HAL_RCC_OscConfig+0x4b8>)
 80054a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a6:	f7fd fd03 	bl	8002eb0 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ac:	e00c      	b.n	80054c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ae:	f7fd fcff 	bl	8002eb0 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d905      	bls.n	80054c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e0ab      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
 80054c0:	40021000 	.word	0x40021000
 80054c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054c8:	4b55      	ldr	r3, [pc, #340]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1ec      	bne.n	80054ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054d4:	4b52      	ldr	r3, [pc, #328]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	4b52      	ldr	r3, [pc, #328]	@ (8005624 <HAL_RCC_OscConfig+0x61c>)
 80054da:	4013      	ands	r3, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6a11      	ldr	r1, [r2, #32]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054e4:	3a01      	subs	r2, #1
 80054e6:	0112      	lsls	r2, r2, #4
 80054e8:	4311      	orrs	r1, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80054ee:	0212      	lsls	r2, r2, #8
 80054f0:	4311      	orrs	r1, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054f6:	0852      	lsrs	r2, r2, #1
 80054f8:	3a01      	subs	r2, #1
 80054fa:	0552      	lsls	r2, r2, #21
 80054fc:	4311      	orrs	r1, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005502:	0852      	lsrs	r2, r2, #1
 8005504:	3a01      	subs	r2, #1
 8005506:	0652      	lsls	r2, r2, #25
 8005508:	4311      	orrs	r1, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800550e:	06d2      	lsls	r2, r2, #27
 8005510:	430a      	orrs	r2, r1
 8005512:	4943      	ldr	r1, [pc, #268]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 8005514:	4313      	orrs	r3, r2
 8005516:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005518:	4b41      	ldr	r3, [pc, #260]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a40      	ldr	r2, [pc, #256]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 800551e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005522:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005524:	4b3e      	ldr	r3, [pc, #248]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4a3d      	ldr	r2, [pc, #244]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 800552a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800552e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fd fcbe 	bl	8002eb0 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005538:	f7fd fcba 	bl	8002eb0 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e066      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800554a:	4b35      	ldr	r3, [pc, #212]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x530>
 8005556:	e05e      	b.n	8005616 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005558:	4b31      	ldr	r3, [pc, #196]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a30      	ldr	r2, [pc, #192]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 800555e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fd fca4 	bl	8002eb0 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556c:	f7fd fca0 	bl	8002eb0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e04c      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800557e:	4b28      	ldr	r3, [pc, #160]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800558a:	4b25      	ldr	r3, [pc, #148]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	4924      	ldr	r1, [pc, #144]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 8005590:	4b25      	ldr	r3, [pc, #148]	@ (8005628 <HAL_RCC_OscConfig+0x620>)
 8005592:	4013      	ands	r3, r2
 8005594:	60cb      	str	r3, [r1, #12]
 8005596:	e03e      	b.n	8005616 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e039      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005620 <HAL_RCC_OscConfig+0x618>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f003 0203 	and.w	r2, r3, #3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d12c      	bne.n	8005612 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	3b01      	subs	r3, #1
 80055c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d123      	bne.n	8005612 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d11b      	bne.n	8005612 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d113      	bne.n	8005612 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	3b01      	subs	r3, #1
 80055f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d109      	bne.n	8005612 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005608:	085b      	lsrs	r3, r3, #1
 800560a:	3b01      	subs	r3, #1
 800560c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d001      	beq.n	8005616 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40021000 	.word	0x40021000
 8005624:	019f800c 	.word	0x019f800c
 8005628:	feeefffc 	.word	0xfeeefffc

0800562c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e11e      	b.n	8005882 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005644:	4b91      	ldr	r3, [pc, #580]	@ (800588c <HAL_RCC_ClockConfig+0x260>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d910      	bls.n	8005674 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005652:	4b8e      	ldr	r3, [pc, #568]	@ (800588c <HAL_RCC_ClockConfig+0x260>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f023 020f 	bic.w	r2, r3, #15
 800565a:	498c      	ldr	r1, [pc, #560]	@ (800588c <HAL_RCC_ClockConfig+0x260>)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	4313      	orrs	r3, r2
 8005660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005662:	4b8a      	ldr	r3, [pc, #552]	@ (800588c <HAL_RCC_ClockConfig+0x260>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d001      	beq.n	8005674 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e106      	b.n	8005882 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d073      	beq.n	8005768 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d129      	bne.n	80056dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005688:	4b81      	ldr	r3, [pc, #516]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0f4      	b.n	8005882 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005698:	f000 f99e 	bl	80059d8 <RCC_GetSysClockFreqFromPLLSource>
 800569c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4a7c      	ldr	r2, [pc, #496]	@ (8005894 <HAL_RCC_ClockConfig+0x268>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d93f      	bls.n	8005726 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d033      	beq.n	8005726 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d12f      	bne.n	8005726 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056c6:	4b72      	ldr	r3, [pc, #456]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ce:	4a70      	ldr	r2, [pc, #448]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 80056d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056d6:	2380      	movs	r3, #128	@ 0x80
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e024      	b.n	8005726 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d107      	bne.n	80056f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e0c6      	b.n	8005882 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056f4:	4b66      	ldr	r3, [pc, #408]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0be      	b.n	8005882 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005704:	f000 f8ce 	bl	80058a4 <HAL_RCC_GetSysClockFreq>
 8005708:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4a61      	ldr	r2, [pc, #388]	@ (8005894 <HAL_RCC_ClockConfig+0x268>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d909      	bls.n	8005726 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005712:	4b5f      	ldr	r3, [pc, #380]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800571a:	4a5d      	ldr	r2, [pc, #372]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 800571c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005720:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005722:	2380      	movs	r3, #128	@ 0x80
 8005724:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005726:	4b5a      	ldr	r3, [pc, #360]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f023 0203 	bic.w	r2, r3, #3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	4957      	ldr	r1, [pc, #348]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 8005734:	4313      	orrs	r3, r2
 8005736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005738:	f7fd fbba 	bl	8002eb0 <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800573e:	e00a      	b.n	8005756 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005740:	f7fd fbb6 	bl	8002eb0 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e095      	b.n	8005882 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005756:	4b4e      	ldr	r3, [pc, #312]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 020c 	and.w	r2, r3, #12
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	429a      	cmp	r2, r3
 8005766:	d1eb      	bne.n	8005740 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d023      	beq.n	80057bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005780:	4b43      	ldr	r3, [pc, #268]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	4a42      	ldr	r2, [pc, #264]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 8005786:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800578a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005798:	4b3d      	ldr	r3, [pc, #244]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057a0:	4a3b      	ldr	r2, [pc, #236]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 80057a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a8:	4b39      	ldr	r3, [pc, #228]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4936      	ldr	r1, [pc, #216]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	608b      	str	r3, [r1, #8]
 80057ba:	e008      	b.n	80057ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2b80      	cmp	r3, #128	@ 0x80
 80057c0:	d105      	bne.n	80057ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057c2:	4b33      	ldr	r3, [pc, #204]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	4a32      	ldr	r2, [pc, #200]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 80057c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057ce:	4b2f      	ldr	r3, [pc, #188]	@ (800588c <HAL_RCC_ClockConfig+0x260>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d21d      	bcs.n	8005818 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057dc:	4b2b      	ldr	r3, [pc, #172]	@ (800588c <HAL_RCC_ClockConfig+0x260>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 020f 	bic.w	r2, r3, #15
 80057e4:	4929      	ldr	r1, [pc, #164]	@ (800588c <HAL_RCC_ClockConfig+0x260>)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057ec:	f7fd fb60 	bl	8002eb0 <HAL_GetTick>
 80057f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f2:	e00a      	b.n	800580a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f4:	f7fd fb5c 	bl	8002eb0 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d901      	bls.n	800580a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e03b      	b.n	8005882 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580a:	4b20      	ldr	r3, [pc, #128]	@ (800588c <HAL_RCC_ClockConfig+0x260>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d1ed      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005824:	4b1a      	ldr	r3, [pc, #104]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4917      	ldr	r1, [pc, #92]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 8005832:	4313      	orrs	r3, r2
 8005834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005842:	4b13      	ldr	r3, [pc, #76]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	490f      	ldr	r1, [pc, #60]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 8005852:	4313      	orrs	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005856:	f000 f825 	bl	80058a4 <HAL_RCC_GetSysClockFreq>
 800585a:	4602      	mov	r2, r0
 800585c:	4b0c      	ldr	r3, [pc, #48]	@ (8005890 <HAL_RCC_ClockConfig+0x264>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	091b      	lsrs	r3, r3, #4
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	490c      	ldr	r1, [pc, #48]	@ (8005898 <HAL_RCC_ClockConfig+0x26c>)
 8005868:	5ccb      	ldrb	r3, [r1, r3]
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	fa22 f303 	lsr.w	r3, r2, r3
 8005872:	4a0a      	ldr	r2, [pc, #40]	@ (800589c <HAL_RCC_ClockConfig+0x270>)
 8005874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005876:	4b0a      	ldr	r3, [pc, #40]	@ (80058a0 <HAL_RCC_ClockConfig+0x274>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fd facc 	bl	8002e18 <HAL_InitTick>
 8005880:	4603      	mov	r3, r0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40022000 	.word	0x40022000
 8005890:	40021000 	.word	0x40021000
 8005894:	04c4b400 	.word	0x04c4b400
 8005898:	0800afc8 	.word	0x0800afc8
 800589c:	20000000 	.word	0x20000000
 80058a0:	20000004 	.word	0x20000004

080058a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058aa:	4b2c      	ldr	r3, [pc, #176]	@ (800595c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 030c 	and.w	r3, r3, #12
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d102      	bne.n	80058bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005960 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e047      	b.n	800594c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058bc:	4b27      	ldr	r3, [pc, #156]	@ (800595c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 030c 	and.w	r3, r3, #12
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d102      	bne.n	80058ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058c8:	4b26      	ldr	r3, [pc, #152]	@ (8005964 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	e03e      	b.n	800594c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058ce:	4b23      	ldr	r3, [pc, #140]	@ (800595c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	d136      	bne.n	8005948 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058da:	4b20      	ldr	r3, [pc, #128]	@ (800595c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058e4:	4b1d      	ldr	r3, [pc, #116]	@ (800595c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	3301      	adds	r3, #1
 80058f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d10c      	bne.n	8005912 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005964 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005900:	4a16      	ldr	r2, [pc, #88]	@ (800595c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005902:	68d2      	ldr	r2, [r2, #12]
 8005904:	0a12      	lsrs	r2, r2, #8
 8005906:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800590a:	fb02 f303 	mul.w	r3, r2, r3
 800590e:	617b      	str	r3, [r7, #20]
      break;
 8005910:	e00c      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005912:	4a13      	ldr	r2, [pc, #76]	@ (8005960 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	fbb2 f3f3 	udiv	r3, r2, r3
 800591a:	4a10      	ldr	r2, [pc, #64]	@ (800595c <HAL_RCC_GetSysClockFreq+0xb8>)
 800591c:	68d2      	ldr	r2, [r2, #12]
 800591e:	0a12      	lsrs	r2, r2, #8
 8005920:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005924:	fb02 f303 	mul.w	r3, r2, r3
 8005928:	617b      	str	r3, [r7, #20]
      break;
 800592a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800592c:	4b0b      	ldr	r3, [pc, #44]	@ (800595c <HAL_RCC_GetSysClockFreq+0xb8>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	0e5b      	lsrs	r3, r3, #25
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	3301      	adds	r3, #1
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	e001      	b.n	800594c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800594c:	693b      	ldr	r3, [r7, #16]
}
 800594e:	4618      	mov	r0, r3
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000
 8005960:	00f42400 	.word	0x00f42400
 8005964:	02dc6c00 	.word	0x02dc6c00

08005968 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800596c:	4b03      	ldr	r3, [pc, #12]	@ (800597c <HAL_RCC_GetHCLKFreq+0x14>)
 800596e:	681b      	ldr	r3, [r3, #0]
}
 8005970:	4618      	mov	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20000000 	.word	0x20000000

08005980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005984:	f7ff fff0 	bl	8005968 <HAL_RCC_GetHCLKFreq>
 8005988:	4602      	mov	r2, r0
 800598a:	4b06      	ldr	r3, [pc, #24]	@ (80059a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	4904      	ldr	r1, [pc, #16]	@ (80059a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005996:	5ccb      	ldrb	r3, [r1, r3]
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40021000 	.word	0x40021000
 80059a8:	0800afd8 	.word	0x0800afd8

080059ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059b0:	f7ff ffda 	bl	8005968 <HAL_RCC_GetHCLKFreq>
 80059b4:	4602      	mov	r2, r0
 80059b6:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	0adb      	lsrs	r3, r3, #11
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	4904      	ldr	r1, [pc, #16]	@ (80059d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059c2:	5ccb      	ldrb	r3, [r1, r3]
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40021000 	.word	0x40021000
 80059d4:	0800afd8 	.word	0x0800afd8

080059d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059de:	4b1e      	ldr	r3, [pc, #120]	@ (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d10c      	bne.n	8005a16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059fc:	4a17      	ldr	r2, [pc, #92]	@ (8005a5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	4a14      	ldr	r2, [pc, #80]	@ (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a06:	68d2      	ldr	r2, [r2, #12]
 8005a08:	0a12      	lsrs	r2, r2, #8
 8005a0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	617b      	str	r3, [r7, #20]
    break;
 8005a14:	e00c      	b.n	8005a30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a16:	4a12      	ldr	r2, [pc, #72]	@ (8005a60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a20:	68d2      	ldr	r2, [r2, #12]
 8005a22:	0a12      	lsrs	r2, r2, #8
 8005a24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]
    break;
 8005a2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a30:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	0e5b      	lsrs	r3, r3, #25
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a4a:	687b      	ldr	r3, [r7, #4]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	02dc6c00 	.word	0x02dc6c00
 8005a60:	00f42400 	.word	0x00f42400

08005a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a70:	2300      	movs	r3, #0
 8005a72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8098 	beq.w	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a82:	2300      	movs	r3, #0
 8005a84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a86:	4b43      	ldr	r3, [pc, #268]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10d      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a92:	4b40      	ldr	r3, [pc, #256]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a96:	4a3f      	ldr	r2, [pc, #252]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aae:	4b3a      	ldr	r3, [pc, #232]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a39      	ldr	r2, [pc, #228]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005aba:	f7fd f9f9 	bl	8002eb0 <HAL_GetTick>
 8005abe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ac0:	e009      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ac2:	f7fd f9f5 	bl	8002eb0 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d902      	bls.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	74fb      	strb	r3, [r7, #19]
        break;
 8005ad4:	e005      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ad6:	4b30      	ldr	r3, [pc, #192]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0ef      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d159      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01e      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d019      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b04:	4b23      	ldr	r3, [pc, #140]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b10:	4b20      	ldr	r3, [pc, #128]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b16:	4a1f      	ldr	r2, [pc, #124]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b20:	4b1c      	ldr	r3, [pc, #112]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b26:	4a1b      	ldr	r2, [pc, #108]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b30:	4a18      	ldr	r2, [pc, #96]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d016      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b42:	f7fd f9b5 	bl	8002eb0 <HAL_GetTick>
 8005b46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b48:	e00b      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b4a:	f7fd f9b1 	bl	8002eb0 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d902      	bls.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	74fb      	strb	r3, [r7, #19]
            break;
 8005b60:	e006      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b62:	4b0c      	ldr	r3, [pc, #48]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0ec      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b70:	7cfb      	ldrb	r3, [r7, #19]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b76:	4b07      	ldr	r3, [pc, #28]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b84:	4903      	ldr	r1, [pc, #12]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	74bb      	strb	r3, [r7, #18]
 8005b92:	e005      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b94:	40021000 	.word	0x40021000
 8005b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9c:	7cfb      	ldrb	r3, [r7, #19]
 8005b9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ba0:	7c7b      	ldrb	r3, [r7, #17]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d105      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba6:	4ba7      	ldr	r3, [pc, #668]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005baa:	4aa6      	ldr	r2, [pc, #664]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bbe:	4ba1      	ldr	r3, [pc, #644]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	f023 0203 	bic.w	r2, r3, #3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	499d      	ldr	r1, [pc, #628]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005be0:	4b98      	ldr	r3, [pc, #608]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be6:	f023 020c 	bic.w	r2, r3, #12
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	4995      	ldr	r1, [pc, #596]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c02:	4b90      	ldr	r3, [pc, #576]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	498c      	ldr	r1, [pc, #560]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c24:	4b87      	ldr	r3, [pc, #540]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	4984      	ldr	r1, [pc, #528]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c46:	4b7f      	ldr	r3, [pc, #508]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	497b      	ldr	r1, [pc, #492]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c68:	4b76      	ldr	r3, [pc, #472]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	4973      	ldr	r1, [pc, #460]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	496a      	ldr	r1, [pc, #424]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cac:	4b65      	ldr	r3, [pc, #404]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	4962      	ldr	r1, [pc, #392]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cce:	4b5d      	ldr	r3, [pc, #372]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cdc:	4959      	ldr	r1, [pc, #356]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cf0:	4b54      	ldr	r3, [pc, #336]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cf6:	f023 0203 	bic.w	r2, r3, #3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	4951      	ldr	r1, [pc, #324]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d12:	4b4c      	ldr	r3, [pc, #304]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	4948      	ldr	r1, [pc, #288]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d015      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d34:	4b43      	ldr	r3, [pc, #268]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d42:	4940      	ldr	r1, [pc, #256]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d52:	d105      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d54:	4b3b      	ldr	r3, [pc, #236]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a3a      	ldr	r2, [pc, #232]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d5e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d015      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d6c:	4b35      	ldr	r3, [pc, #212]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d7a:	4932      	ldr	r1, [pc, #200]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d8a:	d105      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4a2c      	ldr	r2, [pc, #176]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d96:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d015      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005da4:	4b27      	ldr	r3, [pc, #156]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005daa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db2:	4924      	ldr	r1, [pc, #144]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d015      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ddc:	4b19      	ldr	r3, [pc, #100]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dea:	4916      	ldr	r1, [pc, #88]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dfa:	d105      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dfc:	4b11      	ldr	r3, [pc, #68]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4a10      	ldr	r2, [pc, #64]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d019      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e14:	4b0b      	ldr	r3, [pc, #44]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	4908      	ldr	r1, [pc, #32]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e32:	d109      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e34:	4b03      	ldr	r3, [pc, #12]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4a02      	ldr	r2, [pc, #8]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e3e:	60d3      	str	r3, [r2, #12]
 8005e40:	e002      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e42:	bf00      	nop
 8005e44:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d015      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e54:	4b29      	ldr	r3, [pc, #164]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e62:	4926      	ldr	r1, [pc, #152]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e72:	d105      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e74:	4b21      	ldr	r3, [pc, #132]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a20      	ldr	r2, [pc, #128]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d015      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e92:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e9a:	4918      	ldr	r1, [pc, #96]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eaa:	d105      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005eac:	4b13      	ldr	r3, [pc, #76]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4a12      	ldr	r2, [pc, #72]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed2:	490a      	ldr	r1, [pc, #40]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee2:	d105      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4a04      	ldr	r2, [pc, #16]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ef0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40021000 	.word	0x40021000

08005f00 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e027      	b.n	8005f62 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	7a5b      	ldrb	r3, [r3, #9]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fb ff28 	bl	8001d78 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f023 0108 	bic.w	r1, r3, #8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0204 	orr.w	r2, r2, #4
 8005f52:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	7a1b      	ldrb	r3, [r3, #8]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e044      	b.n	800600e <HAL_RNG_GenerateRandomNumber+0xa4>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	7a5b      	ldrb	r3, [r3, #9]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d133      	bne.n	8005ffc <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f9a:	f7fc ff89 	bl	8002eb0 <HAL_GetTick>
 8005f9e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005fa0:	e018      	b.n	8005fd4 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005fa2:	f7fc ff85 	bl	8002eb0 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d911      	bls.n	8005fd4 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d00a      	beq.n	8005fd4 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e01c      	b.n	800600e <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d1df      	bne.n	8005fa2 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691a      	ldr	r2, [r3, #16]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	725a      	strb	r2, [r3, #9]
 8005ffa:	e004      	b.n	8006006 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2204      	movs	r2, #4
 8006000:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	721a      	strb	r2, [r3, #8]

  return status;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e049      	b.n	80060bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7fb fecf 	bl	8001de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f000 fc43 	bl	80068e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d001      	beq.n	80060dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e04c      	b.n	8006176 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a26      	ldr	r2, [pc, #152]	@ (8006184 <HAL_TIM_Base_Start+0xc0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d022      	beq.n	8006134 <HAL_TIM_Base_Start+0x70>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f6:	d01d      	beq.n	8006134 <HAL_TIM_Base_Start+0x70>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a22      	ldr	r2, [pc, #136]	@ (8006188 <HAL_TIM_Base_Start+0xc4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <HAL_TIM_Base_Start+0x70>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a21      	ldr	r2, [pc, #132]	@ (800618c <HAL_TIM_Base_Start+0xc8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <HAL_TIM_Base_Start+0x70>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1f      	ldr	r2, [pc, #124]	@ (8006190 <HAL_TIM_Base_Start+0xcc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <HAL_TIM_Base_Start+0x70>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1e      	ldr	r2, [pc, #120]	@ (8006194 <HAL_TIM_Base_Start+0xd0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <HAL_TIM_Base_Start+0x70>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1c      	ldr	r2, [pc, #112]	@ (8006198 <HAL_TIM_Base_Start+0xd4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <HAL_TIM_Base_Start+0x70>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1b      	ldr	r2, [pc, #108]	@ (800619c <HAL_TIM_Base_Start+0xd8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d115      	bne.n	8006160 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	4b19      	ldr	r3, [pc, #100]	@ (80061a0 <HAL_TIM_Base_Start+0xdc>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b06      	cmp	r3, #6
 8006144:	d015      	beq.n	8006172 <HAL_TIM_Base_Start+0xae>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800614c:	d011      	beq.n	8006172 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0201 	orr.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	e008      	b.n	8006172 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	e000      	b.n	8006174 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40000400 	.word	0x40000400
 800618c:	40000800 	.word	0x40000800
 8006190:	40000c00 	.word	0x40000c00
 8006194:	40013400 	.word	0x40013400
 8006198:	40014000 	.word	0x40014000
 800619c:	40015000 	.word	0x40015000
 80061a0:	00010007 	.word	0x00010007

080061a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e049      	b.n	800624a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f841 	bl	8006252 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f000 fb7c 	bl	80068e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
	...

08006268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_TIM_PWM_Start+0x24>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b01      	cmp	r3, #1
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e03c      	b.n	8006306 <HAL_TIM_PWM_Start+0x9e>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b04      	cmp	r3, #4
 8006290:	d109      	bne.n	80062a6 <HAL_TIM_PWM_Start+0x3e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b01      	cmp	r3, #1
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e02f      	b.n	8006306 <HAL_TIM_PWM_Start+0x9e>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d109      	bne.n	80062c0 <HAL_TIM_PWM_Start+0x58>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	e022      	b.n	8006306 <HAL_TIM_PWM_Start+0x9e>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b0c      	cmp	r3, #12
 80062c4:	d109      	bne.n	80062da <HAL_TIM_PWM_Start+0x72>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	bf14      	ite	ne
 80062d2:	2301      	movne	r3, #1
 80062d4:	2300      	moveq	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	e015      	b.n	8006306 <HAL_TIM_PWM_Start+0x9e>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d109      	bne.n	80062f4 <HAL_TIM_PWM_Start+0x8c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e008      	b.n	8006306 <HAL_TIM_PWM_Start+0x9e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	bf14      	ite	ne
 8006300:	2301      	movne	r3, #1
 8006302:	2300      	moveq	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e0a6      	b.n	800645c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <HAL_TIM_PWM_Start+0xb6>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800631c:	e023      	b.n	8006366 <HAL_TIM_PWM_Start+0xfe>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b04      	cmp	r3, #4
 8006322:	d104      	bne.n	800632e <HAL_TIM_PWM_Start+0xc6>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800632c:	e01b      	b.n	8006366 <HAL_TIM_PWM_Start+0xfe>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b08      	cmp	r3, #8
 8006332:	d104      	bne.n	800633e <HAL_TIM_PWM_Start+0xd6>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800633c:	e013      	b.n	8006366 <HAL_TIM_PWM_Start+0xfe>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b0c      	cmp	r3, #12
 8006342:	d104      	bne.n	800634e <HAL_TIM_PWM_Start+0xe6>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800634c:	e00b      	b.n	8006366 <HAL_TIM_PWM_Start+0xfe>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b10      	cmp	r3, #16
 8006352:	d104      	bne.n	800635e <HAL_TIM_PWM_Start+0xf6>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800635c:	e003      	b.n	8006366 <HAL_TIM_PWM_Start+0xfe>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2201      	movs	r2, #1
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f000 ff30 	bl	80071d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a3a      	ldr	r2, [pc, #232]	@ (8006464 <HAL_TIM_PWM_Start+0x1fc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d018      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x148>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a39      	ldr	r2, [pc, #228]	@ (8006468 <HAL_TIM_PWM_Start+0x200>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x148>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a37      	ldr	r2, [pc, #220]	@ (800646c <HAL_TIM_PWM_Start+0x204>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00e      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x148>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a36      	ldr	r2, [pc, #216]	@ (8006470 <HAL_TIM_PWM_Start+0x208>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d009      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x148>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a34      	ldr	r2, [pc, #208]	@ (8006474 <HAL_TIM_PWM_Start+0x20c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <HAL_TIM_PWM_Start+0x148>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a33      	ldr	r2, [pc, #204]	@ (8006478 <HAL_TIM_PWM_Start+0x210>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d101      	bne.n	80063b4 <HAL_TIM_PWM_Start+0x14c>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <HAL_TIM_PWM_Start+0x14e>
 80063b4:	2300      	movs	r3, #0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a25      	ldr	r2, [pc, #148]	@ (8006464 <HAL_TIM_PWM_Start+0x1fc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d022      	beq.n	800641a <HAL_TIM_PWM_Start+0x1b2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063dc:	d01d      	beq.n	800641a <HAL_TIM_PWM_Start+0x1b2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a26      	ldr	r2, [pc, #152]	@ (800647c <HAL_TIM_PWM_Start+0x214>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d018      	beq.n	800641a <HAL_TIM_PWM_Start+0x1b2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a24      	ldr	r2, [pc, #144]	@ (8006480 <HAL_TIM_PWM_Start+0x218>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <HAL_TIM_PWM_Start+0x1b2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a23      	ldr	r2, [pc, #140]	@ (8006484 <HAL_TIM_PWM_Start+0x21c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00e      	beq.n	800641a <HAL_TIM_PWM_Start+0x1b2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a19      	ldr	r2, [pc, #100]	@ (8006468 <HAL_TIM_PWM_Start+0x200>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d009      	beq.n	800641a <HAL_TIM_PWM_Start+0x1b2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a18      	ldr	r2, [pc, #96]	@ (800646c <HAL_TIM_PWM_Start+0x204>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d004      	beq.n	800641a <HAL_TIM_PWM_Start+0x1b2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <HAL_TIM_PWM_Start+0x210>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d115      	bne.n	8006446 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	4b19      	ldr	r3, [pc, #100]	@ (8006488 <HAL_TIM_PWM_Start+0x220>)
 8006422:	4013      	ands	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b06      	cmp	r3, #6
 800642a:	d015      	beq.n	8006458 <HAL_TIM_PWM_Start+0x1f0>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006432:	d011      	beq.n	8006458 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006444:	e008      	b.n	8006458 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0201 	orr.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e000      	b.n	800645a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006458:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40013400 	.word	0x40013400
 800646c:	40014000 	.word	0x40014000
 8006470:	40014400 	.word	0x40014400
 8006474:	40014800 	.word	0x40014800
 8006478:	40015000 	.word	0x40015000
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	40000c00 	.word	0x40000c00
 8006488:	00010007 	.word	0x00010007

0800648c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e0ff      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b14      	cmp	r3, #20
 80064b6:	f200 80f0 	bhi.w	800669a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	08006515 	.word	0x08006515
 80064c4:	0800669b 	.word	0x0800669b
 80064c8:	0800669b 	.word	0x0800669b
 80064cc:	0800669b 	.word	0x0800669b
 80064d0:	08006555 	.word	0x08006555
 80064d4:	0800669b 	.word	0x0800669b
 80064d8:	0800669b 	.word	0x0800669b
 80064dc:	0800669b 	.word	0x0800669b
 80064e0:	08006597 	.word	0x08006597
 80064e4:	0800669b 	.word	0x0800669b
 80064e8:	0800669b 	.word	0x0800669b
 80064ec:	0800669b 	.word	0x0800669b
 80064f0:	080065d7 	.word	0x080065d7
 80064f4:	0800669b 	.word	0x0800669b
 80064f8:	0800669b 	.word	0x0800669b
 80064fc:	0800669b 	.word	0x0800669b
 8006500:	08006619 	.word	0x08006619
 8006504:	0800669b 	.word	0x0800669b
 8006508:	0800669b 	.word	0x0800669b
 800650c:	0800669b 	.word	0x0800669b
 8006510:	08006659 	.word	0x08006659
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fa94 	bl	8006a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0208 	orr.w	r2, r2, #8
 800652e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0204 	bic.w	r2, r2, #4
 800653e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6999      	ldr	r1, [r3, #24]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	619a      	str	r2, [r3, #24]
      break;
 8006552:	e0a5      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fb0e 	bl	8006b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800656e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800657e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6999      	ldr	r1, [r3, #24]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	021a      	lsls	r2, r3, #8
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	619a      	str	r2, [r3, #24]
      break;
 8006594:	e084      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fb81 	bl	8006ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0208 	orr.w	r2, r2, #8
 80065b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0204 	bic.w	r2, r2, #4
 80065c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69d9      	ldr	r1, [r3, #28]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	61da      	str	r2, [r3, #28]
      break;
 80065d4:	e064      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fbf3 	bl	8006dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69d9      	ldr	r1, [r3, #28]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	021a      	lsls	r2, r3, #8
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	61da      	str	r2, [r3, #28]
      break;
 8006616:	e043      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fc66 	bl	8006ef0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0208 	orr.w	r2, r2, #8
 8006632:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0204 	bic.w	r2, r2, #4
 8006642:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006656:	e023      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fcb0 	bl	8006fc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006672:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006682:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	021a      	lsls	r2, r3, #8
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006698:	e002      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
      break;
 800669e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop

080066b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e0f6      	b.n	80068be <HAL_TIM_ConfigClockSource+0x20a>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80066ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a6f      	ldr	r2, [pc, #444]	@ (80068c8 <HAL_TIM_ConfigClockSource+0x214>)
 800670a:	4293      	cmp	r3, r2
 800670c:	f000 80c1 	beq.w	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 8006710:	4a6d      	ldr	r2, [pc, #436]	@ (80068c8 <HAL_TIM_ConfigClockSource+0x214>)
 8006712:	4293      	cmp	r3, r2
 8006714:	f200 80c6 	bhi.w	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006718:	4a6c      	ldr	r2, [pc, #432]	@ (80068cc <HAL_TIM_ConfigClockSource+0x218>)
 800671a:	4293      	cmp	r3, r2
 800671c:	f000 80b9 	beq.w	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 8006720:	4a6a      	ldr	r2, [pc, #424]	@ (80068cc <HAL_TIM_ConfigClockSource+0x218>)
 8006722:	4293      	cmp	r3, r2
 8006724:	f200 80be 	bhi.w	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006728:	4a69      	ldr	r2, [pc, #420]	@ (80068d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	f000 80b1 	beq.w	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 8006730:	4a67      	ldr	r2, [pc, #412]	@ (80068d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	f200 80b6 	bhi.w	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006738:	4a66      	ldr	r2, [pc, #408]	@ (80068d4 <HAL_TIM_ConfigClockSource+0x220>)
 800673a:	4293      	cmp	r3, r2
 800673c:	f000 80a9 	beq.w	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 8006740:	4a64      	ldr	r2, [pc, #400]	@ (80068d4 <HAL_TIM_ConfigClockSource+0x220>)
 8006742:	4293      	cmp	r3, r2
 8006744:	f200 80ae 	bhi.w	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006748:	4a63      	ldr	r2, [pc, #396]	@ (80068d8 <HAL_TIM_ConfigClockSource+0x224>)
 800674a:	4293      	cmp	r3, r2
 800674c:	f000 80a1 	beq.w	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 8006750:	4a61      	ldr	r2, [pc, #388]	@ (80068d8 <HAL_TIM_ConfigClockSource+0x224>)
 8006752:	4293      	cmp	r3, r2
 8006754:	f200 80a6 	bhi.w	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006758:	4a60      	ldr	r2, [pc, #384]	@ (80068dc <HAL_TIM_ConfigClockSource+0x228>)
 800675a:	4293      	cmp	r3, r2
 800675c:	f000 8099 	beq.w	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 8006760:	4a5e      	ldr	r2, [pc, #376]	@ (80068dc <HAL_TIM_ConfigClockSource+0x228>)
 8006762:	4293      	cmp	r3, r2
 8006764:	f200 809e 	bhi.w	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006768:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800676c:	f000 8091 	beq.w	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 8006770:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006774:	f200 8096 	bhi.w	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006778:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800677c:	f000 8089 	beq.w	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 8006780:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006784:	f200 808e 	bhi.w	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800678c:	d03e      	beq.n	800680c <HAL_TIM_ConfigClockSource+0x158>
 800678e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006792:	f200 8087 	bhi.w	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679a:	f000 8086 	beq.w	80068aa <HAL_TIM_ConfigClockSource+0x1f6>
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a2:	d87f      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067a4:	2b70      	cmp	r3, #112	@ 0x70
 80067a6:	d01a      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x12a>
 80067a8:	2b70      	cmp	r3, #112	@ 0x70
 80067aa:	d87b      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067ac:	2b60      	cmp	r3, #96	@ 0x60
 80067ae:	d050      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0x19e>
 80067b0:	2b60      	cmp	r3, #96	@ 0x60
 80067b2:	d877      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067b4:	2b50      	cmp	r3, #80	@ 0x50
 80067b6:	d03c      	beq.n	8006832 <HAL_TIM_ConfigClockSource+0x17e>
 80067b8:	2b50      	cmp	r3, #80	@ 0x50
 80067ba:	d873      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067bc:	2b40      	cmp	r3, #64	@ 0x40
 80067be:	d058      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1be>
 80067c0:	2b40      	cmp	r3, #64	@ 0x40
 80067c2:	d86f      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067c4:	2b30      	cmp	r3, #48	@ 0x30
 80067c6:	d064      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 80067c8:	2b30      	cmp	r3, #48	@ 0x30
 80067ca:	d86b      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d060      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d867      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d05c      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d05a      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x1de>
 80067dc:	e062      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067ee:	f000 fcd1 	bl	8007194 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	609a      	str	r2, [r3, #8]
      break;
 800680a:	e04f      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800681c:	f000 fcba 	bl	8007194 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800682e:	609a      	str	r2, [r3, #8]
      break;
 8006830:	e03c      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800683e:	461a      	mov	r2, r3
 8006840:	f000 fc2c 	bl	800709c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2150      	movs	r1, #80	@ 0x50
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fc85 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006850:	e02c      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800685e:	461a      	mov	r2, r3
 8006860:	f000 fc4b 	bl	80070fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2160      	movs	r1, #96	@ 0x60
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fc75 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006870:	e01c      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800687e:	461a      	mov	r2, r3
 8006880:	f000 fc0c 	bl	800709c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2140      	movs	r1, #64	@ 0x40
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fc65 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006890:	e00c      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f000 fc5c 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 80068a2:	e003      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
      break;
 80068a8:	e000      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80068aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	00100070 	.word	0x00100070
 80068cc:	00100060 	.word	0x00100060
 80068d0:	00100050 	.word	0x00100050
 80068d4:	00100040 	.word	0x00100040
 80068d8:	00100030 	.word	0x00100030
 80068dc:	00100020 	.word	0x00100020

080068e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a4c      	ldr	r2, [pc, #304]	@ (8006a24 <TIM_Base_SetConfig+0x144>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d017      	beq.n	8006928 <TIM_Base_SetConfig+0x48>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fe:	d013      	beq.n	8006928 <TIM_Base_SetConfig+0x48>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a49      	ldr	r2, [pc, #292]	@ (8006a28 <TIM_Base_SetConfig+0x148>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00f      	beq.n	8006928 <TIM_Base_SetConfig+0x48>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a48      	ldr	r2, [pc, #288]	@ (8006a2c <TIM_Base_SetConfig+0x14c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00b      	beq.n	8006928 <TIM_Base_SetConfig+0x48>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a47      	ldr	r2, [pc, #284]	@ (8006a30 <TIM_Base_SetConfig+0x150>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_Base_SetConfig+0x48>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a46      	ldr	r2, [pc, #280]	@ (8006a34 <TIM_Base_SetConfig+0x154>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_Base_SetConfig+0x48>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a45      	ldr	r2, [pc, #276]	@ (8006a38 <TIM_Base_SetConfig+0x158>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d108      	bne.n	800693a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800692e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a39      	ldr	r2, [pc, #228]	@ (8006a24 <TIM_Base_SetConfig+0x144>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d023      	beq.n	800698a <TIM_Base_SetConfig+0xaa>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006948:	d01f      	beq.n	800698a <TIM_Base_SetConfig+0xaa>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a36      	ldr	r2, [pc, #216]	@ (8006a28 <TIM_Base_SetConfig+0x148>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d01b      	beq.n	800698a <TIM_Base_SetConfig+0xaa>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a35      	ldr	r2, [pc, #212]	@ (8006a2c <TIM_Base_SetConfig+0x14c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d017      	beq.n	800698a <TIM_Base_SetConfig+0xaa>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a34      	ldr	r2, [pc, #208]	@ (8006a30 <TIM_Base_SetConfig+0x150>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <TIM_Base_SetConfig+0xaa>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a33      	ldr	r2, [pc, #204]	@ (8006a34 <TIM_Base_SetConfig+0x154>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00f      	beq.n	800698a <TIM_Base_SetConfig+0xaa>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a33      	ldr	r2, [pc, #204]	@ (8006a3c <TIM_Base_SetConfig+0x15c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00b      	beq.n	800698a <TIM_Base_SetConfig+0xaa>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a32      	ldr	r2, [pc, #200]	@ (8006a40 <TIM_Base_SetConfig+0x160>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d007      	beq.n	800698a <TIM_Base_SetConfig+0xaa>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a31      	ldr	r2, [pc, #196]	@ (8006a44 <TIM_Base_SetConfig+0x164>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_Base_SetConfig+0xaa>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a2c      	ldr	r2, [pc, #176]	@ (8006a38 <TIM_Base_SetConfig+0x158>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d108      	bne.n	800699c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a18      	ldr	r2, [pc, #96]	@ (8006a24 <TIM_Base_SetConfig+0x144>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d013      	beq.n	80069f0 <TIM_Base_SetConfig+0x110>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006a34 <TIM_Base_SetConfig+0x154>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00f      	beq.n	80069f0 <TIM_Base_SetConfig+0x110>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a3c <TIM_Base_SetConfig+0x15c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00b      	beq.n	80069f0 <TIM_Base_SetConfig+0x110>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a19      	ldr	r2, [pc, #100]	@ (8006a40 <TIM_Base_SetConfig+0x160>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d007      	beq.n	80069f0 <TIM_Base_SetConfig+0x110>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a18      	ldr	r2, [pc, #96]	@ (8006a44 <TIM_Base_SetConfig+0x164>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_Base_SetConfig+0x110>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a13      	ldr	r2, [pc, #76]	@ (8006a38 <TIM_Base_SetConfig+0x158>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d103      	bne.n	80069f8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d105      	bne.n	8006a16 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	611a      	str	r2, [r3, #16]
  }
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40000c00 	.word	0x40000c00
 8006a34:	40013400 	.word	0x40013400
 8006a38:	40015000 	.word	0x40015000
 8006a3c:	40014000 	.word	0x40014000
 8006a40:	40014400 	.word	0x40014400
 8006a44:	40014800 	.word	0x40014800

08006a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	f023 0201 	bic.w	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0303 	bic.w	r3, r3, #3
 8006a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f023 0302 	bic.w	r3, r3, #2
 8006a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a30      	ldr	r2, [pc, #192]	@ (8006b64 <TIM_OC1_SetConfig+0x11c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <TIM_OC1_SetConfig+0x88>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8006b68 <TIM_OC1_SetConfig+0x120>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00f      	beq.n	8006ad0 <TIM_OC1_SetConfig+0x88>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8006b6c <TIM_OC1_SetConfig+0x124>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00b      	beq.n	8006ad0 <TIM_OC1_SetConfig+0x88>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a2d      	ldr	r2, [pc, #180]	@ (8006b70 <TIM_OC1_SetConfig+0x128>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_OC1_SetConfig+0x88>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8006b74 <TIM_OC1_SetConfig+0x12c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_OC1_SetConfig+0x88>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a2b      	ldr	r2, [pc, #172]	@ (8006b78 <TIM_OC1_SetConfig+0x130>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d10c      	bne.n	8006aea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f023 0308 	bic.w	r3, r3, #8
 8006ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f023 0304 	bic.w	r3, r3, #4
 8006ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a1d      	ldr	r2, [pc, #116]	@ (8006b64 <TIM_OC1_SetConfig+0x11c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <TIM_OC1_SetConfig+0xd2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b68 <TIM_OC1_SetConfig+0x120>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00f      	beq.n	8006b1a <TIM_OC1_SetConfig+0xd2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b6c <TIM_OC1_SetConfig+0x124>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00b      	beq.n	8006b1a <TIM_OC1_SetConfig+0xd2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a1a      	ldr	r2, [pc, #104]	@ (8006b70 <TIM_OC1_SetConfig+0x128>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d007      	beq.n	8006b1a <TIM_OC1_SetConfig+0xd2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a19      	ldr	r2, [pc, #100]	@ (8006b74 <TIM_OC1_SetConfig+0x12c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_OC1_SetConfig+0xd2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a18      	ldr	r2, [pc, #96]	@ (8006b78 <TIM_OC1_SetConfig+0x130>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d111      	bne.n	8006b3e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	621a      	str	r2, [r3, #32]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40013400 	.word	0x40013400
 8006b6c:	40014000 	.word	0x40014000
 8006b70:	40014400 	.word	0x40014400
 8006b74:	40014800 	.word	0x40014800
 8006b78:	40015000 	.word	0x40015000

08006b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	f023 0210 	bic.w	r2, r3, #16
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0320 	bic.w	r3, r3, #32
 8006bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a2c      	ldr	r2, [pc, #176]	@ (8006c8c <TIM_OC2_SetConfig+0x110>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d007      	beq.n	8006bf0 <TIM_OC2_SetConfig+0x74>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a2b      	ldr	r2, [pc, #172]	@ (8006c90 <TIM_OC2_SetConfig+0x114>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d003      	beq.n	8006bf0 <TIM_OC2_SetConfig+0x74>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a2a      	ldr	r2, [pc, #168]	@ (8006c94 <TIM_OC2_SetConfig+0x118>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d10d      	bne.n	8006c0c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c8c <TIM_OC2_SetConfig+0x110>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <TIM_OC2_SetConfig+0xc0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a1e      	ldr	r2, [pc, #120]	@ (8006c90 <TIM_OC2_SetConfig+0x114>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00f      	beq.n	8006c3c <TIM_OC2_SetConfig+0xc0>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006c98 <TIM_OC2_SetConfig+0x11c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00b      	beq.n	8006c3c <TIM_OC2_SetConfig+0xc0>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a1d      	ldr	r2, [pc, #116]	@ (8006c9c <TIM_OC2_SetConfig+0x120>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d007      	beq.n	8006c3c <TIM_OC2_SetConfig+0xc0>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ca0 <TIM_OC2_SetConfig+0x124>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC2_SetConfig+0xc0>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a17      	ldr	r2, [pc, #92]	@ (8006c94 <TIM_OC2_SetConfig+0x118>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d113      	bne.n	8006c64 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40013400 	.word	0x40013400
 8006c94:	40015000 	.word	0x40015000
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40014400 	.word	0x40014400
 8006ca0:	40014800 	.word	0x40014800

08006ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0303 	bic.w	r3, r3, #3
 8006cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a2b      	ldr	r2, [pc, #172]	@ (8006db0 <TIM_OC3_SetConfig+0x10c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d007      	beq.n	8006d16 <TIM_OC3_SetConfig+0x72>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a2a      	ldr	r2, [pc, #168]	@ (8006db4 <TIM_OC3_SetConfig+0x110>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d003      	beq.n	8006d16 <TIM_OC3_SetConfig+0x72>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a29      	ldr	r2, [pc, #164]	@ (8006db8 <TIM_OC3_SetConfig+0x114>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d10d      	bne.n	8006d32 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a1e      	ldr	r2, [pc, #120]	@ (8006db0 <TIM_OC3_SetConfig+0x10c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d013      	beq.n	8006d62 <TIM_OC3_SetConfig+0xbe>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006db4 <TIM_OC3_SetConfig+0x110>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00f      	beq.n	8006d62 <TIM_OC3_SetConfig+0xbe>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a1d      	ldr	r2, [pc, #116]	@ (8006dbc <TIM_OC3_SetConfig+0x118>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00b      	beq.n	8006d62 <TIM_OC3_SetConfig+0xbe>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc0 <TIM_OC3_SetConfig+0x11c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d007      	beq.n	8006d62 <TIM_OC3_SetConfig+0xbe>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc4 <TIM_OC3_SetConfig+0x120>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <TIM_OC3_SetConfig+0xbe>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a16      	ldr	r2, [pc, #88]	@ (8006db8 <TIM_OC3_SetConfig+0x114>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d113      	bne.n	8006d8a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40012c00 	.word	0x40012c00
 8006db4:	40013400 	.word	0x40013400
 8006db8:	40015000 	.word	0x40015000
 8006dbc:	40014000 	.word	0x40014000
 8006dc0:	40014400 	.word	0x40014400
 8006dc4:	40014800 	.word	0x40014800

08006dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	031b      	lsls	r3, r3, #12
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a2c      	ldr	r2, [pc, #176]	@ (8006ed8 <TIM_OC4_SetConfig+0x110>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d007      	beq.n	8006e3c <TIM_OC4_SetConfig+0x74>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8006edc <TIM_OC4_SetConfig+0x114>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d003      	beq.n	8006e3c <TIM_OC4_SetConfig+0x74>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a2a      	ldr	r2, [pc, #168]	@ (8006ee0 <TIM_OC4_SetConfig+0x118>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d10d      	bne.n	8006e58 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	031b      	lsls	r3, r3, #12
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ed8 <TIM_OC4_SetConfig+0x110>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d013      	beq.n	8006e88 <TIM_OC4_SetConfig+0xc0>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1e      	ldr	r2, [pc, #120]	@ (8006edc <TIM_OC4_SetConfig+0x114>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00f      	beq.n	8006e88 <TIM_OC4_SetConfig+0xc0>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ee4 <TIM_OC4_SetConfig+0x11c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00b      	beq.n	8006e88 <TIM_OC4_SetConfig+0xc0>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee8 <TIM_OC4_SetConfig+0x120>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_OC4_SetConfig+0xc0>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006eec <TIM_OC4_SetConfig+0x124>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_OC4_SetConfig+0xc0>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a17      	ldr	r2, [pc, #92]	@ (8006ee0 <TIM_OC4_SetConfig+0x118>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d113      	bne.n	8006eb0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e8e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e96:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	019b      	lsls	r3, r3, #6
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	019b      	lsls	r3, r3, #6
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40012c00 	.word	0x40012c00
 8006edc:	40013400 	.word	0x40013400
 8006ee0:	40015000 	.word	0x40015000
 8006ee4:	40014000 	.word	0x40014000
 8006ee8:	40014400 	.word	0x40014400
 8006eec:	40014800 	.word	0x40014800

08006ef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	041b      	lsls	r3, r3, #16
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a19      	ldr	r2, [pc, #100]	@ (8006fac <TIM_OC5_SetConfig+0xbc>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <TIM_OC5_SetConfig+0x82>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a18      	ldr	r2, [pc, #96]	@ (8006fb0 <TIM_OC5_SetConfig+0xc0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00f      	beq.n	8006f72 <TIM_OC5_SetConfig+0x82>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a17      	ldr	r2, [pc, #92]	@ (8006fb4 <TIM_OC5_SetConfig+0xc4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00b      	beq.n	8006f72 <TIM_OC5_SetConfig+0x82>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a16      	ldr	r2, [pc, #88]	@ (8006fb8 <TIM_OC5_SetConfig+0xc8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d007      	beq.n	8006f72 <TIM_OC5_SetConfig+0x82>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a15      	ldr	r2, [pc, #84]	@ (8006fbc <TIM_OC5_SetConfig+0xcc>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_OC5_SetConfig+0x82>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a14      	ldr	r2, [pc, #80]	@ (8006fc0 <TIM_OC5_SetConfig+0xd0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d109      	bne.n	8006f86 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	621a      	str	r2, [r3, #32]
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40013400 	.word	0x40013400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800
 8006fc0:	40015000 	.word	0x40015000

08006fc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800700a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	051b      	lsls	r3, r3, #20
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a1a      	ldr	r2, [pc, #104]	@ (8007084 <TIM_OC6_SetConfig+0xc0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <TIM_OC6_SetConfig+0x84>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a19      	ldr	r2, [pc, #100]	@ (8007088 <TIM_OC6_SetConfig+0xc4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00f      	beq.n	8007048 <TIM_OC6_SetConfig+0x84>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a18      	ldr	r2, [pc, #96]	@ (800708c <TIM_OC6_SetConfig+0xc8>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00b      	beq.n	8007048 <TIM_OC6_SetConfig+0x84>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a17      	ldr	r2, [pc, #92]	@ (8007090 <TIM_OC6_SetConfig+0xcc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d007      	beq.n	8007048 <TIM_OC6_SetConfig+0x84>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a16      	ldr	r2, [pc, #88]	@ (8007094 <TIM_OC6_SetConfig+0xd0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d003      	beq.n	8007048 <TIM_OC6_SetConfig+0x84>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a15      	ldr	r2, [pc, #84]	@ (8007098 <TIM_OC6_SetConfig+0xd4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d109      	bne.n	800705c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800704e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	029b      	lsls	r3, r3, #10
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	621a      	str	r2, [r3, #32]
}
 8007076:	bf00      	nop
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40012c00 	.word	0x40012c00
 8007088:	40013400 	.word	0x40013400
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800
 8007098:	40015000 	.word	0x40015000

0800709c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f023 0201 	bic.w	r2, r3, #1
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f023 030a 	bic.w	r3, r3, #10
 80070d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b087      	sub	sp, #28
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f023 0210 	bic.w	r2, r3, #16
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	031b      	lsls	r3, r3, #12
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007136:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	621a      	str	r2, [r3, #32]
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	f043 0307 	orr.w	r3, r3, #7
 8007180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	609a      	str	r2, [r3, #8]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	021a      	lsls	r2, r3, #8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	609a      	str	r2, [r3, #8]
}
 80071c8:	bf00      	nop
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	2201      	movs	r2, #1
 80071e8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a1a      	ldr	r2, [r3, #32]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	43db      	mvns	r3, r3
 80071f6:	401a      	ands	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1a      	ldr	r2, [r3, #32]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	fa01 f303 	lsl.w	r3, r1, r3
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
}
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
	...

08007220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e074      	b.n	8007322 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a34      	ldr	r2, [pc, #208]	@ (8007330 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d009      	beq.n	8007276 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a33      	ldr	r2, [pc, #204]	@ (8007334 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d004      	beq.n	8007276 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a31      	ldr	r2, [pc, #196]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d108      	bne.n	8007288 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800727c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800728e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a21      	ldr	r2, [pc, #132]	@ (8007330 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d022      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b8:	d01d      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a1f      	ldr	r2, [pc, #124]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d018      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007340 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d013      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007344 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00e      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a15      	ldr	r2, [pc, #84]	@ (8007334 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d009      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a18      	ldr	r2, [pc, #96]	@ (8007348 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d004      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a11      	ldr	r2, [pc, #68]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d10c      	bne.n	8007310 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	4313      	orrs	r3, r2
 8007306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40012c00 	.word	0x40012c00
 8007334:	40013400 	.word	0x40013400
 8007338:	40015000 	.word	0x40015000
 800733c:	40000400 	.word	0x40000400
 8007340:	40000800 	.word	0x40000800
 8007344:	40000c00 	.word	0x40000c00
 8007348:	40014000 	.word	0x40014000

0800734c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e042      	b.n	80073e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007364:	2b00      	cmp	r3, #0
 8007366:	d106      	bne.n	8007376 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7fa fd9b 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2224      	movs	r2, #36	@ 0x24
 800737a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fc7a 	bl	8007c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f97b 	bl	8007698 <UART_SetConfig>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e01b      	b.n	80073e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0201 	orr.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fcf9 	bl	8007dd4 <UART_CheckIdleState>
 80073e2:	4603      	mov	r3, r0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	@ 0x28
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007402:	2b20      	cmp	r3, #32
 8007404:	d17b      	bne.n	80074fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_UART_Transmit+0x26>
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e074      	b.n	8007500 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2221      	movs	r2, #33	@ 0x21
 8007422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007426:	f7fb fd43 	bl	8002eb0 <HAL_GetTick>
 800742a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007444:	d108      	bne.n	8007458 <HAL_UART_Transmit+0x6c>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e003      	b.n	8007460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007460:	e030      	b.n	80074c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	2180      	movs	r1, #128	@ 0x80
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fd5b 	bl	8007f28 <UART_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e03d      	b.n	8007500 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007498:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	3302      	adds	r3, #2
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	e007      	b.n	80074b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	781a      	ldrb	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1c8      	bne.n	8007462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2200      	movs	r2, #0
 80074d8:	2140      	movs	r1, #64	@ 0x40
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 fd24 	bl	8007f28 <UART_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d005      	beq.n	80074f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e006      	b.n	8007500 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e000      	b.n	8007500 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80074fe:	2302      	movs	r3, #2
  }
}
 8007500:	4618      	mov	r0, r3
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	@ 0x28
 800750c:	af02      	add	r7, sp, #8
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	4613      	mov	r3, r2
 8007516:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800751e:	2b20      	cmp	r3, #32
 8007520:	f040 80b5 	bne.w	800768e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <HAL_UART_Receive+0x28>
 800752a:	88fb      	ldrh	r3, [r7, #6]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e0ad      	b.n	8007690 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2222      	movs	r2, #34	@ 0x22
 8007540:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800754a:	f7fb fcb1 	bl	8002eb0 <HAL_GetTick>
 800754e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	88fa      	ldrh	r2, [r7, #6]
 800755c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007568:	d10e      	bne.n	8007588 <HAL_UART_Receive+0x80>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d105      	bne.n	800757e <HAL_UART_Receive+0x76>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007578:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800757c:	e02d      	b.n	80075da <HAL_UART_Receive+0xd2>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	22ff      	movs	r2, #255	@ 0xff
 8007582:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007586:	e028      	b.n	80075da <HAL_UART_Receive+0xd2>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10d      	bne.n	80075ac <HAL_UART_Receive+0xa4>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d104      	bne.n	80075a2 <HAL_UART_Receive+0x9a>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	22ff      	movs	r2, #255	@ 0xff
 800759c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80075a0:	e01b      	b.n	80075da <HAL_UART_Receive+0xd2>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	227f      	movs	r2, #127	@ 0x7f
 80075a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80075aa:	e016      	b.n	80075da <HAL_UART_Receive+0xd2>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075b4:	d10d      	bne.n	80075d2 <HAL_UART_Receive+0xca>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <HAL_UART_Receive+0xc0>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	227f      	movs	r2, #127	@ 0x7f
 80075c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80075c6:	e008      	b.n	80075da <HAL_UART_Receive+0xd2>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	223f      	movs	r2, #63	@ 0x3f
 80075cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80075d0:	e003      	b.n	80075da <HAL_UART_Receive+0xd2>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80075e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ea:	d108      	bne.n	80075fe <HAL_UART_Receive+0xf6>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d104      	bne.n	80075fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	e003      	b.n	8007606 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007606:	e036      	b.n	8007676 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2200      	movs	r2, #0
 8007610:	2120      	movs	r1, #32
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fc88 	bl	8007f28 <UART_WaitOnFlagUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d005      	beq.n	800762a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e032      	b.n	8007690 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10c      	bne.n	800764a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007636:	b29a      	uxth	r2, r3
 8007638:	8a7b      	ldrh	r3, [r7, #18]
 800763a:	4013      	ands	r3, r2
 800763c:	b29a      	uxth	r2, r3
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	3302      	adds	r3, #2
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	e00c      	b.n	8007664 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007650:	b2da      	uxtb	r2, r3
 8007652:	8a7b      	ldrh	r3, [r7, #18]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	4013      	ands	r3, r2
 8007658:	b2da      	uxtb	r2, r3
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	3301      	adds	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1c2      	bne.n	8007608 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	e000      	b.n	8007690 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800768e:	2302      	movs	r3, #2
  }
}
 8007690:	4618      	mov	r0, r3
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800769c:	b08c      	sub	sp, #48	@ 0x30
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	431a      	orrs	r2, r3
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	4313      	orrs	r3, r2
 80076be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4baa      	ldr	r3, [pc, #680]	@ (8007970 <UART_SetConfig+0x2d8>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	6812      	ldr	r2, [r2, #0]
 80076ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076d0:	430b      	orrs	r3, r1
 80076d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a9f      	ldr	r2, [pc, #636]	@ (8007974 <UART_SetConfig+0x2dc>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d004      	beq.n	8007704 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007700:	4313      	orrs	r3, r2
 8007702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800770e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007718:	430b      	orrs	r3, r1
 800771a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007722:	f023 010f 	bic.w	r1, r3, #15
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a90      	ldr	r2, [pc, #576]	@ (8007978 <UART_SetConfig+0x2e0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d125      	bne.n	8007788 <UART_SetConfig+0xf0>
 800773c:	4b8f      	ldr	r3, [pc, #572]	@ (800797c <UART_SetConfig+0x2e4>)
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b03      	cmp	r3, #3
 8007748:	d81a      	bhi.n	8007780 <UART_SetConfig+0xe8>
 800774a:	a201      	add	r2, pc, #4	@ (adr r2, 8007750 <UART_SetConfig+0xb8>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	08007761 	.word	0x08007761
 8007754:	08007771 	.word	0x08007771
 8007758:	08007769 	.word	0x08007769
 800775c:	08007779 	.word	0x08007779
 8007760:	2301      	movs	r3, #1
 8007762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007766:	e116      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007768:	2302      	movs	r3, #2
 800776a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800776e:	e112      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007770:	2304      	movs	r3, #4
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007776:	e10e      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007778:	2308      	movs	r3, #8
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777e:	e10a      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007780:	2310      	movs	r3, #16
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007786:	e106      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a7c      	ldr	r2, [pc, #496]	@ (8007980 <UART_SetConfig+0x2e8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d138      	bne.n	8007804 <UART_SetConfig+0x16c>
 8007792:	4b7a      	ldr	r3, [pc, #488]	@ (800797c <UART_SetConfig+0x2e4>)
 8007794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007798:	f003 030c 	and.w	r3, r3, #12
 800779c:	2b0c      	cmp	r3, #12
 800779e:	d82d      	bhi.n	80077fc <UART_SetConfig+0x164>
 80077a0:	a201      	add	r2, pc, #4	@ (adr r2, 80077a8 <UART_SetConfig+0x110>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077dd 	.word	0x080077dd
 80077ac:	080077fd 	.word	0x080077fd
 80077b0:	080077fd 	.word	0x080077fd
 80077b4:	080077fd 	.word	0x080077fd
 80077b8:	080077ed 	.word	0x080077ed
 80077bc:	080077fd 	.word	0x080077fd
 80077c0:	080077fd 	.word	0x080077fd
 80077c4:	080077fd 	.word	0x080077fd
 80077c8:	080077e5 	.word	0x080077e5
 80077cc:	080077fd 	.word	0x080077fd
 80077d0:	080077fd 	.word	0x080077fd
 80077d4:	080077fd 	.word	0x080077fd
 80077d8:	080077f5 	.word	0x080077f5
 80077dc:	2300      	movs	r3, #0
 80077de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e2:	e0d8      	b.n	8007996 <UART_SetConfig+0x2fe>
 80077e4:	2302      	movs	r3, #2
 80077e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ea:	e0d4      	b.n	8007996 <UART_SetConfig+0x2fe>
 80077ec:	2304      	movs	r3, #4
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f2:	e0d0      	b.n	8007996 <UART_SetConfig+0x2fe>
 80077f4:	2308      	movs	r3, #8
 80077f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077fa:	e0cc      	b.n	8007996 <UART_SetConfig+0x2fe>
 80077fc:	2310      	movs	r3, #16
 80077fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007802:	e0c8      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a5e      	ldr	r2, [pc, #376]	@ (8007984 <UART_SetConfig+0x2ec>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d125      	bne.n	800785a <UART_SetConfig+0x1c2>
 800780e:	4b5b      	ldr	r3, [pc, #364]	@ (800797c <UART_SetConfig+0x2e4>)
 8007810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007814:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007818:	2b30      	cmp	r3, #48	@ 0x30
 800781a:	d016      	beq.n	800784a <UART_SetConfig+0x1b2>
 800781c:	2b30      	cmp	r3, #48	@ 0x30
 800781e:	d818      	bhi.n	8007852 <UART_SetConfig+0x1ba>
 8007820:	2b20      	cmp	r3, #32
 8007822:	d00a      	beq.n	800783a <UART_SetConfig+0x1a2>
 8007824:	2b20      	cmp	r3, #32
 8007826:	d814      	bhi.n	8007852 <UART_SetConfig+0x1ba>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <UART_SetConfig+0x19a>
 800782c:	2b10      	cmp	r3, #16
 800782e:	d008      	beq.n	8007842 <UART_SetConfig+0x1aa>
 8007830:	e00f      	b.n	8007852 <UART_SetConfig+0x1ba>
 8007832:	2300      	movs	r3, #0
 8007834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007838:	e0ad      	b.n	8007996 <UART_SetConfig+0x2fe>
 800783a:	2302      	movs	r3, #2
 800783c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007840:	e0a9      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007842:	2304      	movs	r3, #4
 8007844:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007848:	e0a5      	b.n	8007996 <UART_SetConfig+0x2fe>
 800784a:	2308      	movs	r3, #8
 800784c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007850:	e0a1      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007852:	2310      	movs	r3, #16
 8007854:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007858:	e09d      	b.n	8007996 <UART_SetConfig+0x2fe>
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a4a      	ldr	r2, [pc, #296]	@ (8007988 <UART_SetConfig+0x2f0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d125      	bne.n	80078b0 <UART_SetConfig+0x218>
 8007864:	4b45      	ldr	r3, [pc, #276]	@ (800797c <UART_SetConfig+0x2e4>)
 8007866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800786a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800786e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007870:	d016      	beq.n	80078a0 <UART_SetConfig+0x208>
 8007872:	2bc0      	cmp	r3, #192	@ 0xc0
 8007874:	d818      	bhi.n	80078a8 <UART_SetConfig+0x210>
 8007876:	2b80      	cmp	r3, #128	@ 0x80
 8007878:	d00a      	beq.n	8007890 <UART_SetConfig+0x1f8>
 800787a:	2b80      	cmp	r3, #128	@ 0x80
 800787c:	d814      	bhi.n	80078a8 <UART_SetConfig+0x210>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <UART_SetConfig+0x1f0>
 8007882:	2b40      	cmp	r3, #64	@ 0x40
 8007884:	d008      	beq.n	8007898 <UART_SetConfig+0x200>
 8007886:	e00f      	b.n	80078a8 <UART_SetConfig+0x210>
 8007888:	2300      	movs	r3, #0
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788e:	e082      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007890:	2302      	movs	r3, #2
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007896:	e07e      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007898:	2304      	movs	r3, #4
 800789a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800789e:	e07a      	b.n	8007996 <UART_SetConfig+0x2fe>
 80078a0:	2308      	movs	r3, #8
 80078a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078a6:	e076      	b.n	8007996 <UART_SetConfig+0x2fe>
 80078a8:	2310      	movs	r3, #16
 80078aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ae:	e072      	b.n	8007996 <UART_SetConfig+0x2fe>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a35      	ldr	r2, [pc, #212]	@ (800798c <UART_SetConfig+0x2f4>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d12a      	bne.n	8007910 <UART_SetConfig+0x278>
 80078ba:	4b30      	ldr	r3, [pc, #192]	@ (800797c <UART_SetConfig+0x2e4>)
 80078bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078c8:	d01a      	beq.n	8007900 <UART_SetConfig+0x268>
 80078ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078ce:	d81b      	bhi.n	8007908 <UART_SetConfig+0x270>
 80078d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078d4:	d00c      	beq.n	80078f0 <UART_SetConfig+0x258>
 80078d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078da:	d815      	bhi.n	8007908 <UART_SetConfig+0x270>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <UART_SetConfig+0x250>
 80078e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078e4:	d008      	beq.n	80078f8 <UART_SetConfig+0x260>
 80078e6:	e00f      	b.n	8007908 <UART_SetConfig+0x270>
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ee:	e052      	b.n	8007996 <UART_SetConfig+0x2fe>
 80078f0:	2302      	movs	r3, #2
 80078f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f6:	e04e      	b.n	8007996 <UART_SetConfig+0x2fe>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078fe:	e04a      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007906:	e046      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800790e:	e042      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a17      	ldr	r2, [pc, #92]	@ (8007974 <UART_SetConfig+0x2dc>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d13a      	bne.n	8007990 <UART_SetConfig+0x2f8>
 800791a:	4b18      	ldr	r3, [pc, #96]	@ (800797c <UART_SetConfig+0x2e4>)
 800791c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007920:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007924:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007928:	d01a      	beq.n	8007960 <UART_SetConfig+0x2c8>
 800792a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800792e:	d81b      	bhi.n	8007968 <UART_SetConfig+0x2d0>
 8007930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007934:	d00c      	beq.n	8007950 <UART_SetConfig+0x2b8>
 8007936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800793a:	d815      	bhi.n	8007968 <UART_SetConfig+0x2d0>
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <UART_SetConfig+0x2b0>
 8007940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007944:	d008      	beq.n	8007958 <UART_SetConfig+0x2c0>
 8007946:	e00f      	b.n	8007968 <UART_SetConfig+0x2d0>
 8007948:	2300      	movs	r3, #0
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800794e:	e022      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007950:	2302      	movs	r3, #2
 8007952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007956:	e01e      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800795e:	e01a      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007966:	e016      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800796e:	e012      	b.n	8007996 <UART_SetConfig+0x2fe>
 8007970:	cfff69f3 	.word	0xcfff69f3
 8007974:	40008000 	.word	0x40008000
 8007978:	40013800 	.word	0x40013800
 800797c:	40021000 	.word	0x40021000
 8007980:	40004400 	.word	0x40004400
 8007984:	40004800 	.word	0x40004800
 8007988:	40004c00 	.word	0x40004c00
 800798c:	40005000 	.word	0x40005000
 8007990:	2310      	movs	r3, #16
 8007992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4aae      	ldr	r2, [pc, #696]	@ (8007c54 <UART_SetConfig+0x5bc>)
 800799c:	4293      	cmp	r3, r2
 800799e:	f040 8097 	bne.w	8007ad0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079a6:	2b08      	cmp	r3, #8
 80079a8:	d823      	bhi.n	80079f2 <UART_SetConfig+0x35a>
 80079aa:	a201      	add	r2, pc, #4	@ (adr r2, 80079b0 <UART_SetConfig+0x318>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079d5 	.word	0x080079d5
 80079b4:	080079f3 	.word	0x080079f3
 80079b8:	080079dd 	.word	0x080079dd
 80079bc:	080079f3 	.word	0x080079f3
 80079c0:	080079e3 	.word	0x080079e3
 80079c4:	080079f3 	.word	0x080079f3
 80079c8:	080079f3 	.word	0x080079f3
 80079cc:	080079f3 	.word	0x080079f3
 80079d0:	080079eb 	.word	0x080079eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d4:	f7fd ffd4 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 80079d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079da:	e010      	b.n	80079fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079dc:	4b9e      	ldr	r3, [pc, #632]	@ (8007c58 <UART_SetConfig+0x5c0>)
 80079de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079e0:	e00d      	b.n	80079fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079e2:	f7fd ff5f 	bl	80058a4 <HAL_RCC_GetSysClockFreq>
 80079e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079e8:	e009      	b.n	80079fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079f0:	e005      	b.n	80079fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8130 	beq.w	8007c66 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0a:	4a94      	ldr	r2, [pc, #592]	@ (8007c5c <UART_SetConfig+0x5c4>)
 8007a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a10:	461a      	mov	r2, r3
 8007a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	4413      	add	r3, r2
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d305      	bcc.n	8007a36 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d903      	bls.n	8007a3e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a3c:	e113      	b.n	8007c66 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a40:	2200      	movs	r2, #0
 8007a42:	60bb      	str	r3, [r7, #8]
 8007a44:	60fa      	str	r2, [r7, #12]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4a:	4a84      	ldr	r2, [pc, #528]	@ (8007c5c <UART_SetConfig+0x5c4>)
 8007a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2200      	movs	r2, #0
 8007a54:	603b      	str	r3, [r7, #0]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a60:	f7f9 f8ca 	bl	8000bf8 <__aeabi_uldivmod>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	f04f 0200 	mov.w	r2, #0
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	020b      	lsls	r3, r1, #8
 8007a76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a7a:	0202      	lsls	r2, r0, #8
 8007a7c:	6979      	ldr	r1, [r7, #20]
 8007a7e:	6849      	ldr	r1, [r1, #4]
 8007a80:	0849      	lsrs	r1, r1, #1
 8007a82:	2000      	movs	r0, #0
 8007a84:	460c      	mov	r4, r1
 8007a86:	4605      	mov	r5, r0
 8007a88:	eb12 0804 	adds.w	r8, r2, r4
 8007a8c:	eb43 0905 	adc.w	r9, r3, r5
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	469a      	mov	sl, r3
 8007a98:	4693      	mov	fp, r2
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	465b      	mov	r3, fp
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	f7f9 f8a9 	bl	8000bf8 <__aeabi_uldivmod>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4613      	mov	r3, r2
 8007aac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ab4:	d308      	bcc.n	8007ac8 <UART_SetConfig+0x430>
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007abc:	d204      	bcs.n	8007ac8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6a3a      	ldr	r2, [r7, #32]
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	e0ce      	b.n	8007c66 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ace:	e0ca      	b.n	8007c66 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ad8:	d166      	bne.n	8007ba8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007ada:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	d827      	bhi.n	8007b32 <UART_SetConfig+0x49a>
 8007ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae8 <UART_SetConfig+0x450>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007b0d 	.word	0x08007b0d
 8007aec:	08007b15 	.word	0x08007b15
 8007af0:	08007b1d 	.word	0x08007b1d
 8007af4:	08007b33 	.word	0x08007b33
 8007af8:	08007b23 	.word	0x08007b23
 8007afc:	08007b33 	.word	0x08007b33
 8007b00:	08007b33 	.word	0x08007b33
 8007b04:	08007b33 	.word	0x08007b33
 8007b08:	08007b2b 	.word	0x08007b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b0c:	f7fd ff38 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 8007b10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b12:	e014      	b.n	8007b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b14:	f7fd ff4a 	bl	80059ac <HAL_RCC_GetPCLK2Freq>
 8007b18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b1a:	e010      	b.n	8007b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8007c58 <UART_SetConfig+0x5c0>)
 8007b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b20:	e00d      	b.n	8007b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b22:	f7fd febf 	bl	80058a4 <HAL_RCC_GetSysClockFreq>
 8007b26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b28:	e009      	b.n	8007b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b30:	e005      	b.n	8007b3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 8090 	beq.w	8007c66 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4a:	4a44      	ldr	r2, [pc, #272]	@ (8007c5c <UART_SetConfig+0x5c4>)
 8007b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b50:	461a      	mov	r2, r3
 8007b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b58:	005a      	lsls	r2, r3, #1
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	085b      	lsrs	r3, r3, #1
 8007b60:	441a      	add	r2, r3
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	2b0f      	cmp	r3, #15
 8007b70:	d916      	bls.n	8007ba0 <UART_SetConfig+0x508>
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b78:	d212      	bcs.n	8007ba0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	f023 030f 	bic.w	r3, r3, #15
 8007b82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	085b      	lsrs	r3, r3, #1
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	8bfb      	ldrh	r3, [r7, #30]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	8bfa      	ldrh	r2, [r7, #30]
 8007b9c:	60da      	str	r2, [r3, #12]
 8007b9e:	e062      	b.n	8007c66 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ba6:	e05e      	b.n	8007c66 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ba8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d828      	bhi.n	8007c02 <UART_SetConfig+0x56a>
 8007bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <UART_SetConfig+0x520>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bdd 	.word	0x08007bdd
 8007bbc:	08007be5 	.word	0x08007be5
 8007bc0:	08007bed 	.word	0x08007bed
 8007bc4:	08007c03 	.word	0x08007c03
 8007bc8:	08007bf3 	.word	0x08007bf3
 8007bcc:	08007c03 	.word	0x08007c03
 8007bd0:	08007c03 	.word	0x08007c03
 8007bd4:	08007c03 	.word	0x08007c03
 8007bd8:	08007bfb 	.word	0x08007bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bdc:	f7fd fed0 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 8007be0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007be2:	e014      	b.n	8007c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be4:	f7fd fee2 	bl	80059ac <HAL_RCC_GetPCLK2Freq>
 8007be8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bea:	e010      	b.n	8007c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bec:	4b1a      	ldr	r3, [pc, #104]	@ (8007c58 <UART_SetConfig+0x5c0>)
 8007bee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bf0:	e00d      	b.n	8007c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bf2:	f7fd fe57 	bl	80058a4 <HAL_RCC_GetSysClockFreq>
 8007bf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bf8:	e009      	b.n	8007c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c00:	e005      	b.n	8007c0e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c0c:	bf00      	nop
    }

    if (pclk != 0U)
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d028      	beq.n	8007c66 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c18:	4a10      	ldr	r2, [pc, #64]	@ (8007c5c <UART_SetConfig+0x5c4>)
 8007c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	085b      	lsrs	r3, r3, #1
 8007c2c:	441a      	add	r2, r3
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	2b0f      	cmp	r3, #15
 8007c3c:	d910      	bls.n	8007c60 <UART_SetConfig+0x5c8>
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c44:	d20c      	bcs.n	8007c60 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60da      	str	r2, [r3, #12]
 8007c50:	e009      	b.n	8007c66 <UART_SetConfig+0x5ce>
 8007c52:	bf00      	nop
 8007c54:	40008000 	.word	0x40008000
 8007c58:	00f42400 	.word	0x00f42400
 8007c5c:	0800afe0 	.word	0x0800afe0
      }
      else
      {
        ret = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c82:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3730      	adds	r7, #48	@ 0x30
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d46:	f003 0320 	and.w	r3, r3, #32
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01a      	beq.n	8007da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d8e:	d10a      	bne.n	8007da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	605a      	str	r2, [r3, #4]
  }
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b098      	sub	sp, #96	@ 0x60
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007de4:	f7fb f864 	bl	8002eb0 <HAL_GetTick>
 8007de8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d12f      	bne.n	8007e58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007df8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e00:	2200      	movs	r2, #0
 8007e02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f88e 	bl	8007f28 <UART_WaitOnFlagUntilTimeout>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d022      	beq.n	8007e58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e6      	bne.n	8007e12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e063      	b.n	8007f20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d149      	bne.n	8007efa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f857 	bl	8007f28 <UART_WaitOnFlagUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d03c      	beq.n	8007efa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ea0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e6      	bne.n	8007e80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	e853 3f00 	ldrex	r3, [r3]
 8007ec0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f023 0301 	bic.w	r3, r3, #1
 8007ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3308      	adds	r3, #8
 8007ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ed2:	61fa      	str	r2, [r7, #28]
 8007ed4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed6:	69b9      	ldr	r1, [r7, #24]
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	617b      	str	r3, [r7, #20]
   return(result);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e5      	bne.n	8007eb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e012      	b.n	8007f20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3758      	adds	r7, #88	@ 0x58
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	4613      	mov	r3, r2
 8007f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f38:	e04f      	b.n	8007fda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f40:	d04b      	beq.n	8007fda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f42:	f7fa ffb5 	bl	8002eb0 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d302      	bcc.n	8007f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e04e      	b.n	8007ffa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d037      	beq.n	8007fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b80      	cmp	r3, #128	@ 0x80
 8007f6e:	d034      	beq.n	8007fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b40      	cmp	r3, #64	@ 0x40
 8007f74:	d031      	beq.n	8007fda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	f003 0308 	and.w	r3, r3, #8
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d110      	bne.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2208      	movs	r2, #8
 8007f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f838 	bl	8008002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2208      	movs	r2, #8
 8007f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e029      	b.n	8007ffa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fb4:	d111      	bne.n	8007fda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f81e 	bl	8008002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2220      	movs	r2, #32
 8007fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e00f      	b.n	8007ffa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	bf0c      	ite	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	2300      	movne	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d0a0      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008002:	b480      	push	{r7}
 8008004:	b095      	sub	sp, #84	@ 0x54
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800801e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008028:	643b      	str	r3, [r7, #64]	@ 0x40
 800802a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800802e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e6      	bne.n	800800a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	e853 3f00 	ldrex	r3, [r3]
 800804a:	61fb      	str	r3, [r7, #28]
   return(result);
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3308      	adds	r3, #8
 800805e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e3      	bne.n	800803c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008078:	2b01      	cmp	r3, #1
 800807a:	d118      	bne.n	80080ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	60bb      	str	r3, [r7, #8]
   return(result);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f023 0310 	bic.w	r3, r3, #16
 8008090:	647b      	str	r3, [r7, #68]	@ 0x44
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6979      	ldr	r1, [r7, #20]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	613b      	str	r3, [r7, #16]
   return(result);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e6      	bne.n	800807c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80080c2:	bf00      	nop
 80080c4:	3754      	adds	r7, #84	@ 0x54
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d101      	bne.n	80080e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80080e0:	2302      	movs	r3, #2
 80080e2:	e027      	b.n	8008134 <HAL_UARTEx_DisableFifoMode+0x66>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2224      	movs	r2, #36	@ 0x24
 80080f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0201 	bic.w	r2, r2, #1
 800810a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008112:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008154:	2302      	movs	r3, #2
 8008156:	e02d      	b.n	80081b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2224      	movs	r2, #36	@ 0x24
 8008164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0201 	bic.w	r2, r2, #1
 800817e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f84f 	bl	8008238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e02d      	b.n	8008230 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2224      	movs	r2, #36	@ 0x24
 80081e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0201 	bic.w	r2, r2, #1
 80081fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f811 	bl	8008238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008244:	2b00      	cmp	r3, #0
 8008246:	d108      	bne.n	800825a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008258:	e031      	b.n	80082be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800825a:	2308      	movs	r3, #8
 800825c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800825e:	2308      	movs	r3, #8
 8008260:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	0e5b      	lsrs	r3, r3, #25
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	0f5b      	lsrs	r3, r3, #29
 800827a:	b2db      	uxtb	r3, r3
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	7b3a      	ldrb	r2, [r7, #12]
 8008286:	4911      	ldr	r1, [pc, #68]	@ (80082cc <UARTEx_SetNbDataToProcess+0x94>)
 8008288:	5c8a      	ldrb	r2, [r1, r2]
 800828a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800828e:	7b3a      	ldrb	r2, [r7, #12]
 8008290:	490f      	ldr	r1, [pc, #60]	@ (80082d0 <UARTEx_SetNbDataToProcess+0x98>)
 8008292:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008294:	fb93 f3f2 	sdiv	r3, r3, r2
 8008298:	b29a      	uxth	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	7b7a      	ldrb	r2, [r7, #13]
 80082a4:	4909      	ldr	r1, [pc, #36]	@ (80082cc <UARTEx_SetNbDataToProcess+0x94>)
 80082a6:	5c8a      	ldrb	r2, [r1, r2]
 80082a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082ac:	7b7a      	ldrb	r2, [r7, #13]
 80082ae:	4908      	ldr	r1, [pc, #32]	@ (80082d0 <UARTEx_SetNbDataToProcess+0x98>)
 80082b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80082be:	bf00      	nop
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	0800aff8 	.word	0x0800aff8
 80082d0:	0800b000 	.word	0x0800b000

080082d4 <atoi>:
 80082d4:	220a      	movs	r2, #10
 80082d6:	2100      	movs	r1, #0
 80082d8:	f000 b938 	b.w	800854c <strtol>

080082dc <malloc>:
 80082dc:	4b02      	ldr	r3, [pc, #8]	@ (80082e8 <malloc+0xc>)
 80082de:	4601      	mov	r1, r0
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	f000 b82d 	b.w	8008340 <_malloc_r>
 80082e6:	bf00      	nop
 80082e8:	20000018 	.word	0x20000018

080082ec <free>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	@ (80082f8 <free+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f001 be7d 	b.w	8009ff0 <_free_r>
 80082f6:	bf00      	nop
 80082f8:	20000018 	.word	0x20000018

080082fc <sbrk_aligned>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	4e0f      	ldr	r6, [pc, #60]	@ (800833c <sbrk_aligned+0x40>)
 8008300:	460c      	mov	r4, r1
 8008302:	6831      	ldr	r1, [r6, #0]
 8008304:	4605      	mov	r5, r0
 8008306:	b911      	cbnz	r1, 800830e <sbrk_aligned+0x12>
 8008308:	f000 ffca 	bl	80092a0 <_sbrk_r>
 800830c:	6030      	str	r0, [r6, #0]
 800830e:	4621      	mov	r1, r4
 8008310:	4628      	mov	r0, r5
 8008312:	f000 ffc5 	bl	80092a0 <_sbrk_r>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d103      	bne.n	8008322 <sbrk_aligned+0x26>
 800831a:	f04f 34ff 	mov.w	r4, #4294967295
 800831e:	4620      	mov	r0, r4
 8008320:	bd70      	pop	{r4, r5, r6, pc}
 8008322:	1cc4      	adds	r4, r0, #3
 8008324:	f024 0403 	bic.w	r4, r4, #3
 8008328:	42a0      	cmp	r0, r4
 800832a:	d0f8      	beq.n	800831e <sbrk_aligned+0x22>
 800832c:	1a21      	subs	r1, r4, r0
 800832e:	4628      	mov	r0, r5
 8008330:	f000 ffb6 	bl	80092a0 <_sbrk_r>
 8008334:	3001      	adds	r0, #1
 8008336:	d1f2      	bne.n	800831e <sbrk_aligned+0x22>
 8008338:	e7ef      	b.n	800831a <sbrk_aligned+0x1e>
 800833a:	bf00      	nop
 800833c:	200004c8 	.word	0x200004c8

08008340 <_malloc_r>:
 8008340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008344:	1ccd      	adds	r5, r1, #3
 8008346:	f025 0503 	bic.w	r5, r5, #3
 800834a:	3508      	adds	r5, #8
 800834c:	2d0c      	cmp	r5, #12
 800834e:	bf38      	it	cc
 8008350:	250c      	movcc	r5, #12
 8008352:	2d00      	cmp	r5, #0
 8008354:	4606      	mov	r6, r0
 8008356:	db01      	blt.n	800835c <_malloc_r+0x1c>
 8008358:	42a9      	cmp	r1, r5
 800835a:	d904      	bls.n	8008366 <_malloc_r+0x26>
 800835c:	230c      	movs	r3, #12
 800835e:	6033      	str	r3, [r6, #0]
 8008360:	2000      	movs	r0, #0
 8008362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800843c <_malloc_r+0xfc>
 800836a:	f000 f869 	bl	8008440 <__malloc_lock>
 800836e:	f8d8 3000 	ldr.w	r3, [r8]
 8008372:	461c      	mov	r4, r3
 8008374:	bb44      	cbnz	r4, 80083c8 <_malloc_r+0x88>
 8008376:	4629      	mov	r1, r5
 8008378:	4630      	mov	r0, r6
 800837a:	f7ff ffbf 	bl	80082fc <sbrk_aligned>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	4604      	mov	r4, r0
 8008382:	d158      	bne.n	8008436 <_malloc_r+0xf6>
 8008384:	f8d8 4000 	ldr.w	r4, [r8]
 8008388:	4627      	mov	r7, r4
 800838a:	2f00      	cmp	r7, #0
 800838c:	d143      	bne.n	8008416 <_malloc_r+0xd6>
 800838e:	2c00      	cmp	r4, #0
 8008390:	d04b      	beq.n	800842a <_malloc_r+0xea>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	4639      	mov	r1, r7
 8008396:	4630      	mov	r0, r6
 8008398:	eb04 0903 	add.w	r9, r4, r3
 800839c:	f000 ff80 	bl	80092a0 <_sbrk_r>
 80083a0:	4581      	cmp	r9, r0
 80083a2:	d142      	bne.n	800842a <_malloc_r+0xea>
 80083a4:	6821      	ldr	r1, [r4, #0]
 80083a6:	1a6d      	subs	r5, r5, r1
 80083a8:	4629      	mov	r1, r5
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7ff ffa6 	bl	80082fc <sbrk_aligned>
 80083b0:	3001      	adds	r0, #1
 80083b2:	d03a      	beq.n	800842a <_malloc_r+0xea>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	442b      	add	r3, r5
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	f8d8 3000 	ldr.w	r3, [r8]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	bb62      	cbnz	r2, 800841c <_malloc_r+0xdc>
 80083c2:	f8c8 7000 	str.w	r7, [r8]
 80083c6:	e00f      	b.n	80083e8 <_malloc_r+0xa8>
 80083c8:	6822      	ldr	r2, [r4, #0]
 80083ca:	1b52      	subs	r2, r2, r5
 80083cc:	d420      	bmi.n	8008410 <_malloc_r+0xd0>
 80083ce:	2a0b      	cmp	r2, #11
 80083d0:	d917      	bls.n	8008402 <_malloc_r+0xc2>
 80083d2:	1961      	adds	r1, r4, r5
 80083d4:	42a3      	cmp	r3, r4
 80083d6:	6025      	str	r5, [r4, #0]
 80083d8:	bf18      	it	ne
 80083da:	6059      	strne	r1, [r3, #4]
 80083dc:	6863      	ldr	r3, [r4, #4]
 80083de:	bf08      	it	eq
 80083e0:	f8c8 1000 	streq.w	r1, [r8]
 80083e4:	5162      	str	r2, [r4, r5]
 80083e6:	604b      	str	r3, [r1, #4]
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 f82f 	bl	800844c <__malloc_unlock>
 80083ee:	f104 000b 	add.w	r0, r4, #11
 80083f2:	1d23      	adds	r3, r4, #4
 80083f4:	f020 0007 	bic.w	r0, r0, #7
 80083f8:	1ac2      	subs	r2, r0, r3
 80083fa:	bf1c      	itt	ne
 80083fc:	1a1b      	subne	r3, r3, r0
 80083fe:	50a3      	strne	r3, [r4, r2]
 8008400:	e7af      	b.n	8008362 <_malloc_r+0x22>
 8008402:	6862      	ldr	r2, [r4, #4]
 8008404:	42a3      	cmp	r3, r4
 8008406:	bf0c      	ite	eq
 8008408:	f8c8 2000 	streq.w	r2, [r8]
 800840c:	605a      	strne	r2, [r3, #4]
 800840e:	e7eb      	b.n	80083e8 <_malloc_r+0xa8>
 8008410:	4623      	mov	r3, r4
 8008412:	6864      	ldr	r4, [r4, #4]
 8008414:	e7ae      	b.n	8008374 <_malloc_r+0x34>
 8008416:	463c      	mov	r4, r7
 8008418:	687f      	ldr	r7, [r7, #4]
 800841a:	e7b6      	b.n	800838a <_malloc_r+0x4a>
 800841c:	461a      	mov	r2, r3
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	42a3      	cmp	r3, r4
 8008422:	d1fb      	bne.n	800841c <_malloc_r+0xdc>
 8008424:	2300      	movs	r3, #0
 8008426:	6053      	str	r3, [r2, #4]
 8008428:	e7de      	b.n	80083e8 <_malloc_r+0xa8>
 800842a:	230c      	movs	r3, #12
 800842c:	6033      	str	r3, [r6, #0]
 800842e:	4630      	mov	r0, r6
 8008430:	f000 f80c 	bl	800844c <__malloc_unlock>
 8008434:	e794      	b.n	8008360 <_malloc_r+0x20>
 8008436:	6005      	str	r5, [r0, #0]
 8008438:	e7d6      	b.n	80083e8 <_malloc_r+0xa8>
 800843a:	bf00      	nop
 800843c:	200004cc 	.word	0x200004cc

08008440 <__malloc_lock>:
 8008440:	4801      	ldr	r0, [pc, #4]	@ (8008448 <__malloc_lock+0x8>)
 8008442:	f000 bf7a 	b.w	800933a <__retarget_lock_acquire_recursive>
 8008446:	bf00      	nop
 8008448:	20000610 	.word	0x20000610

0800844c <__malloc_unlock>:
 800844c:	4801      	ldr	r0, [pc, #4]	@ (8008454 <__malloc_unlock+0x8>)
 800844e:	f000 bf75 	b.w	800933c <__retarget_lock_release_recursive>
 8008452:	bf00      	nop
 8008454:	20000610 	.word	0x20000610

08008458 <_strtol_l.isra.0>:
 8008458:	2b24      	cmp	r3, #36	@ 0x24
 800845a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800845e:	4686      	mov	lr, r0
 8008460:	4690      	mov	r8, r2
 8008462:	d801      	bhi.n	8008468 <_strtol_l.isra.0+0x10>
 8008464:	2b01      	cmp	r3, #1
 8008466:	d106      	bne.n	8008476 <_strtol_l.isra.0+0x1e>
 8008468:	f000 ff3c 	bl	80092e4 <__errno>
 800846c:	2316      	movs	r3, #22
 800846e:	6003      	str	r3, [r0, #0]
 8008470:	2000      	movs	r0, #0
 8008472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008476:	4834      	ldr	r0, [pc, #208]	@ (8008548 <_strtol_l.isra.0+0xf0>)
 8008478:	460d      	mov	r5, r1
 800847a:	462a      	mov	r2, r5
 800847c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008480:	5d06      	ldrb	r6, [r0, r4]
 8008482:	f016 0608 	ands.w	r6, r6, #8
 8008486:	d1f8      	bne.n	800847a <_strtol_l.isra.0+0x22>
 8008488:	2c2d      	cmp	r4, #45	@ 0x2d
 800848a:	d110      	bne.n	80084ae <_strtol_l.isra.0+0x56>
 800848c:	782c      	ldrb	r4, [r5, #0]
 800848e:	2601      	movs	r6, #1
 8008490:	1c95      	adds	r5, r2, #2
 8008492:	f033 0210 	bics.w	r2, r3, #16
 8008496:	d115      	bne.n	80084c4 <_strtol_l.isra.0+0x6c>
 8008498:	2c30      	cmp	r4, #48	@ 0x30
 800849a:	d10d      	bne.n	80084b8 <_strtol_l.isra.0+0x60>
 800849c:	782a      	ldrb	r2, [r5, #0]
 800849e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084a2:	2a58      	cmp	r2, #88	@ 0x58
 80084a4:	d108      	bne.n	80084b8 <_strtol_l.isra.0+0x60>
 80084a6:	786c      	ldrb	r4, [r5, #1]
 80084a8:	3502      	adds	r5, #2
 80084aa:	2310      	movs	r3, #16
 80084ac:	e00a      	b.n	80084c4 <_strtol_l.isra.0+0x6c>
 80084ae:	2c2b      	cmp	r4, #43	@ 0x2b
 80084b0:	bf04      	itt	eq
 80084b2:	782c      	ldrbeq	r4, [r5, #0]
 80084b4:	1c95      	addeq	r5, r2, #2
 80084b6:	e7ec      	b.n	8008492 <_strtol_l.isra.0+0x3a>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f6      	bne.n	80084aa <_strtol_l.isra.0+0x52>
 80084bc:	2c30      	cmp	r4, #48	@ 0x30
 80084be:	bf14      	ite	ne
 80084c0:	230a      	movne	r3, #10
 80084c2:	2308      	moveq	r3, #8
 80084c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80084c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084cc:	2200      	movs	r2, #0
 80084ce:	fbbc f9f3 	udiv	r9, ip, r3
 80084d2:	4610      	mov	r0, r2
 80084d4:	fb03 ca19 	mls	sl, r3, r9, ip
 80084d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80084dc:	2f09      	cmp	r7, #9
 80084de:	d80f      	bhi.n	8008500 <_strtol_l.isra.0+0xa8>
 80084e0:	463c      	mov	r4, r7
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	dd1b      	ble.n	800851e <_strtol_l.isra.0+0xc6>
 80084e6:	1c57      	adds	r7, r2, #1
 80084e8:	d007      	beq.n	80084fa <_strtol_l.isra.0+0xa2>
 80084ea:	4581      	cmp	r9, r0
 80084ec:	d314      	bcc.n	8008518 <_strtol_l.isra.0+0xc0>
 80084ee:	d101      	bne.n	80084f4 <_strtol_l.isra.0+0x9c>
 80084f0:	45a2      	cmp	sl, r4
 80084f2:	db11      	blt.n	8008518 <_strtol_l.isra.0+0xc0>
 80084f4:	fb00 4003 	mla	r0, r0, r3, r4
 80084f8:	2201      	movs	r2, #1
 80084fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084fe:	e7eb      	b.n	80084d8 <_strtol_l.isra.0+0x80>
 8008500:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008504:	2f19      	cmp	r7, #25
 8008506:	d801      	bhi.n	800850c <_strtol_l.isra.0+0xb4>
 8008508:	3c37      	subs	r4, #55	@ 0x37
 800850a:	e7ea      	b.n	80084e2 <_strtol_l.isra.0+0x8a>
 800850c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008510:	2f19      	cmp	r7, #25
 8008512:	d804      	bhi.n	800851e <_strtol_l.isra.0+0xc6>
 8008514:	3c57      	subs	r4, #87	@ 0x57
 8008516:	e7e4      	b.n	80084e2 <_strtol_l.isra.0+0x8a>
 8008518:	f04f 32ff 	mov.w	r2, #4294967295
 800851c:	e7ed      	b.n	80084fa <_strtol_l.isra.0+0xa2>
 800851e:	1c53      	adds	r3, r2, #1
 8008520:	d108      	bne.n	8008534 <_strtol_l.isra.0+0xdc>
 8008522:	2322      	movs	r3, #34	@ 0x22
 8008524:	f8ce 3000 	str.w	r3, [lr]
 8008528:	4660      	mov	r0, ip
 800852a:	f1b8 0f00 	cmp.w	r8, #0
 800852e:	d0a0      	beq.n	8008472 <_strtol_l.isra.0+0x1a>
 8008530:	1e69      	subs	r1, r5, #1
 8008532:	e006      	b.n	8008542 <_strtol_l.isra.0+0xea>
 8008534:	b106      	cbz	r6, 8008538 <_strtol_l.isra.0+0xe0>
 8008536:	4240      	negs	r0, r0
 8008538:	f1b8 0f00 	cmp.w	r8, #0
 800853c:	d099      	beq.n	8008472 <_strtol_l.isra.0+0x1a>
 800853e:	2a00      	cmp	r2, #0
 8008540:	d1f6      	bne.n	8008530 <_strtol_l.isra.0+0xd8>
 8008542:	f8c8 1000 	str.w	r1, [r8]
 8008546:	e794      	b.n	8008472 <_strtol_l.isra.0+0x1a>
 8008548:	0800b009 	.word	0x0800b009

0800854c <strtol>:
 800854c:	4613      	mov	r3, r2
 800854e:	460a      	mov	r2, r1
 8008550:	4601      	mov	r1, r0
 8008552:	4802      	ldr	r0, [pc, #8]	@ (800855c <strtol+0x10>)
 8008554:	6800      	ldr	r0, [r0, #0]
 8008556:	f7ff bf7f 	b.w	8008458 <_strtol_l.isra.0>
 800855a:	bf00      	nop
 800855c:	20000018 	.word	0x20000018

08008560 <__cvt>:
 8008560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008564:	ec57 6b10 	vmov	r6, r7, d0
 8008568:	2f00      	cmp	r7, #0
 800856a:	460c      	mov	r4, r1
 800856c:	4619      	mov	r1, r3
 800856e:	463b      	mov	r3, r7
 8008570:	bfbb      	ittet	lt
 8008572:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008576:	461f      	movlt	r7, r3
 8008578:	2300      	movge	r3, #0
 800857a:	232d      	movlt	r3, #45	@ 0x2d
 800857c:	700b      	strb	r3, [r1, #0]
 800857e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008580:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008584:	4691      	mov	r9, r2
 8008586:	f023 0820 	bic.w	r8, r3, #32
 800858a:	bfbc      	itt	lt
 800858c:	4632      	movlt	r2, r6
 800858e:	4616      	movlt	r6, r2
 8008590:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008594:	d005      	beq.n	80085a2 <__cvt+0x42>
 8008596:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800859a:	d100      	bne.n	800859e <__cvt+0x3e>
 800859c:	3401      	adds	r4, #1
 800859e:	2102      	movs	r1, #2
 80085a0:	e000      	b.n	80085a4 <__cvt+0x44>
 80085a2:	2103      	movs	r1, #3
 80085a4:	ab03      	add	r3, sp, #12
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	ab02      	add	r3, sp, #8
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	ec47 6b10 	vmov	d0, r6, r7
 80085b0:	4653      	mov	r3, sl
 80085b2:	4622      	mov	r2, r4
 80085b4:	f000 ff4c 	bl	8009450 <_dtoa_r>
 80085b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80085bc:	4605      	mov	r5, r0
 80085be:	d119      	bne.n	80085f4 <__cvt+0x94>
 80085c0:	f019 0f01 	tst.w	r9, #1
 80085c4:	d00e      	beq.n	80085e4 <__cvt+0x84>
 80085c6:	eb00 0904 	add.w	r9, r0, r4
 80085ca:	2200      	movs	r2, #0
 80085cc:	2300      	movs	r3, #0
 80085ce:	4630      	mov	r0, r6
 80085d0:	4639      	mov	r1, r7
 80085d2:	f7f8 faa1 	bl	8000b18 <__aeabi_dcmpeq>
 80085d6:	b108      	cbz	r0, 80085dc <__cvt+0x7c>
 80085d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80085dc:	2230      	movs	r2, #48	@ 0x30
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	454b      	cmp	r3, r9
 80085e2:	d31e      	bcc.n	8008622 <__cvt+0xc2>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085e8:	1b5b      	subs	r3, r3, r5
 80085ea:	4628      	mov	r0, r5
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	b004      	add	sp, #16
 80085f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80085f8:	eb00 0904 	add.w	r9, r0, r4
 80085fc:	d1e5      	bne.n	80085ca <__cvt+0x6a>
 80085fe:	7803      	ldrb	r3, [r0, #0]
 8008600:	2b30      	cmp	r3, #48	@ 0x30
 8008602:	d10a      	bne.n	800861a <__cvt+0xba>
 8008604:	2200      	movs	r2, #0
 8008606:	2300      	movs	r3, #0
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f7f8 fa84 	bl	8000b18 <__aeabi_dcmpeq>
 8008610:	b918      	cbnz	r0, 800861a <__cvt+0xba>
 8008612:	f1c4 0401 	rsb	r4, r4, #1
 8008616:	f8ca 4000 	str.w	r4, [sl]
 800861a:	f8da 3000 	ldr.w	r3, [sl]
 800861e:	4499      	add	r9, r3
 8008620:	e7d3      	b.n	80085ca <__cvt+0x6a>
 8008622:	1c59      	adds	r1, r3, #1
 8008624:	9103      	str	r1, [sp, #12]
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	e7d9      	b.n	80085de <__cvt+0x7e>

0800862a <__exponent>:
 800862a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800862c:	2900      	cmp	r1, #0
 800862e:	bfba      	itte	lt
 8008630:	4249      	neglt	r1, r1
 8008632:	232d      	movlt	r3, #45	@ 0x2d
 8008634:	232b      	movge	r3, #43	@ 0x2b
 8008636:	2909      	cmp	r1, #9
 8008638:	7002      	strb	r2, [r0, #0]
 800863a:	7043      	strb	r3, [r0, #1]
 800863c:	dd29      	ble.n	8008692 <__exponent+0x68>
 800863e:	f10d 0307 	add.w	r3, sp, #7
 8008642:	461d      	mov	r5, r3
 8008644:	270a      	movs	r7, #10
 8008646:	461a      	mov	r2, r3
 8008648:	fbb1 f6f7 	udiv	r6, r1, r7
 800864c:	fb07 1416 	mls	r4, r7, r6, r1
 8008650:	3430      	adds	r4, #48	@ 0x30
 8008652:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008656:	460c      	mov	r4, r1
 8008658:	2c63      	cmp	r4, #99	@ 0x63
 800865a:	f103 33ff 	add.w	r3, r3, #4294967295
 800865e:	4631      	mov	r1, r6
 8008660:	dcf1      	bgt.n	8008646 <__exponent+0x1c>
 8008662:	3130      	adds	r1, #48	@ 0x30
 8008664:	1e94      	subs	r4, r2, #2
 8008666:	f803 1c01 	strb.w	r1, [r3, #-1]
 800866a:	1c41      	adds	r1, r0, #1
 800866c:	4623      	mov	r3, r4
 800866e:	42ab      	cmp	r3, r5
 8008670:	d30a      	bcc.n	8008688 <__exponent+0x5e>
 8008672:	f10d 0309 	add.w	r3, sp, #9
 8008676:	1a9b      	subs	r3, r3, r2
 8008678:	42ac      	cmp	r4, r5
 800867a:	bf88      	it	hi
 800867c:	2300      	movhi	r3, #0
 800867e:	3302      	adds	r3, #2
 8008680:	4403      	add	r3, r0
 8008682:	1a18      	subs	r0, r3, r0
 8008684:	b003      	add	sp, #12
 8008686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008688:	f813 6b01 	ldrb.w	r6, [r3], #1
 800868c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008690:	e7ed      	b.n	800866e <__exponent+0x44>
 8008692:	2330      	movs	r3, #48	@ 0x30
 8008694:	3130      	adds	r1, #48	@ 0x30
 8008696:	7083      	strb	r3, [r0, #2]
 8008698:	70c1      	strb	r1, [r0, #3]
 800869a:	1d03      	adds	r3, r0, #4
 800869c:	e7f1      	b.n	8008682 <__exponent+0x58>
	...

080086a0 <_printf_float>:
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	b08d      	sub	sp, #52	@ 0x34
 80086a6:	460c      	mov	r4, r1
 80086a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80086ac:	4616      	mov	r6, r2
 80086ae:	461f      	mov	r7, r3
 80086b0:	4605      	mov	r5, r0
 80086b2:	f000 fdbd 	bl	8009230 <_localeconv_r>
 80086b6:	6803      	ldr	r3, [r0, #0]
 80086b8:	9304      	str	r3, [sp, #16]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7f7 fe00 	bl	80002c0 <strlen>
 80086c0:	2300      	movs	r3, #0
 80086c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80086c4:	f8d8 3000 	ldr.w	r3, [r8]
 80086c8:	9005      	str	r0, [sp, #20]
 80086ca:	3307      	adds	r3, #7
 80086cc:	f023 0307 	bic.w	r3, r3, #7
 80086d0:	f103 0208 	add.w	r2, r3, #8
 80086d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086d8:	f8d4 b000 	ldr.w	fp, [r4]
 80086dc:	f8c8 2000 	str.w	r2, [r8]
 80086e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80086e8:	9307      	str	r3, [sp, #28]
 80086ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80086ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80086f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086f6:	4b9c      	ldr	r3, [pc, #624]	@ (8008968 <_printf_float+0x2c8>)
 80086f8:	f04f 32ff 	mov.w	r2, #4294967295
 80086fc:	f7f8 fa3e 	bl	8000b7c <__aeabi_dcmpun>
 8008700:	bb70      	cbnz	r0, 8008760 <_printf_float+0xc0>
 8008702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008706:	4b98      	ldr	r3, [pc, #608]	@ (8008968 <_printf_float+0x2c8>)
 8008708:	f04f 32ff 	mov.w	r2, #4294967295
 800870c:	f7f8 fa18 	bl	8000b40 <__aeabi_dcmple>
 8008710:	bb30      	cbnz	r0, 8008760 <_printf_float+0xc0>
 8008712:	2200      	movs	r2, #0
 8008714:	2300      	movs	r3, #0
 8008716:	4640      	mov	r0, r8
 8008718:	4649      	mov	r1, r9
 800871a:	f7f8 fa07 	bl	8000b2c <__aeabi_dcmplt>
 800871e:	b110      	cbz	r0, 8008726 <_printf_float+0x86>
 8008720:	232d      	movs	r3, #45	@ 0x2d
 8008722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008726:	4a91      	ldr	r2, [pc, #580]	@ (800896c <_printf_float+0x2cc>)
 8008728:	4b91      	ldr	r3, [pc, #580]	@ (8008970 <_printf_float+0x2d0>)
 800872a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800872e:	bf8c      	ite	hi
 8008730:	4690      	movhi	r8, r2
 8008732:	4698      	movls	r8, r3
 8008734:	2303      	movs	r3, #3
 8008736:	6123      	str	r3, [r4, #16]
 8008738:	f02b 0304 	bic.w	r3, fp, #4
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	f04f 0900 	mov.w	r9, #0
 8008742:	9700      	str	r7, [sp, #0]
 8008744:	4633      	mov	r3, r6
 8008746:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008748:	4621      	mov	r1, r4
 800874a:	4628      	mov	r0, r5
 800874c:	f000 f9d2 	bl	8008af4 <_printf_common>
 8008750:	3001      	adds	r0, #1
 8008752:	f040 808d 	bne.w	8008870 <_printf_float+0x1d0>
 8008756:	f04f 30ff 	mov.w	r0, #4294967295
 800875a:	b00d      	add	sp, #52	@ 0x34
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008760:	4642      	mov	r2, r8
 8008762:	464b      	mov	r3, r9
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	f7f8 fa08 	bl	8000b7c <__aeabi_dcmpun>
 800876c:	b140      	cbz	r0, 8008780 <_printf_float+0xe0>
 800876e:	464b      	mov	r3, r9
 8008770:	2b00      	cmp	r3, #0
 8008772:	bfbc      	itt	lt
 8008774:	232d      	movlt	r3, #45	@ 0x2d
 8008776:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800877a:	4a7e      	ldr	r2, [pc, #504]	@ (8008974 <_printf_float+0x2d4>)
 800877c:	4b7e      	ldr	r3, [pc, #504]	@ (8008978 <_printf_float+0x2d8>)
 800877e:	e7d4      	b.n	800872a <_printf_float+0x8a>
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008786:	9206      	str	r2, [sp, #24]
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	d13b      	bne.n	8008804 <_printf_float+0x164>
 800878c:	2306      	movs	r3, #6
 800878e:	6063      	str	r3, [r4, #4]
 8008790:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008794:	2300      	movs	r3, #0
 8008796:	6022      	str	r2, [r4, #0]
 8008798:	9303      	str	r3, [sp, #12]
 800879a:	ab0a      	add	r3, sp, #40	@ 0x28
 800879c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80087a0:	ab09      	add	r3, sp, #36	@ 0x24
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	6861      	ldr	r1, [r4, #4]
 80087a6:	ec49 8b10 	vmov	d0, r8, r9
 80087aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80087ae:	4628      	mov	r0, r5
 80087b0:	f7ff fed6 	bl	8008560 <__cvt>
 80087b4:	9b06      	ldr	r3, [sp, #24]
 80087b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087b8:	2b47      	cmp	r3, #71	@ 0x47
 80087ba:	4680      	mov	r8, r0
 80087bc:	d129      	bne.n	8008812 <_printf_float+0x172>
 80087be:	1cc8      	adds	r0, r1, #3
 80087c0:	db02      	blt.n	80087c8 <_printf_float+0x128>
 80087c2:	6863      	ldr	r3, [r4, #4]
 80087c4:	4299      	cmp	r1, r3
 80087c6:	dd41      	ble.n	800884c <_printf_float+0x1ac>
 80087c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80087cc:	fa5f fa8a 	uxtb.w	sl, sl
 80087d0:	3901      	subs	r1, #1
 80087d2:	4652      	mov	r2, sl
 80087d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80087d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80087da:	f7ff ff26 	bl	800862a <__exponent>
 80087de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087e0:	1813      	adds	r3, r2, r0
 80087e2:	2a01      	cmp	r2, #1
 80087e4:	4681      	mov	r9, r0
 80087e6:	6123      	str	r3, [r4, #16]
 80087e8:	dc02      	bgt.n	80087f0 <_printf_float+0x150>
 80087ea:	6822      	ldr	r2, [r4, #0]
 80087ec:	07d2      	lsls	r2, r2, #31
 80087ee:	d501      	bpl.n	80087f4 <_printf_float+0x154>
 80087f0:	3301      	adds	r3, #1
 80087f2:	6123      	str	r3, [r4, #16]
 80087f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0a2      	beq.n	8008742 <_printf_float+0xa2>
 80087fc:	232d      	movs	r3, #45	@ 0x2d
 80087fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008802:	e79e      	b.n	8008742 <_printf_float+0xa2>
 8008804:	9a06      	ldr	r2, [sp, #24]
 8008806:	2a47      	cmp	r2, #71	@ 0x47
 8008808:	d1c2      	bne.n	8008790 <_printf_float+0xf0>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1c0      	bne.n	8008790 <_printf_float+0xf0>
 800880e:	2301      	movs	r3, #1
 8008810:	e7bd      	b.n	800878e <_printf_float+0xee>
 8008812:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008816:	d9db      	bls.n	80087d0 <_printf_float+0x130>
 8008818:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800881c:	d118      	bne.n	8008850 <_printf_float+0x1b0>
 800881e:	2900      	cmp	r1, #0
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	dd0b      	ble.n	800883c <_printf_float+0x19c>
 8008824:	6121      	str	r1, [r4, #16]
 8008826:	b913      	cbnz	r3, 800882e <_printf_float+0x18e>
 8008828:	6822      	ldr	r2, [r4, #0]
 800882a:	07d0      	lsls	r0, r2, #31
 800882c:	d502      	bpl.n	8008834 <_printf_float+0x194>
 800882e:	3301      	adds	r3, #1
 8008830:	440b      	add	r3, r1
 8008832:	6123      	str	r3, [r4, #16]
 8008834:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008836:	f04f 0900 	mov.w	r9, #0
 800883a:	e7db      	b.n	80087f4 <_printf_float+0x154>
 800883c:	b913      	cbnz	r3, 8008844 <_printf_float+0x1a4>
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	07d2      	lsls	r2, r2, #31
 8008842:	d501      	bpl.n	8008848 <_printf_float+0x1a8>
 8008844:	3302      	adds	r3, #2
 8008846:	e7f4      	b.n	8008832 <_printf_float+0x192>
 8008848:	2301      	movs	r3, #1
 800884a:	e7f2      	b.n	8008832 <_printf_float+0x192>
 800884c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008852:	4299      	cmp	r1, r3
 8008854:	db05      	blt.n	8008862 <_printf_float+0x1c2>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	6121      	str	r1, [r4, #16]
 800885a:	07d8      	lsls	r0, r3, #31
 800885c:	d5ea      	bpl.n	8008834 <_printf_float+0x194>
 800885e:	1c4b      	adds	r3, r1, #1
 8008860:	e7e7      	b.n	8008832 <_printf_float+0x192>
 8008862:	2900      	cmp	r1, #0
 8008864:	bfd4      	ite	le
 8008866:	f1c1 0202 	rsble	r2, r1, #2
 800886a:	2201      	movgt	r2, #1
 800886c:	4413      	add	r3, r2
 800886e:	e7e0      	b.n	8008832 <_printf_float+0x192>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	055a      	lsls	r2, r3, #21
 8008874:	d407      	bmi.n	8008886 <_printf_float+0x1e6>
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	4642      	mov	r2, r8
 800887a:	4631      	mov	r1, r6
 800887c:	4628      	mov	r0, r5
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	d12b      	bne.n	80088dc <_printf_float+0x23c>
 8008884:	e767      	b.n	8008756 <_printf_float+0xb6>
 8008886:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800888a:	f240 80dd 	bls.w	8008a48 <_printf_float+0x3a8>
 800888e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008892:	2200      	movs	r2, #0
 8008894:	2300      	movs	r3, #0
 8008896:	f7f8 f93f 	bl	8000b18 <__aeabi_dcmpeq>
 800889a:	2800      	cmp	r0, #0
 800889c:	d033      	beq.n	8008906 <_printf_float+0x266>
 800889e:	4a37      	ldr	r2, [pc, #220]	@ (800897c <_printf_float+0x2dc>)
 80088a0:	2301      	movs	r3, #1
 80088a2:	4631      	mov	r1, r6
 80088a4:	4628      	mov	r0, r5
 80088a6:	47b8      	blx	r7
 80088a8:	3001      	adds	r0, #1
 80088aa:	f43f af54 	beq.w	8008756 <_printf_float+0xb6>
 80088ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80088b2:	4543      	cmp	r3, r8
 80088b4:	db02      	blt.n	80088bc <_printf_float+0x21c>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	07d8      	lsls	r0, r3, #31
 80088ba:	d50f      	bpl.n	80088dc <_printf_float+0x23c>
 80088bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b8      	blx	r7
 80088c6:	3001      	adds	r0, #1
 80088c8:	f43f af45 	beq.w	8008756 <_printf_float+0xb6>
 80088cc:	f04f 0900 	mov.w	r9, #0
 80088d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80088d4:	f104 0a1a 	add.w	sl, r4, #26
 80088d8:	45c8      	cmp	r8, r9
 80088da:	dc09      	bgt.n	80088f0 <_printf_float+0x250>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	079b      	lsls	r3, r3, #30
 80088e0:	f100 8103 	bmi.w	8008aea <_printf_float+0x44a>
 80088e4:	68e0      	ldr	r0, [r4, #12]
 80088e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088e8:	4298      	cmp	r0, r3
 80088ea:	bfb8      	it	lt
 80088ec:	4618      	movlt	r0, r3
 80088ee:	e734      	b.n	800875a <_printf_float+0xba>
 80088f0:	2301      	movs	r3, #1
 80088f2:	4652      	mov	r2, sl
 80088f4:	4631      	mov	r1, r6
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b8      	blx	r7
 80088fa:	3001      	adds	r0, #1
 80088fc:	f43f af2b 	beq.w	8008756 <_printf_float+0xb6>
 8008900:	f109 0901 	add.w	r9, r9, #1
 8008904:	e7e8      	b.n	80088d8 <_printf_float+0x238>
 8008906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008908:	2b00      	cmp	r3, #0
 800890a:	dc39      	bgt.n	8008980 <_printf_float+0x2e0>
 800890c:	4a1b      	ldr	r2, [pc, #108]	@ (800897c <_printf_float+0x2dc>)
 800890e:	2301      	movs	r3, #1
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	f43f af1d 	beq.w	8008756 <_printf_float+0xb6>
 800891c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008920:	ea59 0303 	orrs.w	r3, r9, r3
 8008924:	d102      	bne.n	800892c <_printf_float+0x28c>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	07d9      	lsls	r1, r3, #31
 800892a:	d5d7      	bpl.n	80088dc <_printf_float+0x23c>
 800892c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008930:	4631      	mov	r1, r6
 8008932:	4628      	mov	r0, r5
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	f43f af0d 	beq.w	8008756 <_printf_float+0xb6>
 800893c:	f04f 0a00 	mov.w	sl, #0
 8008940:	f104 0b1a 	add.w	fp, r4, #26
 8008944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008946:	425b      	negs	r3, r3
 8008948:	4553      	cmp	r3, sl
 800894a:	dc01      	bgt.n	8008950 <_printf_float+0x2b0>
 800894c:	464b      	mov	r3, r9
 800894e:	e793      	b.n	8008878 <_printf_float+0x1d8>
 8008950:	2301      	movs	r3, #1
 8008952:	465a      	mov	r2, fp
 8008954:	4631      	mov	r1, r6
 8008956:	4628      	mov	r0, r5
 8008958:	47b8      	blx	r7
 800895a:	3001      	adds	r0, #1
 800895c:	f43f aefb 	beq.w	8008756 <_printf_float+0xb6>
 8008960:	f10a 0a01 	add.w	sl, sl, #1
 8008964:	e7ee      	b.n	8008944 <_printf_float+0x2a4>
 8008966:	bf00      	nop
 8008968:	7fefffff 	.word	0x7fefffff
 800896c:	0800b10d 	.word	0x0800b10d
 8008970:	0800b109 	.word	0x0800b109
 8008974:	0800b115 	.word	0x0800b115
 8008978:	0800b111 	.word	0x0800b111
 800897c:	0800b119 	.word	0x0800b119
 8008980:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008982:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008986:	4553      	cmp	r3, sl
 8008988:	bfa8      	it	ge
 800898a:	4653      	movge	r3, sl
 800898c:	2b00      	cmp	r3, #0
 800898e:	4699      	mov	r9, r3
 8008990:	dc36      	bgt.n	8008a00 <_printf_float+0x360>
 8008992:	f04f 0b00 	mov.w	fp, #0
 8008996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800899a:	f104 021a 	add.w	r2, r4, #26
 800899e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089a0:	9306      	str	r3, [sp, #24]
 80089a2:	eba3 0309 	sub.w	r3, r3, r9
 80089a6:	455b      	cmp	r3, fp
 80089a8:	dc31      	bgt.n	8008a0e <_printf_float+0x36e>
 80089aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ac:	459a      	cmp	sl, r3
 80089ae:	dc3a      	bgt.n	8008a26 <_printf_float+0x386>
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	07da      	lsls	r2, r3, #31
 80089b4:	d437      	bmi.n	8008a26 <_printf_float+0x386>
 80089b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b8:	ebaa 0903 	sub.w	r9, sl, r3
 80089bc:	9b06      	ldr	r3, [sp, #24]
 80089be:	ebaa 0303 	sub.w	r3, sl, r3
 80089c2:	4599      	cmp	r9, r3
 80089c4:	bfa8      	it	ge
 80089c6:	4699      	movge	r9, r3
 80089c8:	f1b9 0f00 	cmp.w	r9, #0
 80089cc:	dc33      	bgt.n	8008a36 <_printf_float+0x396>
 80089ce:	f04f 0800 	mov.w	r8, #0
 80089d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089d6:	f104 0b1a 	add.w	fp, r4, #26
 80089da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089dc:	ebaa 0303 	sub.w	r3, sl, r3
 80089e0:	eba3 0309 	sub.w	r3, r3, r9
 80089e4:	4543      	cmp	r3, r8
 80089e6:	f77f af79 	ble.w	80088dc <_printf_float+0x23c>
 80089ea:	2301      	movs	r3, #1
 80089ec:	465a      	mov	r2, fp
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	f43f aeae 	beq.w	8008756 <_printf_float+0xb6>
 80089fa:	f108 0801 	add.w	r8, r8, #1
 80089fe:	e7ec      	b.n	80089da <_printf_float+0x33a>
 8008a00:	4642      	mov	r2, r8
 8008a02:	4631      	mov	r1, r6
 8008a04:	4628      	mov	r0, r5
 8008a06:	47b8      	blx	r7
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d1c2      	bne.n	8008992 <_printf_float+0x2f2>
 8008a0c:	e6a3      	b.n	8008756 <_printf_float+0xb6>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	4631      	mov	r1, r6
 8008a12:	4628      	mov	r0, r5
 8008a14:	9206      	str	r2, [sp, #24]
 8008a16:	47b8      	blx	r7
 8008a18:	3001      	adds	r0, #1
 8008a1a:	f43f ae9c 	beq.w	8008756 <_printf_float+0xb6>
 8008a1e:	9a06      	ldr	r2, [sp, #24]
 8008a20:	f10b 0b01 	add.w	fp, fp, #1
 8008a24:	e7bb      	b.n	800899e <_printf_float+0x2fe>
 8008a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b8      	blx	r7
 8008a30:	3001      	adds	r0, #1
 8008a32:	d1c0      	bne.n	80089b6 <_printf_float+0x316>
 8008a34:	e68f      	b.n	8008756 <_printf_float+0xb6>
 8008a36:	9a06      	ldr	r2, [sp, #24]
 8008a38:	464b      	mov	r3, r9
 8008a3a:	4442      	add	r2, r8
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b8      	blx	r7
 8008a42:	3001      	adds	r0, #1
 8008a44:	d1c3      	bne.n	80089ce <_printf_float+0x32e>
 8008a46:	e686      	b.n	8008756 <_printf_float+0xb6>
 8008a48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a4c:	f1ba 0f01 	cmp.w	sl, #1
 8008a50:	dc01      	bgt.n	8008a56 <_printf_float+0x3b6>
 8008a52:	07db      	lsls	r3, r3, #31
 8008a54:	d536      	bpl.n	8008ac4 <_printf_float+0x424>
 8008a56:	2301      	movs	r3, #1
 8008a58:	4642      	mov	r2, r8
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b8      	blx	r7
 8008a60:	3001      	adds	r0, #1
 8008a62:	f43f ae78 	beq.w	8008756 <_printf_float+0xb6>
 8008a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b8      	blx	r7
 8008a70:	3001      	adds	r0, #1
 8008a72:	f43f ae70 	beq.w	8008756 <_printf_float+0xb6>
 8008a76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a82:	f7f8 f849 	bl	8000b18 <__aeabi_dcmpeq>
 8008a86:	b9c0      	cbnz	r0, 8008aba <_printf_float+0x41a>
 8008a88:	4653      	mov	r3, sl
 8008a8a:	f108 0201 	add.w	r2, r8, #1
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b8      	blx	r7
 8008a94:	3001      	adds	r0, #1
 8008a96:	d10c      	bne.n	8008ab2 <_printf_float+0x412>
 8008a98:	e65d      	b.n	8008756 <_printf_float+0xb6>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	465a      	mov	r2, fp
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b8      	blx	r7
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	f43f ae56 	beq.w	8008756 <_printf_float+0xb6>
 8008aaa:	f108 0801 	add.w	r8, r8, #1
 8008aae:	45d0      	cmp	r8, sl
 8008ab0:	dbf3      	blt.n	8008a9a <_printf_float+0x3fa>
 8008ab2:	464b      	mov	r3, r9
 8008ab4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ab8:	e6df      	b.n	800887a <_printf_float+0x1da>
 8008aba:	f04f 0800 	mov.w	r8, #0
 8008abe:	f104 0b1a 	add.w	fp, r4, #26
 8008ac2:	e7f4      	b.n	8008aae <_printf_float+0x40e>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	4642      	mov	r2, r8
 8008ac8:	e7e1      	b.n	8008a8e <_printf_float+0x3ee>
 8008aca:	2301      	movs	r3, #1
 8008acc:	464a      	mov	r2, r9
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	47b8      	blx	r7
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	f43f ae3e 	beq.w	8008756 <_printf_float+0xb6>
 8008ada:	f108 0801 	add.w	r8, r8, #1
 8008ade:	68e3      	ldr	r3, [r4, #12]
 8008ae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ae2:	1a5b      	subs	r3, r3, r1
 8008ae4:	4543      	cmp	r3, r8
 8008ae6:	dcf0      	bgt.n	8008aca <_printf_float+0x42a>
 8008ae8:	e6fc      	b.n	80088e4 <_printf_float+0x244>
 8008aea:	f04f 0800 	mov.w	r8, #0
 8008aee:	f104 0919 	add.w	r9, r4, #25
 8008af2:	e7f4      	b.n	8008ade <_printf_float+0x43e>

08008af4 <_printf_common>:
 8008af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af8:	4616      	mov	r6, r2
 8008afa:	4698      	mov	r8, r3
 8008afc:	688a      	ldr	r2, [r1, #8]
 8008afe:	690b      	ldr	r3, [r1, #16]
 8008b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b04:	4293      	cmp	r3, r2
 8008b06:	bfb8      	it	lt
 8008b08:	4613      	movlt	r3, r2
 8008b0a:	6033      	str	r3, [r6, #0]
 8008b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b10:	4607      	mov	r7, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b10a      	cbz	r2, 8008b1a <_printf_common+0x26>
 8008b16:	3301      	adds	r3, #1
 8008b18:	6033      	str	r3, [r6, #0]
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	0699      	lsls	r1, r3, #26
 8008b1e:	bf42      	ittt	mi
 8008b20:	6833      	ldrmi	r3, [r6, #0]
 8008b22:	3302      	addmi	r3, #2
 8008b24:	6033      	strmi	r3, [r6, #0]
 8008b26:	6825      	ldr	r5, [r4, #0]
 8008b28:	f015 0506 	ands.w	r5, r5, #6
 8008b2c:	d106      	bne.n	8008b3c <_printf_common+0x48>
 8008b2e:	f104 0a19 	add.w	sl, r4, #25
 8008b32:	68e3      	ldr	r3, [r4, #12]
 8008b34:	6832      	ldr	r2, [r6, #0]
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	42ab      	cmp	r3, r5
 8008b3a:	dc26      	bgt.n	8008b8a <_printf_common+0x96>
 8008b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	3b00      	subs	r3, #0
 8008b44:	bf18      	it	ne
 8008b46:	2301      	movne	r3, #1
 8008b48:	0692      	lsls	r2, r2, #26
 8008b4a:	d42b      	bmi.n	8008ba4 <_printf_common+0xb0>
 8008b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b50:	4641      	mov	r1, r8
 8008b52:	4638      	mov	r0, r7
 8008b54:	47c8      	blx	r9
 8008b56:	3001      	adds	r0, #1
 8008b58:	d01e      	beq.n	8008b98 <_printf_common+0xa4>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	6922      	ldr	r2, [r4, #16]
 8008b5e:	f003 0306 	and.w	r3, r3, #6
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	bf02      	ittt	eq
 8008b66:	68e5      	ldreq	r5, [r4, #12]
 8008b68:	6833      	ldreq	r3, [r6, #0]
 8008b6a:	1aed      	subeq	r5, r5, r3
 8008b6c:	68a3      	ldr	r3, [r4, #8]
 8008b6e:	bf0c      	ite	eq
 8008b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b74:	2500      	movne	r5, #0
 8008b76:	4293      	cmp	r3, r2
 8008b78:	bfc4      	itt	gt
 8008b7a:	1a9b      	subgt	r3, r3, r2
 8008b7c:	18ed      	addgt	r5, r5, r3
 8008b7e:	2600      	movs	r6, #0
 8008b80:	341a      	adds	r4, #26
 8008b82:	42b5      	cmp	r5, r6
 8008b84:	d11a      	bne.n	8008bbc <_printf_common+0xc8>
 8008b86:	2000      	movs	r0, #0
 8008b88:	e008      	b.n	8008b9c <_printf_common+0xa8>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4652      	mov	r2, sl
 8008b8e:	4641      	mov	r1, r8
 8008b90:	4638      	mov	r0, r7
 8008b92:	47c8      	blx	r9
 8008b94:	3001      	adds	r0, #1
 8008b96:	d103      	bne.n	8008ba0 <_printf_common+0xac>
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba0:	3501      	adds	r5, #1
 8008ba2:	e7c6      	b.n	8008b32 <_printf_common+0x3e>
 8008ba4:	18e1      	adds	r1, r4, r3
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	2030      	movs	r0, #48	@ 0x30
 8008baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bae:	4422      	add	r2, r4
 8008bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bb8:	3302      	adds	r3, #2
 8008bba:	e7c7      	b.n	8008b4c <_printf_common+0x58>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	4641      	mov	r1, r8
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	47c8      	blx	r9
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d0e6      	beq.n	8008b98 <_printf_common+0xa4>
 8008bca:	3601      	adds	r6, #1
 8008bcc:	e7d9      	b.n	8008b82 <_printf_common+0x8e>
	...

08008bd0 <_printf_i>:
 8008bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	7e0f      	ldrb	r7, [r1, #24]
 8008bd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bd8:	2f78      	cmp	r7, #120	@ 0x78
 8008bda:	4691      	mov	r9, r2
 8008bdc:	4680      	mov	r8, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	469a      	mov	sl, r3
 8008be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008be6:	d807      	bhi.n	8008bf8 <_printf_i+0x28>
 8008be8:	2f62      	cmp	r7, #98	@ 0x62
 8008bea:	d80a      	bhi.n	8008c02 <_printf_i+0x32>
 8008bec:	2f00      	cmp	r7, #0
 8008bee:	f000 80d1 	beq.w	8008d94 <_printf_i+0x1c4>
 8008bf2:	2f58      	cmp	r7, #88	@ 0x58
 8008bf4:	f000 80b8 	beq.w	8008d68 <_printf_i+0x198>
 8008bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c00:	e03a      	b.n	8008c78 <_printf_i+0xa8>
 8008c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c06:	2b15      	cmp	r3, #21
 8008c08:	d8f6      	bhi.n	8008bf8 <_printf_i+0x28>
 8008c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8008c10 <_printf_i+0x40>)
 8008c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c10:	08008c69 	.word	0x08008c69
 8008c14:	08008c7d 	.word	0x08008c7d
 8008c18:	08008bf9 	.word	0x08008bf9
 8008c1c:	08008bf9 	.word	0x08008bf9
 8008c20:	08008bf9 	.word	0x08008bf9
 8008c24:	08008bf9 	.word	0x08008bf9
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008bf9 	.word	0x08008bf9
 8008c30:	08008bf9 	.word	0x08008bf9
 8008c34:	08008bf9 	.word	0x08008bf9
 8008c38:	08008bf9 	.word	0x08008bf9
 8008c3c:	08008d7b 	.word	0x08008d7b
 8008c40:	08008ca7 	.word	0x08008ca7
 8008c44:	08008d35 	.word	0x08008d35
 8008c48:	08008bf9 	.word	0x08008bf9
 8008c4c:	08008bf9 	.word	0x08008bf9
 8008c50:	08008d9d 	.word	0x08008d9d
 8008c54:	08008bf9 	.word	0x08008bf9
 8008c58:	08008ca7 	.word	0x08008ca7
 8008c5c:	08008bf9 	.word	0x08008bf9
 8008c60:	08008bf9 	.word	0x08008bf9
 8008c64:	08008d3d 	.word	0x08008d3d
 8008c68:	6833      	ldr	r3, [r6, #0]
 8008c6a:	1d1a      	adds	r2, r3, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6032      	str	r2, [r6, #0]
 8008c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e09c      	b.n	8008db6 <_printf_i+0x1e6>
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	1d19      	adds	r1, r3, #4
 8008c82:	6031      	str	r1, [r6, #0]
 8008c84:	0606      	lsls	r6, r0, #24
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0xbc>
 8008c88:	681d      	ldr	r5, [r3, #0]
 8008c8a:	e003      	b.n	8008c94 <_printf_i+0xc4>
 8008c8c:	0645      	lsls	r5, r0, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0xb8>
 8008c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	da03      	bge.n	8008ca0 <_printf_i+0xd0>
 8008c98:	232d      	movs	r3, #45	@ 0x2d
 8008c9a:	426d      	negs	r5, r5
 8008c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ca0:	4858      	ldr	r0, [pc, #352]	@ (8008e04 <_printf_i+0x234>)
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	e011      	b.n	8008cca <_printf_i+0xfa>
 8008ca6:	6821      	ldr	r1, [r4, #0]
 8008ca8:	6833      	ldr	r3, [r6, #0]
 8008caa:	0608      	lsls	r0, r1, #24
 8008cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cb0:	d402      	bmi.n	8008cb8 <_printf_i+0xe8>
 8008cb2:	0649      	lsls	r1, r1, #25
 8008cb4:	bf48      	it	mi
 8008cb6:	b2ad      	uxthmi	r5, r5
 8008cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cba:	4852      	ldr	r0, [pc, #328]	@ (8008e04 <_printf_i+0x234>)
 8008cbc:	6033      	str	r3, [r6, #0]
 8008cbe:	bf14      	ite	ne
 8008cc0:	230a      	movne	r3, #10
 8008cc2:	2308      	moveq	r3, #8
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cca:	6866      	ldr	r6, [r4, #4]
 8008ccc:	60a6      	str	r6, [r4, #8]
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	db05      	blt.n	8008cde <_printf_i+0x10e>
 8008cd2:	6821      	ldr	r1, [r4, #0]
 8008cd4:	432e      	orrs	r6, r5
 8008cd6:	f021 0104 	bic.w	r1, r1, #4
 8008cda:	6021      	str	r1, [r4, #0]
 8008cdc:	d04b      	beq.n	8008d76 <_printf_i+0x1a6>
 8008cde:	4616      	mov	r6, r2
 8008ce0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ce4:	fb03 5711 	mls	r7, r3, r1, r5
 8008ce8:	5dc7      	ldrb	r7, [r0, r7]
 8008cea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cee:	462f      	mov	r7, r5
 8008cf0:	42bb      	cmp	r3, r7
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	d9f4      	bls.n	8008ce0 <_printf_i+0x110>
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	d10b      	bne.n	8008d12 <_printf_i+0x142>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	07df      	lsls	r7, r3, #31
 8008cfe:	d508      	bpl.n	8008d12 <_printf_i+0x142>
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	6861      	ldr	r1, [r4, #4]
 8008d04:	4299      	cmp	r1, r3
 8008d06:	bfde      	ittt	le
 8008d08:	2330      	movle	r3, #48	@ 0x30
 8008d0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d12:	1b92      	subs	r2, r2, r6
 8008d14:	6122      	str	r2, [r4, #16]
 8008d16:	f8cd a000 	str.w	sl, [sp]
 8008d1a:	464b      	mov	r3, r9
 8008d1c:	aa03      	add	r2, sp, #12
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4640      	mov	r0, r8
 8008d22:	f7ff fee7 	bl	8008af4 <_printf_common>
 8008d26:	3001      	adds	r0, #1
 8008d28:	d14a      	bne.n	8008dc0 <_printf_i+0x1f0>
 8008d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2e:	b004      	add	sp, #16
 8008d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	f043 0320 	orr.w	r3, r3, #32
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	4832      	ldr	r0, [pc, #200]	@ (8008e08 <_printf_i+0x238>)
 8008d3e:	2778      	movs	r7, #120	@ 0x78
 8008d40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	6831      	ldr	r1, [r6, #0]
 8008d48:	061f      	lsls	r7, r3, #24
 8008d4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d4e:	d402      	bmi.n	8008d56 <_printf_i+0x186>
 8008d50:	065f      	lsls	r7, r3, #25
 8008d52:	bf48      	it	mi
 8008d54:	b2ad      	uxthmi	r5, r5
 8008d56:	6031      	str	r1, [r6, #0]
 8008d58:	07d9      	lsls	r1, r3, #31
 8008d5a:	bf44      	itt	mi
 8008d5c:	f043 0320 	orrmi.w	r3, r3, #32
 8008d60:	6023      	strmi	r3, [r4, #0]
 8008d62:	b11d      	cbz	r5, 8008d6c <_printf_i+0x19c>
 8008d64:	2310      	movs	r3, #16
 8008d66:	e7ad      	b.n	8008cc4 <_printf_i+0xf4>
 8008d68:	4826      	ldr	r0, [pc, #152]	@ (8008e04 <_printf_i+0x234>)
 8008d6a:	e7e9      	b.n	8008d40 <_printf_i+0x170>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	f023 0320 	bic.w	r3, r3, #32
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	e7f6      	b.n	8008d64 <_printf_i+0x194>
 8008d76:	4616      	mov	r6, r2
 8008d78:	e7bd      	b.n	8008cf6 <_printf_i+0x126>
 8008d7a:	6833      	ldr	r3, [r6, #0]
 8008d7c:	6825      	ldr	r5, [r4, #0]
 8008d7e:	6961      	ldr	r1, [r4, #20]
 8008d80:	1d18      	adds	r0, r3, #4
 8008d82:	6030      	str	r0, [r6, #0]
 8008d84:	062e      	lsls	r6, r5, #24
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	d501      	bpl.n	8008d8e <_printf_i+0x1be>
 8008d8a:	6019      	str	r1, [r3, #0]
 8008d8c:	e002      	b.n	8008d94 <_printf_i+0x1c4>
 8008d8e:	0668      	lsls	r0, r5, #25
 8008d90:	d5fb      	bpl.n	8008d8a <_printf_i+0x1ba>
 8008d92:	8019      	strh	r1, [r3, #0]
 8008d94:	2300      	movs	r3, #0
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	4616      	mov	r6, r2
 8008d9a:	e7bc      	b.n	8008d16 <_printf_i+0x146>
 8008d9c:	6833      	ldr	r3, [r6, #0]
 8008d9e:	1d1a      	adds	r2, r3, #4
 8008da0:	6032      	str	r2, [r6, #0]
 8008da2:	681e      	ldr	r6, [r3, #0]
 8008da4:	6862      	ldr	r2, [r4, #4]
 8008da6:	2100      	movs	r1, #0
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7f7 fa39 	bl	8000220 <memchr>
 8008dae:	b108      	cbz	r0, 8008db4 <_printf_i+0x1e4>
 8008db0:	1b80      	subs	r0, r0, r6
 8008db2:	6060      	str	r0, [r4, #4]
 8008db4:	6863      	ldr	r3, [r4, #4]
 8008db6:	6123      	str	r3, [r4, #16]
 8008db8:	2300      	movs	r3, #0
 8008dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dbe:	e7aa      	b.n	8008d16 <_printf_i+0x146>
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	4632      	mov	r2, r6
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	47d0      	blx	sl
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d0ad      	beq.n	8008d2a <_printf_i+0x15a>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	079b      	lsls	r3, r3, #30
 8008dd2:	d413      	bmi.n	8008dfc <_printf_i+0x22c>
 8008dd4:	68e0      	ldr	r0, [r4, #12]
 8008dd6:	9b03      	ldr	r3, [sp, #12]
 8008dd8:	4298      	cmp	r0, r3
 8008dda:	bfb8      	it	lt
 8008ddc:	4618      	movlt	r0, r3
 8008dde:	e7a6      	b.n	8008d2e <_printf_i+0x15e>
 8008de0:	2301      	movs	r3, #1
 8008de2:	4632      	mov	r2, r6
 8008de4:	4649      	mov	r1, r9
 8008de6:	4640      	mov	r0, r8
 8008de8:	47d0      	blx	sl
 8008dea:	3001      	adds	r0, #1
 8008dec:	d09d      	beq.n	8008d2a <_printf_i+0x15a>
 8008dee:	3501      	adds	r5, #1
 8008df0:	68e3      	ldr	r3, [r4, #12]
 8008df2:	9903      	ldr	r1, [sp, #12]
 8008df4:	1a5b      	subs	r3, r3, r1
 8008df6:	42ab      	cmp	r3, r5
 8008df8:	dcf2      	bgt.n	8008de0 <_printf_i+0x210>
 8008dfa:	e7eb      	b.n	8008dd4 <_printf_i+0x204>
 8008dfc:	2500      	movs	r5, #0
 8008dfe:	f104 0619 	add.w	r6, r4, #25
 8008e02:	e7f5      	b.n	8008df0 <_printf_i+0x220>
 8008e04:	0800b11b 	.word	0x0800b11b
 8008e08:	0800b12c 	.word	0x0800b12c

08008e0c <std>:
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	4604      	mov	r4, r0
 8008e12:	e9c0 3300 	strd	r3, r3, [r0]
 8008e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e1a:	6083      	str	r3, [r0, #8]
 8008e1c:	8181      	strh	r1, [r0, #12]
 8008e1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e20:	81c2      	strh	r2, [r0, #14]
 8008e22:	6183      	str	r3, [r0, #24]
 8008e24:	4619      	mov	r1, r3
 8008e26:	2208      	movs	r2, #8
 8008e28:	305c      	adds	r0, #92	@ 0x5c
 8008e2a:	f000 f9f9 	bl	8009220 <memset>
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <std+0x58>)
 8008e30:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e32:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <std+0x5c>)
 8008e34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e36:	4b0d      	ldr	r3, [pc, #52]	@ (8008e6c <std+0x60>)
 8008e38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e70 <std+0x64>)
 8008e3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e74 <std+0x68>)
 8008e40:	6224      	str	r4, [r4, #32]
 8008e42:	429c      	cmp	r4, r3
 8008e44:	d006      	beq.n	8008e54 <std+0x48>
 8008e46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e4a:	4294      	cmp	r4, r2
 8008e4c:	d002      	beq.n	8008e54 <std+0x48>
 8008e4e:	33d0      	adds	r3, #208	@ 0xd0
 8008e50:	429c      	cmp	r4, r3
 8008e52:	d105      	bne.n	8008e60 <std+0x54>
 8008e54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e5c:	f000 ba6c 	b.w	8009338 <__retarget_lock_init_recursive>
 8008e60:	bd10      	pop	{r4, pc}
 8008e62:	bf00      	nop
 8008e64:	08009071 	.word	0x08009071
 8008e68:	08009093 	.word	0x08009093
 8008e6c:	080090cb 	.word	0x080090cb
 8008e70:	080090ef 	.word	0x080090ef
 8008e74:	200004d0 	.word	0x200004d0

08008e78 <stdio_exit_handler>:
 8008e78:	4a02      	ldr	r2, [pc, #8]	@ (8008e84 <stdio_exit_handler+0xc>)
 8008e7a:	4903      	ldr	r1, [pc, #12]	@ (8008e88 <stdio_exit_handler+0x10>)
 8008e7c:	4803      	ldr	r0, [pc, #12]	@ (8008e8c <stdio_exit_handler+0x14>)
 8008e7e:	f000 b869 	b.w	8008f54 <_fwalk_sglue>
 8008e82:	bf00      	nop
 8008e84:	2000000c 	.word	0x2000000c
 8008e88:	0800ab05 	.word	0x0800ab05
 8008e8c:	2000001c 	.word	0x2000001c

08008e90 <cleanup_stdio>:
 8008e90:	6841      	ldr	r1, [r0, #4]
 8008e92:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec4 <cleanup_stdio+0x34>)
 8008e94:	4299      	cmp	r1, r3
 8008e96:	b510      	push	{r4, lr}
 8008e98:	4604      	mov	r4, r0
 8008e9a:	d001      	beq.n	8008ea0 <cleanup_stdio+0x10>
 8008e9c:	f001 fe32 	bl	800ab04 <_fflush_r>
 8008ea0:	68a1      	ldr	r1, [r4, #8]
 8008ea2:	4b09      	ldr	r3, [pc, #36]	@ (8008ec8 <cleanup_stdio+0x38>)
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	d002      	beq.n	8008eae <cleanup_stdio+0x1e>
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f001 fe2b 	bl	800ab04 <_fflush_r>
 8008eae:	68e1      	ldr	r1, [r4, #12]
 8008eb0:	4b06      	ldr	r3, [pc, #24]	@ (8008ecc <cleanup_stdio+0x3c>)
 8008eb2:	4299      	cmp	r1, r3
 8008eb4:	d004      	beq.n	8008ec0 <cleanup_stdio+0x30>
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ebc:	f001 be22 	b.w	800ab04 <_fflush_r>
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200004d0 	.word	0x200004d0
 8008ec8:	20000538 	.word	0x20000538
 8008ecc:	200005a0 	.word	0x200005a0

08008ed0 <global_stdio_init.part.0>:
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f00 <global_stdio_init.part.0+0x30>)
 8008ed4:	4c0b      	ldr	r4, [pc, #44]	@ (8008f04 <global_stdio_init.part.0+0x34>)
 8008ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8008f08 <global_stdio_init.part.0+0x38>)
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	4620      	mov	r0, r4
 8008edc:	2200      	movs	r2, #0
 8008ede:	2104      	movs	r1, #4
 8008ee0:	f7ff ff94 	bl	8008e0c <std>
 8008ee4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ee8:	2201      	movs	r2, #1
 8008eea:	2109      	movs	r1, #9
 8008eec:	f7ff ff8e 	bl	8008e0c <std>
 8008ef0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008efa:	2112      	movs	r1, #18
 8008efc:	f7ff bf86 	b.w	8008e0c <std>
 8008f00:	20000608 	.word	0x20000608
 8008f04:	200004d0 	.word	0x200004d0
 8008f08:	08008e79 	.word	0x08008e79

08008f0c <__sfp_lock_acquire>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	@ (8008f14 <__sfp_lock_acquire+0x8>)
 8008f0e:	f000 ba14 	b.w	800933a <__retarget_lock_acquire_recursive>
 8008f12:	bf00      	nop
 8008f14:	20000611 	.word	0x20000611

08008f18 <__sfp_lock_release>:
 8008f18:	4801      	ldr	r0, [pc, #4]	@ (8008f20 <__sfp_lock_release+0x8>)
 8008f1a:	f000 ba0f 	b.w	800933c <__retarget_lock_release_recursive>
 8008f1e:	bf00      	nop
 8008f20:	20000611 	.word	0x20000611

08008f24 <__sinit>:
 8008f24:	b510      	push	{r4, lr}
 8008f26:	4604      	mov	r4, r0
 8008f28:	f7ff fff0 	bl	8008f0c <__sfp_lock_acquire>
 8008f2c:	6a23      	ldr	r3, [r4, #32]
 8008f2e:	b11b      	cbz	r3, 8008f38 <__sinit+0x14>
 8008f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f34:	f7ff bff0 	b.w	8008f18 <__sfp_lock_release>
 8008f38:	4b04      	ldr	r3, [pc, #16]	@ (8008f4c <__sinit+0x28>)
 8008f3a:	6223      	str	r3, [r4, #32]
 8008f3c:	4b04      	ldr	r3, [pc, #16]	@ (8008f50 <__sinit+0x2c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1f5      	bne.n	8008f30 <__sinit+0xc>
 8008f44:	f7ff ffc4 	bl	8008ed0 <global_stdio_init.part.0>
 8008f48:	e7f2      	b.n	8008f30 <__sinit+0xc>
 8008f4a:	bf00      	nop
 8008f4c:	08008e91 	.word	0x08008e91
 8008f50:	20000608 	.word	0x20000608

08008f54 <_fwalk_sglue>:
 8008f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f58:	4607      	mov	r7, r0
 8008f5a:	4688      	mov	r8, r1
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	2600      	movs	r6, #0
 8008f60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f64:	f1b9 0901 	subs.w	r9, r9, #1
 8008f68:	d505      	bpl.n	8008f76 <_fwalk_sglue+0x22>
 8008f6a:	6824      	ldr	r4, [r4, #0]
 8008f6c:	2c00      	cmp	r4, #0
 8008f6e:	d1f7      	bne.n	8008f60 <_fwalk_sglue+0xc>
 8008f70:	4630      	mov	r0, r6
 8008f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f76:	89ab      	ldrh	r3, [r5, #12]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d907      	bls.n	8008f8c <_fwalk_sglue+0x38>
 8008f7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f80:	3301      	adds	r3, #1
 8008f82:	d003      	beq.n	8008f8c <_fwalk_sglue+0x38>
 8008f84:	4629      	mov	r1, r5
 8008f86:	4638      	mov	r0, r7
 8008f88:	47c0      	blx	r8
 8008f8a:	4306      	orrs	r6, r0
 8008f8c:	3568      	adds	r5, #104	@ 0x68
 8008f8e:	e7e9      	b.n	8008f64 <_fwalk_sglue+0x10>

08008f90 <iprintf>:
 8008f90:	b40f      	push	{r0, r1, r2, r3}
 8008f92:	b507      	push	{r0, r1, r2, lr}
 8008f94:	4906      	ldr	r1, [pc, #24]	@ (8008fb0 <iprintf+0x20>)
 8008f96:	ab04      	add	r3, sp, #16
 8008f98:	6808      	ldr	r0, [r1, #0]
 8008f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f9e:	6881      	ldr	r1, [r0, #8]
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	f001 fc13 	bl	800a7cc <_vfiprintf_r>
 8008fa6:	b003      	add	sp, #12
 8008fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fac:	b004      	add	sp, #16
 8008fae:	4770      	bx	lr
 8008fb0:	20000018 	.word	0x20000018

08008fb4 <_puts_r>:
 8008fb4:	6a03      	ldr	r3, [r0, #32]
 8008fb6:	b570      	push	{r4, r5, r6, lr}
 8008fb8:	6884      	ldr	r4, [r0, #8]
 8008fba:	4605      	mov	r5, r0
 8008fbc:	460e      	mov	r6, r1
 8008fbe:	b90b      	cbnz	r3, 8008fc4 <_puts_r+0x10>
 8008fc0:	f7ff ffb0 	bl	8008f24 <__sinit>
 8008fc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fc6:	07db      	lsls	r3, r3, #31
 8008fc8:	d405      	bmi.n	8008fd6 <_puts_r+0x22>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	0598      	lsls	r0, r3, #22
 8008fce:	d402      	bmi.n	8008fd6 <_puts_r+0x22>
 8008fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fd2:	f000 f9b2 	bl	800933a <__retarget_lock_acquire_recursive>
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	0719      	lsls	r1, r3, #28
 8008fda:	d502      	bpl.n	8008fe2 <_puts_r+0x2e>
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d135      	bne.n	800904e <_puts_r+0x9a>
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f000 f8c5 	bl	8009174 <__swsetup_r>
 8008fea:	b380      	cbz	r0, 800904e <_puts_r+0x9a>
 8008fec:	f04f 35ff 	mov.w	r5, #4294967295
 8008ff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ff2:	07da      	lsls	r2, r3, #31
 8008ff4:	d405      	bmi.n	8009002 <_puts_r+0x4e>
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	059b      	lsls	r3, r3, #22
 8008ffa:	d402      	bmi.n	8009002 <_puts_r+0x4e>
 8008ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ffe:	f000 f99d 	bl	800933c <__retarget_lock_release_recursive>
 8009002:	4628      	mov	r0, r5
 8009004:	bd70      	pop	{r4, r5, r6, pc}
 8009006:	2b00      	cmp	r3, #0
 8009008:	da04      	bge.n	8009014 <_puts_r+0x60>
 800900a:	69a2      	ldr	r2, [r4, #24]
 800900c:	429a      	cmp	r2, r3
 800900e:	dc17      	bgt.n	8009040 <_puts_r+0x8c>
 8009010:	290a      	cmp	r1, #10
 8009012:	d015      	beq.n	8009040 <_puts_r+0x8c>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	6022      	str	r2, [r4, #0]
 800901a:	7019      	strb	r1, [r3, #0]
 800901c:	68a3      	ldr	r3, [r4, #8]
 800901e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009022:	3b01      	subs	r3, #1
 8009024:	60a3      	str	r3, [r4, #8]
 8009026:	2900      	cmp	r1, #0
 8009028:	d1ed      	bne.n	8009006 <_puts_r+0x52>
 800902a:	2b00      	cmp	r3, #0
 800902c:	da11      	bge.n	8009052 <_puts_r+0x9e>
 800902e:	4622      	mov	r2, r4
 8009030:	210a      	movs	r1, #10
 8009032:	4628      	mov	r0, r5
 8009034:	f000 f85f 	bl	80090f6 <__swbuf_r>
 8009038:	3001      	adds	r0, #1
 800903a:	d0d7      	beq.n	8008fec <_puts_r+0x38>
 800903c:	250a      	movs	r5, #10
 800903e:	e7d7      	b.n	8008ff0 <_puts_r+0x3c>
 8009040:	4622      	mov	r2, r4
 8009042:	4628      	mov	r0, r5
 8009044:	f000 f857 	bl	80090f6 <__swbuf_r>
 8009048:	3001      	adds	r0, #1
 800904a:	d1e7      	bne.n	800901c <_puts_r+0x68>
 800904c:	e7ce      	b.n	8008fec <_puts_r+0x38>
 800904e:	3e01      	subs	r6, #1
 8009050:	e7e4      	b.n	800901c <_puts_r+0x68>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	6022      	str	r2, [r4, #0]
 8009058:	220a      	movs	r2, #10
 800905a:	701a      	strb	r2, [r3, #0]
 800905c:	e7ee      	b.n	800903c <_puts_r+0x88>
	...

08009060 <puts>:
 8009060:	4b02      	ldr	r3, [pc, #8]	@ (800906c <puts+0xc>)
 8009062:	4601      	mov	r1, r0
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	f7ff bfa5 	b.w	8008fb4 <_puts_r>
 800906a:	bf00      	nop
 800906c:	20000018 	.word	0x20000018

08009070 <__sread>:
 8009070:	b510      	push	{r4, lr}
 8009072:	460c      	mov	r4, r1
 8009074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009078:	f000 f900 	bl	800927c <_read_r>
 800907c:	2800      	cmp	r0, #0
 800907e:	bfab      	itete	ge
 8009080:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009082:	89a3      	ldrhlt	r3, [r4, #12]
 8009084:	181b      	addge	r3, r3, r0
 8009086:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800908a:	bfac      	ite	ge
 800908c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800908e:	81a3      	strhlt	r3, [r4, #12]
 8009090:	bd10      	pop	{r4, pc}

08009092 <__swrite>:
 8009092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009096:	461f      	mov	r7, r3
 8009098:	898b      	ldrh	r3, [r1, #12]
 800909a:	05db      	lsls	r3, r3, #23
 800909c:	4605      	mov	r5, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	4616      	mov	r6, r2
 80090a2:	d505      	bpl.n	80090b0 <__swrite+0x1e>
 80090a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a8:	2302      	movs	r3, #2
 80090aa:	2200      	movs	r2, #0
 80090ac:	f000 f8d4 	bl	8009258 <_lseek_r>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090ba:	81a3      	strh	r3, [r4, #12]
 80090bc:	4632      	mov	r2, r6
 80090be:	463b      	mov	r3, r7
 80090c0:	4628      	mov	r0, r5
 80090c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c6:	f000 b8fb 	b.w	80092c0 <_write_r>

080090ca <__sseek>:
 80090ca:	b510      	push	{r4, lr}
 80090cc:	460c      	mov	r4, r1
 80090ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d2:	f000 f8c1 	bl	8009258 <_lseek_r>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	bf15      	itete	ne
 80090dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090e6:	81a3      	strheq	r3, [r4, #12]
 80090e8:	bf18      	it	ne
 80090ea:	81a3      	strhne	r3, [r4, #12]
 80090ec:	bd10      	pop	{r4, pc}

080090ee <__sclose>:
 80090ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f2:	f000 b8a1 	b.w	8009238 <_close_r>

080090f6 <__swbuf_r>:
 80090f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f8:	460e      	mov	r6, r1
 80090fa:	4614      	mov	r4, r2
 80090fc:	4605      	mov	r5, r0
 80090fe:	b118      	cbz	r0, 8009108 <__swbuf_r+0x12>
 8009100:	6a03      	ldr	r3, [r0, #32]
 8009102:	b90b      	cbnz	r3, 8009108 <__swbuf_r+0x12>
 8009104:	f7ff ff0e 	bl	8008f24 <__sinit>
 8009108:	69a3      	ldr	r3, [r4, #24]
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	071a      	lsls	r2, r3, #28
 8009110:	d501      	bpl.n	8009116 <__swbuf_r+0x20>
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	b943      	cbnz	r3, 8009128 <__swbuf_r+0x32>
 8009116:	4621      	mov	r1, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f000 f82b 	bl	8009174 <__swsetup_r>
 800911e:	b118      	cbz	r0, 8009128 <__swbuf_r+0x32>
 8009120:	f04f 37ff 	mov.w	r7, #4294967295
 8009124:	4638      	mov	r0, r7
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	6922      	ldr	r2, [r4, #16]
 800912c:	1a98      	subs	r0, r3, r2
 800912e:	6963      	ldr	r3, [r4, #20]
 8009130:	b2f6      	uxtb	r6, r6
 8009132:	4283      	cmp	r3, r0
 8009134:	4637      	mov	r7, r6
 8009136:	dc05      	bgt.n	8009144 <__swbuf_r+0x4e>
 8009138:	4621      	mov	r1, r4
 800913a:	4628      	mov	r0, r5
 800913c:	f001 fce2 	bl	800ab04 <_fflush_r>
 8009140:	2800      	cmp	r0, #0
 8009142:	d1ed      	bne.n	8009120 <__swbuf_r+0x2a>
 8009144:	68a3      	ldr	r3, [r4, #8]
 8009146:	3b01      	subs	r3, #1
 8009148:	60a3      	str	r3, [r4, #8]
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	6022      	str	r2, [r4, #0]
 8009150:	701e      	strb	r6, [r3, #0]
 8009152:	6962      	ldr	r2, [r4, #20]
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	429a      	cmp	r2, r3
 8009158:	d004      	beq.n	8009164 <__swbuf_r+0x6e>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	07db      	lsls	r3, r3, #31
 800915e:	d5e1      	bpl.n	8009124 <__swbuf_r+0x2e>
 8009160:	2e0a      	cmp	r6, #10
 8009162:	d1df      	bne.n	8009124 <__swbuf_r+0x2e>
 8009164:	4621      	mov	r1, r4
 8009166:	4628      	mov	r0, r5
 8009168:	f001 fccc 	bl	800ab04 <_fflush_r>
 800916c:	2800      	cmp	r0, #0
 800916e:	d0d9      	beq.n	8009124 <__swbuf_r+0x2e>
 8009170:	e7d6      	b.n	8009120 <__swbuf_r+0x2a>
	...

08009174 <__swsetup_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4b29      	ldr	r3, [pc, #164]	@ (800921c <__swsetup_r+0xa8>)
 8009178:	4605      	mov	r5, r0
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	460c      	mov	r4, r1
 800917e:	b118      	cbz	r0, 8009188 <__swsetup_r+0x14>
 8009180:	6a03      	ldr	r3, [r0, #32]
 8009182:	b90b      	cbnz	r3, 8009188 <__swsetup_r+0x14>
 8009184:	f7ff fece 	bl	8008f24 <__sinit>
 8009188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918c:	0719      	lsls	r1, r3, #28
 800918e:	d422      	bmi.n	80091d6 <__swsetup_r+0x62>
 8009190:	06da      	lsls	r2, r3, #27
 8009192:	d407      	bmi.n	80091a4 <__swsetup_r+0x30>
 8009194:	2209      	movs	r2, #9
 8009196:	602a      	str	r2, [r5, #0]
 8009198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	f04f 30ff 	mov.w	r0, #4294967295
 80091a2:	e033      	b.n	800920c <__swsetup_r+0x98>
 80091a4:	0758      	lsls	r0, r3, #29
 80091a6:	d512      	bpl.n	80091ce <__swsetup_r+0x5a>
 80091a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091aa:	b141      	cbz	r1, 80091be <__swsetup_r+0x4a>
 80091ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091b0:	4299      	cmp	r1, r3
 80091b2:	d002      	beq.n	80091ba <__swsetup_r+0x46>
 80091b4:	4628      	mov	r0, r5
 80091b6:	f000 ff1b 	bl	8009ff0 <_free_r>
 80091ba:	2300      	movs	r3, #0
 80091bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091c4:	81a3      	strh	r3, [r4, #12]
 80091c6:	2300      	movs	r3, #0
 80091c8:	6063      	str	r3, [r4, #4]
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	f043 0308 	orr.w	r3, r3, #8
 80091d4:	81a3      	strh	r3, [r4, #12]
 80091d6:	6923      	ldr	r3, [r4, #16]
 80091d8:	b94b      	cbnz	r3, 80091ee <__swsetup_r+0x7a>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091e4:	d003      	beq.n	80091ee <__swsetup_r+0x7a>
 80091e6:	4621      	mov	r1, r4
 80091e8:	4628      	mov	r0, r5
 80091ea:	f001 fcd9 	bl	800aba0 <__smakebuf_r>
 80091ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f2:	f013 0201 	ands.w	r2, r3, #1
 80091f6:	d00a      	beq.n	800920e <__swsetup_r+0x9a>
 80091f8:	2200      	movs	r2, #0
 80091fa:	60a2      	str	r2, [r4, #8]
 80091fc:	6962      	ldr	r2, [r4, #20]
 80091fe:	4252      	negs	r2, r2
 8009200:	61a2      	str	r2, [r4, #24]
 8009202:	6922      	ldr	r2, [r4, #16]
 8009204:	b942      	cbnz	r2, 8009218 <__swsetup_r+0xa4>
 8009206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800920a:	d1c5      	bne.n	8009198 <__swsetup_r+0x24>
 800920c:	bd38      	pop	{r3, r4, r5, pc}
 800920e:	0799      	lsls	r1, r3, #30
 8009210:	bf58      	it	pl
 8009212:	6962      	ldrpl	r2, [r4, #20]
 8009214:	60a2      	str	r2, [r4, #8]
 8009216:	e7f4      	b.n	8009202 <__swsetup_r+0x8e>
 8009218:	2000      	movs	r0, #0
 800921a:	e7f7      	b.n	800920c <__swsetup_r+0x98>
 800921c:	20000018 	.word	0x20000018

08009220 <memset>:
 8009220:	4402      	add	r2, r0
 8009222:	4603      	mov	r3, r0
 8009224:	4293      	cmp	r3, r2
 8009226:	d100      	bne.n	800922a <memset+0xa>
 8009228:	4770      	bx	lr
 800922a:	f803 1b01 	strb.w	r1, [r3], #1
 800922e:	e7f9      	b.n	8009224 <memset+0x4>

08009230 <_localeconv_r>:
 8009230:	4800      	ldr	r0, [pc, #0]	@ (8009234 <_localeconv_r+0x4>)
 8009232:	4770      	bx	lr
 8009234:	20000158 	.word	0x20000158

08009238 <_close_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4d06      	ldr	r5, [pc, #24]	@ (8009254 <_close_r+0x1c>)
 800923c:	2300      	movs	r3, #0
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	602b      	str	r3, [r5, #0]
 8009244:	f7f8 ff15 	bl	8002072 <_close>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_close_r+0x1a>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_close_r+0x1a>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	2000060c 	.word	0x2000060c

08009258 <_lseek_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4d07      	ldr	r5, [pc, #28]	@ (8009278 <_lseek_r+0x20>)
 800925c:	4604      	mov	r4, r0
 800925e:	4608      	mov	r0, r1
 8009260:	4611      	mov	r1, r2
 8009262:	2200      	movs	r2, #0
 8009264:	602a      	str	r2, [r5, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f7f8 ff2a 	bl	80020c0 <_lseek>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_lseek_r+0x1e>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	b103      	cbz	r3, 8009276 <_lseek_r+0x1e>
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	2000060c 	.word	0x2000060c

0800927c <_read_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d07      	ldr	r5, [pc, #28]	@ (800929c <_read_r+0x20>)
 8009280:	4604      	mov	r4, r0
 8009282:	4608      	mov	r0, r1
 8009284:	4611      	mov	r1, r2
 8009286:	2200      	movs	r2, #0
 8009288:	602a      	str	r2, [r5, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f7f8 feb8 	bl	8002000 <_read>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_read_r+0x1e>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_read_r+0x1e>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	2000060c 	.word	0x2000060c

080092a0 <_sbrk_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d06      	ldr	r5, [pc, #24]	@ (80092bc <_sbrk_r+0x1c>)
 80092a4:	2300      	movs	r3, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	602b      	str	r3, [r5, #0]
 80092ac:	f7f8 ff16 	bl	80020dc <_sbrk>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d102      	bne.n	80092ba <_sbrk_r+0x1a>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	b103      	cbz	r3, 80092ba <_sbrk_r+0x1a>
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	2000060c 	.word	0x2000060c

080092c0 <_write_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4d07      	ldr	r5, [pc, #28]	@ (80092e0 <_write_r+0x20>)
 80092c4:	4604      	mov	r4, r0
 80092c6:	4608      	mov	r0, r1
 80092c8:	4611      	mov	r1, r2
 80092ca:	2200      	movs	r2, #0
 80092cc:	602a      	str	r2, [r5, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	f7f8 feb3 	bl	800203a <_write>
 80092d4:	1c43      	adds	r3, r0, #1
 80092d6:	d102      	bne.n	80092de <_write_r+0x1e>
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	b103      	cbz	r3, 80092de <_write_r+0x1e>
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	bd38      	pop	{r3, r4, r5, pc}
 80092e0:	2000060c 	.word	0x2000060c

080092e4 <__errno>:
 80092e4:	4b01      	ldr	r3, [pc, #4]	@ (80092ec <__errno+0x8>)
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	20000018 	.word	0x20000018

080092f0 <__libc_init_array>:
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	4d0d      	ldr	r5, [pc, #52]	@ (8009328 <__libc_init_array+0x38>)
 80092f4:	4c0d      	ldr	r4, [pc, #52]	@ (800932c <__libc_init_array+0x3c>)
 80092f6:	1b64      	subs	r4, r4, r5
 80092f8:	10a4      	asrs	r4, r4, #2
 80092fa:	2600      	movs	r6, #0
 80092fc:	42a6      	cmp	r6, r4
 80092fe:	d109      	bne.n	8009314 <__libc_init_array+0x24>
 8009300:	4d0b      	ldr	r5, [pc, #44]	@ (8009330 <__libc_init_array+0x40>)
 8009302:	4c0c      	ldr	r4, [pc, #48]	@ (8009334 <__libc_init_array+0x44>)
 8009304:	f001 fd68 	bl	800add8 <_init>
 8009308:	1b64      	subs	r4, r4, r5
 800930a:	10a4      	asrs	r4, r4, #2
 800930c:	2600      	movs	r6, #0
 800930e:	42a6      	cmp	r6, r4
 8009310:	d105      	bne.n	800931e <__libc_init_array+0x2e>
 8009312:	bd70      	pop	{r4, r5, r6, pc}
 8009314:	f855 3b04 	ldr.w	r3, [r5], #4
 8009318:	4798      	blx	r3
 800931a:	3601      	adds	r6, #1
 800931c:	e7ee      	b.n	80092fc <__libc_init_array+0xc>
 800931e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009322:	4798      	blx	r3
 8009324:	3601      	adds	r6, #1
 8009326:	e7f2      	b.n	800930e <__libc_init_array+0x1e>
 8009328:	0800b380 	.word	0x0800b380
 800932c:	0800b380 	.word	0x0800b380
 8009330:	0800b380 	.word	0x0800b380
 8009334:	0800b384 	.word	0x0800b384

08009338 <__retarget_lock_init_recursive>:
 8009338:	4770      	bx	lr

0800933a <__retarget_lock_acquire_recursive>:
 800933a:	4770      	bx	lr

0800933c <__retarget_lock_release_recursive>:
 800933c:	4770      	bx	lr

0800933e <quorem>:
 800933e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009342:	6903      	ldr	r3, [r0, #16]
 8009344:	690c      	ldr	r4, [r1, #16]
 8009346:	42a3      	cmp	r3, r4
 8009348:	4607      	mov	r7, r0
 800934a:	db7e      	blt.n	800944a <quorem+0x10c>
 800934c:	3c01      	subs	r4, #1
 800934e:	f101 0814 	add.w	r8, r1, #20
 8009352:	00a3      	lsls	r3, r4, #2
 8009354:	f100 0514 	add.w	r5, r0, #20
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009364:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009368:	3301      	adds	r3, #1
 800936a:	429a      	cmp	r2, r3
 800936c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009370:	fbb2 f6f3 	udiv	r6, r2, r3
 8009374:	d32e      	bcc.n	80093d4 <quorem+0x96>
 8009376:	f04f 0a00 	mov.w	sl, #0
 800937a:	46c4      	mov	ip, r8
 800937c:	46ae      	mov	lr, r5
 800937e:	46d3      	mov	fp, sl
 8009380:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009384:	b298      	uxth	r0, r3
 8009386:	fb06 a000 	mla	r0, r6, r0, sl
 800938a:	0c02      	lsrs	r2, r0, #16
 800938c:	0c1b      	lsrs	r3, r3, #16
 800938e:	fb06 2303 	mla	r3, r6, r3, r2
 8009392:	f8de 2000 	ldr.w	r2, [lr]
 8009396:	b280      	uxth	r0, r0
 8009398:	b292      	uxth	r2, r2
 800939a:	1a12      	subs	r2, r2, r0
 800939c:	445a      	add	r2, fp
 800939e:	f8de 0000 	ldr.w	r0, [lr]
 80093a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093b0:	b292      	uxth	r2, r2
 80093b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093b6:	45e1      	cmp	r9, ip
 80093b8:	f84e 2b04 	str.w	r2, [lr], #4
 80093bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093c0:	d2de      	bcs.n	8009380 <quorem+0x42>
 80093c2:	9b00      	ldr	r3, [sp, #0]
 80093c4:	58eb      	ldr	r3, [r5, r3]
 80093c6:	b92b      	cbnz	r3, 80093d4 <quorem+0x96>
 80093c8:	9b01      	ldr	r3, [sp, #4]
 80093ca:	3b04      	subs	r3, #4
 80093cc:	429d      	cmp	r5, r3
 80093ce:	461a      	mov	r2, r3
 80093d0:	d32f      	bcc.n	8009432 <quorem+0xf4>
 80093d2:	613c      	str	r4, [r7, #16]
 80093d4:	4638      	mov	r0, r7
 80093d6:	f001 f8c7 	bl	800a568 <__mcmp>
 80093da:	2800      	cmp	r0, #0
 80093dc:	db25      	blt.n	800942a <quorem+0xec>
 80093de:	4629      	mov	r1, r5
 80093e0:	2000      	movs	r0, #0
 80093e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80093e6:	f8d1 c000 	ldr.w	ip, [r1]
 80093ea:	fa1f fe82 	uxth.w	lr, r2
 80093ee:	fa1f f38c 	uxth.w	r3, ip
 80093f2:	eba3 030e 	sub.w	r3, r3, lr
 80093f6:	4403      	add	r3, r0
 80093f8:	0c12      	lsrs	r2, r2, #16
 80093fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009402:	b29b      	uxth	r3, r3
 8009404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009408:	45c1      	cmp	r9, r8
 800940a:	f841 3b04 	str.w	r3, [r1], #4
 800940e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009412:	d2e6      	bcs.n	80093e2 <quorem+0xa4>
 8009414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009418:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800941c:	b922      	cbnz	r2, 8009428 <quorem+0xea>
 800941e:	3b04      	subs	r3, #4
 8009420:	429d      	cmp	r5, r3
 8009422:	461a      	mov	r2, r3
 8009424:	d30b      	bcc.n	800943e <quorem+0x100>
 8009426:	613c      	str	r4, [r7, #16]
 8009428:	3601      	adds	r6, #1
 800942a:	4630      	mov	r0, r6
 800942c:	b003      	add	sp, #12
 800942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009432:	6812      	ldr	r2, [r2, #0]
 8009434:	3b04      	subs	r3, #4
 8009436:	2a00      	cmp	r2, #0
 8009438:	d1cb      	bne.n	80093d2 <quorem+0x94>
 800943a:	3c01      	subs	r4, #1
 800943c:	e7c6      	b.n	80093cc <quorem+0x8e>
 800943e:	6812      	ldr	r2, [r2, #0]
 8009440:	3b04      	subs	r3, #4
 8009442:	2a00      	cmp	r2, #0
 8009444:	d1ef      	bne.n	8009426 <quorem+0xe8>
 8009446:	3c01      	subs	r4, #1
 8009448:	e7ea      	b.n	8009420 <quorem+0xe2>
 800944a:	2000      	movs	r0, #0
 800944c:	e7ee      	b.n	800942c <quorem+0xee>
	...

08009450 <_dtoa_r>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	69c7      	ldr	r7, [r0, #28]
 8009456:	b097      	sub	sp, #92	@ 0x5c
 8009458:	ed8d 0b04 	vstr	d0, [sp, #16]
 800945c:	ec55 4b10 	vmov	r4, r5, d0
 8009460:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009462:	9107      	str	r1, [sp, #28]
 8009464:	4681      	mov	r9, r0
 8009466:	920c      	str	r2, [sp, #48]	@ 0x30
 8009468:	9311      	str	r3, [sp, #68]	@ 0x44
 800946a:	b97f      	cbnz	r7, 800948c <_dtoa_r+0x3c>
 800946c:	2010      	movs	r0, #16
 800946e:	f7fe ff35 	bl	80082dc <malloc>
 8009472:	4602      	mov	r2, r0
 8009474:	f8c9 001c 	str.w	r0, [r9, #28]
 8009478:	b920      	cbnz	r0, 8009484 <_dtoa_r+0x34>
 800947a:	4ba9      	ldr	r3, [pc, #676]	@ (8009720 <_dtoa_r+0x2d0>)
 800947c:	21ef      	movs	r1, #239	@ 0xef
 800947e:	48a9      	ldr	r0, [pc, #676]	@ (8009724 <_dtoa_r+0x2d4>)
 8009480:	f001 fbfa 	bl	800ac78 <__assert_func>
 8009484:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009488:	6007      	str	r7, [r0, #0]
 800948a:	60c7      	str	r7, [r0, #12]
 800948c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009490:	6819      	ldr	r1, [r3, #0]
 8009492:	b159      	cbz	r1, 80094ac <_dtoa_r+0x5c>
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	604a      	str	r2, [r1, #4]
 8009498:	2301      	movs	r3, #1
 800949a:	4093      	lsls	r3, r2
 800949c:	608b      	str	r3, [r1, #8]
 800949e:	4648      	mov	r0, r9
 80094a0:	f000 fe30 	bl	800a104 <_Bfree>
 80094a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	1e2b      	subs	r3, r5, #0
 80094ae:	bfb9      	ittee	lt
 80094b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094b4:	9305      	strlt	r3, [sp, #20]
 80094b6:	2300      	movge	r3, #0
 80094b8:	6033      	strge	r3, [r6, #0]
 80094ba:	9f05      	ldr	r7, [sp, #20]
 80094bc:	4b9a      	ldr	r3, [pc, #616]	@ (8009728 <_dtoa_r+0x2d8>)
 80094be:	bfbc      	itt	lt
 80094c0:	2201      	movlt	r2, #1
 80094c2:	6032      	strlt	r2, [r6, #0]
 80094c4:	43bb      	bics	r3, r7
 80094c6:	d112      	bne.n	80094ee <_dtoa_r+0x9e>
 80094c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094d4:	4323      	orrs	r3, r4
 80094d6:	f000 855a 	beq.w	8009f8e <_dtoa_r+0xb3e>
 80094da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094dc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800973c <_dtoa_r+0x2ec>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 855c 	beq.w	8009f9e <_dtoa_r+0xb4e>
 80094e6:	f10a 0303 	add.w	r3, sl, #3
 80094ea:	f000 bd56 	b.w	8009f9a <_dtoa_r+0xb4a>
 80094ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 80094f2:	2200      	movs	r2, #0
 80094f4:	ec51 0b17 	vmov	r0, r1, d7
 80094f8:	2300      	movs	r3, #0
 80094fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80094fe:	f7f7 fb0b 	bl	8000b18 <__aeabi_dcmpeq>
 8009502:	4680      	mov	r8, r0
 8009504:	b158      	cbz	r0, 800951e <_dtoa_r+0xce>
 8009506:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009508:	2301      	movs	r3, #1
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800950e:	b113      	cbz	r3, 8009516 <_dtoa_r+0xc6>
 8009510:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009512:	4b86      	ldr	r3, [pc, #536]	@ (800972c <_dtoa_r+0x2dc>)
 8009514:	6013      	str	r3, [r2, #0]
 8009516:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009740 <_dtoa_r+0x2f0>
 800951a:	f000 bd40 	b.w	8009f9e <_dtoa_r+0xb4e>
 800951e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009522:	aa14      	add	r2, sp, #80	@ 0x50
 8009524:	a915      	add	r1, sp, #84	@ 0x54
 8009526:	4648      	mov	r0, r9
 8009528:	f001 f8ce 	bl	800a6c8 <__d2b>
 800952c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009530:	9002      	str	r0, [sp, #8]
 8009532:	2e00      	cmp	r6, #0
 8009534:	d078      	beq.n	8009628 <_dtoa_r+0x1d8>
 8009536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009538:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800953c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009540:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009544:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009548:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800954c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009550:	4619      	mov	r1, r3
 8009552:	2200      	movs	r2, #0
 8009554:	4b76      	ldr	r3, [pc, #472]	@ (8009730 <_dtoa_r+0x2e0>)
 8009556:	f7f6 febf 	bl	80002d8 <__aeabi_dsub>
 800955a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009708 <_dtoa_r+0x2b8>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f7 f872 	bl	8000648 <__aeabi_dmul>
 8009564:	a36a      	add	r3, pc, #424	@ (adr r3, 8009710 <_dtoa_r+0x2c0>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f7f6 feb7 	bl	80002dc <__adddf3>
 800956e:	4604      	mov	r4, r0
 8009570:	4630      	mov	r0, r6
 8009572:	460d      	mov	r5, r1
 8009574:	f7f6 fffe 	bl	8000574 <__aeabi_i2d>
 8009578:	a367      	add	r3, pc, #412	@ (adr r3, 8009718 <_dtoa_r+0x2c8>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f7f7 f863 	bl	8000648 <__aeabi_dmul>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f6 fea7 	bl	80002dc <__adddf3>
 800958e:	4604      	mov	r4, r0
 8009590:	460d      	mov	r5, r1
 8009592:	f7f7 fb09 	bl	8000ba8 <__aeabi_d2iz>
 8009596:	2200      	movs	r2, #0
 8009598:	4607      	mov	r7, r0
 800959a:	2300      	movs	r3, #0
 800959c:	4620      	mov	r0, r4
 800959e:	4629      	mov	r1, r5
 80095a0:	f7f7 fac4 	bl	8000b2c <__aeabi_dcmplt>
 80095a4:	b140      	cbz	r0, 80095b8 <_dtoa_r+0x168>
 80095a6:	4638      	mov	r0, r7
 80095a8:	f7f6 ffe4 	bl	8000574 <__aeabi_i2d>
 80095ac:	4622      	mov	r2, r4
 80095ae:	462b      	mov	r3, r5
 80095b0:	f7f7 fab2 	bl	8000b18 <__aeabi_dcmpeq>
 80095b4:	b900      	cbnz	r0, 80095b8 <_dtoa_r+0x168>
 80095b6:	3f01      	subs	r7, #1
 80095b8:	2f16      	cmp	r7, #22
 80095ba:	d852      	bhi.n	8009662 <_dtoa_r+0x212>
 80095bc:	4b5d      	ldr	r3, [pc, #372]	@ (8009734 <_dtoa_r+0x2e4>)
 80095be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095ca:	f7f7 faaf 	bl	8000b2c <__aeabi_dcmplt>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d049      	beq.n	8009666 <_dtoa_r+0x216>
 80095d2:	3f01      	subs	r7, #1
 80095d4:	2300      	movs	r3, #0
 80095d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095da:	1b9b      	subs	r3, r3, r6
 80095dc:	1e5a      	subs	r2, r3, #1
 80095de:	bf45      	ittet	mi
 80095e0:	f1c3 0301 	rsbmi	r3, r3, #1
 80095e4:	9300      	strmi	r3, [sp, #0]
 80095e6:	2300      	movpl	r3, #0
 80095e8:	2300      	movmi	r3, #0
 80095ea:	9206      	str	r2, [sp, #24]
 80095ec:	bf54      	ite	pl
 80095ee:	9300      	strpl	r3, [sp, #0]
 80095f0:	9306      	strmi	r3, [sp, #24]
 80095f2:	2f00      	cmp	r7, #0
 80095f4:	db39      	blt.n	800966a <_dtoa_r+0x21a>
 80095f6:	9b06      	ldr	r3, [sp, #24]
 80095f8:	970d      	str	r7, [sp, #52]	@ 0x34
 80095fa:	443b      	add	r3, r7
 80095fc:	9306      	str	r3, [sp, #24]
 80095fe:	2300      	movs	r3, #0
 8009600:	9308      	str	r3, [sp, #32]
 8009602:	9b07      	ldr	r3, [sp, #28]
 8009604:	2b09      	cmp	r3, #9
 8009606:	d863      	bhi.n	80096d0 <_dtoa_r+0x280>
 8009608:	2b05      	cmp	r3, #5
 800960a:	bfc4      	itt	gt
 800960c:	3b04      	subgt	r3, #4
 800960e:	9307      	strgt	r3, [sp, #28]
 8009610:	9b07      	ldr	r3, [sp, #28]
 8009612:	f1a3 0302 	sub.w	r3, r3, #2
 8009616:	bfcc      	ite	gt
 8009618:	2400      	movgt	r4, #0
 800961a:	2401      	movle	r4, #1
 800961c:	2b03      	cmp	r3, #3
 800961e:	d863      	bhi.n	80096e8 <_dtoa_r+0x298>
 8009620:	e8df f003 	tbb	[pc, r3]
 8009624:	2b375452 	.word	0x2b375452
 8009628:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800962c:	441e      	add	r6, r3
 800962e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009632:	2b20      	cmp	r3, #32
 8009634:	bfc1      	itttt	gt
 8009636:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800963a:	409f      	lslgt	r7, r3
 800963c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009640:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009644:	bfd6      	itet	le
 8009646:	f1c3 0320 	rsble	r3, r3, #32
 800964a:	ea47 0003 	orrgt.w	r0, r7, r3
 800964e:	fa04 f003 	lslle.w	r0, r4, r3
 8009652:	f7f6 ff7f 	bl	8000554 <__aeabi_ui2d>
 8009656:	2201      	movs	r2, #1
 8009658:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800965c:	3e01      	subs	r6, #1
 800965e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009660:	e776      	b.n	8009550 <_dtoa_r+0x100>
 8009662:	2301      	movs	r3, #1
 8009664:	e7b7      	b.n	80095d6 <_dtoa_r+0x186>
 8009666:	9010      	str	r0, [sp, #64]	@ 0x40
 8009668:	e7b6      	b.n	80095d8 <_dtoa_r+0x188>
 800966a:	9b00      	ldr	r3, [sp, #0]
 800966c:	1bdb      	subs	r3, r3, r7
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	427b      	negs	r3, r7
 8009672:	9308      	str	r3, [sp, #32]
 8009674:	2300      	movs	r3, #0
 8009676:	930d      	str	r3, [sp, #52]	@ 0x34
 8009678:	e7c3      	b.n	8009602 <_dtoa_r+0x1b2>
 800967a:	2301      	movs	r3, #1
 800967c:	9309      	str	r3, [sp, #36]	@ 0x24
 800967e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009680:	eb07 0b03 	add.w	fp, r7, r3
 8009684:	f10b 0301 	add.w	r3, fp, #1
 8009688:	2b01      	cmp	r3, #1
 800968a:	9303      	str	r3, [sp, #12]
 800968c:	bfb8      	it	lt
 800968e:	2301      	movlt	r3, #1
 8009690:	e006      	b.n	80096a0 <_dtoa_r+0x250>
 8009692:	2301      	movs	r3, #1
 8009694:	9309      	str	r3, [sp, #36]	@ 0x24
 8009696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009698:	2b00      	cmp	r3, #0
 800969a:	dd28      	ble.n	80096ee <_dtoa_r+0x29e>
 800969c:	469b      	mov	fp, r3
 800969e:	9303      	str	r3, [sp, #12]
 80096a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80096a4:	2100      	movs	r1, #0
 80096a6:	2204      	movs	r2, #4
 80096a8:	f102 0514 	add.w	r5, r2, #20
 80096ac:	429d      	cmp	r5, r3
 80096ae:	d926      	bls.n	80096fe <_dtoa_r+0x2ae>
 80096b0:	6041      	str	r1, [r0, #4]
 80096b2:	4648      	mov	r0, r9
 80096b4:	f000 fce6 	bl	800a084 <_Balloc>
 80096b8:	4682      	mov	sl, r0
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d142      	bne.n	8009744 <_dtoa_r+0x2f4>
 80096be:	4b1e      	ldr	r3, [pc, #120]	@ (8009738 <_dtoa_r+0x2e8>)
 80096c0:	4602      	mov	r2, r0
 80096c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80096c6:	e6da      	b.n	800947e <_dtoa_r+0x2e>
 80096c8:	2300      	movs	r3, #0
 80096ca:	e7e3      	b.n	8009694 <_dtoa_r+0x244>
 80096cc:	2300      	movs	r3, #0
 80096ce:	e7d5      	b.n	800967c <_dtoa_r+0x22c>
 80096d0:	2401      	movs	r4, #1
 80096d2:	2300      	movs	r3, #0
 80096d4:	9307      	str	r3, [sp, #28]
 80096d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80096d8:	f04f 3bff 	mov.w	fp, #4294967295
 80096dc:	2200      	movs	r2, #0
 80096de:	f8cd b00c 	str.w	fp, [sp, #12]
 80096e2:	2312      	movs	r3, #18
 80096e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80096e6:	e7db      	b.n	80096a0 <_dtoa_r+0x250>
 80096e8:	2301      	movs	r3, #1
 80096ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ec:	e7f4      	b.n	80096d8 <_dtoa_r+0x288>
 80096ee:	f04f 0b01 	mov.w	fp, #1
 80096f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80096f6:	465b      	mov	r3, fp
 80096f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80096fc:	e7d0      	b.n	80096a0 <_dtoa_r+0x250>
 80096fe:	3101      	adds	r1, #1
 8009700:	0052      	lsls	r2, r2, #1
 8009702:	e7d1      	b.n	80096a8 <_dtoa_r+0x258>
 8009704:	f3af 8000 	nop.w
 8009708:	636f4361 	.word	0x636f4361
 800970c:	3fd287a7 	.word	0x3fd287a7
 8009710:	8b60c8b3 	.word	0x8b60c8b3
 8009714:	3fc68a28 	.word	0x3fc68a28
 8009718:	509f79fb 	.word	0x509f79fb
 800971c:	3fd34413 	.word	0x3fd34413
 8009720:	0800b14a 	.word	0x0800b14a
 8009724:	0800b161 	.word	0x0800b161
 8009728:	7ff00000 	.word	0x7ff00000
 800972c:	0800b11a 	.word	0x0800b11a
 8009730:	3ff80000 	.word	0x3ff80000
 8009734:	0800b2b0 	.word	0x0800b2b0
 8009738:	0800b1b9 	.word	0x0800b1b9
 800973c:	0800b146 	.word	0x0800b146
 8009740:	0800b119 	.word	0x0800b119
 8009744:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009748:	6018      	str	r0, [r3, #0]
 800974a:	9b03      	ldr	r3, [sp, #12]
 800974c:	2b0e      	cmp	r3, #14
 800974e:	f200 80a1 	bhi.w	8009894 <_dtoa_r+0x444>
 8009752:	2c00      	cmp	r4, #0
 8009754:	f000 809e 	beq.w	8009894 <_dtoa_r+0x444>
 8009758:	2f00      	cmp	r7, #0
 800975a:	dd33      	ble.n	80097c4 <_dtoa_r+0x374>
 800975c:	4b9c      	ldr	r3, [pc, #624]	@ (80099d0 <_dtoa_r+0x580>)
 800975e:	f007 020f 	and.w	r2, r7, #15
 8009762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009766:	ed93 7b00 	vldr	d7, [r3]
 800976a:	05f8      	lsls	r0, r7, #23
 800976c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009770:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009774:	d516      	bpl.n	80097a4 <_dtoa_r+0x354>
 8009776:	4b97      	ldr	r3, [pc, #604]	@ (80099d4 <_dtoa_r+0x584>)
 8009778:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800977c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009780:	f7f7 f88c 	bl	800089c <__aeabi_ddiv>
 8009784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009788:	f004 040f 	and.w	r4, r4, #15
 800978c:	2603      	movs	r6, #3
 800978e:	4d91      	ldr	r5, [pc, #580]	@ (80099d4 <_dtoa_r+0x584>)
 8009790:	b954      	cbnz	r4, 80097a8 <_dtoa_r+0x358>
 8009792:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800979a:	f7f7 f87f 	bl	800089c <__aeabi_ddiv>
 800979e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097a2:	e028      	b.n	80097f6 <_dtoa_r+0x3a6>
 80097a4:	2602      	movs	r6, #2
 80097a6:	e7f2      	b.n	800978e <_dtoa_r+0x33e>
 80097a8:	07e1      	lsls	r1, r4, #31
 80097aa:	d508      	bpl.n	80097be <_dtoa_r+0x36e>
 80097ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80097b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097b4:	f7f6 ff48 	bl	8000648 <__aeabi_dmul>
 80097b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097bc:	3601      	adds	r6, #1
 80097be:	1064      	asrs	r4, r4, #1
 80097c0:	3508      	adds	r5, #8
 80097c2:	e7e5      	b.n	8009790 <_dtoa_r+0x340>
 80097c4:	f000 80af 	beq.w	8009926 <_dtoa_r+0x4d6>
 80097c8:	427c      	negs	r4, r7
 80097ca:	4b81      	ldr	r3, [pc, #516]	@ (80099d0 <_dtoa_r+0x580>)
 80097cc:	4d81      	ldr	r5, [pc, #516]	@ (80099d4 <_dtoa_r+0x584>)
 80097ce:	f004 020f 	and.w	r2, r4, #15
 80097d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097de:	f7f6 ff33 	bl	8000648 <__aeabi_dmul>
 80097e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097e6:	1124      	asrs	r4, r4, #4
 80097e8:	2300      	movs	r3, #0
 80097ea:	2602      	movs	r6, #2
 80097ec:	2c00      	cmp	r4, #0
 80097ee:	f040 808f 	bne.w	8009910 <_dtoa_r+0x4c0>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1d3      	bne.n	800979e <_dtoa_r+0x34e>
 80097f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 8094 	beq.w	800992a <_dtoa_r+0x4da>
 8009802:	4b75      	ldr	r3, [pc, #468]	@ (80099d8 <_dtoa_r+0x588>)
 8009804:	2200      	movs	r2, #0
 8009806:	4620      	mov	r0, r4
 8009808:	4629      	mov	r1, r5
 800980a:	f7f7 f98f 	bl	8000b2c <__aeabi_dcmplt>
 800980e:	2800      	cmp	r0, #0
 8009810:	f000 808b 	beq.w	800992a <_dtoa_r+0x4da>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	f000 8087 	beq.w	800992a <_dtoa_r+0x4da>
 800981c:	f1bb 0f00 	cmp.w	fp, #0
 8009820:	dd34      	ble.n	800988c <_dtoa_r+0x43c>
 8009822:	4620      	mov	r0, r4
 8009824:	4b6d      	ldr	r3, [pc, #436]	@ (80099dc <_dtoa_r+0x58c>)
 8009826:	2200      	movs	r2, #0
 8009828:	4629      	mov	r1, r5
 800982a:	f7f6 ff0d 	bl	8000648 <__aeabi_dmul>
 800982e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009832:	f107 38ff 	add.w	r8, r7, #4294967295
 8009836:	3601      	adds	r6, #1
 8009838:	465c      	mov	r4, fp
 800983a:	4630      	mov	r0, r6
 800983c:	f7f6 fe9a 	bl	8000574 <__aeabi_i2d>
 8009840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009844:	f7f6 ff00 	bl	8000648 <__aeabi_dmul>
 8009848:	4b65      	ldr	r3, [pc, #404]	@ (80099e0 <_dtoa_r+0x590>)
 800984a:	2200      	movs	r2, #0
 800984c:	f7f6 fd46 	bl	80002dc <__adddf3>
 8009850:	4605      	mov	r5, r0
 8009852:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009856:	2c00      	cmp	r4, #0
 8009858:	d16a      	bne.n	8009930 <_dtoa_r+0x4e0>
 800985a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800985e:	4b61      	ldr	r3, [pc, #388]	@ (80099e4 <_dtoa_r+0x594>)
 8009860:	2200      	movs	r2, #0
 8009862:	f7f6 fd39 	bl	80002d8 <__aeabi_dsub>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800986e:	462a      	mov	r2, r5
 8009870:	4633      	mov	r3, r6
 8009872:	f7f7 f979 	bl	8000b68 <__aeabi_dcmpgt>
 8009876:	2800      	cmp	r0, #0
 8009878:	f040 8298 	bne.w	8009dac <_dtoa_r+0x95c>
 800987c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009880:	462a      	mov	r2, r5
 8009882:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009886:	f7f7 f951 	bl	8000b2c <__aeabi_dcmplt>
 800988a:	bb38      	cbnz	r0, 80098dc <_dtoa_r+0x48c>
 800988c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009890:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009894:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009896:	2b00      	cmp	r3, #0
 8009898:	f2c0 8157 	blt.w	8009b4a <_dtoa_r+0x6fa>
 800989c:	2f0e      	cmp	r7, #14
 800989e:	f300 8154 	bgt.w	8009b4a <_dtoa_r+0x6fa>
 80098a2:	4b4b      	ldr	r3, [pc, #300]	@ (80099d0 <_dtoa_r+0x580>)
 80098a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098a8:	ed93 7b00 	vldr	d7, [r3]
 80098ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	ed8d 7b00 	vstr	d7, [sp]
 80098b4:	f280 80e5 	bge.w	8009a82 <_dtoa_r+0x632>
 80098b8:	9b03      	ldr	r3, [sp, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f300 80e1 	bgt.w	8009a82 <_dtoa_r+0x632>
 80098c0:	d10c      	bne.n	80098dc <_dtoa_r+0x48c>
 80098c2:	4b48      	ldr	r3, [pc, #288]	@ (80099e4 <_dtoa_r+0x594>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	ec51 0b17 	vmov	r0, r1, d7
 80098ca:	f7f6 febd 	bl	8000648 <__aeabi_dmul>
 80098ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098d2:	f7f7 f93f 	bl	8000b54 <__aeabi_dcmpge>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f000 8266 	beq.w	8009da8 <_dtoa_r+0x958>
 80098dc:	2400      	movs	r4, #0
 80098de:	4625      	mov	r5, r4
 80098e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098e2:	4656      	mov	r6, sl
 80098e4:	ea6f 0803 	mvn.w	r8, r3
 80098e8:	2700      	movs	r7, #0
 80098ea:	4621      	mov	r1, r4
 80098ec:	4648      	mov	r0, r9
 80098ee:	f000 fc09 	bl	800a104 <_Bfree>
 80098f2:	2d00      	cmp	r5, #0
 80098f4:	f000 80bd 	beq.w	8009a72 <_dtoa_r+0x622>
 80098f8:	b12f      	cbz	r7, 8009906 <_dtoa_r+0x4b6>
 80098fa:	42af      	cmp	r7, r5
 80098fc:	d003      	beq.n	8009906 <_dtoa_r+0x4b6>
 80098fe:	4639      	mov	r1, r7
 8009900:	4648      	mov	r0, r9
 8009902:	f000 fbff 	bl	800a104 <_Bfree>
 8009906:	4629      	mov	r1, r5
 8009908:	4648      	mov	r0, r9
 800990a:	f000 fbfb 	bl	800a104 <_Bfree>
 800990e:	e0b0      	b.n	8009a72 <_dtoa_r+0x622>
 8009910:	07e2      	lsls	r2, r4, #31
 8009912:	d505      	bpl.n	8009920 <_dtoa_r+0x4d0>
 8009914:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009918:	f7f6 fe96 	bl	8000648 <__aeabi_dmul>
 800991c:	3601      	adds	r6, #1
 800991e:	2301      	movs	r3, #1
 8009920:	1064      	asrs	r4, r4, #1
 8009922:	3508      	adds	r5, #8
 8009924:	e762      	b.n	80097ec <_dtoa_r+0x39c>
 8009926:	2602      	movs	r6, #2
 8009928:	e765      	b.n	80097f6 <_dtoa_r+0x3a6>
 800992a:	9c03      	ldr	r4, [sp, #12]
 800992c:	46b8      	mov	r8, r7
 800992e:	e784      	b.n	800983a <_dtoa_r+0x3ea>
 8009930:	4b27      	ldr	r3, [pc, #156]	@ (80099d0 <_dtoa_r+0x580>)
 8009932:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009934:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009938:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800993c:	4454      	add	r4, sl
 800993e:	2900      	cmp	r1, #0
 8009940:	d054      	beq.n	80099ec <_dtoa_r+0x59c>
 8009942:	4929      	ldr	r1, [pc, #164]	@ (80099e8 <_dtoa_r+0x598>)
 8009944:	2000      	movs	r0, #0
 8009946:	f7f6 ffa9 	bl	800089c <__aeabi_ddiv>
 800994a:	4633      	mov	r3, r6
 800994c:	462a      	mov	r2, r5
 800994e:	f7f6 fcc3 	bl	80002d8 <__aeabi_dsub>
 8009952:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009956:	4656      	mov	r6, sl
 8009958:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800995c:	f7f7 f924 	bl	8000ba8 <__aeabi_d2iz>
 8009960:	4605      	mov	r5, r0
 8009962:	f7f6 fe07 	bl	8000574 <__aeabi_i2d>
 8009966:	4602      	mov	r2, r0
 8009968:	460b      	mov	r3, r1
 800996a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800996e:	f7f6 fcb3 	bl	80002d8 <__aeabi_dsub>
 8009972:	3530      	adds	r5, #48	@ 0x30
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800997c:	f806 5b01 	strb.w	r5, [r6], #1
 8009980:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009984:	f7f7 f8d2 	bl	8000b2c <__aeabi_dcmplt>
 8009988:	2800      	cmp	r0, #0
 800998a:	d172      	bne.n	8009a72 <_dtoa_r+0x622>
 800998c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009990:	4911      	ldr	r1, [pc, #68]	@ (80099d8 <_dtoa_r+0x588>)
 8009992:	2000      	movs	r0, #0
 8009994:	f7f6 fca0 	bl	80002d8 <__aeabi_dsub>
 8009998:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800999c:	f7f7 f8c6 	bl	8000b2c <__aeabi_dcmplt>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	f040 80b4 	bne.w	8009b0e <_dtoa_r+0x6be>
 80099a6:	42a6      	cmp	r6, r4
 80099a8:	f43f af70 	beq.w	800988c <_dtoa_r+0x43c>
 80099ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80099b0:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <_dtoa_r+0x58c>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	f7f6 fe48 	bl	8000648 <__aeabi_dmul>
 80099b8:	4b08      	ldr	r3, [pc, #32]	@ (80099dc <_dtoa_r+0x58c>)
 80099ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099be:	2200      	movs	r2, #0
 80099c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099c4:	f7f6 fe40 	bl	8000648 <__aeabi_dmul>
 80099c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099cc:	e7c4      	b.n	8009958 <_dtoa_r+0x508>
 80099ce:	bf00      	nop
 80099d0:	0800b2b0 	.word	0x0800b2b0
 80099d4:	0800b288 	.word	0x0800b288
 80099d8:	3ff00000 	.word	0x3ff00000
 80099dc:	40240000 	.word	0x40240000
 80099e0:	401c0000 	.word	0x401c0000
 80099e4:	40140000 	.word	0x40140000
 80099e8:	3fe00000 	.word	0x3fe00000
 80099ec:	4631      	mov	r1, r6
 80099ee:	4628      	mov	r0, r5
 80099f0:	f7f6 fe2a 	bl	8000648 <__aeabi_dmul>
 80099f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80099fa:	4656      	mov	r6, sl
 80099fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a00:	f7f7 f8d2 	bl	8000ba8 <__aeabi_d2iz>
 8009a04:	4605      	mov	r5, r0
 8009a06:	f7f6 fdb5 	bl	8000574 <__aeabi_i2d>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a12:	f7f6 fc61 	bl	80002d8 <__aeabi_dsub>
 8009a16:	3530      	adds	r5, #48	@ 0x30
 8009a18:	f806 5b01 	strb.w	r5, [r6], #1
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	42a6      	cmp	r6, r4
 8009a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a26:	f04f 0200 	mov.w	r2, #0
 8009a2a:	d124      	bne.n	8009a76 <_dtoa_r+0x626>
 8009a2c:	4baf      	ldr	r3, [pc, #700]	@ (8009cec <_dtoa_r+0x89c>)
 8009a2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a32:	f7f6 fc53 	bl	80002dc <__adddf3>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a3e:	f7f7 f893 	bl	8000b68 <__aeabi_dcmpgt>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d163      	bne.n	8009b0e <_dtoa_r+0x6be>
 8009a46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a4a:	49a8      	ldr	r1, [pc, #672]	@ (8009cec <_dtoa_r+0x89c>)
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	f7f6 fc43 	bl	80002d8 <__aeabi_dsub>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a5a:	f7f7 f867 	bl	8000b2c <__aeabi_dcmplt>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	f43f af14 	beq.w	800988c <_dtoa_r+0x43c>
 8009a64:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a66:	1e73      	subs	r3, r6, #1
 8009a68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a6e:	2b30      	cmp	r3, #48	@ 0x30
 8009a70:	d0f8      	beq.n	8009a64 <_dtoa_r+0x614>
 8009a72:	4647      	mov	r7, r8
 8009a74:	e03b      	b.n	8009aee <_dtoa_r+0x69e>
 8009a76:	4b9e      	ldr	r3, [pc, #632]	@ (8009cf0 <_dtoa_r+0x8a0>)
 8009a78:	f7f6 fde6 	bl	8000648 <__aeabi_dmul>
 8009a7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a80:	e7bc      	b.n	80099fc <_dtoa_r+0x5ac>
 8009a82:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a86:	4656      	mov	r6, sl
 8009a88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4629      	mov	r1, r5
 8009a90:	f7f6 ff04 	bl	800089c <__aeabi_ddiv>
 8009a94:	f7f7 f888 	bl	8000ba8 <__aeabi_d2iz>
 8009a98:	4680      	mov	r8, r0
 8009a9a:	f7f6 fd6b 	bl	8000574 <__aeabi_i2d>
 8009a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa2:	f7f6 fdd1 	bl	8000648 <__aeabi_dmul>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4620      	mov	r0, r4
 8009aac:	4629      	mov	r1, r5
 8009aae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ab2:	f7f6 fc11 	bl	80002d8 <__aeabi_dsub>
 8009ab6:	f806 4b01 	strb.w	r4, [r6], #1
 8009aba:	9d03      	ldr	r5, [sp, #12]
 8009abc:	eba6 040a 	sub.w	r4, r6, sl
 8009ac0:	42a5      	cmp	r5, r4
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	d133      	bne.n	8009b30 <_dtoa_r+0x6e0>
 8009ac8:	f7f6 fc08 	bl	80002dc <__adddf3>
 8009acc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	f7f7 f848 	bl	8000b68 <__aeabi_dcmpgt>
 8009ad8:	b9c0      	cbnz	r0, 8009b0c <_dtoa_r+0x6bc>
 8009ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7f7 f819 	bl	8000b18 <__aeabi_dcmpeq>
 8009ae6:	b110      	cbz	r0, 8009aee <_dtoa_r+0x69e>
 8009ae8:	f018 0f01 	tst.w	r8, #1
 8009aec:	d10e      	bne.n	8009b0c <_dtoa_r+0x6bc>
 8009aee:	9902      	ldr	r1, [sp, #8]
 8009af0:	4648      	mov	r0, r9
 8009af2:	f000 fb07 	bl	800a104 <_Bfree>
 8009af6:	2300      	movs	r3, #0
 8009af8:	7033      	strb	r3, [r6, #0]
 8009afa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009afc:	3701      	adds	r7, #1
 8009afe:	601f      	str	r7, [r3, #0]
 8009b00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 824b 	beq.w	8009f9e <_dtoa_r+0xb4e>
 8009b08:	601e      	str	r6, [r3, #0]
 8009b0a:	e248      	b.n	8009f9e <_dtoa_r+0xb4e>
 8009b0c:	46b8      	mov	r8, r7
 8009b0e:	4633      	mov	r3, r6
 8009b10:	461e      	mov	r6, r3
 8009b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b16:	2a39      	cmp	r2, #57	@ 0x39
 8009b18:	d106      	bne.n	8009b28 <_dtoa_r+0x6d8>
 8009b1a:	459a      	cmp	sl, r3
 8009b1c:	d1f8      	bne.n	8009b10 <_dtoa_r+0x6c0>
 8009b1e:	2230      	movs	r2, #48	@ 0x30
 8009b20:	f108 0801 	add.w	r8, r8, #1
 8009b24:	f88a 2000 	strb.w	r2, [sl]
 8009b28:	781a      	ldrb	r2, [r3, #0]
 8009b2a:	3201      	adds	r2, #1
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	e7a0      	b.n	8009a72 <_dtoa_r+0x622>
 8009b30:	4b6f      	ldr	r3, [pc, #444]	@ (8009cf0 <_dtoa_r+0x8a0>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	f7f6 fd88 	bl	8000648 <__aeabi_dmul>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	460d      	mov	r5, r1
 8009b40:	f7f6 ffea 	bl	8000b18 <__aeabi_dcmpeq>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d09f      	beq.n	8009a88 <_dtoa_r+0x638>
 8009b48:	e7d1      	b.n	8009aee <_dtoa_r+0x69e>
 8009b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	f000 80ea 	beq.w	8009d26 <_dtoa_r+0x8d6>
 8009b52:	9a07      	ldr	r2, [sp, #28]
 8009b54:	2a01      	cmp	r2, #1
 8009b56:	f300 80cd 	bgt.w	8009cf4 <_dtoa_r+0x8a4>
 8009b5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b5c:	2a00      	cmp	r2, #0
 8009b5e:	f000 80c1 	beq.w	8009ce4 <_dtoa_r+0x894>
 8009b62:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b66:	9c08      	ldr	r4, [sp, #32]
 8009b68:	9e00      	ldr	r6, [sp, #0]
 8009b6a:	9a00      	ldr	r2, [sp, #0]
 8009b6c:	441a      	add	r2, r3
 8009b6e:	9200      	str	r2, [sp, #0]
 8009b70:	9a06      	ldr	r2, [sp, #24]
 8009b72:	2101      	movs	r1, #1
 8009b74:	441a      	add	r2, r3
 8009b76:	4648      	mov	r0, r9
 8009b78:	9206      	str	r2, [sp, #24]
 8009b7a:	f000 fb77 	bl	800a26c <__i2b>
 8009b7e:	4605      	mov	r5, r0
 8009b80:	b166      	cbz	r6, 8009b9c <_dtoa_r+0x74c>
 8009b82:	9b06      	ldr	r3, [sp, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dd09      	ble.n	8009b9c <_dtoa_r+0x74c>
 8009b88:	42b3      	cmp	r3, r6
 8009b8a:	9a00      	ldr	r2, [sp, #0]
 8009b8c:	bfa8      	it	ge
 8009b8e:	4633      	movge	r3, r6
 8009b90:	1ad2      	subs	r2, r2, r3
 8009b92:	9200      	str	r2, [sp, #0]
 8009b94:	9a06      	ldr	r2, [sp, #24]
 8009b96:	1af6      	subs	r6, r6, r3
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	9306      	str	r3, [sp, #24]
 8009b9c:	9b08      	ldr	r3, [sp, #32]
 8009b9e:	b30b      	cbz	r3, 8009be4 <_dtoa_r+0x794>
 8009ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 80c6 	beq.w	8009d34 <_dtoa_r+0x8e4>
 8009ba8:	2c00      	cmp	r4, #0
 8009baa:	f000 80c0 	beq.w	8009d2e <_dtoa_r+0x8de>
 8009bae:	4629      	mov	r1, r5
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	4648      	mov	r0, r9
 8009bb4:	f000 fc12 	bl	800a3dc <__pow5mult>
 8009bb8:	9a02      	ldr	r2, [sp, #8]
 8009bba:	4601      	mov	r1, r0
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	4648      	mov	r0, r9
 8009bc0:	f000 fb6a 	bl	800a298 <__multiply>
 8009bc4:	9902      	ldr	r1, [sp, #8]
 8009bc6:	4680      	mov	r8, r0
 8009bc8:	4648      	mov	r0, r9
 8009bca:	f000 fa9b 	bl	800a104 <_Bfree>
 8009bce:	9b08      	ldr	r3, [sp, #32]
 8009bd0:	1b1b      	subs	r3, r3, r4
 8009bd2:	9308      	str	r3, [sp, #32]
 8009bd4:	f000 80b1 	beq.w	8009d3a <_dtoa_r+0x8ea>
 8009bd8:	9a08      	ldr	r2, [sp, #32]
 8009bda:	4641      	mov	r1, r8
 8009bdc:	4648      	mov	r0, r9
 8009bde:	f000 fbfd 	bl	800a3dc <__pow5mult>
 8009be2:	9002      	str	r0, [sp, #8]
 8009be4:	2101      	movs	r1, #1
 8009be6:	4648      	mov	r0, r9
 8009be8:	f000 fb40 	bl	800a26c <__i2b>
 8009bec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bee:	4604      	mov	r4, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 81d8 	beq.w	8009fa6 <_dtoa_r+0xb56>
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	4601      	mov	r1, r0
 8009bfa:	4648      	mov	r0, r9
 8009bfc:	f000 fbee 	bl	800a3dc <__pow5mult>
 8009c00:	9b07      	ldr	r3, [sp, #28]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	4604      	mov	r4, r0
 8009c06:	f300 809f 	bgt.w	8009d48 <_dtoa_r+0x8f8>
 8009c0a:	9b04      	ldr	r3, [sp, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f040 8097 	bne.w	8009d40 <_dtoa_r+0x8f0>
 8009c12:	9b05      	ldr	r3, [sp, #20]
 8009c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f040 8093 	bne.w	8009d44 <_dtoa_r+0x8f4>
 8009c1e:	9b05      	ldr	r3, [sp, #20]
 8009c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c24:	0d1b      	lsrs	r3, r3, #20
 8009c26:	051b      	lsls	r3, r3, #20
 8009c28:	b133      	cbz	r3, 8009c38 <_dtoa_r+0x7e8>
 8009c2a:	9b00      	ldr	r3, [sp, #0]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	9b06      	ldr	r3, [sp, #24]
 8009c32:	3301      	adds	r3, #1
 8009c34:	9306      	str	r3, [sp, #24]
 8009c36:	2301      	movs	r3, #1
 8009c38:	9308      	str	r3, [sp, #32]
 8009c3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 81b8 	beq.w	8009fb2 <_dtoa_r+0xb62>
 8009c42:	6923      	ldr	r3, [r4, #16]
 8009c44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c48:	6918      	ldr	r0, [r3, #16]
 8009c4a:	f000 fac3 	bl	800a1d4 <__hi0bits>
 8009c4e:	f1c0 0020 	rsb	r0, r0, #32
 8009c52:	9b06      	ldr	r3, [sp, #24]
 8009c54:	4418      	add	r0, r3
 8009c56:	f010 001f 	ands.w	r0, r0, #31
 8009c5a:	f000 8082 	beq.w	8009d62 <_dtoa_r+0x912>
 8009c5e:	f1c0 0320 	rsb	r3, r0, #32
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	dd73      	ble.n	8009d4e <_dtoa_r+0x8fe>
 8009c66:	9b00      	ldr	r3, [sp, #0]
 8009c68:	f1c0 001c 	rsb	r0, r0, #28
 8009c6c:	4403      	add	r3, r0
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	9b06      	ldr	r3, [sp, #24]
 8009c72:	4403      	add	r3, r0
 8009c74:	4406      	add	r6, r0
 8009c76:	9306      	str	r3, [sp, #24]
 8009c78:	9b00      	ldr	r3, [sp, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dd05      	ble.n	8009c8a <_dtoa_r+0x83a>
 8009c7e:	9902      	ldr	r1, [sp, #8]
 8009c80:	461a      	mov	r2, r3
 8009c82:	4648      	mov	r0, r9
 8009c84:	f000 fc04 	bl	800a490 <__lshift>
 8009c88:	9002      	str	r0, [sp, #8]
 8009c8a:	9b06      	ldr	r3, [sp, #24]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	dd05      	ble.n	8009c9c <_dtoa_r+0x84c>
 8009c90:	4621      	mov	r1, r4
 8009c92:	461a      	mov	r2, r3
 8009c94:	4648      	mov	r0, r9
 8009c96:	f000 fbfb 	bl	800a490 <__lshift>
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d061      	beq.n	8009d66 <_dtoa_r+0x916>
 8009ca2:	9802      	ldr	r0, [sp, #8]
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	f000 fc5f 	bl	800a568 <__mcmp>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	da5b      	bge.n	8009d66 <_dtoa_r+0x916>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9902      	ldr	r1, [sp, #8]
 8009cb2:	220a      	movs	r2, #10
 8009cb4:	4648      	mov	r0, r9
 8009cb6:	f000 fa47 	bl	800a148 <__multadd>
 8009cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cbc:	9002      	str	r0, [sp, #8]
 8009cbe:	f107 38ff 	add.w	r8, r7, #4294967295
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 8177 	beq.w	8009fb6 <_dtoa_r+0xb66>
 8009cc8:	4629      	mov	r1, r5
 8009cca:	2300      	movs	r3, #0
 8009ccc:	220a      	movs	r2, #10
 8009cce:	4648      	mov	r0, r9
 8009cd0:	f000 fa3a 	bl	800a148 <__multadd>
 8009cd4:	f1bb 0f00 	cmp.w	fp, #0
 8009cd8:	4605      	mov	r5, r0
 8009cda:	dc6f      	bgt.n	8009dbc <_dtoa_r+0x96c>
 8009cdc:	9b07      	ldr	r3, [sp, #28]
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	dc49      	bgt.n	8009d76 <_dtoa_r+0x926>
 8009ce2:	e06b      	b.n	8009dbc <_dtoa_r+0x96c>
 8009ce4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009ce6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cea:	e73c      	b.n	8009b66 <_dtoa_r+0x716>
 8009cec:	3fe00000 	.word	0x3fe00000
 8009cf0:	40240000 	.word	0x40240000
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	1e5c      	subs	r4, r3, #1
 8009cf8:	9b08      	ldr	r3, [sp, #32]
 8009cfa:	42a3      	cmp	r3, r4
 8009cfc:	db09      	blt.n	8009d12 <_dtoa_r+0x8c2>
 8009cfe:	1b1c      	subs	r4, r3, r4
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f6bf af30 	bge.w	8009b68 <_dtoa_r+0x718>
 8009d08:	9b00      	ldr	r3, [sp, #0]
 8009d0a:	9a03      	ldr	r2, [sp, #12]
 8009d0c:	1a9e      	subs	r6, r3, r2
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e72b      	b.n	8009b6a <_dtoa_r+0x71a>
 8009d12:	9b08      	ldr	r3, [sp, #32]
 8009d14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d16:	9408      	str	r4, [sp, #32]
 8009d18:	1ae3      	subs	r3, r4, r3
 8009d1a:	441a      	add	r2, r3
 8009d1c:	9e00      	ldr	r6, [sp, #0]
 8009d1e:	9b03      	ldr	r3, [sp, #12]
 8009d20:	920d      	str	r2, [sp, #52]	@ 0x34
 8009d22:	2400      	movs	r4, #0
 8009d24:	e721      	b.n	8009b6a <_dtoa_r+0x71a>
 8009d26:	9c08      	ldr	r4, [sp, #32]
 8009d28:	9e00      	ldr	r6, [sp, #0]
 8009d2a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009d2c:	e728      	b.n	8009b80 <_dtoa_r+0x730>
 8009d2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d32:	e751      	b.n	8009bd8 <_dtoa_r+0x788>
 8009d34:	9a08      	ldr	r2, [sp, #32]
 8009d36:	9902      	ldr	r1, [sp, #8]
 8009d38:	e750      	b.n	8009bdc <_dtoa_r+0x78c>
 8009d3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d3e:	e751      	b.n	8009be4 <_dtoa_r+0x794>
 8009d40:	2300      	movs	r3, #0
 8009d42:	e779      	b.n	8009c38 <_dtoa_r+0x7e8>
 8009d44:	9b04      	ldr	r3, [sp, #16]
 8009d46:	e777      	b.n	8009c38 <_dtoa_r+0x7e8>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9308      	str	r3, [sp, #32]
 8009d4c:	e779      	b.n	8009c42 <_dtoa_r+0x7f2>
 8009d4e:	d093      	beq.n	8009c78 <_dtoa_r+0x828>
 8009d50:	9a00      	ldr	r2, [sp, #0]
 8009d52:	331c      	adds	r3, #28
 8009d54:	441a      	add	r2, r3
 8009d56:	9200      	str	r2, [sp, #0]
 8009d58:	9a06      	ldr	r2, [sp, #24]
 8009d5a:	441a      	add	r2, r3
 8009d5c:	441e      	add	r6, r3
 8009d5e:	9206      	str	r2, [sp, #24]
 8009d60:	e78a      	b.n	8009c78 <_dtoa_r+0x828>
 8009d62:	4603      	mov	r3, r0
 8009d64:	e7f4      	b.n	8009d50 <_dtoa_r+0x900>
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	46b8      	mov	r8, r7
 8009d6c:	dc20      	bgt.n	8009db0 <_dtoa_r+0x960>
 8009d6e:	469b      	mov	fp, r3
 8009d70:	9b07      	ldr	r3, [sp, #28]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	dd1e      	ble.n	8009db4 <_dtoa_r+0x964>
 8009d76:	f1bb 0f00 	cmp.w	fp, #0
 8009d7a:	f47f adb1 	bne.w	80098e0 <_dtoa_r+0x490>
 8009d7e:	4621      	mov	r1, r4
 8009d80:	465b      	mov	r3, fp
 8009d82:	2205      	movs	r2, #5
 8009d84:	4648      	mov	r0, r9
 8009d86:	f000 f9df 	bl	800a148 <__multadd>
 8009d8a:	4601      	mov	r1, r0
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	9802      	ldr	r0, [sp, #8]
 8009d90:	f000 fbea 	bl	800a568 <__mcmp>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	f77f ada3 	ble.w	80098e0 <_dtoa_r+0x490>
 8009d9a:	4656      	mov	r6, sl
 8009d9c:	2331      	movs	r3, #49	@ 0x31
 8009d9e:	f806 3b01 	strb.w	r3, [r6], #1
 8009da2:	f108 0801 	add.w	r8, r8, #1
 8009da6:	e59f      	b.n	80098e8 <_dtoa_r+0x498>
 8009da8:	9c03      	ldr	r4, [sp, #12]
 8009daa:	46b8      	mov	r8, r7
 8009dac:	4625      	mov	r5, r4
 8009dae:	e7f4      	b.n	8009d9a <_dtoa_r+0x94a>
 8009db0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 8101 	beq.w	8009fbe <_dtoa_r+0xb6e>
 8009dbc:	2e00      	cmp	r6, #0
 8009dbe:	dd05      	ble.n	8009dcc <_dtoa_r+0x97c>
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	4648      	mov	r0, r9
 8009dc6:	f000 fb63 	bl	800a490 <__lshift>
 8009dca:	4605      	mov	r5, r0
 8009dcc:	9b08      	ldr	r3, [sp, #32]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d05c      	beq.n	8009e8c <_dtoa_r+0xa3c>
 8009dd2:	6869      	ldr	r1, [r5, #4]
 8009dd4:	4648      	mov	r0, r9
 8009dd6:	f000 f955 	bl	800a084 <_Balloc>
 8009dda:	4606      	mov	r6, r0
 8009ddc:	b928      	cbnz	r0, 8009dea <_dtoa_r+0x99a>
 8009dde:	4b82      	ldr	r3, [pc, #520]	@ (8009fe8 <_dtoa_r+0xb98>)
 8009de0:	4602      	mov	r2, r0
 8009de2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009de6:	f7ff bb4a 	b.w	800947e <_dtoa_r+0x2e>
 8009dea:	692a      	ldr	r2, [r5, #16]
 8009dec:	3202      	adds	r2, #2
 8009dee:	0092      	lsls	r2, r2, #2
 8009df0:	f105 010c 	add.w	r1, r5, #12
 8009df4:	300c      	adds	r0, #12
 8009df6:	f000 ff31 	bl	800ac5c <memcpy>
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	4648      	mov	r0, r9
 8009e00:	f000 fb46 	bl	800a490 <__lshift>
 8009e04:	f10a 0301 	add.w	r3, sl, #1
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	eb0a 030b 	add.w	r3, sl, fp
 8009e0e:	9308      	str	r3, [sp, #32]
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	462f      	mov	r7, r5
 8009e18:	9306      	str	r3, [sp, #24]
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	9b00      	ldr	r3, [sp, #0]
 8009e1e:	9802      	ldr	r0, [sp, #8]
 8009e20:	4621      	mov	r1, r4
 8009e22:	f103 3bff 	add.w	fp, r3, #4294967295
 8009e26:	f7ff fa8a 	bl	800933e <quorem>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	3330      	adds	r3, #48	@ 0x30
 8009e2e:	9003      	str	r0, [sp, #12]
 8009e30:	4639      	mov	r1, r7
 8009e32:	9802      	ldr	r0, [sp, #8]
 8009e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e36:	f000 fb97 	bl	800a568 <__mcmp>
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	9004      	str	r0, [sp, #16]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4648      	mov	r0, r9
 8009e42:	f000 fbad 	bl	800a5a0 <__mdiff>
 8009e46:	68c2      	ldr	r2, [r0, #12]
 8009e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	bb02      	cbnz	r2, 8009e90 <_dtoa_r+0xa40>
 8009e4e:	4601      	mov	r1, r0
 8009e50:	9802      	ldr	r0, [sp, #8]
 8009e52:	f000 fb89 	bl	800a568 <__mcmp>
 8009e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e58:	4602      	mov	r2, r0
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	4648      	mov	r0, r9
 8009e5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e62:	f000 f94f 	bl	800a104 <_Bfree>
 8009e66:	9b07      	ldr	r3, [sp, #28]
 8009e68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e6a:	9e00      	ldr	r6, [sp, #0]
 8009e6c:	ea42 0103 	orr.w	r1, r2, r3
 8009e70:	9b06      	ldr	r3, [sp, #24]
 8009e72:	4319      	orrs	r1, r3
 8009e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e76:	d10d      	bne.n	8009e94 <_dtoa_r+0xa44>
 8009e78:	2b39      	cmp	r3, #57	@ 0x39
 8009e7a:	d027      	beq.n	8009ecc <_dtoa_r+0xa7c>
 8009e7c:	9a04      	ldr	r2, [sp, #16]
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	dd01      	ble.n	8009e86 <_dtoa_r+0xa36>
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	3331      	adds	r3, #49	@ 0x31
 8009e86:	f88b 3000 	strb.w	r3, [fp]
 8009e8a:	e52e      	b.n	80098ea <_dtoa_r+0x49a>
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	e7b9      	b.n	8009e04 <_dtoa_r+0x9b4>
 8009e90:	2201      	movs	r2, #1
 8009e92:	e7e2      	b.n	8009e5a <_dtoa_r+0xa0a>
 8009e94:	9904      	ldr	r1, [sp, #16]
 8009e96:	2900      	cmp	r1, #0
 8009e98:	db04      	blt.n	8009ea4 <_dtoa_r+0xa54>
 8009e9a:	9807      	ldr	r0, [sp, #28]
 8009e9c:	4301      	orrs	r1, r0
 8009e9e:	9806      	ldr	r0, [sp, #24]
 8009ea0:	4301      	orrs	r1, r0
 8009ea2:	d120      	bne.n	8009ee6 <_dtoa_r+0xa96>
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	ddee      	ble.n	8009e86 <_dtoa_r+0xa36>
 8009ea8:	9902      	ldr	r1, [sp, #8]
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	2201      	movs	r2, #1
 8009eae:	4648      	mov	r0, r9
 8009eb0:	f000 faee 	bl	800a490 <__lshift>
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	9002      	str	r0, [sp, #8]
 8009eb8:	f000 fb56 	bl	800a568 <__mcmp>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	9b00      	ldr	r3, [sp, #0]
 8009ec0:	dc02      	bgt.n	8009ec8 <_dtoa_r+0xa78>
 8009ec2:	d1e0      	bne.n	8009e86 <_dtoa_r+0xa36>
 8009ec4:	07da      	lsls	r2, r3, #31
 8009ec6:	d5de      	bpl.n	8009e86 <_dtoa_r+0xa36>
 8009ec8:	2b39      	cmp	r3, #57	@ 0x39
 8009eca:	d1da      	bne.n	8009e82 <_dtoa_r+0xa32>
 8009ecc:	2339      	movs	r3, #57	@ 0x39
 8009ece:	f88b 3000 	strb.w	r3, [fp]
 8009ed2:	4633      	mov	r3, r6
 8009ed4:	461e      	mov	r6, r3
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009edc:	2a39      	cmp	r2, #57	@ 0x39
 8009ede:	d04e      	beq.n	8009f7e <_dtoa_r+0xb2e>
 8009ee0:	3201      	adds	r2, #1
 8009ee2:	701a      	strb	r2, [r3, #0]
 8009ee4:	e501      	b.n	80098ea <_dtoa_r+0x49a>
 8009ee6:	2a00      	cmp	r2, #0
 8009ee8:	dd03      	ble.n	8009ef2 <_dtoa_r+0xaa2>
 8009eea:	2b39      	cmp	r3, #57	@ 0x39
 8009eec:	d0ee      	beq.n	8009ecc <_dtoa_r+0xa7c>
 8009eee:	3301      	adds	r3, #1
 8009ef0:	e7c9      	b.n	8009e86 <_dtoa_r+0xa36>
 8009ef2:	9a00      	ldr	r2, [sp, #0]
 8009ef4:	9908      	ldr	r1, [sp, #32]
 8009ef6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009efa:	428a      	cmp	r2, r1
 8009efc:	d028      	beq.n	8009f50 <_dtoa_r+0xb00>
 8009efe:	9902      	ldr	r1, [sp, #8]
 8009f00:	2300      	movs	r3, #0
 8009f02:	220a      	movs	r2, #10
 8009f04:	4648      	mov	r0, r9
 8009f06:	f000 f91f 	bl	800a148 <__multadd>
 8009f0a:	42af      	cmp	r7, r5
 8009f0c:	9002      	str	r0, [sp, #8]
 8009f0e:	f04f 0300 	mov.w	r3, #0
 8009f12:	f04f 020a 	mov.w	r2, #10
 8009f16:	4639      	mov	r1, r7
 8009f18:	4648      	mov	r0, r9
 8009f1a:	d107      	bne.n	8009f2c <_dtoa_r+0xadc>
 8009f1c:	f000 f914 	bl	800a148 <__multadd>
 8009f20:	4607      	mov	r7, r0
 8009f22:	4605      	mov	r5, r0
 8009f24:	9b00      	ldr	r3, [sp, #0]
 8009f26:	3301      	adds	r3, #1
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	e777      	b.n	8009e1c <_dtoa_r+0x9cc>
 8009f2c:	f000 f90c 	bl	800a148 <__multadd>
 8009f30:	4629      	mov	r1, r5
 8009f32:	4607      	mov	r7, r0
 8009f34:	2300      	movs	r3, #0
 8009f36:	220a      	movs	r2, #10
 8009f38:	4648      	mov	r0, r9
 8009f3a:	f000 f905 	bl	800a148 <__multadd>
 8009f3e:	4605      	mov	r5, r0
 8009f40:	e7f0      	b.n	8009f24 <_dtoa_r+0xad4>
 8009f42:	f1bb 0f00 	cmp.w	fp, #0
 8009f46:	bfcc      	ite	gt
 8009f48:	465e      	movgt	r6, fp
 8009f4a:	2601      	movle	r6, #1
 8009f4c:	4456      	add	r6, sl
 8009f4e:	2700      	movs	r7, #0
 8009f50:	9902      	ldr	r1, [sp, #8]
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	2201      	movs	r2, #1
 8009f56:	4648      	mov	r0, r9
 8009f58:	f000 fa9a 	bl	800a490 <__lshift>
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	9002      	str	r0, [sp, #8]
 8009f60:	f000 fb02 	bl	800a568 <__mcmp>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	dcb4      	bgt.n	8009ed2 <_dtoa_r+0xa82>
 8009f68:	d102      	bne.n	8009f70 <_dtoa_r+0xb20>
 8009f6a:	9b00      	ldr	r3, [sp, #0]
 8009f6c:	07db      	lsls	r3, r3, #31
 8009f6e:	d4b0      	bmi.n	8009ed2 <_dtoa_r+0xa82>
 8009f70:	4633      	mov	r3, r6
 8009f72:	461e      	mov	r6, r3
 8009f74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f78:	2a30      	cmp	r2, #48	@ 0x30
 8009f7a:	d0fa      	beq.n	8009f72 <_dtoa_r+0xb22>
 8009f7c:	e4b5      	b.n	80098ea <_dtoa_r+0x49a>
 8009f7e:	459a      	cmp	sl, r3
 8009f80:	d1a8      	bne.n	8009ed4 <_dtoa_r+0xa84>
 8009f82:	2331      	movs	r3, #49	@ 0x31
 8009f84:	f108 0801 	add.w	r8, r8, #1
 8009f88:	f88a 3000 	strb.w	r3, [sl]
 8009f8c:	e4ad      	b.n	80098ea <_dtoa_r+0x49a>
 8009f8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f90:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009fec <_dtoa_r+0xb9c>
 8009f94:	b11b      	cbz	r3, 8009f9e <_dtoa_r+0xb4e>
 8009f96:	f10a 0308 	add.w	r3, sl, #8
 8009f9a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	4650      	mov	r0, sl
 8009fa0:	b017      	add	sp, #92	@ 0x5c
 8009fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa6:	9b07      	ldr	r3, [sp, #28]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	f77f ae2e 	ble.w	8009c0a <_dtoa_r+0x7ba>
 8009fae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fb0:	9308      	str	r3, [sp, #32]
 8009fb2:	2001      	movs	r0, #1
 8009fb4:	e64d      	b.n	8009c52 <_dtoa_r+0x802>
 8009fb6:	f1bb 0f00 	cmp.w	fp, #0
 8009fba:	f77f aed9 	ble.w	8009d70 <_dtoa_r+0x920>
 8009fbe:	4656      	mov	r6, sl
 8009fc0:	9802      	ldr	r0, [sp, #8]
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	f7ff f9bb 	bl	800933e <quorem>
 8009fc8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009fcc:	f806 3b01 	strb.w	r3, [r6], #1
 8009fd0:	eba6 020a 	sub.w	r2, r6, sl
 8009fd4:	4593      	cmp	fp, r2
 8009fd6:	ddb4      	ble.n	8009f42 <_dtoa_r+0xaf2>
 8009fd8:	9902      	ldr	r1, [sp, #8]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	220a      	movs	r2, #10
 8009fde:	4648      	mov	r0, r9
 8009fe0:	f000 f8b2 	bl	800a148 <__multadd>
 8009fe4:	9002      	str	r0, [sp, #8]
 8009fe6:	e7eb      	b.n	8009fc0 <_dtoa_r+0xb70>
 8009fe8:	0800b1b9 	.word	0x0800b1b9
 8009fec:	0800b13d 	.word	0x0800b13d

08009ff0 <_free_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	d041      	beq.n	800a07c <_free_r+0x8c>
 8009ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ffc:	1f0c      	subs	r4, r1, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bfb8      	it	lt
 800a002:	18e4      	addlt	r4, r4, r3
 800a004:	f7fe fa1c 	bl	8008440 <__malloc_lock>
 800a008:	4a1d      	ldr	r2, [pc, #116]	@ (800a080 <_free_r+0x90>)
 800a00a:	6813      	ldr	r3, [r2, #0]
 800a00c:	b933      	cbnz	r3, 800a01c <_free_r+0x2c>
 800a00e:	6063      	str	r3, [r4, #4]
 800a010:	6014      	str	r4, [r2, #0]
 800a012:	4628      	mov	r0, r5
 800a014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a018:	f7fe ba18 	b.w	800844c <__malloc_unlock>
 800a01c:	42a3      	cmp	r3, r4
 800a01e:	d908      	bls.n	800a032 <_free_r+0x42>
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	1821      	adds	r1, r4, r0
 800a024:	428b      	cmp	r3, r1
 800a026:	bf01      	itttt	eq
 800a028:	6819      	ldreq	r1, [r3, #0]
 800a02a:	685b      	ldreq	r3, [r3, #4]
 800a02c:	1809      	addeq	r1, r1, r0
 800a02e:	6021      	streq	r1, [r4, #0]
 800a030:	e7ed      	b.n	800a00e <_free_r+0x1e>
 800a032:	461a      	mov	r2, r3
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	b10b      	cbz	r3, 800a03c <_free_r+0x4c>
 800a038:	42a3      	cmp	r3, r4
 800a03a:	d9fa      	bls.n	800a032 <_free_r+0x42>
 800a03c:	6811      	ldr	r1, [r2, #0]
 800a03e:	1850      	adds	r0, r2, r1
 800a040:	42a0      	cmp	r0, r4
 800a042:	d10b      	bne.n	800a05c <_free_r+0x6c>
 800a044:	6820      	ldr	r0, [r4, #0]
 800a046:	4401      	add	r1, r0
 800a048:	1850      	adds	r0, r2, r1
 800a04a:	4283      	cmp	r3, r0
 800a04c:	6011      	str	r1, [r2, #0]
 800a04e:	d1e0      	bne.n	800a012 <_free_r+0x22>
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	6053      	str	r3, [r2, #4]
 800a056:	4408      	add	r0, r1
 800a058:	6010      	str	r0, [r2, #0]
 800a05a:	e7da      	b.n	800a012 <_free_r+0x22>
 800a05c:	d902      	bls.n	800a064 <_free_r+0x74>
 800a05e:	230c      	movs	r3, #12
 800a060:	602b      	str	r3, [r5, #0]
 800a062:	e7d6      	b.n	800a012 <_free_r+0x22>
 800a064:	6820      	ldr	r0, [r4, #0]
 800a066:	1821      	adds	r1, r4, r0
 800a068:	428b      	cmp	r3, r1
 800a06a:	bf04      	itt	eq
 800a06c:	6819      	ldreq	r1, [r3, #0]
 800a06e:	685b      	ldreq	r3, [r3, #4]
 800a070:	6063      	str	r3, [r4, #4]
 800a072:	bf04      	itt	eq
 800a074:	1809      	addeq	r1, r1, r0
 800a076:	6021      	streq	r1, [r4, #0]
 800a078:	6054      	str	r4, [r2, #4]
 800a07a:	e7ca      	b.n	800a012 <_free_r+0x22>
 800a07c:	bd38      	pop	{r3, r4, r5, pc}
 800a07e:	bf00      	nop
 800a080:	200004cc 	.word	0x200004cc

0800a084 <_Balloc>:
 800a084:	b570      	push	{r4, r5, r6, lr}
 800a086:	69c6      	ldr	r6, [r0, #28]
 800a088:	4604      	mov	r4, r0
 800a08a:	460d      	mov	r5, r1
 800a08c:	b976      	cbnz	r6, 800a0ac <_Balloc+0x28>
 800a08e:	2010      	movs	r0, #16
 800a090:	f7fe f924 	bl	80082dc <malloc>
 800a094:	4602      	mov	r2, r0
 800a096:	61e0      	str	r0, [r4, #28]
 800a098:	b920      	cbnz	r0, 800a0a4 <_Balloc+0x20>
 800a09a:	4b18      	ldr	r3, [pc, #96]	@ (800a0fc <_Balloc+0x78>)
 800a09c:	4818      	ldr	r0, [pc, #96]	@ (800a100 <_Balloc+0x7c>)
 800a09e:	216b      	movs	r1, #107	@ 0x6b
 800a0a0:	f000 fdea 	bl	800ac78 <__assert_func>
 800a0a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0a8:	6006      	str	r6, [r0, #0]
 800a0aa:	60c6      	str	r6, [r0, #12]
 800a0ac:	69e6      	ldr	r6, [r4, #28]
 800a0ae:	68f3      	ldr	r3, [r6, #12]
 800a0b0:	b183      	cbz	r3, 800a0d4 <_Balloc+0x50>
 800a0b2:	69e3      	ldr	r3, [r4, #28]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0ba:	b9b8      	cbnz	r0, 800a0ec <_Balloc+0x68>
 800a0bc:	2101      	movs	r1, #1
 800a0be:	fa01 f605 	lsl.w	r6, r1, r5
 800a0c2:	1d72      	adds	r2, r6, #5
 800a0c4:	0092      	lsls	r2, r2, #2
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 fdf4 	bl	800acb4 <_calloc_r>
 800a0cc:	b160      	cbz	r0, 800a0e8 <_Balloc+0x64>
 800a0ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0d2:	e00e      	b.n	800a0f2 <_Balloc+0x6e>
 800a0d4:	2221      	movs	r2, #33	@ 0x21
 800a0d6:	2104      	movs	r1, #4
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f000 fdeb 	bl	800acb4 <_calloc_r>
 800a0de:	69e3      	ldr	r3, [r4, #28]
 800a0e0:	60f0      	str	r0, [r6, #12]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e4      	bne.n	800a0b2 <_Balloc+0x2e>
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	6802      	ldr	r2, [r0, #0]
 800a0ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0f8:	e7f7      	b.n	800a0ea <_Balloc+0x66>
 800a0fa:	bf00      	nop
 800a0fc:	0800b14a 	.word	0x0800b14a
 800a100:	0800b1ca 	.word	0x0800b1ca

0800a104 <_Bfree>:
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	69c6      	ldr	r6, [r0, #28]
 800a108:	4605      	mov	r5, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	b976      	cbnz	r6, 800a12c <_Bfree+0x28>
 800a10e:	2010      	movs	r0, #16
 800a110:	f7fe f8e4 	bl	80082dc <malloc>
 800a114:	4602      	mov	r2, r0
 800a116:	61e8      	str	r0, [r5, #28]
 800a118:	b920      	cbnz	r0, 800a124 <_Bfree+0x20>
 800a11a:	4b09      	ldr	r3, [pc, #36]	@ (800a140 <_Bfree+0x3c>)
 800a11c:	4809      	ldr	r0, [pc, #36]	@ (800a144 <_Bfree+0x40>)
 800a11e:	218f      	movs	r1, #143	@ 0x8f
 800a120:	f000 fdaa 	bl	800ac78 <__assert_func>
 800a124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a128:	6006      	str	r6, [r0, #0]
 800a12a:	60c6      	str	r6, [r0, #12]
 800a12c:	b13c      	cbz	r4, 800a13e <_Bfree+0x3a>
 800a12e:	69eb      	ldr	r3, [r5, #28]
 800a130:	6862      	ldr	r2, [r4, #4]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a138:	6021      	str	r1, [r4, #0]
 800a13a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	0800b14a 	.word	0x0800b14a
 800a144:	0800b1ca 	.word	0x0800b1ca

0800a148 <__multadd>:
 800a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14c:	690d      	ldr	r5, [r1, #16]
 800a14e:	4607      	mov	r7, r0
 800a150:	460c      	mov	r4, r1
 800a152:	461e      	mov	r6, r3
 800a154:	f101 0c14 	add.w	ip, r1, #20
 800a158:	2000      	movs	r0, #0
 800a15a:	f8dc 3000 	ldr.w	r3, [ip]
 800a15e:	b299      	uxth	r1, r3
 800a160:	fb02 6101 	mla	r1, r2, r1, r6
 800a164:	0c1e      	lsrs	r6, r3, #16
 800a166:	0c0b      	lsrs	r3, r1, #16
 800a168:	fb02 3306 	mla	r3, r2, r6, r3
 800a16c:	b289      	uxth	r1, r1
 800a16e:	3001      	adds	r0, #1
 800a170:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a174:	4285      	cmp	r5, r0
 800a176:	f84c 1b04 	str.w	r1, [ip], #4
 800a17a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a17e:	dcec      	bgt.n	800a15a <__multadd+0x12>
 800a180:	b30e      	cbz	r6, 800a1c6 <__multadd+0x7e>
 800a182:	68a3      	ldr	r3, [r4, #8]
 800a184:	42ab      	cmp	r3, r5
 800a186:	dc19      	bgt.n	800a1bc <__multadd+0x74>
 800a188:	6861      	ldr	r1, [r4, #4]
 800a18a:	4638      	mov	r0, r7
 800a18c:	3101      	adds	r1, #1
 800a18e:	f7ff ff79 	bl	800a084 <_Balloc>
 800a192:	4680      	mov	r8, r0
 800a194:	b928      	cbnz	r0, 800a1a2 <__multadd+0x5a>
 800a196:	4602      	mov	r2, r0
 800a198:	4b0c      	ldr	r3, [pc, #48]	@ (800a1cc <__multadd+0x84>)
 800a19a:	480d      	ldr	r0, [pc, #52]	@ (800a1d0 <__multadd+0x88>)
 800a19c:	21ba      	movs	r1, #186	@ 0xba
 800a19e:	f000 fd6b 	bl	800ac78 <__assert_func>
 800a1a2:	6922      	ldr	r2, [r4, #16]
 800a1a4:	3202      	adds	r2, #2
 800a1a6:	f104 010c 	add.w	r1, r4, #12
 800a1aa:	0092      	lsls	r2, r2, #2
 800a1ac:	300c      	adds	r0, #12
 800a1ae:	f000 fd55 	bl	800ac5c <memcpy>
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff ffa5 	bl	800a104 <_Bfree>
 800a1ba:	4644      	mov	r4, r8
 800a1bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1c0:	3501      	adds	r5, #1
 800a1c2:	615e      	str	r6, [r3, #20]
 800a1c4:	6125      	str	r5, [r4, #16]
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1cc:	0800b1b9 	.word	0x0800b1b9
 800a1d0:	0800b1ca 	.word	0x0800b1ca

0800a1d4 <__hi0bits>:
 800a1d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1d8:	4603      	mov	r3, r0
 800a1da:	bf36      	itet	cc
 800a1dc:	0403      	lslcc	r3, r0, #16
 800a1de:	2000      	movcs	r0, #0
 800a1e0:	2010      	movcc	r0, #16
 800a1e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1e6:	bf3c      	itt	cc
 800a1e8:	021b      	lslcc	r3, r3, #8
 800a1ea:	3008      	addcc	r0, #8
 800a1ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1f0:	bf3c      	itt	cc
 800a1f2:	011b      	lslcc	r3, r3, #4
 800a1f4:	3004      	addcc	r0, #4
 800a1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1fa:	bf3c      	itt	cc
 800a1fc:	009b      	lslcc	r3, r3, #2
 800a1fe:	3002      	addcc	r0, #2
 800a200:	2b00      	cmp	r3, #0
 800a202:	db05      	blt.n	800a210 <__hi0bits+0x3c>
 800a204:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a208:	f100 0001 	add.w	r0, r0, #1
 800a20c:	bf08      	it	eq
 800a20e:	2020      	moveq	r0, #32
 800a210:	4770      	bx	lr

0800a212 <__lo0bits>:
 800a212:	6803      	ldr	r3, [r0, #0]
 800a214:	4602      	mov	r2, r0
 800a216:	f013 0007 	ands.w	r0, r3, #7
 800a21a:	d00b      	beq.n	800a234 <__lo0bits+0x22>
 800a21c:	07d9      	lsls	r1, r3, #31
 800a21e:	d421      	bmi.n	800a264 <__lo0bits+0x52>
 800a220:	0798      	lsls	r0, r3, #30
 800a222:	bf49      	itett	mi
 800a224:	085b      	lsrmi	r3, r3, #1
 800a226:	089b      	lsrpl	r3, r3, #2
 800a228:	2001      	movmi	r0, #1
 800a22a:	6013      	strmi	r3, [r2, #0]
 800a22c:	bf5c      	itt	pl
 800a22e:	6013      	strpl	r3, [r2, #0]
 800a230:	2002      	movpl	r0, #2
 800a232:	4770      	bx	lr
 800a234:	b299      	uxth	r1, r3
 800a236:	b909      	cbnz	r1, 800a23c <__lo0bits+0x2a>
 800a238:	0c1b      	lsrs	r3, r3, #16
 800a23a:	2010      	movs	r0, #16
 800a23c:	b2d9      	uxtb	r1, r3
 800a23e:	b909      	cbnz	r1, 800a244 <__lo0bits+0x32>
 800a240:	3008      	adds	r0, #8
 800a242:	0a1b      	lsrs	r3, r3, #8
 800a244:	0719      	lsls	r1, r3, #28
 800a246:	bf04      	itt	eq
 800a248:	091b      	lsreq	r3, r3, #4
 800a24a:	3004      	addeq	r0, #4
 800a24c:	0799      	lsls	r1, r3, #30
 800a24e:	bf04      	itt	eq
 800a250:	089b      	lsreq	r3, r3, #2
 800a252:	3002      	addeq	r0, #2
 800a254:	07d9      	lsls	r1, r3, #31
 800a256:	d403      	bmi.n	800a260 <__lo0bits+0x4e>
 800a258:	085b      	lsrs	r3, r3, #1
 800a25a:	f100 0001 	add.w	r0, r0, #1
 800a25e:	d003      	beq.n	800a268 <__lo0bits+0x56>
 800a260:	6013      	str	r3, [r2, #0]
 800a262:	4770      	bx	lr
 800a264:	2000      	movs	r0, #0
 800a266:	4770      	bx	lr
 800a268:	2020      	movs	r0, #32
 800a26a:	4770      	bx	lr

0800a26c <__i2b>:
 800a26c:	b510      	push	{r4, lr}
 800a26e:	460c      	mov	r4, r1
 800a270:	2101      	movs	r1, #1
 800a272:	f7ff ff07 	bl	800a084 <_Balloc>
 800a276:	4602      	mov	r2, r0
 800a278:	b928      	cbnz	r0, 800a286 <__i2b+0x1a>
 800a27a:	4b05      	ldr	r3, [pc, #20]	@ (800a290 <__i2b+0x24>)
 800a27c:	4805      	ldr	r0, [pc, #20]	@ (800a294 <__i2b+0x28>)
 800a27e:	f240 1145 	movw	r1, #325	@ 0x145
 800a282:	f000 fcf9 	bl	800ac78 <__assert_func>
 800a286:	2301      	movs	r3, #1
 800a288:	6144      	str	r4, [r0, #20]
 800a28a:	6103      	str	r3, [r0, #16]
 800a28c:	bd10      	pop	{r4, pc}
 800a28e:	bf00      	nop
 800a290:	0800b1b9 	.word	0x0800b1b9
 800a294:	0800b1ca 	.word	0x0800b1ca

0800a298 <__multiply>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	4617      	mov	r7, r2
 800a29e:	690a      	ldr	r2, [r1, #16]
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	bfa8      	it	ge
 800a2a6:	463b      	movge	r3, r7
 800a2a8:	4689      	mov	r9, r1
 800a2aa:	bfa4      	itt	ge
 800a2ac:	460f      	movge	r7, r1
 800a2ae:	4699      	movge	r9, r3
 800a2b0:	693d      	ldr	r5, [r7, #16]
 800a2b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	eb05 060a 	add.w	r6, r5, sl
 800a2be:	42b3      	cmp	r3, r6
 800a2c0:	b085      	sub	sp, #20
 800a2c2:	bfb8      	it	lt
 800a2c4:	3101      	addlt	r1, #1
 800a2c6:	f7ff fedd 	bl	800a084 <_Balloc>
 800a2ca:	b930      	cbnz	r0, 800a2da <__multiply+0x42>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	4b41      	ldr	r3, [pc, #260]	@ (800a3d4 <__multiply+0x13c>)
 800a2d0:	4841      	ldr	r0, [pc, #260]	@ (800a3d8 <__multiply+0x140>)
 800a2d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2d6:	f000 fccf 	bl	800ac78 <__assert_func>
 800a2da:	f100 0414 	add.w	r4, r0, #20
 800a2de:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a2e2:	4623      	mov	r3, r4
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	4573      	cmp	r3, lr
 800a2e8:	d320      	bcc.n	800a32c <__multiply+0x94>
 800a2ea:	f107 0814 	add.w	r8, r7, #20
 800a2ee:	f109 0114 	add.w	r1, r9, #20
 800a2f2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a2f6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a2fa:	9302      	str	r3, [sp, #8]
 800a2fc:	1beb      	subs	r3, r5, r7
 800a2fe:	3b15      	subs	r3, #21
 800a300:	f023 0303 	bic.w	r3, r3, #3
 800a304:	3304      	adds	r3, #4
 800a306:	3715      	adds	r7, #21
 800a308:	42bd      	cmp	r5, r7
 800a30a:	bf38      	it	cc
 800a30c:	2304      	movcc	r3, #4
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	9b02      	ldr	r3, [sp, #8]
 800a312:	9103      	str	r1, [sp, #12]
 800a314:	428b      	cmp	r3, r1
 800a316:	d80c      	bhi.n	800a332 <__multiply+0x9a>
 800a318:	2e00      	cmp	r6, #0
 800a31a:	dd03      	ble.n	800a324 <__multiply+0x8c>
 800a31c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a320:	2b00      	cmp	r3, #0
 800a322:	d055      	beq.n	800a3d0 <__multiply+0x138>
 800a324:	6106      	str	r6, [r0, #16]
 800a326:	b005      	add	sp, #20
 800a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32c:	f843 2b04 	str.w	r2, [r3], #4
 800a330:	e7d9      	b.n	800a2e6 <__multiply+0x4e>
 800a332:	f8b1 a000 	ldrh.w	sl, [r1]
 800a336:	f1ba 0f00 	cmp.w	sl, #0
 800a33a:	d01f      	beq.n	800a37c <__multiply+0xe4>
 800a33c:	46c4      	mov	ip, r8
 800a33e:	46a1      	mov	r9, r4
 800a340:	2700      	movs	r7, #0
 800a342:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a346:	f8d9 3000 	ldr.w	r3, [r9]
 800a34a:	fa1f fb82 	uxth.w	fp, r2
 800a34e:	b29b      	uxth	r3, r3
 800a350:	fb0a 330b 	mla	r3, sl, fp, r3
 800a354:	443b      	add	r3, r7
 800a356:	f8d9 7000 	ldr.w	r7, [r9]
 800a35a:	0c12      	lsrs	r2, r2, #16
 800a35c:	0c3f      	lsrs	r7, r7, #16
 800a35e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a362:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a366:	b29b      	uxth	r3, r3
 800a368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a36c:	4565      	cmp	r5, ip
 800a36e:	f849 3b04 	str.w	r3, [r9], #4
 800a372:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a376:	d8e4      	bhi.n	800a342 <__multiply+0xaa>
 800a378:	9b01      	ldr	r3, [sp, #4]
 800a37a:	50e7      	str	r7, [r4, r3]
 800a37c:	9b03      	ldr	r3, [sp, #12]
 800a37e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a382:	3104      	adds	r1, #4
 800a384:	f1b9 0f00 	cmp.w	r9, #0
 800a388:	d020      	beq.n	800a3cc <__multiply+0x134>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	4647      	mov	r7, r8
 800a38e:	46a4      	mov	ip, r4
 800a390:	f04f 0a00 	mov.w	sl, #0
 800a394:	f8b7 b000 	ldrh.w	fp, [r7]
 800a398:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a39c:	fb09 220b 	mla	r2, r9, fp, r2
 800a3a0:	4452      	add	r2, sl
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3a8:	f84c 3b04 	str.w	r3, [ip], #4
 800a3ac:	f857 3b04 	ldr.w	r3, [r7], #4
 800a3b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3b4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a3b8:	fb09 330a 	mla	r3, r9, sl, r3
 800a3bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a3c0:	42bd      	cmp	r5, r7
 800a3c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3c6:	d8e5      	bhi.n	800a394 <__multiply+0xfc>
 800a3c8:	9a01      	ldr	r2, [sp, #4]
 800a3ca:	50a3      	str	r3, [r4, r2]
 800a3cc:	3404      	adds	r4, #4
 800a3ce:	e79f      	b.n	800a310 <__multiply+0x78>
 800a3d0:	3e01      	subs	r6, #1
 800a3d2:	e7a1      	b.n	800a318 <__multiply+0x80>
 800a3d4:	0800b1b9 	.word	0x0800b1b9
 800a3d8:	0800b1ca 	.word	0x0800b1ca

0800a3dc <__pow5mult>:
 800a3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e0:	4615      	mov	r5, r2
 800a3e2:	f012 0203 	ands.w	r2, r2, #3
 800a3e6:	4607      	mov	r7, r0
 800a3e8:	460e      	mov	r6, r1
 800a3ea:	d007      	beq.n	800a3fc <__pow5mult+0x20>
 800a3ec:	4c25      	ldr	r4, [pc, #148]	@ (800a484 <__pow5mult+0xa8>)
 800a3ee:	3a01      	subs	r2, #1
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3f6:	f7ff fea7 	bl	800a148 <__multadd>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	10ad      	asrs	r5, r5, #2
 800a3fe:	d03d      	beq.n	800a47c <__pow5mult+0xa0>
 800a400:	69fc      	ldr	r4, [r7, #28]
 800a402:	b97c      	cbnz	r4, 800a424 <__pow5mult+0x48>
 800a404:	2010      	movs	r0, #16
 800a406:	f7fd ff69 	bl	80082dc <malloc>
 800a40a:	4602      	mov	r2, r0
 800a40c:	61f8      	str	r0, [r7, #28]
 800a40e:	b928      	cbnz	r0, 800a41c <__pow5mult+0x40>
 800a410:	4b1d      	ldr	r3, [pc, #116]	@ (800a488 <__pow5mult+0xac>)
 800a412:	481e      	ldr	r0, [pc, #120]	@ (800a48c <__pow5mult+0xb0>)
 800a414:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a418:	f000 fc2e 	bl	800ac78 <__assert_func>
 800a41c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a420:	6004      	str	r4, [r0, #0]
 800a422:	60c4      	str	r4, [r0, #12]
 800a424:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a42c:	b94c      	cbnz	r4, 800a442 <__pow5mult+0x66>
 800a42e:	f240 2171 	movw	r1, #625	@ 0x271
 800a432:	4638      	mov	r0, r7
 800a434:	f7ff ff1a 	bl	800a26c <__i2b>
 800a438:	2300      	movs	r3, #0
 800a43a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a43e:	4604      	mov	r4, r0
 800a440:	6003      	str	r3, [r0, #0]
 800a442:	f04f 0900 	mov.w	r9, #0
 800a446:	07eb      	lsls	r3, r5, #31
 800a448:	d50a      	bpl.n	800a460 <__pow5mult+0x84>
 800a44a:	4631      	mov	r1, r6
 800a44c:	4622      	mov	r2, r4
 800a44e:	4638      	mov	r0, r7
 800a450:	f7ff ff22 	bl	800a298 <__multiply>
 800a454:	4631      	mov	r1, r6
 800a456:	4680      	mov	r8, r0
 800a458:	4638      	mov	r0, r7
 800a45a:	f7ff fe53 	bl	800a104 <_Bfree>
 800a45e:	4646      	mov	r6, r8
 800a460:	106d      	asrs	r5, r5, #1
 800a462:	d00b      	beq.n	800a47c <__pow5mult+0xa0>
 800a464:	6820      	ldr	r0, [r4, #0]
 800a466:	b938      	cbnz	r0, 800a478 <__pow5mult+0x9c>
 800a468:	4622      	mov	r2, r4
 800a46a:	4621      	mov	r1, r4
 800a46c:	4638      	mov	r0, r7
 800a46e:	f7ff ff13 	bl	800a298 <__multiply>
 800a472:	6020      	str	r0, [r4, #0]
 800a474:	f8c0 9000 	str.w	r9, [r0]
 800a478:	4604      	mov	r4, r0
 800a47a:	e7e4      	b.n	800a446 <__pow5mult+0x6a>
 800a47c:	4630      	mov	r0, r6
 800a47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a482:	bf00      	nop
 800a484:	0800b27c 	.word	0x0800b27c
 800a488:	0800b14a 	.word	0x0800b14a
 800a48c:	0800b1ca 	.word	0x0800b1ca

0800a490 <__lshift>:
 800a490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a494:	460c      	mov	r4, r1
 800a496:	6849      	ldr	r1, [r1, #4]
 800a498:	6923      	ldr	r3, [r4, #16]
 800a49a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a49e:	68a3      	ldr	r3, [r4, #8]
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	4691      	mov	r9, r2
 800a4a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4a8:	f108 0601 	add.w	r6, r8, #1
 800a4ac:	42b3      	cmp	r3, r6
 800a4ae:	db0b      	blt.n	800a4c8 <__lshift+0x38>
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	f7ff fde7 	bl	800a084 <_Balloc>
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	b948      	cbnz	r0, 800a4ce <__lshift+0x3e>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	4b28      	ldr	r3, [pc, #160]	@ (800a560 <__lshift+0xd0>)
 800a4be:	4829      	ldr	r0, [pc, #164]	@ (800a564 <__lshift+0xd4>)
 800a4c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4c4:	f000 fbd8 	bl	800ac78 <__assert_func>
 800a4c8:	3101      	adds	r1, #1
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	e7ee      	b.n	800a4ac <__lshift+0x1c>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f100 0114 	add.w	r1, r0, #20
 800a4d4:	f100 0210 	add.w	r2, r0, #16
 800a4d8:	4618      	mov	r0, r3
 800a4da:	4553      	cmp	r3, sl
 800a4dc:	db33      	blt.n	800a546 <__lshift+0xb6>
 800a4de:	6920      	ldr	r0, [r4, #16]
 800a4e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4e4:	f104 0314 	add.w	r3, r4, #20
 800a4e8:	f019 091f 	ands.w	r9, r9, #31
 800a4ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4f4:	d02b      	beq.n	800a54e <__lshift+0xbe>
 800a4f6:	f1c9 0e20 	rsb	lr, r9, #32
 800a4fa:	468a      	mov	sl, r1
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	6818      	ldr	r0, [r3, #0]
 800a500:	fa00 f009 	lsl.w	r0, r0, r9
 800a504:	4310      	orrs	r0, r2
 800a506:	f84a 0b04 	str.w	r0, [sl], #4
 800a50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50e:	459c      	cmp	ip, r3
 800a510:	fa22 f20e 	lsr.w	r2, r2, lr
 800a514:	d8f3      	bhi.n	800a4fe <__lshift+0x6e>
 800a516:	ebac 0304 	sub.w	r3, ip, r4
 800a51a:	3b15      	subs	r3, #21
 800a51c:	f023 0303 	bic.w	r3, r3, #3
 800a520:	3304      	adds	r3, #4
 800a522:	f104 0015 	add.w	r0, r4, #21
 800a526:	4560      	cmp	r0, ip
 800a528:	bf88      	it	hi
 800a52a:	2304      	movhi	r3, #4
 800a52c:	50ca      	str	r2, [r1, r3]
 800a52e:	b10a      	cbz	r2, 800a534 <__lshift+0xa4>
 800a530:	f108 0602 	add.w	r6, r8, #2
 800a534:	3e01      	subs	r6, #1
 800a536:	4638      	mov	r0, r7
 800a538:	612e      	str	r6, [r5, #16]
 800a53a:	4621      	mov	r1, r4
 800a53c:	f7ff fde2 	bl	800a104 <_Bfree>
 800a540:	4628      	mov	r0, r5
 800a542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a546:	f842 0f04 	str.w	r0, [r2, #4]!
 800a54a:	3301      	adds	r3, #1
 800a54c:	e7c5      	b.n	800a4da <__lshift+0x4a>
 800a54e:	3904      	subs	r1, #4
 800a550:	f853 2b04 	ldr.w	r2, [r3], #4
 800a554:	f841 2f04 	str.w	r2, [r1, #4]!
 800a558:	459c      	cmp	ip, r3
 800a55a:	d8f9      	bhi.n	800a550 <__lshift+0xc0>
 800a55c:	e7ea      	b.n	800a534 <__lshift+0xa4>
 800a55e:	bf00      	nop
 800a560:	0800b1b9 	.word	0x0800b1b9
 800a564:	0800b1ca 	.word	0x0800b1ca

0800a568 <__mcmp>:
 800a568:	690a      	ldr	r2, [r1, #16]
 800a56a:	4603      	mov	r3, r0
 800a56c:	6900      	ldr	r0, [r0, #16]
 800a56e:	1a80      	subs	r0, r0, r2
 800a570:	b530      	push	{r4, r5, lr}
 800a572:	d10e      	bne.n	800a592 <__mcmp+0x2a>
 800a574:	3314      	adds	r3, #20
 800a576:	3114      	adds	r1, #20
 800a578:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a57c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a588:	4295      	cmp	r5, r2
 800a58a:	d003      	beq.n	800a594 <__mcmp+0x2c>
 800a58c:	d205      	bcs.n	800a59a <__mcmp+0x32>
 800a58e:	f04f 30ff 	mov.w	r0, #4294967295
 800a592:	bd30      	pop	{r4, r5, pc}
 800a594:	42a3      	cmp	r3, r4
 800a596:	d3f3      	bcc.n	800a580 <__mcmp+0x18>
 800a598:	e7fb      	b.n	800a592 <__mcmp+0x2a>
 800a59a:	2001      	movs	r0, #1
 800a59c:	e7f9      	b.n	800a592 <__mcmp+0x2a>
	...

0800a5a0 <__mdiff>:
 800a5a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	4689      	mov	r9, r1
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4648      	mov	r0, r9
 800a5ac:	4614      	mov	r4, r2
 800a5ae:	f7ff ffdb 	bl	800a568 <__mcmp>
 800a5b2:	1e05      	subs	r5, r0, #0
 800a5b4:	d112      	bne.n	800a5dc <__mdiff+0x3c>
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f7ff fd63 	bl	800a084 <_Balloc>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	b928      	cbnz	r0, 800a5ce <__mdiff+0x2e>
 800a5c2:	4b3f      	ldr	r3, [pc, #252]	@ (800a6c0 <__mdiff+0x120>)
 800a5c4:	f240 2137 	movw	r1, #567	@ 0x237
 800a5c8:	483e      	ldr	r0, [pc, #248]	@ (800a6c4 <__mdiff+0x124>)
 800a5ca:	f000 fb55 	bl	800ac78 <__assert_func>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	b003      	add	sp, #12
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5dc:	bfbc      	itt	lt
 800a5de:	464b      	movlt	r3, r9
 800a5e0:	46a1      	movlt	r9, r4
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5e8:	bfba      	itte	lt
 800a5ea:	461c      	movlt	r4, r3
 800a5ec:	2501      	movlt	r5, #1
 800a5ee:	2500      	movge	r5, #0
 800a5f0:	f7ff fd48 	bl	800a084 <_Balloc>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	b918      	cbnz	r0, 800a600 <__mdiff+0x60>
 800a5f8:	4b31      	ldr	r3, [pc, #196]	@ (800a6c0 <__mdiff+0x120>)
 800a5fa:	f240 2145 	movw	r1, #581	@ 0x245
 800a5fe:	e7e3      	b.n	800a5c8 <__mdiff+0x28>
 800a600:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a604:	6926      	ldr	r6, [r4, #16]
 800a606:	60c5      	str	r5, [r0, #12]
 800a608:	f109 0310 	add.w	r3, r9, #16
 800a60c:	f109 0514 	add.w	r5, r9, #20
 800a610:	f104 0e14 	add.w	lr, r4, #20
 800a614:	f100 0b14 	add.w	fp, r0, #20
 800a618:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a61c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	46d9      	mov	r9, fp
 800a624:	f04f 0c00 	mov.w	ip, #0
 800a628:	9b01      	ldr	r3, [sp, #4]
 800a62a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a62e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	fa1f f38a 	uxth.w	r3, sl
 800a638:	4619      	mov	r1, r3
 800a63a:	b283      	uxth	r3, r0
 800a63c:	1acb      	subs	r3, r1, r3
 800a63e:	0c00      	lsrs	r0, r0, #16
 800a640:	4463      	add	r3, ip
 800a642:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a646:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a650:	4576      	cmp	r6, lr
 800a652:	f849 3b04 	str.w	r3, [r9], #4
 800a656:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a65a:	d8e5      	bhi.n	800a628 <__mdiff+0x88>
 800a65c:	1b33      	subs	r3, r6, r4
 800a65e:	3b15      	subs	r3, #21
 800a660:	f023 0303 	bic.w	r3, r3, #3
 800a664:	3415      	adds	r4, #21
 800a666:	3304      	adds	r3, #4
 800a668:	42a6      	cmp	r6, r4
 800a66a:	bf38      	it	cc
 800a66c:	2304      	movcc	r3, #4
 800a66e:	441d      	add	r5, r3
 800a670:	445b      	add	r3, fp
 800a672:	461e      	mov	r6, r3
 800a674:	462c      	mov	r4, r5
 800a676:	4544      	cmp	r4, r8
 800a678:	d30e      	bcc.n	800a698 <__mdiff+0xf8>
 800a67a:	f108 0103 	add.w	r1, r8, #3
 800a67e:	1b49      	subs	r1, r1, r5
 800a680:	f021 0103 	bic.w	r1, r1, #3
 800a684:	3d03      	subs	r5, #3
 800a686:	45a8      	cmp	r8, r5
 800a688:	bf38      	it	cc
 800a68a:	2100      	movcc	r1, #0
 800a68c:	440b      	add	r3, r1
 800a68e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a692:	b191      	cbz	r1, 800a6ba <__mdiff+0x11a>
 800a694:	6117      	str	r7, [r2, #16]
 800a696:	e79d      	b.n	800a5d4 <__mdiff+0x34>
 800a698:	f854 1b04 	ldr.w	r1, [r4], #4
 800a69c:	46e6      	mov	lr, ip
 800a69e:	0c08      	lsrs	r0, r1, #16
 800a6a0:	fa1c fc81 	uxtah	ip, ip, r1
 800a6a4:	4471      	add	r1, lr
 800a6a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6aa:	b289      	uxth	r1, r1
 800a6ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6b0:	f846 1b04 	str.w	r1, [r6], #4
 800a6b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6b8:	e7dd      	b.n	800a676 <__mdiff+0xd6>
 800a6ba:	3f01      	subs	r7, #1
 800a6bc:	e7e7      	b.n	800a68e <__mdiff+0xee>
 800a6be:	bf00      	nop
 800a6c0:	0800b1b9 	.word	0x0800b1b9
 800a6c4:	0800b1ca 	.word	0x0800b1ca

0800a6c8 <__d2b>:
 800a6c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6cc:	460f      	mov	r7, r1
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	ec59 8b10 	vmov	r8, r9, d0
 800a6d4:	4616      	mov	r6, r2
 800a6d6:	f7ff fcd5 	bl	800a084 <_Balloc>
 800a6da:	4604      	mov	r4, r0
 800a6dc:	b930      	cbnz	r0, 800a6ec <__d2b+0x24>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	4b23      	ldr	r3, [pc, #140]	@ (800a770 <__d2b+0xa8>)
 800a6e2:	4824      	ldr	r0, [pc, #144]	@ (800a774 <__d2b+0xac>)
 800a6e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a6e8:	f000 fac6 	bl	800ac78 <__assert_func>
 800a6ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a6f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6f4:	b10d      	cbz	r5, 800a6fa <__d2b+0x32>
 800a6f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	f1b8 0300 	subs.w	r3, r8, #0
 800a700:	d023      	beq.n	800a74a <__d2b+0x82>
 800a702:	4668      	mov	r0, sp
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	f7ff fd84 	bl	800a212 <__lo0bits>
 800a70a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a70e:	b1d0      	cbz	r0, 800a746 <__d2b+0x7e>
 800a710:	f1c0 0320 	rsb	r3, r0, #32
 800a714:	fa02 f303 	lsl.w	r3, r2, r3
 800a718:	430b      	orrs	r3, r1
 800a71a:	40c2      	lsrs	r2, r0
 800a71c:	6163      	str	r3, [r4, #20]
 800a71e:	9201      	str	r2, [sp, #4]
 800a720:	9b01      	ldr	r3, [sp, #4]
 800a722:	61a3      	str	r3, [r4, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	bf0c      	ite	eq
 800a728:	2201      	moveq	r2, #1
 800a72a:	2202      	movne	r2, #2
 800a72c:	6122      	str	r2, [r4, #16]
 800a72e:	b1a5      	cbz	r5, 800a75a <__d2b+0x92>
 800a730:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a734:	4405      	add	r5, r0
 800a736:	603d      	str	r5, [r7, #0]
 800a738:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a73c:	6030      	str	r0, [r6, #0]
 800a73e:	4620      	mov	r0, r4
 800a740:	b003      	add	sp, #12
 800a742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a746:	6161      	str	r1, [r4, #20]
 800a748:	e7ea      	b.n	800a720 <__d2b+0x58>
 800a74a:	a801      	add	r0, sp, #4
 800a74c:	f7ff fd61 	bl	800a212 <__lo0bits>
 800a750:	9b01      	ldr	r3, [sp, #4]
 800a752:	6163      	str	r3, [r4, #20]
 800a754:	3020      	adds	r0, #32
 800a756:	2201      	movs	r2, #1
 800a758:	e7e8      	b.n	800a72c <__d2b+0x64>
 800a75a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a75e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a762:	6038      	str	r0, [r7, #0]
 800a764:	6918      	ldr	r0, [r3, #16]
 800a766:	f7ff fd35 	bl	800a1d4 <__hi0bits>
 800a76a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a76e:	e7e5      	b.n	800a73c <__d2b+0x74>
 800a770:	0800b1b9 	.word	0x0800b1b9
 800a774:	0800b1ca 	.word	0x0800b1ca

0800a778 <__sfputc_r>:
 800a778:	6893      	ldr	r3, [r2, #8]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	b410      	push	{r4}
 800a780:	6093      	str	r3, [r2, #8]
 800a782:	da08      	bge.n	800a796 <__sfputc_r+0x1e>
 800a784:	6994      	ldr	r4, [r2, #24]
 800a786:	42a3      	cmp	r3, r4
 800a788:	db01      	blt.n	800a78e <__sfputc_r+0x16>
 800a78a:	290a      	cmp	r1, #10
 800a78c:	d103      	bne.n	800a796 <__sfputc_r+0x1e>
 800a78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a792:	f7fe bcb0 	b.w	80090f6 <__swbuf_r>
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	1c58      	adds	r0, r3, #1
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	7019      	strb	r1, [r3, #0]
 800a79e:	4608      	mov	r0, r1
 800a7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <__sfputs_r>:
 800a7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	18d5      	adds	r5, r2, r3
 800a7b0:	42ac      	cmp	r4, r5
 800a7b2:	d101      	bne.n	800a7b8 <__sfputs_r+0x12>
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e007      	b.n	800a7c8 <__sfputs_r+0x22>
 800a7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7bc:	463a      	mov	r2, r7
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7ff ffda 	bl	800a778 <__sfputc_r>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d1f3      	bne.n	800a7b0 <__sfputs_r+0xa>
 800a7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7cc <_vfiprintf_r>:
 800a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	b09d      	sub	sp, #116	@ 0x74
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	4698      	mov	r8, r3
 800a7d8:	4606      	mov	r6, r0
 800a7da:	b118      	cbz	r0, 800a7e4 <_vfiprintf_r+0x18>
 800a7dc:	6a03      	ldr	r3, [r0, #32]
 800a7de:	b90b      	cbnz	r3, 800a7e4 <_vfiprintf_r+0x18>
 800a7e0:	f7fe fba0 	bl	8008f24 <__sinit>
 800a7e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7e6:	07d9      	lsls	r1, r3, #31
 800a7e8:	d405      	bmi.n	800a7f6 <_vfiprintf_r+0x2a>
 800a7ea:	89ab      	ldrh	r3, [r5, #12]
 800a7ec:	059a      	lsls	r2, r3, #22
 800a7ee:	d402      	bmi.n	800a7f6 <_vfiprintf_r+0x2a>
 800a7f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7f2:	f7fe fda2 	bl	800933a <__retarget_lock_acquire_recursive>
 800a7f6:	89ab      	ldrh	r3, [r5, #12]
 800a7f8:	071b      	lsls	r3, r3, #28
 800a7fa:	d501      	bpl.n	800a800 <_vfiprintf_r+0x34>
 800a7fc:	692b      	ldr	r3, [r5, #16]
 800a7fe:	b99b      	cbnz	r3, 800a828 <_vfiprintf_r+0x5c>
 800a800:	4629      	mov	r1, r5
 800a802:	4630      	mov	r0, r6
 800a804:	f7fe fcb6 	bl	8009174 <__swsetup_r>
 800a808:	b170      	cbz	r0, 800a828 <_vfiprintf_r+0x5c>
 800a80a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a80c:	07dc      	lsls	r4, r3, #31
 800a80e:	d504      	bpl.n	800a81a <_vfiprintf_r+0x4e>
 800a810:	f04f 30ff 	mov.w	r0, #4294967295
 800a814:	b01d      	add	sp, #116	@ 0x74
 800a816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81a:	89ab      	ldrh	r3, [r5, #12]
 800a81c:	0598      	lsls	r0, r3, #22
 800a81e:	d4f7      	bmi.n	800a810 <_vfiprintf_r+0x44>
 800a820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a822:	f7fe fd8b 	bl	800933c <__retarget_lock_release_recursive>
 800a826:	e7f3      	b.n	800a810 <_vfiprintf_r+0x44>
 800a828:	2300      	movs	r3, #0
 800a82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a82c:	2320      	movs	r3, #32
 800a82e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a832:	f8cd 800c 	str.w	r8, [sp, #12]
 800a836:	2330      	movs	r3, #48	@ 0x30
 800a838:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a9e8 <_vfiprintf_r+0x21c>
 800a83c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a840:	f04f 0901 	mov.w	r9, #1
 800a844:	4623      	mov	r3, r4
 800a846:	469a      	mov	sl, r3
 800a848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a84c:	b10a      	cbz	r2, 800a852 <_vfiprintf_r+0x86>
 800a84e:	2a25      	cmp	r2, #37	@ 0x25
 800a850:	d1f9      	bne.n	800a846 <_vfiprintf_r+0x7a>
 800a852:	ebba 0b04 	subs.w	fp, sl, r4
 800a856:	d00b      	beq.n	800a870 <_vfiprintf_r+0xa4>
 800a858:	465b      	mov	r3, fp
 800a85a:	4622      	mov	r2, r4
 800a85c:	4629      	mov	r1, r5
 800a85e:	4630      	mov	r0, r6
 800a860:	f7ff ffa1 	bl	800a7a6 <__sfputs_r>
 800a864:	3001      	adds	r0, #1
 800a866:	f000 80a7 	beq.w	800a9b8 <_vfiprintf_r+0x1ec>
 800a86a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a86c:	445a      	add	r2, fp
 800a86e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a870:	f89a 3000 	ldrb.w	r3, [sl]
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 809f 	beq.w	800a9b8 <_vfiprintf_r+0x1ec>
 800a87a:	2300      	movs	r3, #0
 800a87c:	f04f 32ff 	mov.w	r2, #4294967295
 800a880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a884:	f10a 0a01 	add.w	sl, sl, #1
 800a888:	9304      	str	r3, [sp, #16]
 800a88a:	9307      	str	r3, [sp, #28]
 800a88c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a890:	931a      	str	r3, [sp, #104]	@ 0x68
 800a892:	4654      	mov	r4, sl
 800a894:	2205      	movs	r2, #5
 800a896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a89a:	4853      	ldr	r0, [pc, #332]	@ (800a9e8 <_vfiprintf_r+0x21c>)
 800a89c:	f7f5 fcc0 	bl	8000220 <memchr>
 800a8a0:	9a04      	ldr	r2, [sp, #16]
 800a8a2:	b9d8      	cbnz	r0, 800a8dc <_vfiprintf_r+0x110>
 800a8a4:	06d1      	lsls	r1, r2, #27
 800a8a6:	bf44      	itt	mi
 800a8a8:	2320      	movmi	r3, #32
 800a8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8ae:	0713      	lsls	r3, r2, #28
 800a8b0:	bf44      	itt	mi
 800a8b2:	232b      	movmi	r3, #43	@ 0x2b
 800a8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8be:	d015      	beq.n	800a8ec <_vfiprintf_r+0x120>
 800a8c0:	9a07      	ldr	r2, [sp, #28]
 800a8c2:	4654      	mov	r4, sl
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	f04f 0c0a 	mov.w	ip, #10
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8d0:	3b30      	subs	r3, #48	@ 0x30
 800a8d2:	2b09      	cmp	r3, #9
 800a8d4:	d94b      	bls.n	800a96e <_vfiprintf_r+0x1a2>
 800a8d6:	b1b0      	cbz	r0, 800a906 <_vfiprintf_r+0x13a>
 800a8d8:	9207      	str	r2, [sp, #28]
 800a8da:	e014      	b.n	800a906 <_vfiprintf_r+0x13a>
 800a8dc:	eba0 0308 	sub.w	r3, r0, r8
 800a8e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	46a2      	mov	sl, r4
 800a8ea:	e7d2      	b.n	800a892 <_vfiprintf_r+0xc6>
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	1d19      	adds	r1, r3, #4
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	9103      	str	r1, [sp, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bfbb      	ittet	lt
 800a8f8:	425b      	neglt	r3, r3
 800a8fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fe:	9307      	strge	r3, [sp, #28]
 800a900:	9307      	strlt	r3, [sp, #28]
 800a902:	bfb8      	it	lt
 800a904:	9204      	strlt	r2, [sp, #16]
 800a906:	7823      	ldrb	r3, [r4, #0]
 800a908:	2b2e      	cmp	r3, #46	@ 0x2e
 800a90a:	d10a      	bne.n	800a922 <_vfiprintf_r+0x156>
 800a90c:	7863      	ldrb	r3, [r4, #1]
 800a90e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a910:	d132      	bne.n	800a978 <_vfiprintf_r+0x1ac>
 800a912:	9b03      	ldr	r3, [sp, #12]
 800a914:	1d1a      	adds	r2, r3, #4
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	9203      	str	r2, [sp, #12]
 800a91a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a91e:	3402      	adds	r4, #2
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a9f8 <_vfiprintf_r+0x22c>
 800a926:	7821      	ldrb	r1, [r4, #0]
 800a928:	2203      	movs	r2, #3
 800a92a:	4650      	mov	r0, sl
 800a92c:	f7f5 fc78 	bl	8000220 <memchr>
 800a930:	b138      	cbz	r0, 800a942 <_vfiprintf_r+0x176>
 800a932:	9b04      	ldr	r3, [sp, #16]
 800a934:	eba0 000a 	sub.w	r0, r0, sl
 800a938:	2240      	movs	r2, #64	@ 0x40
 800a93a:	4082      	lsls	r2, r0
 800a93c:	4313      	orrs	r3, r2
 800a93e:	3401      	adds	r4, #1
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a946:	4829      	ldr	r0, [pc, #164]	@ (800a9ec <_vfiprintf_r+0x220>)
 800a948:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a94c:	2206      	movs	r2, #6
 800a94e:	f7f5 fc67 	bl	8000220 <memchr>
 800a952:	2800      	cmp	r0, #0
 800a954:	d03f      	beq.n	800a9d6 <_vfiprintf_r+0x20a>
 800a956:	4b26      	ldr	r3, [pc, #152]	@ (800a9f0 <_vfiprintf_r+0x224>)
 800a958:	bb1b      	cbnz	r3, 800a9a2 <_vfiprintf_r+0x1d6>
 800a95a:	9b03      	ldr	r3, [sp, #12]
 800a95c:	3307      	adds	r3, #7
 800a95e:	f023 0307 	bic.w	r3, r3, #7
 800a962:	3308      	adds	r3, #8
 800a964:	9303      	str	r3, [sp, #12]
 800a966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a968:	443b      	add	r3, r7
 800a96a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a96c:	e76a      	b.n	800a844 <_vfiprintf_r+0x78>
 800a96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a972:	460c      	mov	r4, r1
 800a974:	2001      	movs	r0, #1
 800a976:	e7a8      	b.n	800a8ca <_vfiprintf_r+0xfe>
 800a978:	2300      	movs	r3, #0
 800a97a:	3401      	adds	r4, #1
 800a97c:	9305      	str	r3, [sp, #20]
 800a97e:	4619      	mov	r1, r3
 800a980:	f04f 0c0a 	mov.w	ip, #10
 800a984:	4620      	mov	r0, r4
 800a986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a98a:	3a30      	subs	r2, #48	@ 0x30
 800a98c:	2a09      	cmp	r2, #9
 800a98e:	d903      	bls.n	800a998 <_vfiprintf_r+0x1cc>
 800a990:	2b00      	cmp	r3, #0
 800a992:	d0c6      	beq.n	800a922 <_vfiprintf_r+0x156>
 800a994:	9105      	str	r1, [sp, #20]
 800a996:	e7c4      	b.n	800a922 <_vfiprintf_r+0x156>
 800a998:	fb0c 2101 	mla	r1, ip, r1, r2
 800a99c:	4604      	mov	r4, r0
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e7f0      	b.n	800a984 <_vfiprintf_r+0x1b8>
 800a9a2:	ab03      	add	r3, sp, #12
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	462a      	mov	r2, r5
 800a9a8:	4b12      	ldr	r3, [pc, #72]	@ (800a9f4 <_vfiprintf_r+0x228>)
 800a9aa:	a904      	add	r1, sp, #16
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f7fd fe77 	bl	80086a0 <_printf_float>
 800a9b2:	4607      	mov	r7, r0
 800a9b4:	1c78      	adds	r0, r7, #1
 800a9b6:	d1d6      	bne.n	800a966 <_vfiprintf_r+0x19a>
 800a9b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ba:	07d9      	lsls	r1, r3, #31
 800a9bc:	d405      	bmi.n	800a9ca <_vfiprintf_r+0x1fe>
 800a9be:	89ab      	ldrh	r3, [r5, #12]
 800a9c0:	059a      	lsls	r2, r3, #22
 800a9c2:	d402      	bmi.n	800a9ca <_vfiprintf_r+0x1fe>
 800a9c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9c6:	f7fe fcb9 	bl	800933c <__retarget_lock_release_recursive>
 800a9ca:	89ab      	ldrh	r3, [r5, #12]
 800a9cc:	065b      	lsls	r3, r3, #25
 800a9ce:	f53f af1f 	bmi.w	800a810 <_vfiprintf_r+0x44>
 800a9d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9d4:	e71e      	b.n	800a814 <_vfiprintf_r+0x48>
 800a9d6:	ab03      	add	r3, sp, #12
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	462a      	mov	r2, r5
 800a9dc:	4b05      	ldr	r3, [pc, #20]	@ (800a9f4 <_vfiprintf_r+0x228>)
 800a9de:	a904      	add	r1, sp, #16
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f7fe f8f5 	bl	8008bd0 <_printf_i>
 800a9e6:	e7e4      	b.n	800a9b2 <_vfiprintf_r+0x1e6>
 800a9e8:	0800b223 	.word	0x0800b223
 800a9ec:	0800b22d 	.word	0x0800b22d
 800a9f0:	080086a1 	.word	0x080086a1
 800a9f4:	0800a7a7 	.word	0x0800a7a7
 800a9f8:	0800b229 	.word	0x0800b229

0800a9fc <__sflush_r>:
 800a9fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa04:	0716      	lsls	r6, r2, #28
 800aa06:	4605      	mov	r5, r0
 800aa08:	460c      	mov	r4, r1
 800aa0a:	d454      	bmi.n	800aab6 <__sflush_r+0xba>
 800aa0c:	684b      	ldr	r3, [r1, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	dc02      	bgt.n	800aa18 <__sflush_r+0x1c>
 800aa12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dd48      	ble.n	800aaaa <__sflush_r+0xae>
 800aa18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa1a:	2e00      	cmp	r6, #0
 800aa1c:	d045      	beq.n	800aaaa <__sflush_r+0xae>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa24:	682f      	ldr	r7, [r5, #0]
 800aa26:	6a21      	ldr	r1, [r4, #32]
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	d030      	beq.n	800aa8e <__sflush_r+0x92>
 800aa2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	0759      	lsls	r1, r3, #29
 800aa32:	d505      	bpl.n	800aa40 <__sflush_r+0x44>
 800aa34:	6863      	ldr	r3, [r4, #4]
 800aa36:	1ad2      	subs	r2, r2, r3
 800aa38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa3a:	b10b      	cbz	r3, 800aa40 <__sflush_r+0x44>
 800aa3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	2300      	movs	r3, #0
 800aa42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa44:	6a21      	ldr	r1, [r4, #32]
 800aa46:	4628      	mov	r0, r5
 800aa48:	47b0      	blx	r6
 800aa4a:	1c43      	adds	r3, r0, #1
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	d106      	bne.n	800aa5e <__sflush_r+0x62>
 800aa50:	6829      	ldr	r1, [r5, #0]
 800aa52:	291d      	cmp	r1, #29
 800aa54:	d82b      	bhi.n	800aaae <__sflush_r+0xb2>
 800aa56:	4a2a      	ldr	r2, [pc, #168]	@ (800ab00 <__sflush_r+0x104>)
 800aa58:	40ca      	lsrs	r2, r1
 800aa5a:	07d6      	lsls	r6, r2, #31
 800aa5c:	d527      	bpl.n	800aaae <__sflush_r+0xb2>
 800aa5e:	2200      	movs	r2, #0
 800aa60:	6062      	str	r2, [r4, #4]
 800aa62:	04d9      	lsls	r1, r3, #19
 800aa64:	6922      	ldr	r2, [r4, #16]
 800aa66:	6022      	str	r2, [r4, #0]
 800aa68:	d504      	bpl.n	800aa74 <__sflush_r+0x78>
 800aa6a:	1c42      	adds	r2, r0, #1
 800aa6c:	d101      	bne.n	800aa72 <__sflush_r+0x76>
 800aa6e:	682b      	ldr	r3, [r5, #0]
 800aa70:	b903      	cbnz	r3, 800aa74 <__sflush_r+0x78>
 800aa72:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa76:	602f      	str	r7, [r5, #0]
 800aa78:	b1b9      	cbz	r1, 800aaaa <__sflush_r+0xae>
 800aa7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa7e:	4299      	cmp	r1, r3
 800aa80:	d002      	beq.n	800aa88 <__sflush_r+0x8c>
 800aa82:	4628      	mov	r0, r5
 800aa84:	f7ff fab4 	bl	8009ff0 <_free_r>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa8c:	e00d      	b.n	800aaaa <__sflush_r+0xae>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b0      	blx	r6
 800aa94:	4602      	mov	r2, r0
 800aa96:	1c50      	adds	r0, r2, #1
 800aa98:	d1c9      	bne.n	800aa2e <__sflush_r+0x32>
 800aa9a:	682b      	ldr	r3, [r5, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d0c6      	beq.n	800aa2e <__sflush_r+0x32>
 800aaa0:	2b1d      	cmp	r3, #29
 800aaa2:	d001      	beq.n	800aaa8 <__sflush_r+0xac>
 800aaa4:	2b16      	cmp	r3, #22
 800aaa6:	d11e      	bne.n	800aae6 <__sflush_r+0xea>
 800aaa8:	602f      	str	r7, [r5, #0]
 800aaaa:	2000      	movs	r0, #0
 800aaac:	e022      	b.n	800aaf4 <__sflush_r+0xf8>
 800aaae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aab2:	b21b      	sxth	r3, r3
 800aab4:	e01b      	b.n	800aaee <__sflush_r+0xf2>
 800aab6:	690f      	ldr	r7, [r1, #16]
 800aab8:	2f00      	cmp	r7, #0
 800aaba:	d0f6      	beq.n	800aaaa <__sflush_r+0xae>
 800aabc:	0793      	lsls	r3, r2, #30
 800aabe:	680e      	ldr	r6, [r1, #0]
 800aac0:	bf08      	it	eq
 800aac2:	694b      	ldreq	r3, [r1, #20]
 800aac4:	600f      	str	r7, [r1, #0]
 800aac6:	bf18      	it	ne
 800aac8:	2300      	movne	r3, #0
 800aaca:	eba6 0807 	sub.w	r8, r6, r7
 800aace:	608b      	str	r3, [r1, #8]
 800aad0:	f1b8 0f00 	cmp.w	r8, #0
 800aad4:	dde9      	ble.n	800aaaa <__sflush_r+0xae>
 800aad6:	6a21      	ldr	r1, [r4, #32]
 800aad8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aada:	4643      	mov	r3, r8
 800aadc:	463a      	mov	r2, r7
 800aade:	4628      	mov	r0, r5
 800aae0:	47b0      	blx	r6
 800aae2:	2800      	cmp	r0, #0
 800aae4:	dc08      	bgt.n	800aaf8 <__sflush_r+0xfc>
 800aae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaee:	81a3      	strh	r3, [r4, #12]
 800aaf0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf8:	4407      	add	r7, r0
 800aafa:	eba8 0800 	sub.w	r8, r8, r0
 800aafe:	e7e7      	b.n	800aad0 <__sflush_r+0xd4>
 800ab00:	20400001 	.word	0x20400001

0800ab04 <_fflush_r>:
 800ab04:	b538      	push	{r3, r4, r5, lr}
 800ab06:	690b      	ldr	r3, [r1, #16]
 800ab08:	4605      	mov	r5, r0
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	b913      	cbnz	r3, 800ab14 <_fflush_r+0x10>
 800ab0e:	2500      	movs	r5, #0
 800ab10:	4628      	mov	r0, r5
 800ab12:	bd38      	pop	{r3, r4, r5, pc}
 800ab14:	b118      	cbz	r0, 800ab1e <_fflush_r+0x1a>
 800ab16:	6a03      	ldr	r3, [r0, #32]
 800ab18:	b90b      	cbnz	r3, 800ab1e <_fflush_r+0x1a>
 800ab1a:	f7fe fa03 	bl	8008f24 <__sinit>
 800ab1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d0f3      	beq.n	800ab0e <_fflush_r+0xa>
 800ab26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab28:	07d0      	lsls	r0, r2, #31
 800ab2a:	d404      	bmi.n	800ab36 <_fflush_r+0x32>
 800ab2c:	0599      	lsls	r1, r3, #22
 800ab2e:	d402      	bmi.n	800ab36 <_fflush_r+0x32>
 800ab30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab32:	f7fe fc02 	bl	800933a <__retarget_lock_acquire_recursive>
 800ab36:	4628      	mov	r0, r5
 800ab38:	4621      	mov	r1, r4
 800ab3a:	f7ff ff5f 	bl	800a9fc <__sflush_r>
 800ab3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab40:	07da      	lsls	r2, r3, #31
 800ab42:	4605      	mov	r5, r0
 800ab44:	d4e4      	bmi.n	800ab10 <_fflush_r+0xc>
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	059b      	lsls	r3, r3, #22
 800ab4a:	d4e1      	bmi.n	800ab10 <_fflush_r+0xc>
 800ab4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab4e:	f7fe fbf5 	bl	800933c <__retarget_lock_release_recursive>
 800ab52:	e7dd      	b.n	800ab10 <_fflush_r+0xc>

0800ab54 <__swhatbuf_r>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	460c      	mov	r4, r1
 800ab58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	b096      	sub	sp, #88	@ 0x58
 800ab60:	4615      	mov	r5, r2
 800ab62:	461e      	mov	r6, r3
 800ab64:	da0d      	bge.n	800ab82 <__swhatbuf_r+0x2e>
 800ab66:	89a3      	ldrh	r3, [r4, #12]
 800ab68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab6c:	f04f 0100 	mov.w	r1, #0
 800ab70:	bf14      	ite	ne
 800ab72:	2340      	movne	r3, #64	@ 0x40
 800ab74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab78:	2000      	movs	r0, #0
 800ab7a:	6031      	str	r1, [r6, #0]
 800ab7c:	602b      	str	r3, [r5, #0]
 800ab7e:	b016      	add	sp, #88	@ 0x58
 800ab80:	bd70      	pop	{r4, r5, r6, pc}
 800ab82:	466a      	mov	r2, sp
 800ab84:	f000 f848 	bl	800ac18 <_fstat_r>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	dbec      	blt.n	800ab66 <__swhatbuf_r+0x12>
 800ab8c:	9901      	ldr	r1, [sp, #4]
 800ab8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab96:	4259      	negs	r1, r3
 800ab98:	4159      	adcs	r1, r3
 800ab9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab9e:	e7eb      	b.n	800ab78 <__swhatbuf_r+0x24>

0800aba0 <__smakebuf_r>:
 800aba0:	898b      	ldrh	r3, [r1, #12]
 800aba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba4:	079d      	lsls	r5, r3, #30
 800aba6:	4606      	mov	r6, r0
 800aba8:	460c      	mov	r4, r1
 800abaa:	d507      	bpl.n	800abbc <__smakebuf_r+0x1c>
 800abac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	6123      	str	r3, [r4, #16]
 800abb4:	2301      	movs	r3, #1
 800abb6:	6163      	str	r3, [r4, #20]
 800abb8:	b003      	add	sp, #12
 800abba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abbc:	ab01      	add	r3, sp, #4
 800abbe:	466a      	mov	r2, sp
 800abc0:	f7ff ffc8 	bl	800ab54 <__swhatbuf_r>
 800abc4:	9f00      	ldr	r7, [sp, #0]
 800abc6:	4605      	mov	r5, r0
 800abc8:	4639      	mov	r1, r7
 800abca:	4630      	mov	r0, r6
 800abcc:	f7fd fbb8 	bl	8008340 <_malloc_r>
 800abd0:	b948      	cbnz	r0, 800abe6 <__smakebuf_r+0x46>
 800abd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abd6:	059a      	lsls	r2, r3, #22
 800abd8:	d4ee      	bmi.n	800abb8 <__smakebuf_r+0x18>
 800abda:	f023 0303 	bic.w	r3, r3, #3
 800abde:	f043 0302 	orr.w	r3, r3, #2
 800abe2:	81a3      	strh	r3, [r4, #12]
 800abe4:	e7e2      	b.n	800abac <__smakebuf_r+0xc>
 800abe6:	89a3      	ldrh	r3, [r4, #12]
 800abe8:	6020      	str	r0, [r4, #0]
 800abea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abee:	81a3      	strh	r3, [r4, #12]
 800abf0:	9b01      	ldr	r3, [sp, #4]
 800abf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800abf6:	b15b      	cbz	r3, 800ac10 <__smakebuf_r+0x70>
 800abf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abfc:	4630      	mov	r0, r6
 800abfe:	f000 f81d 	bl	800ac3c <_isatty_r>
 800ac02:	b128      	cbz	r0, 800ac10 <__smakebuf_r+0x70>
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	f023 0303 	bic.w	r3, r3, #3
 800ac0a:	f043 0301 	orr.w	r3, r3, #1
 800ac0e:	81a3      	strh	r3, [r4, #12]
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	431d      	orrs	r5, r3
 800ac14:	81a5      	strh	r5, [r4, #12]
 800ac16:	e7cf      	b.n	800abb8 <__smakebuf_r+0x18>

0800ac18 <_fstat_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4d07      	ldr	r5, [pc, #28]	@ (800ac38 <_fstat_r+0x20>)
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	4604      	mov	r4, r0
 800ac20:	4608      	mov	r0, r1
 800ac22:	4611      	mov	r1, r2
 800ac24:	602b      	str	r3, [r5, #0]
 800ac26:	f7f7 fa30 	bl	800208a <_fstat>
 800ac2a:	1c43      	adds	r3, r0, #1
 800ac2c:	d102      	bne.n	800ac34 <_fstat_r+0x1c>
 800ac2e:	682b      	ldr	r3, [r5, #0]
 800ac30:	b103      	cbz	r3, 800ac34 <_fstat_r+0x1c>
 800ac32:	6023      	str	r3, [r4, #0]
 800ac34:	bd38      	pop	{r3, r4, r5, pc}
 800ac36:	bf00      	nop
 800ac38:	2000060c 	.word	0x2000060c

0800ac3c <_isatty_r>:
 800ac3c:	b538      	push	{r3, r4, r5, lr}
 800ac3e:	4d06      	ldr	r5, [pc, #24]	@ (800ac58 <_isatty_r+0x1c>)
 800ac40:	2300      	movs	r3, #0
 800ac42:	4604      	mov	r4, r0
 800ac44:	4608      	mov	r0, r1
 800ac46:	602b      	str	r3, [r5, #0]
 800ac48:	f7f7 fa2f 	bl	80020aa <_isatty>
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	d102      	bne.n	800ac56 <_isatty_r+0x1a>
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	b103      	cbz	r3, 800ac56 <_isatty_r+0x1a>
 800ac54:	6023      	str	r3, [r4, #0]
 800ac56:	bd38      	pop	{r3, r4, r5, pc}
 800ac58:	2000060c 	.word	0x2000060c

0800ac5c <memcpy>:
 800ac5c:	440a      	add	r2, r1
 800ac5e:	4291      	cmp	r1, r2
 800ac60:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac64:	d100      	bne.n	800ac68 <memcpy+0xc>
 800ac66:	4770      	bx	lr
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac72:	4291      	cmp	r1, r2
 800ac74:	d1f9      	bne.n	800ac6a <memcpy+0xe>
 800ac76:	bd10      	pop	{r4, pc}

0800ac78 <__assert_func>:
 800ac78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac7a:	4614      	mov	r4, r2
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	4b09      	ldr	r3, [pc, #36]	@ (800aca4 <__assert_func+0x2c>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4605      	mov	r5, r0
 800ac84:	68d8      	ldr	r0, [r3, #12]
 800ac86:	b14c      	cbz	r4, 800ac9c <__assert_func+0x24>
 800ac88:	4b07      	ldr	r3, [pc, #28]	@ (800aca8 <__assert_func+0x30>)
 800ac8a:	9100      	str	r1, [sp, #0]
 800ac8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac90:	4906      	ldr	r1, [pc, #24]	@ (800acac <__assert_func+0x34>)
 800ac92:	462b      	mov	r3, r5
 800ac94:	f000 f842 	bl	800ad1c <fiprintf>
 800ac98:	f000 f852 	bl	800ad40 <abort>
 800ac9c:	4b04      	ldr	r3, [pc, #16]	@ (800acb0 <__assert_func+0x38>)
 800ac9e:	461c      	mov	r4, r3
 800aca0:	e7f3      	b.n	800ac8a <__assert_func+0x12>
 800aca2:	bf00      	nop
 800aca4:	20000018 	.word	0x20000018
 800aca8:	0800b23e 	.word	0x0800b23e
 800acac:	0800b24b 	.word	0x0800b24b
 800acb0:	0800b279 	.word	0x0800b279

0800acb4 <_calloc_r>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	fba1 5402 	umull	r5, r4, r1, r2
 800acba:	b934      	cbnz	r4, 800acca <_calloc_r+0x16>
 800acbc:	4629      	mov	r1, r5
 800acbe:	f7fd fb3f 	bl	8008340 <_malloc_r>
 800acc2:	4606      	mov	r6, r0
 800acc4:	b928      	cbnz	r0, 800acd2 <_calloc_r+0x1e>
 800acc6:	4630      	mov	r0, r6
 800acc8:	bd70      	pop	{r4, r5, r6, pc}
 800acca:	220c      	movs	r2, #12
 800accc:	6002      	str	r2, [r0, #0]
 800acce:	2600      	movs	r6, #0
 800acd0:	e7f9      	b.n	800acc6 <_calloc_r+0x12>
 800acd2:	462a      	mov	r2, r5
 800acd4:	4621      	mov	r1, r4
 800acd6:	f7fe faa3 	bl	8009220 <memset>
 800acda:	e7f4      	b.n	800acc6 <_calloc_r+0x12>

0800acdc <__ascii_mbtowc>:
 800acdc:	b082      	sub	sp, #8
 800acde:	b901      	cbnz	r1, 800ace2 <__ascii_mbtowc+0x6>
 800ace0:	a901      	add	r1, sp, #4
 800ace2:	b142      	cbz	r2, 800acf6 <__ascii_mbtowc+0x1a>
 800ace4:	b14b      	cbz	r3, 800acfa <__ascii_mbtowc+0x1e>
 800ace6:	7813      	ldrb	r3, [r2, #0]
 800ace8:	600b      	str	r3, [r1, #0]
 800acea:	7812      	ldrb	r2, [r2, #0]
 800acec:	1e10      	subs	r0, r2, #0
 800acee:	bf18      	it	ne
 800acf0:	2001      	movne	r0, #1
 800acf2:	b002      	add	sp, #8
 800acf4:	4770      	bx	lr
 800acf6:	4610      	mov	r0, r2
 800acf8:	e7fb      	b.n	800acf2 <__ascii_mbtowc+0x16>
 800acfa:	f06f 0001 	mvn.w	r0, #1
 800acfe:	e7f8      	b.n	800acf2 <__ascii_mbtowc+0x16>

0800ad00 <__ascii_wctomb>:
 800ad00:	4603      	mov	r3, r0
 800ad02:	4608      	mov	r0, r1
 800ad04:	b141      	cbz	r1, 800ad18 <__ascii_wctomb+0x18>
 800ad06:	2aff      	cmp	r2, #255	@ 0xff
 800ad08:	d904      	bls.n	800ad14 <__ascii_wctomb+0x14>
 800ad0a:	228a      	movs	r2, #138	@ 0x8a
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad12:	4770      	bx	lr
 800ad14:	700a      	strb	r2, [r1, #0]
 800ad16:	2001      	movs	r0, #1
 800ad18:	4770      	bx	lr
	...

0800ad1c <fiprintf>:
 800ad1c:	b40e      	push	{r1, r2, r3}
 800ad1e:	b503      	push	{r0, r1, lr}
 800ad20:	4601      	mov	r1, r0
 800ad22:	ab03      	add	r3, sp, #12
 800ad24:	4805      	ldr	r0, [pc, #20]	@ (800ad3c <fiprintf+0x20>)
 800ad26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad2a:	6800      	ldr	r0, [r0, #0]
 800ad2c:	9301      	str	r3, [sp, #4]
 800ad2e:	f7ff fd4d 	bl	800a7cc <_vfiprintf_r>
 800ad32:	b002      	add	sp, #8
 800ad34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad38:	b003      	add	sp, #12
 800ad3a:	4770      	bx	lr
 800ad3c:	20000018 	.word	0x20000018

0800ad40 <abort>:
 800ad40:	b508      	push	{r3, lr}
 800ad42:	2006      	movs	r0, #6
 800ad44:	f000 f82c 	bl	800ada0 <raise>
 800ad48:	2001      	movs	r0, #1
 800ad4a:	f7f7 f94e 	bl	8001fea <_exit>

0800ad4e <_raise_r>:
 800ad4e:	291f      	cmp	r1, #31
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4605      	mov	r5, r0
 800ad54:	460c      	mov	r4, r1
 800ad56:	d904      	bls.n	800ad62 <_raise_r+0x14>
 800ad58:	2316      	movs	r3, #22
 800ad5a:	6003      	str	r3, [r0, #0]
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	bd38      	pop	{r3, r4, r5, pc}
 800ad62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad64:	b112      	cbz	r2, 800ad6c <_raise_r+0x1e>
 800ad66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad6a:	b94b      	cbnz	r3, 800ad80 <_raise_r+0x32>
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	f000 f831 	bl	800add4 <_getpid_r>
 800ad72:	4622      	mov	r2, r4
 800ad74:	4601      	mov	r1, r0
 800ad76:	4628      	mov	r0, r5
 800ad78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad7c:	f000 b818 	b.w	800adb0 <_kill_r>
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d00a      	beq.n	800ad9a <_raise_r+0x4c>
 800ad84:	1c59      	adds	r1, r3, #1
 800ad86:	d103      	bne.n	800ad90 <_raise_r+0x42>
 800ad88:	2316      	movs	r3, #22
 800ad8a:	6003      	str	r3, [r0, #0]
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	e7e7      	b.n	800ad60 <_raise_r+0x12>
 800ad90:	2100      	movs	r1, #0
 800ad92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad96:	4620      	mov	r0, r4
 800ad98:	4798      	blx	r3
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	e7e0      	b.n	800ad60 <_raise_r+0x12>
	...

0800ada0 <raise>:
 800ada0:	4b02      	ldr	r3, [pc, #8]	@ (800adac <raise+0xc>)
 800ada2:	4601      	mov	r1, r0
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	f7ff bfd2 	b.w	800ad4e <_raise_r>
 800adaa:	bf00      	nop
 800adac:	20000018 	.word	0x20000018

0800adb0 <_kill_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d07      	ldr	r5, [pc, #28]	@ (800add0 <_kill_r+0x20>)
 800adb4:	2300      	movs	r3, #0
 800adb6:	4604      	mov	r4, r0
 800adb8:	4608      	mov	r0, r1
 800adba:	4611      	mov	r1, r2
 800adbc:	602b      	str	r3, [r5, #0]
 800adbe:	f7f7 f904 	bl	8001fca <_kill>
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	d102      	bne.n	800adcc <_kill_r+0x1c>
 800adc6:	682b      	ldr	r3, [r5, #0]
 800adc8:	b103      	cbz	r3, 800adcc <_kill_r+0x1c>
 800adca:	6023      	str	r3, [r4, #0]
 800adcc:	bd38      	pop	{r3, r4, r5, pc}
 800adce:	bf00      	nop
 800add0:	2000060c 	.word	0x2000060c

0800add4 <_getpid_r>:
 800add4:	f7f7 b8f1 	b.w	8001fba <_getpid>

0800add8 <_init>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	bf00      	nop
 800addc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adde:	bc08      	pop	{r3}
 800ade0:	469e      	mov	lr, r3
 800ade2:	4770      	bx	lr

0800ade4 <_fini>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	bf00      	nop
 800ade8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adea:	bc08      	pop	{r3}
 800adec:	469e      	mov	lr, r3
 800adee:	4770      	bx	lr
