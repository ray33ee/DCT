
microDCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a270  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800a450  0800a450  0000b450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a828  0800a828  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a828  0800a828  0000b828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a830  0800a830  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a830  0800a830  0000b830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a834  0800a834  0000b834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a838  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200001d4  0800aa0c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0800aa0c  0000c5fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c033  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003772  00000000  00000000  00028237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  0002b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013a9  00000000  00000000  0002d300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b09e  00000000  00000000  0002e6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f3e5  00000000  00000000  00059747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117e06  00000000  00000000  00078b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007df4  00000000  00000000  00190978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0019876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a438 	.word	0x0800a438

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a438 	.word	0x0800a438

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <executable_init>:
 *      Author: Will
 */

#include "executable.h"

void executable_init(struct Executable_State* executable) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	executable->rom = NULL;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
	executable->rom_length = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <get_length_from_uart>:

void get_length_from_uart(struct Executable_State* executable) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09c      	sub	sp, #112	@ 0x70
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]


	uint8_t buff[100];


	read_uart_into_buffer(buff, 100, '\n');
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	220a      	movs	r2, #10
 8000f52:	2164      	movs	r1, #100	@ 0x64
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 ffa5 	bl	8001ea4 <read_uart_into_buffer>

	uint32_t len = atoi(buff);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f006 fce6 	bl	8007930 <atoi>
 8000f64:	4603      	mov	r3, r0
 8000f66:	66fb      	str	r3, [r7, #108]	@ 0x6c

	//If len == 0 there is an issue

	executable->rom_length = len;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000f6c:	605a      	str	r2, [r3, #4]
}
 8000f6e:	bf00      	nop
 8000f70:	3770      	adds	r7, #112	@ 0x70
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <get_rom_from_uart>:

void get_rom_from_uart(struct Executable_State* executable) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	free(executable->rom);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f006 fce0 	bl	8007948 <free>

	executable->rom = malloc(executable->rom_length);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f006 fcd3 	bl	8007938 <malloc>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]

	//If executable->rom is null, allocation failed

	read_uart_into_buffer(executable->rom, executable->rom_length, '\n');
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	220a      	movs	r2, #10
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f000 ff7d 	bl	8001ea4 <read_uart_into_buffer>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fb8:	b0a4      	sub	sp, #144	@ 0x90
 8000fba:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f001 fd8d 	bl	8002ada <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f90a 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f000 fb88 	bl	80016d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fc8:	f000 fa76 	bl	80014b8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000fcc:	f000 fb38 	bl	8001640 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fd0:	f000 fa1c 	bl	800140c <MX_I2C1_Init>
  MX_ADC2_Init();
 8000fd4:	f000 f94c 	bl	8001270 <MX_ADC2_Init>
  MX_ADC5_Init();
 8000fd8:	f000 f9b2 	bl	8001340 <MX_ADC5_Init>
  MX_RNG_Init();
 8000fdc:	f000 fa56 	bl	800148c <MX_RNG_Init>
  MX_TIM3_Init();
 8000fe0:	f000 fae0 	bl	80015a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //Timer 3 is used in misc_delay_us
  HAL_TIM_Base_Start(&htim3);
 8000fe4:	4871      	ldr	r0, [pc, #452]	@ (80011ac <main+0x1f8>)
 8000fe6:	f004 fb9b 	bl	8005720 <HAL_TIM_Base_Start>

  uint8_t buff[100];

  /* Setup VM */

  const uint32_t call_stack_size = 100;
 8000fea:	2364      	movs	r3, #100	@ 0x64
 8000fec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  const uint32_t operand_stack_size = 100;
 8000ff0:	2364      	movs	r3, #100	@ 0x64
 8000ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c

  uint32_t call_stack[call_stack_size];
 8000ff4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001000:	2200      	movs	r2, #0
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	014b      	lsls	r3, r1, #5
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001018:	6839      	ldr	r1, [r7, #0]
 800101a:	014a      	lsls	r2, r1, #5
 800101c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001020:	2200      	movs	r2, #0
 8001022:	469a      	mov	sl, r3
 8001024:	4693      	mov	fp, r2
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001032:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001036:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800103a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	3307      	adds	r3, #7
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	ebad 0d03 	sub.w	sp, sp, r3
 800104a:	ab02      	add	r3, sp, #8
 800104c:	3303      	adds	r3, #3
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t operand_stack[operand_stack_size];
 8001054:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001056:	3b01      	subs	r3, #1
 8001058:	673b      	str	r3, [r7, #112]	@ 0x70
 800105a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800105c:	2200      	movs	r2, #0
 800105e:	4698      	mov	r8, r3
 8001060:	4691      	mov	r9, r2
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800106e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001072:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001076:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001078:	2200      	movs	r2, #0
 800107a:	461c      	mov	r4, r3
 800107c:	4615      	mov	r5, r2
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	016b      	lsls	r3, r5, #5
 8001088:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800108c:	0162      	lsls	r2, r4, #5
 800108e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	3307      	adds	r3, #7
 8001094:	08db      	lsrs	r3, r3, #3
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	ebad 0d03 	sub.w	sp, sp, r3
 800109c:	ab02      	add	r3, sp, #8
 800109e:	3303      	adds	r3, #3
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  executable_init(&exec_state);
 80010a6:	4842      	ldr	r0, [pc, #264]	@ (80011b0 <main+0x1fc>)
 80010a8:	f7ff ff3c 	bl	8000f24 <executable_init>

  vm_init(&vm_state, call_stack, operand_stack, call_stack_size, operand_stack_size, &exec_state);
 80010ac:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <main+0x1fc>)
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010ba:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80010bc:	483d      	ldr	r0, [pc, #244]	@ (80011b4 <main+0x200>)
 80010be:	f000 ff78 	bl	8001fb2 <vm_init>

  /* Setup RNG */

  rng_global_init(&hrng);
 80010c2:	483d      	ldr	r0, [pc, #244]	@ (80011b8 <main+0x204>)
 80010c4:	f000 fb72 	bl	80017ac <rng_global_init>
  int r1 = soft_i2c_receive(&h2i2c, 0x3c, &who_am_i, 1);

  printf("Soft i2c %i\n", who_am_i);*/


  psu_init(&psu_state, &hadc2, &hadc5, &htim2, &TIM2->CCR1, TIM_CHANNEL_1);
 80010c8:	2300      	movs	r3, #0
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	4b3b      	ldr	r3, [pc, #236]	@ (80011bc <main+0x208>)
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	4b3b      	ldr	r3, [pc, #236]	@ (80011c0 <main+0x20c>)
 80010d2:	4a3c      	ldr	r2, [pc, #240]	@ (80011c4 <main+0x210>)
 80010d4:	493c      	ldr	r1, [pc, #240]	@ (80011c8 <main+0x214>)
 80010d6:	483d      	ldr	r0, [pc, #244]	@ (80011cc <main+0x218>)
 80010d8:	f000 fb40 	bl	800175c <psu_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  read_uart_into_buffer(buff, 100, '\n');
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	220a      	movs	r2, #10
 80010e2:	2164      	movs	r1, #100	@ 0x64
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fedd 	bl	8001ea4 <read_uart_into_buffer>

	  if (buff[0] == '0') {
 80010ea:	7a3b      	ldrb	r3, [r7, #8]
 80010ec:	2b30      	cmp	r3, #48	@ 0x30
 80010ee:	d106      	bne.n	80010fe <main+0x14a>
		  get_length_from_uart(&exec_state);
 80010f0:	482f      	ldr	r0, [pc, #188]	@ (80011b0 <main+0x1fc>)
 80010f2:	f7ff ff27 	bl	8000f44 <get_length_from_uart>

		  get_rom_from_uart(&exec_state);
 80010f6:	482e      	ldr	r0, [pc, #184]	@ (80011b0 <main+0x1fc>)
 80010f8:	f7ff ff3d 	bl	8000f76 <get_rom_from_uart>
 80010fc:	e7ee      	b.n	80010dc <main+0x128>


	  } else if (buff[0] == '1') {
 80010fe:	7a3b      	ldrb	r3, [r7, #8]
 8001100:	2b31      	cmp	r3, #49	@ 0x31
 8001102:	d12b      	bne.n	800115c <main+0x1a8>

		  printf("%i\n", (int)vm_state.pc);
 8001104:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <main+0x200>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4619      	mov	r1, r3
 800110a:	4831      	ldr	r0, [pc, #196]	@ (80011d0 <main+0x21c>)
 800110c:	f007 fa6e 	bl	80085ec <iprintf>
		  printf("%i\n", (int)vm_state.osp);
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <main+0x200>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4619      	mov	r1, r3
 8001116:	482e      	ldr	r0, [pc, #184]	@ (80011d0 <main+0x21c>)
 8001118:	f007 fa68 	bl	80085ec <iprintf>
		  printf("%i\n", (int)vm_state.csp);
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <main+0x200>)
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	4619      	mov	r1, r3
 8001122:	482b      	ldr	r0, [pc, #172]	@ (80011d0 <main+0x21c>)
 8001124:	f007 fa62 	bl	80085ec <iprintf>
		  printf("%i\n", (int)vm_state.exec->rom[vm_state.pc]);
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <main+0x200>)
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <main+0x200>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4825      	ldr	r0, [pc, #148]	@ (80011d0 <main+0x21c>)
 800113a:	f007 fa57 	bl	80085ec <iprintf>
		  printf("%i\n", (int)vm_peek_ops(&vm_state));
 800113e:	481d      	ldr	r0, [pc, #116]	@ (80011b4 <main+0x200>)
 8001140:	f000 ff26 	bl	8001f90 <vm_peek_ops>
 8001144:	4603      	mov	r3, r0
 8001146:	4619      	mov	r1, r3
 8001148:	4821      	ldr	r0, [pc, #132]	@ (80011d0 <main+0x21c>)
 800114a:	f007 fa4f 	bl	80085ec <iprintf>
		  printf("%i\n", (int)vm_state.bp);
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <main+0x200>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	481e      	ldr	r0, [pc, #120]	@ (80011d0 <main+0x21c>)
 8001156:	f007 fa49 	bl	80085ec <iprintf>
 800115a:	e7bf      	b.n	80010dc <main+0x128>

	  } else if (buff[0] == '2') {
 800115c:	7a3b      	ldrb	r3, [r7, #8]
 800115e:	2b32      	cmp	r3, #50	@ 0x32
 8001160:	d1bc      	bne.n	80010dc <main+0x128>
		  uint32_t r = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

		  vm_reset(&vm_state);
 8001168:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <main+0x200>)
 800116a:	f000 ff3f 	bl	8001fec <vm_reset>

		  while (r == 0) {
 800116e:	e004      	b.n	800117a <main+0x1c6>
			  r = vm_execute(&vm_state);
 8001170:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <main+0x200>)
 8001172:	f000 ff53 	bl	800201c <vm_execute>
 8001176:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		  while (r == 0) {
 800117a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f6      	beq.n	8001170 <main+0x1bc>
		  }

		  printf("done\n");
 8001182:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <main+0x220>)
 8001184:	f007 fa9a 	bl	80086bc <puts>

		  printf("%i\n", r);
 8001188:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800118c:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <main+0x21c>)
 800118e:	f007 fa2d 	bl	80085ec <iprintf>

		  if (r == FAILURE) {
 8001192:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001196:	2b02      	cmp	r3, #2
 8001198:	d1a0      	bne.n	80010dc <main+0x128>
			  //If the result was a failure, send the top of the stack as the error code or reason
			  printf("%i\n", vm_peek_ops(&vm_state));
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <main+0x200>)
 800119c:	f000 fef8 	bl	8001f90 <vm_peek_ops>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	480a      	ldr	r0, [pc, #40]	@ (80011d0 <main+0x21c>)
 80011a6:	f007 fa21 	bl	80085ec <iprintf>
	  read_uart_into_buffer(buff, 100, '\n');
 80011aa:	e797      	b.n	80010dc <main+0x128>
 80011ac:	2000037c 	.word	0x2000037c
 80011b0:	2000045c 	.word	0x2000045c
 80011b4:	20000464 	.word	0x20000464
 80011b8:	2000031c 	.word	0x2000031c
 80011bc:	40000034 	.word	0x40000034
 80011c0:	20000330 	.word	0x20000330
 80011c4:	2000025c 	.word	0x2000025c
 80011c8:	200001f0 	.word	0x200001f0
 80011cc:	2000048c 	.word	0x2000048c
 80011d0:	0800a450 	.word	0x0800a450
 80011d4:	0800a454 	.word	0x0800a454

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	@ 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	2238      	movs	r2, #56	@ 0x38
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f007 fb48 	bl	800887c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011fe:	f003 f97d 	bl	80044fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001206:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	2340      	movs	r3, #64	@ 0x40
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001210:	2302      	movs	r3, #2
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001218:	2301      	movs	r3, #1
 800121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800121c:	230c      	movs	r3, #12
 800121e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001224:	2304      	movs	r3, #4
 8001226:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001228:	2302      	movs	r3, #2
 800122a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fa17 	bl	8004664 <HAL_RCC_OscConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800123c:	f000 fa88 	bl	8001750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	230f      	movs	r3, #15
 8001242:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001244:	2303      	movs	r3, #3
 8001246:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2103      	movs	r1, #3
 8001258:	4618      	mov	r0, r3
 800125a:	f003 fd15 	bl	8004c88 <HAL_RCC_ClockConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001264:	f000 fa74 	bl	8001750 <Error_Handler>
  }
}
 8001268:	bf00      	nop
 800126a:	3750      	adds	r7, #80	@ 0x50
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001276:	463b      	mov	r3, r7
 8001278:	2220      	movs	r2, #32
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f007 fafd 	bl	800887c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001282:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <MX_ADC2_Init+0xc0>)
 8001284:	4a2b      	ldr	r2, [pc, #172]	@ (8001334 <MX_ADC2_Init+0xc4>)
 8001286:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001288:	4b29      	ldr	r3, [pc, #164]	@ (8001330 <MX_ADC2_Init+0xc0>)
 800128a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800128e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <MX_ADC2_Init+0xc0>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <MX_ADC2_Init+0xc0>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <MX_ADC2_Init+0xc0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a2:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012aa:	2204      	movs	r2, #4
 80012ac:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012ae:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c8:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012d4:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80012e2:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012ea:	4811      	ldr	r0, [pc, #68]	@ (8001330 <MX_ADC2_Init+0xc0>)
 80012ec:	f001 fe84 	bl	8002ff8 <HAL_ADC_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80012f6:	f000 fa2b 	bl	8001750 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_ADC2_Init+0xc8>)
 80012fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fe:	2306      	movs	r3, #6
 8001300:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <MX_ADC2_Init+0xcc>)
 8001308:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130a:	2304      	movs	r3, #4
 800130c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	@ (8001330 <MX_ADC2_Init+0xc0>)
 8001318:	f002 f82a 	bl	8003370 <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001322:	f000 fa15 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200001f0 	.word	0x200001f0
 8001334:	50000100 	.word	0x50000100
 8001338:	0c900008 	.word	0x0c900008
 800133c:	407f0000 	.word	0x407f0000

08001340 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001346:	463b      	mov	r3, r7
 8001348:	2220      	movs	r2, #32
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f007 fa95 	bl	800887c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001352:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <MX_ADC5_Init+0xc0>)
 8001354:	4a2b      	ldr	r2, [pc, #172]	@ (8001404 <MX_ADC5_Init+0xc4>)
 8001356:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001358:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <MX_ADC5_Init+0xc0>)
 800135a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800135e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <MX_ADC5_Init+0xc0>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001366:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <MX_ADC5_Init+0xc0>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800136c:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <MX_ADC5_Init+0xc0>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001372:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <MX_ADC5_Init+0xc0>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001378:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <MX_ADC5_Init+0xc0>)
 800137a:	2204      	movs	r2, #4
 800137c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800137e:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <MX_ADC5_Init+0xc0>)
 8001380:	2200      	movs	r2, #0
 8001382:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001384:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <MX_ADC5_Init+0xc0>)
 8001386:	2200      	movs	r2, #0
 8001388:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800138a:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <MX_ADC5_Init+0xc0>)
 800138c:	2201      	movs	r2, #1
 800138e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <MX_ADC5_Init+0xc0>)
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001398:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <MX_ADC5_Init+0xc0>)
 800139a:	2200      	movs	r2, #0
 800139c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <MX_ADC5_Init+0xc0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80013a4:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <MX_ADC5_Init+0xc0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <MX_ADC5_Init+0xc0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <MX_ADC5_Init+0xc0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80013ba:	4811      	ldr	r0, [pc, #68]	@ (8001400 <MX_ADC5_Init+0xc0>)
 80013bc:	f001 fe1c 	bl	8002ff8 <HAL_ADC_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80013c6:	f000 f9c3 	bl	8001750 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_ADC5_Init+0xc8>)
 80013cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ce:	2306      	movs	r3, #6
 80013d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013d6:	237f      	movs	r3, #127	@ 0x7f
 80013d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013da:	2304      	movs	r3, #4
 80013dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80013e2:	463b      	mov	r3, r7
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	@ (8001400 <MX_ADC5_Init+0xc0>)
 80013e8:	f001 ffc2 	bl	8003370 <HAL_ADC_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80013f2:	f000 f9ad 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000025c 	.word	0x2000025c
 8001404:	50000600 	.word	0x50000600
 8001408:	04300002 	.word	0x04300002

0800140c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_I2C1_Init+0x74>)
 8001412:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <MX_I2C1_Init+0x78>)
 8001414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B17DB6;
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <MX_I2C1_Init+0x74>)
 8001418:	4a1b      	ldr	r2, [pc, #108]	@ (8001488 <MX_I2C1_Init+0x7c>)
 800141a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001422:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_I2C1_Init+0x74>)
 8001424:	2201      	movs	r2, #1
 8001426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001428:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800142e:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <MX_I2C1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <MX_I2C1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_I2C1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <MX_I2C1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001446:	480e      	ldr	r0, [pc, #56]	@ (8001480 <MX_I2C1_Init+0x74>)
 8001448:	f002 ff26 	bl	8004298 <HAL_I2C_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001452:	f000 f97d 	bl	8001750 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001456:	2100      	movs	r1, #0
 8001458:	4809      	ldr	r0, [pc, #36]	@ (8001480 <MX_I2C1_Init+0x74>)
 800145a:	f002 ffb8 	bl	80043ce <HAL_I2CEx_ConfigAnalogFilter>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001464:	f000 f974 	bl	8001750 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001468:	2100      	movs	r1, #0
 800146a:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_I2C1_Init+0x74>)
 800146c:	f002 fffa 	bl	8004464 <HAL_I2CEx_ConfigDigitalFilter>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001476:	f000 f96b 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200002c8 	.word	0x200002c8
 8001484:	40005400 	.word	0x40005400
 8001488:	20b17db6 	.word	0x20b17db6

0800148c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <MX_RNG_Init+0x24>)
 8001492:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <MX_RNG_Init+0x28>)
 8001494:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_RNG_Init+0x24>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <MX_RNG_Init+0x24>)
 800149e:	f004 f85d 	bl	800555c <HAL_RNG_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80014a8:	f000 f952 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000031c 	.word	0x2000031c
 80014b4:	50060800 	.word	0x50060800

080014b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	@ 0x38
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 80014ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014f2:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 80014fe:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 8001500:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8001504:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800150c:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 800150e:	2280      	movs	r2, #128	@ 0x80
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001512:	4823      	ldr	r0, [pc, #140]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 8001514:	f004 f8ad 	bl	8005672 <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800151e:	f000 f917 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001522:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001528:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152c:	4619      	mov	r1, r3
 800152e:	481c      	ldr	r0, [pc, #112]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 8001530:	f004 fbee 	bl	8005d10 <HAL_TIM_ConfigClockSource>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800153a:	f000 f909 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800153e:	4818      	ldr	r0, [pc, #96]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 8001540:	f004 f95e 	bl	8005800 <HAL_TIM_PWM_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800154a:	f000 f901 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4810      	ldr	r0, [pc, #64]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 800155e:	f005 f98d 	bl	800687c <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001568:	f000 f8f2 	bl	8001750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156c:	2360      	movs	r3, #96	@ 0x60
 800156e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 8001584:	f004 fab0 	bl	8005ae8 <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800158e:	f000 f8df 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001592:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <MX_TIM2_Init+0xe8>)
 8001594:	f000 fae0 	bl	8001b58 <HAL_TIM_MspPostInit>

}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	@ 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000330 	.word	0x20000330

080015a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <MX_TIM3_Init+0x94>)
 80015c4:	4a1d      	ldr	r2, [pc, #116]	@ (800163c <MX_TIM3_Init+0x98>)
 80015c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <MX_TIM3_Init+0x94>)
 80015ca:	225f      	movs	r2, #95	@ 0x5f
 80015cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <MX_TIM3_Init+0x94>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015d4:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <MX_TIM3_Init+0x94>)
 80015d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <MX_TIM3_Init+0x94>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <MX_TIM3_Init+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e8:	4813      	ldr	r0, [pc, #76]	@ (8001638 <MX_TIM3_Init+0x94>)
 80015ea:	f004 f842 	bl	8005672 <HAL_TIM_Base_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015f4:	f000 f8ac 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	4619      	mov	r1, r3
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <MX_TIM3_Init+0x94>)
 8001606:	f004 fb83 	bl	8005d10 <HAL_TIM_ConfigClockSource>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001610:	f000 f89e 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_TIM3_Init+0x94>)
 8001622:	f005 f92b 	bl	800687c <HAL_TIMEx_MasterConfigSynchronization>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800162c:	f000 f890 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000037c 	.word	0x2000037c
 800163c:	40000400 	.word	0x40000400

08001640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001644:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001646:	4a23      	ldr	r2, [pc, #140]	@ (80016d4 <MX_USART2_UART_Init+0x94>)
 8001648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800164a:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001676:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001688:	4811      	ldr	r0, [pc, #68]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800168a:	f005 f98d 	bl	80069a8 <HAL_UART_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001694:	f000 f85c 	bl	8001750 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800169c:	f006 f87e 	bl	800779c <HAL_UARTEx_SetTxFifoThreshold>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016a6:	f000 f853 	bl	8001750 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4808      	ldr	r0, [pc, #32]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 80016ae:	f006 f8b3 	bl	8007818 <HAL_UARTEx_SetRxFifoThreshold>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016b8:	f000 f84a 	bl	8001750 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 80016be:	f006 f834 	bl	800772a <HAL_UARTEx_DisableFifoMode>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016c8:	f000 f842 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200003c8 	.word	0x200003c8
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <MX_GPIO_Init+0x74>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	4a1a      	ldr	r2, [pc, #104]	@ (800174c <MX_GPIO_Init+0x74>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <MX_GPIO_Init+0x74>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <MX_GPIO_Init+0x74>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	4a14      	ldr	r2, [pc, #80]	@ (800174c <MX_GPIO_Init+0x74>)
 80016fc:	f043 0320 	orr.w	r3, r3, #32
 8001700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <MX_GPIO_Init+0x74>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	f003 0320 	and.w	r3, r3, #32
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_GPIO_Init+0x74>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a0e      	ldr	r2, [pc, #56]	@ (800174c <MX_GPIO_Init+0x74>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_GPIO_Init+0x74>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_GPIO_Init+0x74>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4a08      	ldr	r2, [pc, #32]	@ (800174c <MX_GPIO_Init+0x74>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_GPIO_Init+0x74>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <Error_Handler+0x8>

0800175c <psu_init>:
		struct PSU_STATE* psu_handle,
		ADC_HandleTypeDef* _adc_diff,
		ADC_HandleTypeDef* _adc_single,
		TIM_HandleTypeDef* _pwm_timer,
		volatile uint32_t* _ccr,
		uint32_t pwm_channel) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]

	psu_handle->adc_diff = _adc_diff;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	605a      	str	r2, [r3, #4]
	psu_handle->adc_single = _adc_single;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
	psu_handle->pwm_timer = _pwm_timer;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	609a      	str	r2, [r3, #8]

	psu_handle->ccr = _ccr;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	60da      	str	r2, [r3, #12]

	HAL_TIM_PWM_Start(_pwm_timer, pwm_channel);
 8001782:	69f9      	ldr	r1, [r7, #28]
 8001784:	6838      	ldr	r0, [r7, #0]
 8001786:	f004 f89d 	bl	80058c4 <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(_adc_single, ADC_SINGLE_ENDED);
 800178a:	217f      	movs	r1, #127	@ 0x7f
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f002 fabb 	bl	8003d08 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(_adc_diff, ADC_DIFFERENTIAL_ENDED);
 8001792:	4905      	ldr	r1, [pc, #20]	@ (80017a8 <psu_init+0x4c>)
 8001794:	68b8      	ldr	r0, [r7, #8]
 8001796:	f002 fab7 	bl	8003d08 <HAL_ADCEx_Calibration_Start>


	*_ccr = 0;
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	407f0000 	.word	0x407f0000

080017ac <rng_global_init>:
#include "rng.h"

struct RNG_State GLOBAL_RNG_STATE;

/* Initialise the rng state with a seed from the RNG peripheral */
void rng_global_init(RNG_HandleTypeDef* _hrng) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	if (HAL_RNG_GenerateRandomNumber(_hrng, &(GLOBAL_RNG_STATE._state)) != HAL_OK) {
 80017b4:	4907      	ldr	r1, [pc, #28]	@ (80017d4 <rng_global_init+0x28>)
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f003 ff05 	bl	80055c6 <HAL_RNG_GenerateRandomNumber>
		//error
	}

	//Zero is a fixed point so we map it to 1 instead
	if (GLOBAL_RNG_STATE._state == 0) {
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <rng_global_init+0x28>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <rng_global_init+0x1e>
		GLOBAL_RNG_STATE._state = 1;
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <rng_global_init+0x28>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
	}
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200004a0 	.word	0x200004a0

080017d8 <rng_global_next32>:
		GLOBAL_RNG_STATE._state = seed;
	}
}

/* Use xorshift32 to generate the next seed */
uint32_t rng_global_next32() {
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state << 13;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <rng_global_next32+0x44>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <rng_global_next32+0x44>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	035b      	lsls	r3, r3, #13
 80017e6:	4053      	eors	r3, r2
 80017e8:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <rng_global_next32+0x44>)
 80017ea:	6013      	str	r3, [r2, #0]
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state >> 17;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <rng_global_next32+0x44>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <rng_global_next32+0x44>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0c5b      	lsrs	r3, r3, #17
 80017f6:	4053      	eors	r3, r2
 80017f8:	4a08      	ldr	r2, [pc, #32]	@ (800181c <rng_global_next32+0x44>)
 80017fa:	6013      	str	r3, [r2, #0]
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state << 5;
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <rng_global_next32+0x44>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <rng_global_next32+0x44>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	015b      	lsls	r3, r3, #5
 8001806:	4053      	eors	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <rng_global_next32+0x44>)
 800180a:	6013      	str	r3, [r2, #0]
	return GLOBAL_RNG_STATE._state;
 800180c:	4b03      	ldr	r3, [pc, #12]	@ (800181c <rng_global_next32+0x44>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200004a0 	.word	0x200004a0

08001820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <HAL_MspInit+0x44>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182a:	4a0e      	ldr	r2, [pc, #56]	@ (8001864 <HAL_MspInit+0x44>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6613      	str	r3, [r2, #96]	@ 0x60
 8001832:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <HAL_MspInit+0x44>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_MspInit+0x44>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <HAL_MspInit+0x44>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001848:	6593      	str	r3, [r2, #88]	@ 0x58
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_MspInit+0x44>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001856:	f002 fef5 	bl	8004644 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0a0      	sub	sp, #128	@ 0x80
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	2254      	movs	r2, #84	@ 0x54
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f006 fff7 	bl	800887c <memset>
  if(hadc->Instance==ADC2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a3c      	ldr	r2, [pc, #240]	@ (8001984 <HAL_ADC_MspInit+0x11c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d135      	bne.n	8001904 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800189c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800189e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fc09 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80018b4:	f7ff ff4c 	bl	8001750 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018b8:	4b33      	ldr	r3, [pc, #204]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018bc:	4a32      	ldr	r2, [pc, #200]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 80018be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c4:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e8:	23c0      	movs	r3, #192	@ 0xc0
 80018ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ec:	2303      	movs	r3, #3
 80018ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018f8:	4619      	mov	r1, r3
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fe:	f002 fb49 	bl	8003f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001902:	e03a      	b.n	800197a <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC5)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a20      	ldr	r2, [pc, #128]	@ (800198c <HAL_ADC_MspInit+0x124>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d135      	bne.n	800197a <HAL_ADC_MspInit+0x112>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800190e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001912:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001914:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001918:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191a:	f107 0318 	add.w	r3, r7, #24
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fbce 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_ADC_MspInit+0xc6>
      Error_Handler();
 800192a:	f7ff ff11 	bl	8001750 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	4a15      	ldr	r2, [pc, #84]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193a:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	4a0f      	ldr	r2, [pc, #60]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001952:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <HAL_ADC_MspInit+0x120>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800195e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001962:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001964:	2303      	movs	r3, #3
 8001966:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001970:	4619      	mov	r1, r3
 8001972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001976:	f002 fb0d 	bl	8003f94 <HAL_GPIO_Init>
}
 800197a:	bf00      	nop
 800197c:	3780      	adds	r7, #128	@ 0x80
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	50000100 	.word	0x50000100
 8001988:	40021000 	.word	0x40021000
 800198c:	50000600 	.word	0x50000600

08001990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b0a0      	sub	sp, #128	@ 0x80
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a8:	f107 0318 	add.w	r3, r7, #24
 80019ac:	2254      	movs	r2, #84	@ 0x54
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f006 ff63 	bl	800887c <memset>
  if(hi2c->Instance==I2C1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a30      	ldr	r2, [pc, #192]	@ (8001a7c <HAL_I2C_MspInit+0xec>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d159      	bne.n	8001a74 <HAL_I2C_MspInit+0xe4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019c0:	2340      	movs	r3, #64	@ 0x40
 80019c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fb77 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019d8:	f7ff feba 	bl	8001750 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019dc:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_I2C_MspInit+0xf0>)
 80019de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e0:	4a27      	ldr	r2, [pc, #156]	@ (8001a80 <HAL_I2C_MspInit+0xf0>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e8:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <HAL_I2C_MspInit+0xf0>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <HAL_I2C_MspInit+0xf0>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f8:	4a21      	ldr	r2, [pc, #132]	@ (8001a80 <HAL_I2C_MspInit+0xf0>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <HAL_I2C_MspInit+0xf0>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a12:	2312      	movs	r3, #18
 8001a14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a2c:	f002 fab2 	bl	8003f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a34:	2312      	movs	r3, #18
 8001a36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a40:	2304      	movs	r3, #4
 8001a42:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480e      	ldr	r0, [pc, #56]	@ (8001a84 <HAL_I2C_MspInit+0xf4>)
 8001a4c:	f002 faa2 	bl	8003f94 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001a50:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_I2C_MspInit+0xf8>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a0c      	ldr	r2, [pc, #48]	@ (8001a88 <HAL_I2C_MspInit+0xf8>)
 8001a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a5a:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_I2C_MspInit+0xf0>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a60:	4a07      	ldr	r2, [pc, #28]	@ (8001a80 <HAL_I2C_MspInit+0xf0>)
 8001a62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_I2C_MspInit+0xf0>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a74:	bf00      	nop
 8001a76:	3780      	adds	r7, #128	@ 0x80
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000400 	.word	0x48000400
 8001a88:	40010000 	.word	0x40010000

08001a8c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b098      	sub	sp, #96	@ 0x60
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	2254      	movs	r2, #84	@ 0x54
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f006 feed 	bl	800887c <memset>
  if(hrng->Instance==RNG)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a11      	ldr	r2, [pc, #68]	@ (8001aec <HAL_RNG_MspInit+0x60>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001aac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ab0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8001ab2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 faff 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001ac8:	f7ff fe42 	bl	8001750 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <HAL_RNG_MspInit+0x64>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	4a07      	ldr	r2, [pc, #28]	@ (8001af0 <HAL_RNG_MspInit+0x64>)
 8001ad2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ad6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_RNG_MspInit+0x64>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001adc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3760      	adds	r7, #96	@ 0x60
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	50060800 	.word	0x50060800
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b04:	d10c      	bne.n	8001b20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <HAL_TIM_Base_MspInit+0x5c>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <HAL_TIM_Base_MspInit+0x5c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_TIM_Base_MspInit+0x5c>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b1e:	e010      	b.n	8001b42 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <HAL_TIM_Base_MspInit+0x60>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10b      	bne.n	8001b42 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_TIM_Base_MspInit+0x5c>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_TIM_Base_MspInit+0x5c>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_TIM_Base_MspInit+0x5c>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40000400 	.word	0x40000400

08001b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b78:	d11c      	bne.n	8001bb4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <HAL_TIM_MspPostInit+0x64>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <HAL_TIM_MspPostInit+0x64>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <HAL_TIM_MspPostInit+0x64>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b92:	2320      	movs	r3, #32
 8001b94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb0:	f002 f9f0 	bl	8003f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	3720      	adds	r7, #32
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b09e      	sub	sp, #120	@ 0x78
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	2254      	movs	r2, #84	@ 0x54
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f006 fe4b 	bl	800887c <memset>
  if(huart->Instance==USART2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <HAL_UART_MspInit+0xa8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d136      	bne.n	8001c5e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 fa5f 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c08:	f7ff fda2 	bl	8001750 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <HAL_UART_MspInit+0xac>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c10:	4a16      	ldr	r2, [pc, #88]	@ (8001c6c <HAL_UART_MspInit+0xac>)
 8001c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c18:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <HAL_UART_MspInit+0xac>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_UART_MspInit+0xac>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c28:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <HAL_UART_MspInit+0xac>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c30:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <HAL_UART_MspInit+0xac>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c54:	4619      	mov	r1, r3
 8001c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c5a:	f002 f99b 	bl	8003f94 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c5e:	bf00      	nop
 8001c60:	3778      	adds	r7, #120	@ 0x78
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40004400 	.word	0x40004400
 8001c6c:	40021000 	.word	0x40021000

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <NMI_Handler+0x4>

08001c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <HardFault_Handler+0x4>

08001c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <MemManage_Handler+0x4>

08001c88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc6:	f000 ff5b 	bl	8002b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  return 1;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_kill>:

int _kill(int pid, int sig)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ce8:	f006 fe2a 	bl	8008940 <__errno>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2216      	movs	r2, #22
 8001cf0:	601a      	str	r2, [r3, #0]
  return -1;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_exit>:

void _exit (int status)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d06:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffe7 	bl	8001cde <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <_exit+0x12>

08001d14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	e00a      	b.n	8001d3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d26:	f3af 8000 	nop.w
 8001d2a:	4601      	mov	r1, r0
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	60ba      	str	r2, [r7, #8]
 8001d32:	b2ca      	uxtb	r2, r1
 8001d34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	dbf0      	blt.n	8001d26 <_read+0x12>
  }

  return len;
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e009      	b.n	8001d74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	60ba      	str	r2, [r7, #8]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 f889 	bl	8001e80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dbf1      	blt.n	8001d60 <_write+0x12>
  }
  return len;
 8001d7c:	687b      	ldr	r3, [r7, #4]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_close>:

int _close(int file)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dae:	605a      	str	r2, [r3, #4]
  return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_isatty>:

int _isatty(int file)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df8:	4a14      	ldr	r2, [pc, #80]	@ (8001e4c <_sbrk+0x5c>)
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <_sbrk+0x60>)
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e04:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <_sbrk+0x64>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <_sbrk+0x68>)
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d207      	bcs.n	8001e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e20:	f006 fd8e 	bl	8008940 <__errno>
 8001e24:	4603      	mov	r3, r0
 8001e26:	220c      	movs	r2, #12
 8001e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	e009      	b.n	8001e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e30:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <_sbrk+0x64>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	4a05      	ldr	r2, [pc, #20]	@ (8001e54 <_sbrk+0x64>)
 8001e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20020000 	.word	0x20020000
 8001e50:	00000400 	.word	0x00000400
 8001e54:	200004a8 	.word	0x200004a8
 8001e58:	20000600 	.word	0x20000600

08001e5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <SystemInit+0x20>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <SystemInit+0x20>)
 8001e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001e88:	1d39      	adds	r1, r7, #4
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <__io_putchar+0x20>)
 8001e92:	f004 fdd9 	bl	8006a48 <HAL_UART_Transmit>
  return ch;
 8001e96:	687b      	ldr	r3, [r7, #4]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200003c8 	.word	0x200003c8

08001ea4 <read_uart_into_buffer>:

uint32_t read_uart_into_buffer(uint8_t* buffer, uint32_t buffer_size, uint8_t stop_character) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	71fb      	strb	r3, [r7, #7]
	//Keep reading into the until either a) the stop character is reached or b) we run out of buffer space
	uint32_t count = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]

	while (1) {


		if (count >= buffer_size) {
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d302      	bcc.n	8001ec4 <read_uart_into_buffer+0x20>
			return -1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	e01f      	b.n	8001f04 <read_uart_into_buffer+0x60>
		}

		__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <read_uart_into_buffer+0x68>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	621a      	str	r2, [r3, #32]

		HAL_UART_Receive(&huart2, buffer + count, 1, HAL_MAX_DELAY);
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	18d1      	adds	r1, r2, r3
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	480c      	ldr	r0, [pc, #48]	@ (8001f0c <read_uart_into_buffer+0x68>)
 8001eda:	f004 fe43 	bl	8006b64 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart2, buffer + count, 1, HAL_MAX_DELAY);

		if (buffer[count] == stop_character) {
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	79fa      	ldrb	r2, [r7, #7]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d107      	bne.n	8001efc <read_uart_into_buffer+0x58>
			buffer[count] = '\0';
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
			return count+1;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	e003      	b.n	8001f04 <read_uart_into_buffer+0x60>
		}

		count += 1;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
		if (count >= buffer_size) {
 8001f02:	e7d8      	b.n	8001eb6 <read_uart_into_buffer+0x12>
	}
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200003c8 	.word	0x200003c8

08001f10 <__vm_fetch>:
 *      Author: Will
 */

#include "vm.h"

uint8_t __vm_fetch(struct VM_State* state) {
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	state->instruction_length = BYTECODE_OPCODE_LEN;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	615a      	str	r2, [r3, #20]
	return state->exec->rom[state->pc];
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <advance_pc>:

void advance_pc(struct VM_State* state) {
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	state->pc = state->pc + state->instruction_length;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	441a      	add	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	619a      	str	r2, [r3, #24]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <get_immediate>:

uint32_t get_immediate(struct VM_State* state) {
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
	uint32_t v = *(uint32_t*)&state->exec->rom[state->pc + state->instruction_length];
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6999      	ldr	r1, [r3, #24]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	440b      	add	r3, r1
 8001f72:	4413      	add	r3, r2
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	60fb      	str	r3, [r7, #12]
	state->instruction_length += BYTECODE_IMMEDIATE_LEN;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	1d1a      	adds	r2, r3, #4
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	615a      	str	r2, [r3, #20]
	return v;
 8001f82:	68fb      	ldr	r3, [r7, #12]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <vm_peek_ops>:

uint32_t vm_peek_ops(struct VM_State* state) {
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	return state->operand_stack[state->osp];
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	681b      	ldr	r3, [r3, #0]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <vm_init>:
		struct VM_State* state,
		uint32_t* _call_stack,
		uint32_t* _operand_stack,
		uint32_t _call_stack_size,
		uint32_t _operand_stack_size,
		struct Executable_State* _exec) {
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	603b      	str	r3, [r7, #0]

	state->call_stack = _call_stack;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	601a      	str	r2, [r3, #0]
	state->operand_stack = _operand_stack;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	605a      	str	r2, [r3, #4]
	state->call_stack_size = _call_stack_size;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	609a      	str	r2, [r3, #8]
	state->operand_stack_size = _operand_stack_size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	60da      	str	r2, [r3, #12]
	state->exec = _exec;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	611a      	str	r2, [r3, #16]

	vm_reset(state);
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f804 	bl	8001fec <vm_reset>
}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <vm_reset>:

void vm_reset(struct VM_State* state) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	state->pc = 0;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
	state->bp = 0;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	@ 0x24
	state->csp = -1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f04f 32ff 	mov.w	r2, #4294967295
 8002006:	61da      	str	r2, [r3, #28]
	state->osp = -1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f04f 32ff 	mov.w	r2, #4294967295
 800200e:	621a      	str	r2, [r3, #32]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <vm_execute>:

/* Execute the next instruction */
uint32_t vm_execute(struct VM_State* state) {
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b08f      	sub	sp, #60	@ 0x3c
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

	if (state->exec->rom_length == 0) {
		//No code is loaded, error
	}

	uint8_t opcode = __vm_fetch(state);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff73 	bl	8001f10 <__vm_fetch>
 800202a:	4603      	mov	r3, r0
 800202c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	switch (opcode) {
 8002030:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002034:	2bca      	cmp	r3, #202	@ 0xca
 8002036:	f200 8518 	bhi.w	8002a6a <vm_execute+0xa4e>
 800203a:	a201      	add	r2, pc, #4	@ (adr r2, 8002040 <vm_execute+0x24>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	0800236d 	.word	0x0800236d
 8002044:	080023ad 	.word	0x080023ad
 8002048:	080023ed 	.word	0x080023ed
 800204c:	0800242f 	.word	0x0800242f
 8002050:	08002a6b 	.word	0x08002a6b
 8002054:	08002a6b 	.word	0x08002a6b
 8002058:	08002a6b 	.word	0x08002a6b
 800205c:	08002a6b 	.word	0x08002a6b
 8002060:	08002a6b 	.word	0x08002a6b
 8002064:	08002a6b 	.word	0x08002a6b
 8002068:	08002a6b 	.word	0x08002a6b
 800206c:	08002a6b 	.word	0x08002a6b
 8002070:	08002a6b 	.word	0x08002a6b
 8002074:	08002a6b 	.word	0x08002a6b
 8002078:	08002a6b 	.word	0x08002a6b
 800207c:	08002a6b 	.word	0x08002a6b
 8002080:	08002a6b 	.word	0x08002a6b
 8002084:	08002a6b 	.word	0x08002a6b
 8002088:	08002a6b 	.word	0x08002a6b
 800208c:	08002a6b 	.word	0x08002a6b
 8002090:	08002455 	.word	0x08002455
 8002094:	08002495 	.word	0x08002495
 8002098:	080024d5 	.word	0x080024d5
 800209c:	08002515 	.word	0x08002515
 80020a0:	0800253b 	.word	0x0800253b
 80020a4:	08002561 	.word	0x08002561
 80020a8:	080025a3 	.word	0x080025a3
 80020ac:	080025e5 	.word	0x080025e5
 80020b0:	0800260f 	.word	0x0800260f
 80020b4:	08002a6b 	.word	0x08002a6b
 80020b8:	08002a6b 	.word	0x08002a6b
 80020bc:	08002a6b 	.word	0x08002a6b
 80020c0:	08002a6b 	.word	0x08002a6b
 80020c4:	08002a6b 	.word	0x08002a6b
 80020c8:	08002a6b 	.word	0x08002a6b
 80020cc:	08002a6b 	.word	0x08002a6b
 80020d0:	08002a6b 	.word	0x08002a6b
 80020d4:	08002a6b 	.word	0x08002a6b
 80020d8:	08002a6b 	.word	0x08002a6b
 80020dc:	08002a6b 	.word	0x08002a6b
 80020e0:	0800264b 	.word	0x0800264b
 80020e4:	0800265b 	.word	0x0800265b
 80020e8:	0800269b 	.word	0x0800269b
 80020ec:	080026cd 	.word	0x080026cd
 80020f0:	08002727 	.word	0x08002727
 80020f4:	08002771 	.word	0x08002771
 80020f8:	080027bb 	.word	0x080027bb
 80020fc:	08002805 	.word	0x08002805
 8002100:	0800284f 	.word	0x0800284f
 8002104:	08002899 	.word	0x08002899
 8002108:	080028e3 	.word	0x080028e3
 800210c:	08002917 	.word	0x08002917
 8002110:	08002a6b 	.word	0x08002a6b
 8002114:	08002a6b 	.word	0x08002a6b
 8002118:	08002a6b 	.word	0x08002a6b
 800211c:	08002a6b 	.word	0x08002a6b
 8002120:	08002a6b 	.word	0x08002a6b
 8002124:	08002a6b 	.word	0x08002a6b
 8002128:	08002a6b 	.word	0x08002a6b
 800212c:	08002a6b 	.word	0x08002a6b
 8002130:	0800294b 	.word	0x0800294b
 8002134:	08002975 	.word	0x08002975
 8002138:	080029ad 	.word	0x080029ad
 800213c:	080029e7 	.word	0x080029e7
 8002140:	08002a21 	.word	0x08002a21
 8002144:	08002a6b 	.word	0x08002a6b
 8002148:	08002a6b 	.word	0x08002a6b
 800214c:	08002a6b 	.word	0x08002a6b
 8002150:	08002a6b 	.word	0x08002a6b
 8002154:	08002a6b 	.word	0x08002a6b
 8002158:	08002a6b 	.word	0x08002a6b
 800215c:	08002a6b 	.word	0x08002a6b
 8002160:	08002a6b 	.word	0x08002a6b
 8002164:	08002a6b 	.word	0x08002a6b
 8002168:	08002a6b 	.word	0x08002a6b
 800216c:	08002a6b 	.word	0x08002a6b
 8002170:	08002a6b 	.word	0x08002a6b
 8002174:	08002a6b 	.word	0x08002a6b
 8002178:	08002a6b 	.word	0x08002a6b
 800217c:	08002a6b 	.word	0x08002a6b
 8002180:	08002a6b 	.word	0x08002a6b
 8002184:	08002a79 	.word	0x08002a79
 8002188:	08002a79 	.word	0x08002a79
 800218c:	08002a6b 	.word	0x08002a6b
 8002190:	08002a6b 	.word	0x08002a6b
 8002194:	08002a6b 	.word	0x08002a6b
 8002198:	08002a6b 	.word	0x08002a6b
 800219c:	08002a6b 	.word	0x08002a6b
 80021a0:	08002a6b 	.word	0x08002a6b
 80021a4:	08002a6b 	.word	0x08002a6b
 80021a8:	08002a6b 	.word	0x08002a6b
 80021ac:	08002a6b 	.word	0x08002a6b
 80021b0:	08002a6b 	.word	0x08002a6b
 80021b4:	08002a6b 	.word	0x08002a6b
 80021b8:	08002a6b 	.word	0x08002a6b
 80021bc:	08002a6b 	.word	0x08002a6b
 80021c0:	08002a6b 	.word	0x08002a6b
 80021c4:	08002a6b 	.word	0x08002a6b
 80021c8:	08002a6b 	.word	0x08002a6b
 80021cc:	08002a6b 	.word	0x08002a6b
 80021d0:	08002a33 	.word	0x08002a33
 80021d4:	08002a6b 	.word	0x08002a6b
 80021d8:	08002a6b 	.word	0x08002a6b
 80021dc:	08002a6b 	.word	0x08002a6b
 80021e0:	08002a6b 	.word	0x08002a6b
 80021e4:	08002a6b 	.word	0x08002a6b
 80021e8:	08002a6b 	.word	0x08002a6b
 80021ec:	08002a6b 	.word	0x08002a6b
 80021f0:	08002a6b 	.word	0x08002a6b
 80021f4:	08002a6b 	.word	0x08002a6b
 80021f8:	08002a6b 	.word	0x08002a6b
 80021fc:	08002a6b 	.word	0x08002a6b
 8002200:	08002a6b 	.word	0x08002a6b
 8002204:	08002a6b 	.word	0x08002a6b
 8002208:	08002a6b 	.word	0x08002a6b
 800220c:	08002a6b 	.word	0x08002a6b
 8002210:	08002a6b 	.word	0x08002a6b
 8002214:	08002a6b 	.word	0x08002a6b
 8002218:	08002a6b 	.word	0x08002a6b
 800221c:	08002a6b 	.word	0x08002a6b
 8002220:	08002a6b 	.word	0x08002a6b
 8002224:	08002a6b 	.word	0x08002a6b
 8002228:	08002a6b 	.word	0x08002a6b
 800222c:	08002a6b 	.word	0x08002a6b
 8002230:	08002a6b 	.word	0x08002a6b
 8002234:	08002a6b 	.word	0x08002a6b
 8002238:	08002a6b 	.word	0x08002a6b
 800223c:	08002a6b 	.word	0x08002a6b
 8002240:	08002a6b 	.word	0x08002a6b
 8002244:	08002a6b 	.word	0x08002a6b
 8002248:	08002a6b 	.word	0x08002a6b
 800224c:	08002a6b 	.word	0x08002a6b
 8002250:	08002a6b 	.word	0x08002a6b
 8002254:	08002a6b 	.word	0x08002a6b
 8002258:	08002a6b 	.word	0x08002a6b
 800225c:	08002a6b 	.word	0x08002a6b
 8002260:	08002a6b 	.word	0x08002a6b
 8002264:	08002a6b 	.word	0x08002a6b
 8002268:	08002a6b 	.word	0x08002a6b
 800226c:	08002a6b 	.word	0x08002a6b
 8002270:	08002a6b 	.word	0x08002a6b
 8002274:	08002a6b 	.word	0x08002a6b
 8002278:	08002a6b 	.word	0x08002a6b
 800227c:	08002a6b 	.word	0x08002a6b
 8002280:	08002a6b 	.word	0x08002a6b
 8002284:	08002a6b 	.word	0x08002a6b
 8002288:	08002a6b 	.word	0x08002a6b
 800228c:	08002a6b 	.word	0x08002a6b
 8002290:	08002a6b 	.word	0x08002a6b
 8002294:	08002a6b 	.word	0x08002a6b
 8002298:	08002a6b 	.word	0x08002a6b
 800229c:	08002a6b 	.word	0x08002a6b
 80022a0:	08002a6b 	.word	0x08002a6b
 80022a4:	08002a6b 	.word	0x08002a6b
 80022a8:	08002a6b 	.word	0x08002a6b
 80022ac:	08002a6b 	.word	0x08002a6b
 80022b0:	08002a6b 	.word	0x08002a6b
 80022b4:	08002a6b 	.word	0x08002a6b
 80022b8:	08002a6b 	.word	0x08002a6b
 80022bc:	08002a6b 	.word	0x08002a6b
 80022c0:	08002a6b 	.word	0x08002a6b
 80022c4:	08002a6b 	.word	0x08002a6b
 80022c8:	08002a6b 	.word	0x08002a6b
 80022cc:	08002a6b 	.word	0x08002a6b
 80022d0:	08002a6b 	.word	0x08002a6b
 80022d4:	08002a6b 	.word	0x08002a6b
 80022d8:	08002a6b 	.word	0x08002a6b
 80022dc:	08002a6b 	.word	0x08002a6b
 80022e0:	08002a6b 	.word	0x08002a6b
 80022e4:	08002a6b 	.word	0x08002a6b
 80022e8:	08002a6b 	.word	0x08002a6b
 80022ec:	08002a6b 	.word	0x08002a6b
 80022f0:	08002a6b 	.word	0x08002a6b
 80022f4:	08002a6b 	.word	0x08002a6b
 80022f8:	08002a6b 	.word	0x08002a6b
 80022fc:	08002a6b 	.word	0x08002a6b
 8002300:	08002a6b 	.word	0x08002a6b
 8002304:	08002a6b 	.word	0x08002a6b
 8002308:	08002a6b 	.word	0x08002a6b
 800230c:	08002a6b 	.word	0x08002a6b
 8002310:	08002a6b 	.word	0x08002a6b
 8002314:	08002a6b 	.word	0x08002a6b
 8002318:	08002a6b 	.word	0x08002a6b
 800231c:	08002a6b 	.word	0x08002a6b
 8002320:	08002a6b 	.word	0x08002a6b
 8002324:	08002a6b 	.word	0x08002a6b
 8002328:	08002a6b 	.word	0x08002a6b
 800232c:	08002a6b 	.word	0x08002a6b
 8002330:	08002a6b 	.word	0x08002a6b
 8002334:	08002a6b 	.word	0x08002a6b
 8002338:	08002a6b 	.word	0x08002a6b
 800233c:	08002a6b 	.word	0x08002a6b
 8002340:	08002a6b 	.word	0x08002a6b
 8002344:	08002a6b 	.word	0x08002a6b
 8002348:	08002a6b 	.word	0x08002a6b
 800234c:	08002a6b 	.word	0x08002a6b
 8002350:	08002a6b 	.word	0x08002a6b
 8002354:	08002a6b 	.word	0x08002a6b
 8002358:	08002a6b 	.word	0x08002a6b
 800235c:	08002a6b 	.word	0x08002a6b
 8002360:	08002a59 	.word	0x08002a59
 8002364:	08002a63 	.word	0x08002a63
 8002368:	08002a67 	.word	0x08002a67
		/* Math */
	    case 0: {//ADD
	        state->osp -= 1;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] + state->operand_stack[state->osp+1];
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	3301      	adds	r3, #1
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6858      	ldr	r0, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4403      	add	r3, r0
 80023a0:	440a      	add	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fdc7 	bl	8001f38 <advance_pc>

	        break;
 80023aa:	e366      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 1: {//SUB
	        state->osp -= 1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] - state->operand_stack[state->osp+1];
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	3301      	adds	r3, #1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6858      	ldr	r0, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4403      	add	r3, r0
 80023e0:	1a8a      	subs	r2, r1, r2
 80023e2:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff fda7 	bl	8001f38 <advance_pc>

	        break;
 80023ea:	e346      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 2: {//MUL
	        state->osp -= 1;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] * state->operand_stack[state->osp+1];
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	3301      	adds	r3, #1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	6819      	ldr	r1, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6858      	ldr	r0, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4403      	add	r3, r0
 8002420:	fb01 f202 	mul.w	r2, r1, r2
 8002424:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fd86 	bl	8001f38 <advance_pc>

	        break;
 800242c:	e325      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 3: {//RNG
	        state->osp += 1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = rng_global_next32();
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	18d4      	adds	r4, r2, r3
 8002444:	f7ff f9c8 	bl	80017d8 <rng_global_next32>
 8002448:	4603      	mov	r3, r0
 800244a:	6023      	str	r3, [r4, #0]

	        advance_pc(state);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fd73 	bl	8001f38 <advance_pc>

	        break;
 8002452:	e312      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    /* Bitwise Logic */
	    case 20: {//OR
	        state->osp -= 1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] | state->operand_stack[state->osp+1];
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	3301      	adds	r3, #1
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6858      	ldr	r0, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4403      	add	r3, r0
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fd53 	bl	8001f38 <advance_pc>

	        break;
 8002492:	e2f2      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 21: {//XOR
	        state->osp -= 1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] ^ state->operand_stack[state->osp+1];
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	6819      	ldr	r1, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	3301      	adds	r3, #1
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6858      	ldr	r0, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4403      	add	r3, r0
 80024c8:	404a      	eors	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff fd33 	bl	8001f38 <advance_pc>

	        break;
 80024d2:	e2d2      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 22: {//AND
	        state->osp -= 1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	1e5a      	subs	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] & state->operand_stack[state->osp+1];
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	3301      	adds	r3, #1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6858      	ldr	r0, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4403      	add	r3, r0
 8002508:	400a      	ands	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fd13 	bl	8001f38 <advance_pc>

	        break;
 8002512:	e2b2      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 23: {//INV
	        state->operand_stack[state->osp] = ~state->operand_stack[state->osp];
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	43d2      	mvns	r2, r2
 8002530:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff fd00 	bl	8001f38 <advance_pc>

	        break;
 8002538:	e29f      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 24: {//NEG
	        state->operand_stack[state->osp] = -state->operand_stack[state->osp];
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	4252      	negs	r2, r2
 8002556:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fced 	bl	8001f38 <advance_pc>

	        break;
 800255e:	e28c      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 25: {//SHL
	        state->osp -= 1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] << state->operand_stack[state->osp+1];
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	6819      	ldr	r1, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	3301      	adds	r3, #1
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6858      	ldr	r0, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4403      	add	r3, r0
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff fccc 	bl	8001f38 <advance_pc>

	        break;
 80025a0:	e26b      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 26: {//SHR
	        state->osp -= 1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] >> state->operand_stack[state->osp+1];
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	3301      	adds	r3, #1
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6858      	ldr	r0, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4403      	add	r3, r0
 80025d6:	fa21 f202 	lsr.w	r2, r1, r2
 80025da:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff fcab 	bl	8001f38 <advance_pc>

	        break;
 80025e2:	e24a      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 27: {//BOOL
	        if (state->operand_stack[state->osp])
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <vm_execute+0x5ea>
	            state->operand_stack[state->osp] = 1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fc96 	bl	8001f38 <advance_pc>

	        break;
 800260c:	e235      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 28: {//NOT
	        if (state->operand_stack[state->osp])
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <vm_execute+0x616>
	            state->operand_stack[state->osp] = 0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e007      	b.n	8002642 <vm_execute+0x626>
	        else
	            state->operand_stack[state->osp] = 1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fc78 	bl	8001f38 <advance_pc>

	        break;
 8002648:	e217      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    /* Control Flow */
	    case 40: {//JMP K
	        uint32_t K = get_immediate(state);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fc85 	bl	8001f5a <get_immediate>
 8002650:	60b8      	str	r0, [r7, #8]

	        state->pc = K;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	619a      	str	r2, [r3, #24]

	        break;
 8002658:	e20f      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 41: {//ALLOC K
	        uint32_t K = get_immediate(state);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fc7d 	bl	8001f5a <get_immediate>
 8002660:	60f8      	str	r0, [r7, #12]

	        state->csp += 1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	61da      	str	r2, [r3, #28]
	        state->call_stack[state->csp] = state->bp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800267c:	601a      	str	r2, [r3, #0]

	        state->bp = state->csp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69da      	ldr	r2, [r3, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24

	        state->csp += K;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	441a      	add	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	61da      	str	r2, [r3, #28]

	        advance_pc(state);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fc50 	bl	8001f38 <advance_pc>

	        break;
 8002698:	e1ef      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 42: {//CALL K
	      uint32_t K = get_immediate(state);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff fc5d 	bl	8001f5a <get_immediate>
 80026a0:	6178      	str	r0, [r7, #20]

	      //get the link address
	      uint32_t link = state->pc + BYTECODE_OPCODE_LEN + BYTECODE_IMMEDIATE_LEN;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	3305      	adds	r3, #5
 80026a8:	613b      	str	r3, [r7, #16]

	      // Push the link on the call stack
	      state->csp += 1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	61da      	str	r2, [r3, #28]
	      state->call_stack[state->csp] = link;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	601a      	str	r2, [r3, #0]

	      //Jump to the call location
	      state->pc = K;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	619a      	str	r2, [r3, #24]

	      break;
 80026ca:	e1d6      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 43: {//RET K
	      uint32_t K = get_immediate(state);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fc44 	bl	8001f5a <get_immediate>
 80026d2:	61f8      	str	r0, [r7, #28]

	      //Free local variables
	      state->csp = state->bp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	61da      	str	r2, [r3, #28]

	      //Pop old base pointer off stack
	      state->bp = state->call_stack[state->csp];
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24
	      state->csp -= 1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	1e5a      	subs	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	61da      	str	r2, [r3, #28]

	      //Pop link address
	      uint32_t link = state->call_stack[state->csp];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	61bb      	str	r3, [r7, #24]
	      state->csp -= 1;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	1e5a      	subs	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	61da      	str	r2, [r3, #28]

	      //Drop parameters passed into function, if any
	      state->csp -= K;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	1ad2      	subs	r2, r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	61da      	str	r2, [r3, #28]

	      state->pc = link;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	619a      	str	r2, [r3, #24]

	      break;
 8002724:	e1a9      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 44: {//EQ
	        state->osp -= 1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	1e5a      	subs	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] == state->operand_stack[state->osp+1];
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	3301      	adds	r3, #1
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2d9      	uxtb	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	460a      	mov	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fbe5 	bl	8001f38 <advance_pc>

	        break;
 800276e:	e184      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 45: {//NE
	        state->osp -= 1;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	1e5a      	subs	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] != state->operand_stack[state->osp+1];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	3301      	adds	r3, #1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2d9      	uxtb	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	460a      	mov	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff fbc0 	bl	8001f38 <advance_pc>

	        break;
 80027b8:	e15f      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 46: {//GT
	        state->osp -= 1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] > state->operand_stack[state->osp+1];
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	3301      	adds	r3, #1
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	bf8c      	ite	hi
 80027e6:	2301      	movhi	r3, #1
 80027e8:	2300      	movls	r3, #0
 80027ea:	b2d9      	uxtb	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	460a      	mov	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fb9b 	bl	8001f38 <advance_pc>

	        break;
 8002802:	e13a      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 47: {//LT
	        state->osp -= 1;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	1e5a      	subs	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] < state->operand_stack[state->osp+1];
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	3301      	adds	r3, #1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	bf34      	ite	cc
 8002830:	2301      	movcc	r3, #1
 8002832:	2300      	movcs	r3, #0
 8002834:	b2d9      	uxtb	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	460a      	mov	r2, r1
 8002844:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fb76 	bl	8001f38 <advance_pc>

	        break;
 800284c:	e115      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 48: {//GE
	        state->osp -= 1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	1e5a      	subs	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] >= state->operand_stack[state->osp+1];
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6859      	ldr	r1, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	3301      	adds	r3, #1
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	bf2c      	ite	cs
 800287a:	2301      	movcs	r3, #1
 800287c:	2300      	movcc	r3, #0
 800287e:	b2d9      	uxtb	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	460a      	mov	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fb51 	bl	8001f38 <advance_pc>

	        break;
 8002896:	e0f0      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 49: {//LE
	        state->osp -= 1;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	1e5a      	subs	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->operand_stack[state->osp] <= state->operand_stack[state->osp+1];
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	3301      	adds	r3, #1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	bf94      	ite	ls
 80028c4:	2301      	movls	r3, #1
 80028c6:	2300      	movhi	r3, #0
 80028c8:	b2d9      	uxtb	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	460a      	mov	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fb2c 	bl	8001f38 <advance_pc>

	        break;
 80028e0:	e0cb      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 50: {//JT K
	        uint32_t K = get_immediate(state);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fb39 	bl	8001f5a <get_immediate>
 80028e8:	6238      	str	r0, [r7, #32]

	        if (state->operand_stack[state->osp] != 0)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <vm_execute+0x8e8>
	        	state->pc = K;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a3a      	ldr	r2, [r7, #32]
 8002900:	619a      	str	r2, [r3, #24]
 8002902:	e002      	b.n	800290a <vm_execute+0x8ee>
	        else
	            advance_pc(state);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fb17 	bl	8001f38 <advance_pc>

	        state->osp -= 1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	1e5a      	subs	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	621a      	str	r2, [r3, #32]

	        break;
 8002914:	e0b1      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 51: {//JF K
	        uint32_t K = get_immediate(state);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff fb1f 	bl	8001f5a <get_immediate>
 800291c:	6278      	str	r0, [r7, #36]	@ 0x24

	        if (state->operand_stack[state->osp] == 0)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <vm_execute+0x91c>
	        	state->pc = K;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002934:	619a      	str	r2, [r3, #24]
 8002936:	e002      	b.n	800293e <vm_execute+0x922>
	        else
	            advance_pc(state);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fafd 	bl	8001f38 <advance_pc>

	        state->osp -= 1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	1e5a      	subs	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	621a      	str	r2, [r3, #32]

	        break;
 8002948:	e097      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    /* Data Transfer */
	    case 60: {//PUSHI K
	        uint32_t K = get_immediate(state);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff fb05 	bl	8001f5a <get_immediate>
 8002950:	62b8      	str	r0, [r7, #40]	@ 0x28


	        state->osp += 1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = K;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800296a:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff fae3 	bl	8001f38 <advance_pc>

	        break;
 8002972:	e082      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 61: {//POPC

	        state->csp += 1;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	61da      	str	r2, [r3, #28]
	        state->call_stack[state->csp] = state->operand_stack[state->osp];
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6819      	ldr	r1, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	601a      	str	r2, [r3, #0]
	        state->osp -= 1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	621a      	str	r2, [r3, #32]

	        advance_pc(state);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fac7 	bl	8001f38 <advance_pc>

	        break;
 80029aa:	e066      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 62: {//PUSHL K
	        uint32_t K = get_immediate(state);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff fad4 	bl	8001f5a <get_immediate>
 80029b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

	        state->osp += 1;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	621a      	str	r2, [r3, #32]
	        state->operand_stack[state->osp] = state->call_stack[state->bp+K];
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c8:	440b      	add	r3, r1
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	601a      	str	r2, [r3, #0]

	        advance_pc(state);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff faaa 	bl	8001f38 <advance_pc>

	        break;
 80029e4:	e049      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 63: {//POPL K
	        uint32_t K = get_immediate(state);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff fab7 	bl	8001f5a <get_immediate>
 80029ec:	6338      	str	r0, [r7, #48]	@ 0x30

	        state->call_stack[state->bp+K] = state->operand_stack[state->osp];
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	441a      	add	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6819      	ldr	r1, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a04:	4403      	add	r3, r0
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	601a      	str	r2, [r3, #0]

	        state->osp -= 1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	1e5a      	subs	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	621a      	str	r2, [r3, #32]



	        advance_pc(state);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fa8d 	bl	8001f38 <advance_pc>
	        break;
 8002a1e:	e02c      	b.n	8002a7a <vm_execute+0xa5e>
	    }
	    case 64: {//DROP

	        state->osp -= 1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	1e5a      	subs	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	621a      	str	r2, [r3, #32]

	        advance_pc(state);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fa84 	bl	8001f38 <advance_pc>
	        break;
 8002a30:	e023      	b.n	8002a7a <vm_execute+0xa5e>
	    	break;
	    }
	    /* Timing */
	    case 100: {//DLA

	      HAL_Delay(state->operand_stack[state->osp]);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 f8bb 	bl	8002bbc <HAL_Delay>
	      state->osp -= 1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	1e5a      	subs	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	621a      	str	r2, [r3, #32]

	      advance_pc(state);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fa71 	bl	8001f38 <advance_pc>

	      break;
 8002a56:	e010      	b.n	8002a7a <vm_execute+0xa5e>
	    case 200: {//HALT

	        //printf("Halting\n");

	      while (1) {
	        HAL_Delay(1000);
 8002a58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a5c:	f000 f8ae 	bl	8002bbc <HAL_Delay>
 8002a60:	e7fa      	b.n	8002a58 <vm_execute+0xa3c>

	      break;
	    }
	    case 201: {//SUC

	    	return SUCCESS;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00a      	b.n	8002a7c <vm_execute+0xa60>

	      break;
	    }
	    case 202: {//FAIL

	    	return FAILURE;
 8002a66:	2302      	movs	r3, #2
 8002a68:	e008      	b.n	8002a7c <vm_execute+0xa60>

	      break;
	    }
	    default: {
	    	printf("Invalid command - (%i)\n", (int)opcode);
 8002a6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4804      	ldr	r0, [pc, #16]	@ (8002a84 <vm_execute+0xa68>)
 8002a72:	f005 fdbb 	bl	80085ec <iprintf>

	      break;
 8002a76:	e000      	b.n	8002a7a <vm_execute+0xa5e>
	    	break;
 8002a78:	bf00      	nop
	    }

	  }


	return RUNNING;
 8002a7a:	2300      	movs	r3, #0

}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	373c      	adds	r7, #60	@ 0x3c
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd90      	pop	{r4, r7, pc}
 8002a84:	0800a45c 	.word	0x0800a45c

08002a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a88:	480d      	ldr	r0, [pc, #52]	@ (8002ac0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a8c:	f7ff f9e6 	bl	8001e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a90:	480c      	ldr	r0, [pc, #48]	@ (8002ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a92:	490d      	ldr	r1, [pc, #52]	@ (8002ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a94:	4a0d      	ldr	r2, [pc, #52]	@ (8002acc <LoopForever+0xe>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a98:	e002      	b.n	8002aa0 <LoopCopyDataInit>

08002a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9e:	3304      	adds	r3, #4

08002aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa4:	d3f9      	bcc.n	8002a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ad4 <LoopForever+0x16>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aac:	e001      	b.n	8002ab2 <LoopFillZerobss>

08002aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab0:	3204      	adds	r2, #4

08002ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab4:	d3fb      	bcc.n	8002aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ab6:	f005 ff49 	bl	800894c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aba:	f7fe fa7b 	bl	8000fb4 <main>

08002abe <LoopForever>:

LoopForever:
    b LoopForever
 8002abe:	e7fe      	b.n	8002abe <LoopForever>
  ldr   r0, =_estack
 8002ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002acc:	0800a838 	.word	0x0800a838
  ldr r2, =_sbss
 8002ad0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002ad4:	200005fc 	.word	0x200005fc

08002ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ad8:	e7fe      	b.n	8002ad8 <ADC1_2_IRQHandler>

08002ada <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	f001 fa23 	bl	8003f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aea:	2000      	movs	r0, #0
 8002aec:	f000 f80e 	bl	8002b0c <HAL_InitTick>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	71fb      	strb	r3, [r7, #7]
 8002afa:	e001      	b.n	8002b00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002afc:	f7fe fe90 	bl	8001820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b00:	79fb      	ldrb	r3, [r7, #7]

}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b18:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <HAL_InitTick+0x68>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d022      	beq.n	8002b66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b20:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <HAL_InitTick+0x6c>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <HAL_InitTick+0x68>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 fa20 	bl	8003f7a <HAL_SYSTICK_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10f      	bne.n	8002b60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	d809      	bhi.n	8002b5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b46:	2200      	movs	r2, #0
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4e:	f001 f9fa 	bl	8003f46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b52:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <HAL_InitTick+0x70>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	e007      	b.n	8002b6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	e004      	b.n	8002b6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e001      	b.n	8002b6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000008 	.word	0x20000008
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	20000004 	.word	0x20000004

08002b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b84:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <HAL_IncTick+0x1c>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_IncTick+0x20>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a03      	ldr	r2, [pc, #12]	@ (8002b9c <HAL_IncTick+0x1c>)
 8002b90:	6013      	str	r3, [r2, #0]
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	200004ac 	.word	0x200004ac
 8002ba0:	20000008 	.word	0x20000008

08002ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	@ (8002bb8 <HAL_GetTick+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	200004ac 	.word	0x200004ac

08002bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc4:	f7ff ffee 	bl	8002ba4 <HAL_GetTick>
 8002bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d004      	beq.n	8002be0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <HAL_Delay+0x40>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4413      	add	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002be0:	bf00      	nop
 8002be2:	f7ff ffdf 	bl	8002ba4 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d8f7      	bhi.n	8002be2 <HAL_Delay+0x26>
  {
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000008 	.word	0x20000008

08002c00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	609a      	str	r2, [r3, #8]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3360      	adds	r3, #96	@ 0x60
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <LL_ADC_SetOffset+0x44>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	03fff000 	.word	0x03fff000

08002cb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3360      	adds	r3, #96	@ 0x60
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3360      	adds	r3, #96	@ 0x60
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b087      	sub	sp, #28
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3360      	adds	r3, #96	@ 0x60
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002d3c:	bf00      	nop
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3360      	adds	r3, #96	@ 0x60
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	615a      	str	r2, [r3, #20]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3330      	adds	r3, #48	@ 0x30
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	4413      	add	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	211f      	movs	r1, #31
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	f003 011f 	and.w	r1, r3, #31
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	431a      	orrs	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	0e5b      	lsrs	r3, r3, #25
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	4413      	add	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	0d1b      	lsrs	r3, r3, #20
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	2107      	movs	r1, #7
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	401a      	ands	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	0d1b      	lsrs	r3, r3, #20
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	431a      	orrs	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0318 	and.w	r3, r3, #24
 8002e76:	4908      	ldr	r1, [pc, #32]	@ (8002e98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e78:	40d9      	lsrs	r1, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	400b      	ands	r3, r1
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	0007ffff 	.word	0x0007ffff

08002e9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002eac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6093      	str	r3, [r2, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ed4:	d101      	bne.n	8002eda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ef8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002efc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f24:	d101      	bne.n	8002f2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f4c:	f043 0202 	orr.w	r2, r3, #2
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <LL_ADC_IsEnabled+0x18>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <LL_ADC_IsEnabled+0x1a>
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d101      	bne.n	8002f9e <LL_ADC_IsDisableOngoing+0x18>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <LL_ADC_IsDisableOngoing+0x1a>
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d101      	bne.n	8002fc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d101      	bne.n	8002fea <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b089      	sub	sp, #36	@ 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e1a9      	b.n	8003366 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d109      	bne.n	8003034 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fe fc21 	bl	8001868 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff41 	bl	8002ec0 <LL_ADC_IsDeepPowerDownEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff27 	bl	8002e9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff5c 	bl	8002f10 <LL_ADC_IsInternalRegulatorEnabled>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d115      	bne.n	800308a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ff40 	bl	8002ee8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003068:	4b9c      	ldr	r3, [pc, #624]	@ (80032dc <HAL_ADC_Init+0x2e4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	4a9c      	ldr	r2, [pc, #624]	@ (80032e0 <HAL_ADC_Init+0x2e8>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	3301      	adds	r3, #1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800307c:	e002      	b.n	8003084 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3b01      	subs	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f9      	bne.n	800307e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ff3e 	bl	8002f10 <LL_ADC_IsInternalRegulatorEnabled>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	f043 0210 	orr.w	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030aa:	f043 0201 	orr.w	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff76 	bl	8002fac <LL_ADC_REG_IsConversionOngoing>
 80030c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 8142 	bne.w	8003354 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 813e 	bne.w	8003354 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030e0:	f043 0202 	orr.w	r2, r3, #2
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff37 	bl	8002f60 <LL_ADC_IsEnabled>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d141      	bne.n	800317c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003100:	d004      	beq.n	800310c <HAL_ADC_Init+0x114>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a77      	ldr	r2, [pc, #476]	@ (80032e4 <HAL_ADC_Init+0x2ec>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10f      	bne.n	800312c <HAL_ADC_Init+0x134>
 800310c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003110:	f7ff ff26 	bl	8002f60 <LL_ADC_IsEnabled>
 8003114:	4604      	mov	r4, r0
 8003116:	4873      	ldr	r0, [pc, #460]	@ (80032e4 <HAL_ADC_Init+0x2ec>)
 8003118:	f7ff ff22 	bl	8002f60 <LL_ADC_IsEnabled>
 800311c:	4603      	mov	r3, r0
 800311e:	4323      	orrs	r3, r4
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e012      	b.n	8003152 <HAL_ADC_Init+0x15a>
 800312c:	486e      	ldr	r0, [pc, #440]	@ (80032e8 <HAL_ADC_Init+0x2f0>)
 800312e:	f7ff ff17 	bl	8002f60 <LL_ADC_IsEnabled>
 8003132:	4604      	mov	r4, r0
 8003134:	486d      	ldr	r0, [pc, #436]	@ (80032ec <HAL_ADC_Init+0x2f4>)
 8003136:	f7ff ff13 	bl	8002f60 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	431c      	orrs	r4, r3
 800313e:	486c      	ldr	r0, [pc, #432]	@ (80032f0 <HAL_ADC_Init+0x2f8>)
 8003140:	f7ff ff0e 	bl	8002f60 <LL_ADC_IsEnabled>
 8003144:	4603      	mov	r3, r0
 8003146:	4323      	orrs	r3, r4
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d012      	beq.n	800317c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800315e:	d004      	beq.n	800316a <HAL_ADC_Init+0x172>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5f      	ldr	r2, [pc, #380]	@ (80032e4 <HAL_ADC_Init+0x2ec>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_ADC_Init+0x176>
 800316a:	4a62      	ldr	r2, [pc, #392]	@ (80032f4 <HAL_ADC_Init+0x2fc>)
 800316c:	e000      	b.n	8003170 <HAL_ADC_Init+0x178>
 800316e:	4a62      	ldr	r2, [pc, #392]	@ (80032f8 <HAL_ADC_Init+0x300>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f7ff fd42 	bl	8002c00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7f5b      	ldrb	r3, [r3, #29]
 8003180:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003186:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800318c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003192:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800319a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d106      	bne.n	80031b8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	045b      	lsls	r3, r3, #17
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d009      	beq.n	80031d4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	4b48      	ldr	r3, [pc, #288]	@ (80032fc <HAL_ADC_Init+0x304>)
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	69b9      	ldr	r1, [r7, #24]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fee5 	bl	8002fd2 <LL_ADC_INJ_IsConversionOngoing>
 8003208:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d17f      	bne.n	8003310 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d17c      	bne.n	8003310 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800321a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003222:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003232:	f023 0302 	bic.w	r3, r3, #2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	69b9      	ldr	r1, [r7, #24]
 800323c:	430b      	orrs	r3, r1
 800323e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d017      	beq.n	8003278 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003256:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003260:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003264:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6911      	ldr	r1, [r2, #16]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	430b      	orrs	r3, r1
 8003272:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003276:	e013      	b.n	80032a0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003286:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003298:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800329c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d12a      	bne.n	8003300 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80032b4:	f023 0304 	bic.w	r3, r3, #4
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032c6:	4311      	orrs	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032cc:	430a      	orrs	r2, r1
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	611a      	str	r2, [r3, #16]
 80032da:	e019      	b.n	8003310 <HAL_ADC_Init+0x318>
 80032dc:	20000000 	.word	0x20000000
 80032e0:	053e2d63 	.word	0x053e2d63
 80032e4:	50000100 	.word	0x50000100
 80032e8:	50000400 	.word	0x50000400
 80032ec:	50000500 	.word	0x50000500
 80032f0:	50000600 	.word	0x50000600
 80032f4:	50000300 	.word	0x50000300
 80032f8:	50000700 	.word	0x50000700
 80032fc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d10c      	bne.n	8003332 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	f023 010f 	bic.w	r1, r3, #15
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	1e5a      	subs	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003330:	e007      	b.n	8003342 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 020f 	bic.w	r2, r2, #15
 8003340:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003352:	e007      	b.n	8003364 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003358:	f043 0210 	orr.w	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003364:	7ffb      	ldrb	r3, [r7, #31]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	@ 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	bf00      	nop

08003370 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b0b6      	sub	sp, #216	@ 0xd8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800338a:	2b01      	cmp	r3, #1
 800338c:	d102      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x24>
 800338e:	2302      	movs	r3, #2
 8003390:	f000 bc13 	b.w	8003bba <HAL_ADC_ConfigChannel+0x84a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fe03 	bl	8002fac <LL_ADC_REG_IsConversionOngoing>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f040 83f3 	bne.w	8003b94 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f7ff fcf2 	bl	8002da4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fdf1 	bl	8002fac <LL_ADC_REG_IsConversionOngoing>
 80033ca:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fdfd 	bl	8002fd2 <LL_ADC_INJ_IsConversionOngoing>
 80033d8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 81d9 	bne.w	8003798 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 81d4 	bne.w	8003798 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033f8:	d10f      	bne.n	800341a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2200      	movs	r2, #0
 8003404:	4619      	mov	r1, r3
 8003406:	f7ff fcf9 	bl	8002dfc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fcb3 	bl	8002d7e <LL_ADC_SetSamplingTimeCommonConfig>
 8003418:	e00e      	b.n	8003438 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	461a      	mov	r2, r3
 8003428:	f7ff fce8 	bl	8002dfc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fca3 	bl	8002d7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	08db      	lsrs	r3, r3, #3
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d022      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6919      	ldr	r1, [r3, #16]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800346a:	f7ff fbfd 	bl	8002c68 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6919      	ldr	r1, [r3, #16]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	461a      	mov	r2, r3
 800347c:	f7ff fc49 	bl	8002d12 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800348c:	2b01      	cmp	r3, #1
 800348e:	d102      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x126>
 8003490:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003494:	e000      	b.n	8003498 <HAL_ADC_ConfigChannel+0x128>
 8003496:	2300      	movs	r3, #0
 8003498:	461a      	mov	r2, r3
 800349a:	f7ff fc55 	bl	8002d48 <LL_ADC_SetOffsetSaturation>
 800349e:	e17b      	b.n	8003798 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fc02 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x15c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fbf7 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 80034c2:	4603      	mov	r3, r0
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	f003 021f 	and.w	r2, r3, #31
 80034ca:	e01e      	b.n	800350a <HAL_ADC_ConfigChannel+0x19a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fbec 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 80034d8:	4603      	mov	r3, r0
 80034da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80034fa:	2320      	movs	r3, #32
 80034fc:	e004      	b.n	8003508 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80034fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x1b2>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	0e9b      	lsrs	r3, r3, #26
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	e018      	b.n	8003554 <HAL_ADC_ConfigChannel+0x1e4>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800353a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800353e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e004      	b.n	8003554 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800354a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003554:	429a      	cmp	r2, r3
 8003556:	d106      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2200      	movs	r2, #0
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fbbb 	bl	8002cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fb9f 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 8003572:	4603      	mov	r3, r0
 8003574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x222>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2101      	movs	r1, #1
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fb94 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 8003588:	4603      	mov	r3, r0
 800358a:	0e9b      	lsrs	r3, r3, #26
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	e01e      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x260>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fb89 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 800359e:	4603      	mov	r3, r0
 80035a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80035b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80035b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e004      	b.n	80035ce <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80035c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x278>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0e9b      	lsrs	r3, r3, #26
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	e018      	b.n	800361a <HAL_ADC_ConfigChannel+0x2aa>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80035fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003600:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003604:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800360c:	2320      	movs	r3, #32
 800360e:	e004      	b.n	800361a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800361a:	429a      	cmp	r2, r3
 800361c:	d106      	bne.n	800362c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2200      	movs	r2, #0
 8003624:	2101      	movs	r1, #1
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fb58 	bl	8002cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2102      	movs	r1, #2
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fb3c 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 8003638:	4603      	mov	r3, r0
 800363a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x2e8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fb31 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	f003 021f 	and.w	r2, r3, #31
 8003656:	e01e      	b.n	8003696 <HAL_ADC_ConfigChannel+0x326>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2102      	movs	r1, #2
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fb26 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003676:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800367a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800367e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e004      	b.n	8003694 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800368a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x33e>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0e9b      	lsrs	r3, r3, #26
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	e016      	b.n	80036dc <HAL_ADC_ConfigChannel+0x36c>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80036c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80036c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80036ce:	2320      	movs	r3, #32
 80036d0:	e004      	b.n	80036dc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80036d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036dc:	429a      	cmp	r2, r3
 80036de:	d106      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2200      	movs	r2, #0
 80036e6:	2102      	movs	r1, #2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff faf7 	bl	8002cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2103      	movs	r1, #3
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fadb 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <HAL_ADC_ConfigChannel+0x3aa>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2103      	movs	r1, #3
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fad0 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 8003710:	4603      	mov	r3, r0
 8003712:	0e9b      	lsrs	r3, r3, #26
 8003714:	f003 021f 	and.w	r2, r3, #31
 8003718:	e017      	b.n	800374a <HAL_ADC_ConfigChannel+0x3da>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2103      	movs	r1, #3
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fac5 	bl	8002cb0 <LL_ADC_GetOffsetChannel>
 8003726:	4603      	mov	r3, r0
 8003728:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003732:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003734:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800373c:	2320      	movs	r3, #32
 800373e:	e003      	b.n	8003748 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x3f2>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	0e9b      	lsrs	r3, r3, #26
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	e011      	b.n	8003786 <HAL_ADC_ConfigChannel+0x416>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003772:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800377a:	2320      	movs	r3, #32
 800377c:	e003      	b.n	8003786 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800377e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003780:	fab3 f383 	clz	r3, r3
 8003784:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003786:	429a      	cmp	r2, r3
 8003788:	d106      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	2103      	movs	r1, #3
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff faa2 	bl	8002cdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fbdf 	bl	8002f60 <LL_ADC_IsEnabled>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f040 813d 	bne.w	8003a24 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6819      	ldr	r1, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f7ff fb4c 	bl	8002e54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4aa2      	ldr	r2, [pc, #648]	@ (8003a4c <HAL_ADC_ConfigChannel+0x6dc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	f040 812e 	bne.w	8003a24 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x480>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	3301      	adds	r3, #1
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2b09      	cmp	r3, #9
 80037e6:	bf94      	ite	ls
 80037e8:	2301      	movls	r3, #1
 80037ea:	2300      	movhi	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e019      	b.n	8003824 <HAL_ADC_ConfigChannel+0x4b4>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80037fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003800:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003802:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	e003      	b.n	8003814 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800380c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2b09      	cmp	r3, #9
 800381c:	bf94      	ite	ls
 800381e:	2301      	movls	r3, #1
 8003820:	2300      	movhi	r3, #0
 8003822:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003824:	2b00      	cmp	r3, #0
 8003826:	d079      	beq.n	800391c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003830:	2b00      	cmp	r3, #0
 8003832:	d107      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x4d4>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	3301      	adds	r3, #1
 800383c:	069b      	lsls	r3, r3, #26
 800383e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003842:	e015      	b.n	8003870 <HAL_ADC_ConfigChannel+0x500>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003854:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800385c:	2320      	movs	r3, #32
 800385e:	e003      	b.n	8003868 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	069b      	lsls	r3, r3, #26
 800386c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x520>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	3301      	adds	r3, #1
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	e017      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x550>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800389e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80038a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80038a8:	2320      	movs	r3, #32
 80038aa:	e003      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80038ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	ea42 0103 	orr.w	r1, r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x576>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0e9b      	lsrs	r3, r3, #26
 80038d6:	3301      	adds	r3, #1
 80038d8:	f003 021f 	and.w	r2, r3, #31
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4413      	add	r3, r2
 80038e2:	051b      	lsls	r3, r3, #20
 80038e4:	e018      	b.n	8003918 <HAL_ADC_ConfigChannel+0x5a8>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80038f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80038f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80038fe:	2320      	movs	r3, #32
 8003900:	e003      	b.n	800390a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003904:	fab3 f383 	clz	r3, r3
 8003908:	b2db      	uxtb	r3, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f003 021f 	and.w	r2, r3, #31
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003918:	430b      	orrs	r3, r1
 800391a:	e07e      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x5c8>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0e9b      	lsrs	r3, r3, #26
 800392e:	3301      	adds	r3, #1
 8003930:	069b      	lsls	r3, r3, #26
 8003932:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003936:	e015      	b.n	8003964 <HAL_ADC_ConfigChannel+0x5f4>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003940:	fa93 f3a3 	rbit	r3, r3
 8003944:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003948:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003950:	2320      	movs	r3, #32
 8003952:	e003      	b.n	800395c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	3301      	adds	r3, #1
 800395e:	069b      	lsls	r3, r3, #26
 8003960:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x614>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	0e9b      	lsrs	r3, r3, #26
 8003976:	3301      	adds	r3, #1
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	e017      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x644>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	61fb      	str	r3, [r7, #28]
  return result;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800399c:	2320      	movs	r3, #32
 800399e:	e003      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80039a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	ea42 0103 	orr.w	r1, r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10d      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x670>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0e9b      	lsrs	r3, r3, #26
 80039ca:	3301      	adds	r3, #1
 80039cc:	f003 021f 	and.w	r2, r3, #31
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	3b1e      	subs	r3, #30
 80039d8:	051b      	lsls	r3, r3, #20
 80039da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039de:	e01b      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x6a8>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	613b      	str	r3, [r7, #16]
  return result;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80039f8:	2320      	movs	r3, #32
 80039fa:	e003      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	f003 021f 	and.w	r2, r3, #31
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4413      	add	r3, r2
 8003a10:	3b1e      	subs	r3, #30
 8003a12:	051b      	lsls	r3, r3, #20
 8003a14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f7ff f9ec 	bl	8002dfc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <HAL_ADC_ConfigChannel+0x6e0>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80be 	beq.w	8003bae <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a3a:	d004      	beq.n	8003a46 <HAL_ADC_ConfigChannel+0x6d6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a04      	ldr	r2, [pc, #16]	@ (8003a54 <HAL_ADC_ConfigChannel+0x6e4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10a      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x6ec>
 8003a46:	4b04      	ldr	r3, [pc, #16]	@ (8003a58 <HAL_ADC_ConfigChannel+0x6e8>)
 8003a48:	e009      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x6ee>
 8003a4a:	bf00      	nop
 8003a4c:	407f0000 	.word	0x407f0000
 8003a50:	80080000 	.word	0x80080000
 8003a54:	50000100 	.word	0x50000100
 8003a58:	50000300 	.word	0x50000300
 8003a5c:	4b59      	ldr	r3, [pc, #356]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x854>)
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff f8f4 	bl	8002c4c <LL_ADC_GetCommonPathInternalCh>
 8003a64:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a56      	ldr	r2, [pc, #344]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x858>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_ADC_ConfigChannel+0x70c>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a55      	ldr	r2, [pc, #340]	@ (8003bcc <HAL_ADC_ConfigChannel+0x85c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d13a      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d134      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a90:	d005      	beq.n	8003a9e <HAL_ADC_ConfigChannel+0x72e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a4e      	ldr	r2, [pc, #312]	@ (8003bd0 <HAL_ADC_ConfigChannel+0x860>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	f040 8085 	bne.w	8003ba8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aa6:	d004      	beq.n	8003ab2 <HAL_ADC_ConfigChannel+0x742>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a49      	ldr	r2, [pc, #292]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x864>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x746>
 8003ab2:	4a49      	ldr	r2, [pc, #292]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x868>)
 8003ab4:	e000      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x748>
 8003ab6:	4a43      	ldr	r2, [pc, #268]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x854>)
 8003ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003abc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7ff f8af 	bl	8002c26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ac8:	4b44      	ldr	r3, [pc, #272]	@ (8003bdc <HAL_ADC_ConfigChannel+0x86c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	4a44      	ldr	r2, [pc, #272]	@ (8003be0 <HAL_ADC_ConfigChannel+0x870>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	4613      	mov	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ae2:	e002      	b.n	8003aea <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f9      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003af0:	e05a      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3b      	ldr	r2, [pc, #236]	@ (8003be4 <HAL_ADC_ConfigChannel+0x874>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d125      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d11f      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a31      	ldr	r2, [pc, #196]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x864>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d104      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7ac>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a34      	ldr	r2, [pc, #208]	@ (8003be8 <HAL_ADC_ConfigChannel+0x878>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d047      	beq.n	8003bac <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b24:	d004      	beq.n	8003b30 <HAL_ADC_ConfigChannel+0x7c0>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x864>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x7c4>
 8003b30:	4a29      	ldr	r2, [pc, #164]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x868>)
 8003b32:	e000      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x7c6>
 8003b34:	4a23      	ldr	r2, [pc, #140]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x854>)
 8003b36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f7ff f870 	bl	8002c26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b46:	e031      	b.n	8003bac <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a27      	ldr	r2, [pc, #156]	@ (8003bec <HAL_ADC_ConfigChannel+0x87c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d12d      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d127      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x864>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d022      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b70:	d004      	beq.n	8003b7c <HAL_ADC_ConfigChannel+0x80c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a17      	ldr	r2, [pc, #92]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x864>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x810>
 8003b7c:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x868>)
 8003b7e:	e000      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x812>
 8003b80:	4a10      	ldr	r2, [pc, #64]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x854>)
 8003b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f7ff f84a 	bl	8002c26 <LL_ADC_SetCommonPathInternalCh>
 8003b92:	e00c      	b.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	f043 0220 	orr.w	r2, r3, #32
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003ba6:	e002      	b.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	37d8      	adds	r7, #216	@ 0xd8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	50000700 	.word	0x50000700
 8003bc8:	c3210000 	.word	0xc3210000
 8003bcc:	90c00010 	.word	0x90c00010
 8003bd0:	50000600 	.word	0x50000600
 8003bd4:	50000100 	.word	0x50000100
 8003bd8:	50000300 	.word	0x50000300
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	053e2d63 	.word	0x053e2d63
 8003be4:	c7520000 	.word	0xc7520000
 8003be8:	50000500 	.word	0x50000500
 8003bec:	cb840000 	.word	0xcb840000

08003bf0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff f9c2 	bl	8002f86 <LL_ADC_IsDisableOngoing>
 8003c02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff f9a9 	bl	8002f60 <LL_ADC_IsEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d047      	beq.n	8003ca4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d144      	bne.n	8003ca4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 030d 	and.w	r3, r3, #13
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d10c      	bne.n	8003c42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff f983 	bl	8002f38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2203      	movs	r2, #3
 8003c38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c3a:	f7fe ffb3 	bl	8002ba4 <HAL_GetTick>
 8003c3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c40:	e029      	b.n	8003c96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c46:	f043 0210 	orr.w	r2, r3, #16
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e023      	b.n	8003ca6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c5e:	f7fe ffa1 	bl	8002ba4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d914      	bls.n	8003c96 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7e:	f043 0210 	orr.w	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8a:	f043 0201 	orr.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e007      	b.n	8003ca6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1dc      	bne.n	8003c5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <LL_ADC_StartCalibration>:
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003cc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cf4:	d101      	bne.n	8003cfa <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e04d      	b.n	8003dc0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff5f 	bl	8003bf0 <ADC_Disable>
 8003d32:	4603      	mov	r3, r0
 8003d34:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d136      	bne.n	8003daa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d44:	f023 0302 	bic.w	r3, r3, #2
 8003d48:	f043 0202 	orr.w	r2, r3, #2
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ffa9 	bl	8003cae <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d5c:	e014      	b.n	8003d88 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4a18      	ldr	r2, [pc, #96]	@ (8003dc8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d90d      	bls.n	8003d88 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d70:	f023 0312 	bic.w	r3, r3, #18
 8003d74:	f043 0210 	orr.w	r2, r3, #16
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e01b      	b.n	8003dc0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ffa7 	bl	8003ce0 <LL_ADC_IsCalibrationOnGoing>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e2      	bne.n	8003d5e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9c:	f023 0303 	bic.w	r3, r3, #3
 8003da0:	f043 0201 	orr.w	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003da8:	e005      	b.n	8003db6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dae:	f043 0210 	orr.w	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	0004de01 	.word	0x0004de01

08003dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e10 <__NVIC_SetPriorityGrouping+0x44>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003de8:	4013      	ands	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dfe:	4a04      	ldr	r2, [pc, #16]	@ (8003e10 <__NVIC_SetPriorityGrouping+0x44>)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	60d3      	str	r3, [r2, #12]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e18:	4b04      	ldr	r3, [pc, #16]	@ (8003e2c <__NVIC_GetPriorityGrouping+0x18>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	f003 0307 	and.w	r3, r3, #7
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	db0a      	blt.n	8003e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	490c      	ldr	r1, [pc, #48]	@ (8003e7c <__NVIC_SetPriority+0x4c>)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	440b      	add	r3, r1
 8003e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e58:	e00a      	b.n	8003e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4908      	ldr	r1, [pc, #32]	@ (8003e80 <__NVIC_SetPriority+0x50>)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3b04      	subs	r3, #4
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	761a      	strb	r2, [r3, #24]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000e100 	.word	0xe000e100
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	@ 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f1c3 0307 	rsb	r3, r3, #7
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	bf28      	it	cs
 8003ea2:	2304      	movcs	r3, #4
 8003ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d902      	bls.n	8003eb4 <NVIC_EncodePriority+0x30>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3b03      	subs	r3, #3
 8003eb2:	e000      	b.n	8003eb6 <NVIC_EncodePriority+0x32>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	4313      	orrs	r3, r2
         );
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3724      	adds	r7, #36	@ 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003efc:	d301      	bcc.n	8003f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003efe:	2301      	movs	r3, #1
 8003f00:	e00f      	b.n	8003f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f02:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <SysTick_Config+0x40>)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f0a:	210f      	movs	r1, #15
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f10:	f7ff ff8e 	bl	8003e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <SysTick_Config+0x40>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f1a:	4b04      	ldr	r3, [pc, #16]	@ (8003f2c <SysTick_Config+0x40>)
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	e000e010 	.word	0xe000e010

08003f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff47 	bl	8003dcc <__NVIC_SetPriorityGrouping>
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b086      	sub	sp, #24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	607a      	str	r2, [r7, #4]
 8003f52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f54:	f7ff ff5e 	bl	8003e14 <__NVIC_GetPriorityGrouping>
 8003f58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	6978      	ldr	r0, [r7, #20]
 8003f60:	f7ff ff90 	bl	8003e84 <NVIC_EncodePriority>
 8003f64:	4602      	mov	r2, r0
 8003f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff5f 	bl	8003e30 <__NVIC_SetPriority>
}
 8003f72:	bf00      	nop
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ffb2 	bl	8003eec <SysTick_Config>
 8003f88:	4603      	mov	r3, r0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fa2:	e15a      	b.n	800425a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	2101      	movs	r1, #1
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 814c 	beq.w	8004254 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d005      	beq.n	8003fd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d130      	bne.n	8004036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	2203      	movs	r2, #3
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800400a:	2201      	movs	r2, #1
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	091b      	lsrs	r3, r3, #4
 8004020:	f003 0201 	and.w	r2, r3, #1
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b03      	cmp	r3, #3
 8004040:	d017      	beq.n	8004072 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	2203      	movs	r2, #3
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d123      	bne.n	80040c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	08da      	lsrs	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3208      	adds	r2, #8
 8004086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	220f      	movs	r2, #15
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43db      	mvns	r3, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	08da      	lsrs	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3208      	adds	r2, #8
 80040c0:	6939      	ldr	r1, [r7, #16]
 80040c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	2203      	movs	r2, #3
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 0203 	and.w	r2, r3, #3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 80a6 	beq.w	8004254 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004108:	4b5b      	ldr	r3, [pc, #364]	@ (8004278 <HAL_GPIO_Init+0x2e4>)
 800410a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410c:	4a5a      	ldr	r2, [pc, #360]	@ (8004278 <HAL_GPIO_Init+0x2e4>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6613      	str	r3, [r2, #96]	@ 0x60
 8004114:	4b58      	ldr	r3, [pc, #352]	@ (8004278 <HAL_GPIO_Init+0x2e4>)
 8004116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004120:	4a56      	ldr	r2, [pc, #344]	@ (800427c <HAL_GPIO_Init+0x2e8>)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	089b      	lsrs	r3, r3, #2
 8004126:	3302      	adds	r3, #2
 8004128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	220f      	movs	r2, #15
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4013      	ands	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800414a:	d01f      	beq.n	800418c <HAL_GPIO_Init+0x1f8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a4c      	ldr	r2, [pc, #304]	@ (8004280 <HAL_GPIO_Init+0x2ec>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d019      	beq.n	8004188 <HAL_GPIO_Init+0x1f4>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a4b      	ldr	r2, [pc, #300]	@ (8004284 <HAL_GPIO_Init+0x2f0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <HAL_GPIO_Init+0x1f0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a4a      	ldr	r2, [pc, #296]	@ (8004288 <HAL_GPIO_Init+0x2f4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00d      	beq.n	8004180 <HAL_GPIO_Init+0x1ec>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a49      	ldr	r2, [pc, #292]	@ (800428c <HAL_GPIO_Init+0x2f8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <HAL_GPIO_Init+0x1e8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a48      	ldr	r2, [pc, #288]	@ (8004290 <HAL_GPIO_Init+0x2fc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_GPIO_Init+0x1e4>
 8004174:	2305      	movs	r3, #5
 8004176:	e00a      	b.n	800418e <HAL_GPIO_Init+0x1fa>
 8004178:	2306      	movs	r3, #6
 800417a:	e008      	b.n	800418e <HAL_GPIO_Init+0x1fa>
 800417c:	2304      	movs	r3, #4
 800417e:	e006      	b.n	800418e <HAL_GPIO_Init+0x1fa>
 8004180:	2303      	movs	r3, #3
 8004182:	e004      	b.n	800418e <HAL_GPIO_Init+0x1fa>
 8004184:	2302      	movs	r3, #2
 8004186:	e002      	b.n	800418e <HAL_GPIO_Init+0x1fa>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <HAL_GPIO_Init+0x1fa>
 800418c:	2300      	movs	r3, #0
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	f002 0203 	and.w	r2, r2, #3
 8004194:	0092      	lsls	r2, r2, #2
 8004196:	4093      	lsls	r3, r2
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800419e:	4937      	ldr	r1, [pc, #220]	@ (800427c <HAL_GPIO_Init+0x2e8>)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	3302      	adds	r3, #2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041ac:	4b39      	ldr	r3, [pc, #228]	@ (8004294 <HAL_GPIO_Init+0x300>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041d0:	4a30      	ldr	r2, [pc, #192]	@ (8004294 <HAL_GPIO_Init+0x300>)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004294 <HAL_GPIO_Init+0x300>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	43db      	mvns	r3, r3
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041fa:	4a26      	ldr	r2, [pc, #152]	@ (8004294 <HAL_GPIO_Init+0x300>)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004200:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <HAL_GPIO_Init+0x300>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	43db      	mvns	r3, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004224:	4a1b      	ldr	r2, [pc, #108]	@ (8004294 <HAL_GPIO_Init+0x300>)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800422a:	4b1a      	ldr	r3, [pc, #104]	@ (8004294 <HAL_GPIO_Init+0x300>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	43db      	mvns	r3, r3
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800424e:	4a11      	ldr	r2, [pc, #68]	@ (8004294 <HAL_GPIO_Init+0x300>)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	3301      	adds	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	f47f ae9d 	bne.w	8003fa4 <HAL_GPIO_Init+0x10>
  }
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40021000 	.word	0x40021000
 800427c:	40010000 	.word	0x40010000
 8004280:	48000400 	.word	0x48000400
 8004284:	48000800 	.word	0x48000800
 8004288:	48000c00 	.word	0x48000c00
 800428c:	48001000 	.word	0x48001000
 8004290:	48001400 	.word	0x48001400
 8004294:	40010400 	.word	0x40010400

08004298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e08d      	b.n	80043c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fd fb66 	bl	8001990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2224      	movs	r2, #36	@ 0x24
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d107      	bne.n	8004312 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	e006      	b.n	8004320 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800431e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d108      	bne.n	800433a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	e007      	b.n	800434a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004348:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800435c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800436c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69d9      	ldr	r1, [r3, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1a      	ldr	r2, [r3, #32]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d138      	bne.n	8004456 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e032      	b.n	8004458 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2224      	movs	r2, #36	@ 0x24
 80043fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004420:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6819      	ldr	r1, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e000      	b.n	8004458 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
  }
}
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b20      	cmp	r3, #32
 8004478:	d139      	bne.n	80044ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004484:	2302      	movs	r3, #2
 8004486:	e033      	b.n	80044f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2224      	movs	r2, #36	@ 0x24
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e000      	b.n	80044f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044ee:	2302      	movs	r3, #2
  }
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d141      	bne.n	800458e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800450a:	4b4b      	ldr	r3, [pc, #300]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004516:	d131      	bne.n	800457c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004518:	4b47      	ldr	r3, [pc, #284]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800451e:	4a46      	ldr	r2, [pc, #280]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004524:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004528:	4b43      	ldr	r3, [pc, #268]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004530:	4a41      	ldr	r2, [pc, #260]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004536:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004538:	4b40      	ldr	r3, [pc, #256]	@ (800463c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2232      	movs	r2, #50	@ 0x32
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	4a3f      	ldr	r2, [pc, #252]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	0c9b      	lsrs	r3, r3, #18
 800454a:	3301      	adds	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800454e:	e002      	b.n	8004556 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3b01      	subs	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004556:	4b38      	ldr	r3, [pc, #224]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004562:	d102      	bne.n	800456a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f2      	bne.n	8004550 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800456a:	4b33      	ldr	r3, [pc, #204]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004576:	d158      	bne.n	800462a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e057      	b.n	800462c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800457c:	4b2e      	ldr	r3, [pc, #184]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004582:	4a2d      	ldr	r2, [pc, #180]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800458c:	e04d      	b.n	800462a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004594:	d141      	bne.n	800461a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004596:	4b28      	ldr	r3, [pc, #160]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800459e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a2:	d131      	bne.n	8004608 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045a4:	4b24      	ldr	r3, [pc, #144]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045aa:	4a23      	ldr	r2, [pc, #140]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045b4:	4b20      	ldr	r3, [pc, #128]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2232      	movs	r2, #50	@ 0x32
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	0c9b      	lsrs	r3, r3, #18
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045da:	e002      	b.n	80045e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3b01      	subs	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045e2:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ee:	d102      	bne.n	80045f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f2      	bne.n	80045dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045f6:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004602:	d112      	bne.n	800462a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e011      	b.n	800462c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004608:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800460a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800460e:	4a0a      	ldr	r2, [pc, #40]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004618:	e007      	b.n	800462a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800461a:	4b07      	ldr	r3, [pc, #28]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004622:	4a05      	ldr	r2, [pc, #20]	@ (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004624:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004628:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40007000 	.word	0x40007000
 800463c:	20000000 	.word	0x20000000
 8004640:	431bde83 	.word	0x431bde83

08004644 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a04      	ldr	r2, [pc, #16]	@ (8004660 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800464e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004652:	6093      	str	r3, [r2, #8]
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40007000 	.word	0x40007000

08004664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e2fe      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d075      	beq.n	800476e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004682:	4b97      	ldr	r3, [pc, #604]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800468c:	4b94      	ldr	r3, [pc, #592]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d102      	bne.n	80046a2 <HAL_RCC_OscConfig+0x3e>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d002      	beq.n	80046a8 <HAL_RCC_OscConfig+0x44>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d10b      	bne.n	80046c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a8:	4b8d      	ldr	r3, [pc, #564]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d05b      	beq.n	800476c <HAL_RCC_OscConfig+0x108>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d157      	bne.n	800476c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e2d9      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c8:	d106      	bne.n	80046d8 <HAL_RCC_OscConfig+0x74>
 80046ca:	4b85      	ldr	r3, [pc, #532]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a84      	ldr	r2, [pc, #528]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e01d      	b.n	8004714 <HAL_RCC_OscConfig+0xb0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0x98>
 80046e2:	4b7f      	ldr	r3, [pc, #508]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a7e      	ldr	r2, [pc, #504]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80046e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	4b7c      	ldr	r3, [pc, #496]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7b      	ldr	r2, [pc, #492]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0xb0>
 80046fc:	4b78      	ldr	r3, [pc, #480]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a77      	ldr	r2, [pc, #476]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 8004702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b75      	ldr	r3, [pc, #468]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a74      	ldr	r2, [pc, #464]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 800470e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d013      	beq.n	8004744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe fa42 	bl	8002ba4 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004724:	f7fe fa3e 	bl	8002ba4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	@ 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e29e      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004736:	4b6a      	ldr	r3, [pc, #424]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0xc0>
 8004742:	e014      	b.n	800476e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fe fa2e 	bl	8002ba4 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7fe fa2a 	bl	8002ba4 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	@ 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e28a      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800475e:	4b60      	ldr	r3, [pc, #384]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0xe8>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d075      	beq.n	8004866 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477a:	4b59      	ldr	r3, [pc, #356]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004784:	4b56      	ldr	r3, [pc, #344]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b0c      	cmp	r3, #12
 8004792:	d102      	bne.n	800479a <HAL_RCC_OscConfig+0x136>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d002      	beq.n	80047a0 <HAL_RCC_OscConfig+0x13c>
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d11f      	bne.n	80047e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a0:	4b4f      	ldr	r3, [pc, #316]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_OscConfig+0x154>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e25d      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b8:	4b49      	ldr	r3, [pc, #292]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	4946      	ldr	r1, [pc, #280]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047cc:	4b45      	ldr	r3, [pc, #276]	@ (80048e4 <HAL_RCC_OscConfig+0x280>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fe f99b 	bl	8002b0c <HAL_InitTick>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d043      	beq.n	8004864 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e249      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d023      	beq.n	8004830 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e8:	4b3d      	ldr	r3, [pc, #244]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a3c      	ldr	r2, [pc, #240]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80047ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fe f9d6 	bl	8002ba4 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fc:	f7fe f9d2 	bl	8002ba4 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e232      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800480e:	4b34      	ldr	r3, [pc, #208]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481a:	4b31      	ldr	r3, [pc, #196]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	061b      	lsls	r3, r3, #24
 8004828:	492d      	ldr	r1, [pc, #180]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
 800482e:	e01a      	b.n	8004866 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004830:	4b2b      	ldr	r3, [pc, #172]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2a      	ldr	r2, [pc, #168]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 8004836:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800483a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fe f9b2 	bl	8002ba4 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004844:	f7fe f9ae 	bl	8002ba4 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e20e      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004856:	4b22      	ldr	r3, [pc, #136]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x1e0>
 8004862:	e000      	b.n	8004866 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004864:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d041      	beq.n	80048f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01c      	beq.n	80048b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800487a:	4b19      	ldr	r3, [pc, #100]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 800487c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004880:	4a17      	ldr	r2, [pc, #92]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488a:	f7fe f98b 	bl	8002ba4 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004892:	f7fe f987 	bl	8002ba4 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e1e7      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048a4:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80048a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0ef      	beq.n	8004892 <HAL_RCC_OscConfig+0x22e>
 80048b2:	e020      	b.n	80048f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b4:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ba:	4a09      	ldr	r2, [pc, #36]	@ (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80048bc:	f023 0301 	bic.w	r3, r3, #1
 80048c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fe f96e 	bl	8002ba4 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048ca:	e00d      	b.n	80048e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fe f96a 	bl	8002ba4 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d906      	bls.n	80048e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e1ca      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048e8:	4b8c      	ldr	r3, [pc, #560]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 80048ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ea      	bne.n	80048cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80a6 	beq.w	8004a50 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004908:	4b84      	ldr	r3, [pc, #528]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_OscConfig+0x2b4>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <HAL_RCC_OscConfig+0x2b6>
 8004918:	2300      	movs	r3, #0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004922:	4a7e      	ldr	r2, [pc, #504]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004928:	6593      	str	r3, [r2, #88]	@ 0x58
 800492a:	4b7c      	ldr	r3, [pc, #496]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004936:	2301      	movs	r3, #1
 8004938:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800493a:	4b79      	ldr	r3, [pc, #484]	@ (8004b20 <HAL_RCC_OscConfig+0x4bc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004942:	2b00      	cmp	r3, #0
 8004944:	d118      	bne.n	8004978 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004946:	4b76      	ldr	r3, [pc, #472]	@ (8004b20 <HAL_RCC_OscConfig+0x4bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a75      	ldr	r2, [pc, #468]	@ (8004b20 <HAL_RCC_OscConfig+0x4bc>)
 800494c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004952:	f7fe f927 	bl	8002ba4 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495a:	f7fe f923 	bl	8002ba4 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e183      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800496c:	4b6c      	ldr	r3, [pc, #432]	@ (8004b20 <HAL_RCC_OscConfig+0x4bc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d108      	bne.n	8004992 <HAL_RCC_OscConfig+0x32e>
 8004980:	4b66      	ldr	r3, [pc, #408]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004986:	4a65      	ldr	r2, [pc, #404]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004990:	e024      	b.n	80049dc <HAL_RCC_OscConfig+0x378>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b05      	cmp	r3, #5
 8004998:	d110      	bne.n	80049bc <HAL_RCC_OscConfig+0x358>
 800499a:	4b60      	ldr	r3, [pc, #384]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 80049a2:	f043 0304 	orr.w	r3, r3, #4
 80049a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049aa:	4b5c      	ldr	r3, [pc, #368]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b0:	4a5a      	ldr	r2, [pc, #360]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049ba:	e00f      	b.n	80049dc <HAL_RCC_OscConfig+0x378>
 80049bc:	4b57      	ldr	r3, [pc, #348]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	4a56      	ldr	r2, [pc, #344]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049cc:	4b53      	ldr	r3, [pc, #332]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	4a52      	ldr	r2, [pc, #328]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 80049d4:	f023 0304 	bic.w	r3, r3, #4
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d016      	beq.n	8004a12 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fe f8de 	bl	8002ba4 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fe f8da 	bl	8002ba4 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e138      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a02:	4b46      	ldr	r3, [pc, #280]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0ed      	beq.n	80049ec <HAL_RCC_OscConfig+0x388>
 8004a10:	e015      	b.n	8004a3e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a12:	f7fe f8c7 	bl	8002ba4 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a18:	e00a      	b.n	8004a30 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f7fe f8c3 	bl	8002ba4 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e121      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a30:	4b3a      	ldr	r3, [pc, #232]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1ed      	bne.n	8004a1a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a3e:	7ffb      	ldrb	r3, [r7, #31]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a44:	4b35      	ldr	r3, [pc, #212]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a48:	4a34      	ldr	r2, [pc, #208]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a4e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d03c      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01c      	beq.n	8004a9e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a64:	4b2d      	ldr	r3, [pc, #180]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fe f896 	bl	8002ba4 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a7c:	f7fe f892 	bl	8002ba4 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e0f2      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a8e:	4b23      	ldr	r3, [pc, #140]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0ef      	beq.n	8004a7c <HAL_RCC_OscConfig+0x418>
 8004a9c:	e01b      	b.n	8004ad6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aae:	f7fe f879 	bl	8002ba4 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ab6:	f7fe f875 	bl	8002ba4 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e0d5      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ac8:	4b14      	ldr	r3, [pc, #80]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1ef      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80c9 	beq.w	8004c72 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 030c 	and.w	r3, r3, #12
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	f000 8083 	beq.w	8004bf4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d15e      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af6:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a08      	ldr	r2, [pc, #32]	@ (8004b1c <HAL_RCC_OscConfig+0x4b8>)
 8004afc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fe f84f 	bl	8002ba4 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b08:	e00c      	b.n	8004b24 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0a:	f7fe f84b 	bl	8002ba4 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d905      	bls.n	8004b24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0ab      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b24:	4b55      	ldr	r3, [pc, #340]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ec      	bne.n	8004b0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b30:	4b52      	ldr	r3, [pc, #328]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	4b52      	ldr	r3, [pc, #328]	@ (8004c80 <HAL_RCC_OscConfig+0x61c>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6a11      	ldr	r1, [r2, #32]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b40:	3a01      	subs	r2, #1
 8004b42:	0112      	lsls	r2, r2, #4
 8004b44:	4311      	orrs	r1, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b4a:	0212      	lsls	r2, r2, #8
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b52:	0852      	lsrs	r2, r2, #1
 8004b54:	3a01      	subs	r2, #1
 8004b56:	0552      	lsls	r2, r2, #21
 8004b58:	4311      	orrs	r1, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b5e:	0852      	lsrs	r2, r2, #1
 8004b60:	3a01      	subs	r2, #1
 8004b62:	0652      	lsls	r2, r2, #25
 8004b64:	4311      	orrs	r1, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b6a:	06d2      	lsls	r2, r2, #27
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	4943      	ldr	r1, [pc, #268]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b74:	4b41      	ldr	r3, [pc, #260]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a40      	ldr	r2, [pc, #256]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b80:	4b3e      	ldr	r3, [pc, #248]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a3d      	ldr	r2, [pc, #244]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fe f80a 	bl	8002ba4 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fe f806 	bl	8002ba4 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e066      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba6:	4b35      	ldr	r3, [pc, #212]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x530>
 8004bb2:	e05e      	b.n	8004c72 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb4:	4b31      	ldr	r3, [pc, #196]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a30      	ldr	r2, [pc, #192]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fd fff0 	bl	8002ba4 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fd ffec 	bl	8002ba4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e04c      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bda:	4b28      	ldr	r3, [pc, #160]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004be6:	4b25      	ldr	r3, [pc, #148]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	4924      	ldr	r1, [pc, #144]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004bec:	4b25      	ldr	r3, [pc, #148]	@ (8004c84 <HAL_RCC_OscConfig+0x620>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60cb      	str	r3, [r1, #12]
 8004bf2:	e03e      	b.n	8004c72 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e039      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c00:	4b1e      	ldr	r3, [pc, #120]	@ (8004c7c <HAL_RCC_OscConfig+0x618>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f003 0203 	and.w	r2, r3, #3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d12c      	bne.n	8004c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d123      	bne.n	8004c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d11b      	bne.n	8004c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d113      	bne.n	8004c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	3b01      	subs	r3, #1
 8004c54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	3b01      	subs	r3, #1
 8004c68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	019f800c 	.word	0x019f800c
 8004c84:	feeefffc 	.word	0xfeeefffc

08004c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e11e      	b.n	8004ede <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b91      	ldr	r3, [pc, #580]	@ (8004ee8 <HAL_RCC_ClockConfig+0x260>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d910      	bls.n	8004cd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b8e      	ldr	r3, [pc, #568]	@ (8004ee8 <HAL_RCC_ClockConfig+0x260>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f023 020f 	bic.w	r2, r3, #15
 8004cb6:	498c      	ldr	r1, [pc, #560]	@ (8004ee8 <HAL_RCC_ClockConfig+0x260>)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b8a      	ldr	r3, [pc, #552]	@ (8004ee8 <HAL_RCC_ClockConfig+0x260>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e106      	b.n	8004ede <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d073      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d129      	bne.n	8004d38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce4:	4b81      	ldr	r3, [pc, #516]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0f4      	b.n	8004ede <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004cf4:	f000 f99e 	bl	8005034 <RCC_GetSysClockFreqFromPLLSource>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4a7c      	ldr	r2, [pc, #496]	@ (8004ef0 <HAL_RCC_ClockConfig+0x268>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d93f      	bls.n	8004d82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d02:	4b7a      	ldr	r3, [pc, #488]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d033      	beq.n	8004d82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d12f      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d22:	4b72      	ldr	r3, [pc, #456]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d2a:	4a70      	ldr	r2, [pc, #448]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d32:	2380      	movs	r3, #128	@ 0x80
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e024      	b.n	8004d82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d107      	bne.n	8004d50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d40:	4b6a      	ldr	r3, [pc, #424]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0c6      	b.n	8004ede <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d50:	4b66      	ldr	r3, [pc, #408]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0be      	b.n	8004ede <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d60:	f000 f8ce 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4a61      	ldr	r2, [pc, #388]	@ (8004ef0 <HAL_RCC_ClockConfig+0x268>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d909      	bls.n	8004d82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d76:	4a5d      	ldr	r2, [pc, #372]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d7e:	2380      	movs	r3, #128	@ 0x80
 8004d80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d82:	4b5a      	ldr	r3, [pc, #360]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f023 0203 	bic.w	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4957      	ldr	r1, [pc, #348]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d94:	f7fd ff06 	bl	8002ba4 <HAL_GetTick>
 8004d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9c:	f7fd ff02 	bl	8002ba4 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e095      	b.n	8004ede <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	4b4e      	ldr	r3, [pc, #312]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 020c 	and.w	r2, r3, #12
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d1eb      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d023      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ddc:	4b43      	ldr	r3, [pc, #268]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4a42      	ldr	r2, [pc, #264]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004de2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004de6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004df4:	4b3d      	ldr	r3, [pc, #244]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004dfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e04:	4b39      	ldr	r3, [pc, #228]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4936      	ldr	r1, [pc, #216]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b80      	cmp	r3, #128	@ 0x80
 8004e1c:	d105      	bne.n	8004e2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e1e:	4b33      	ldr	r3, [pc, #204]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	4a32      	ldr	r2, [pc, #200]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004e24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ee8 <HAL_RCC_ClockConfig+0x260>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d21d      	bcs.n	8004e74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <HAL_RCC_ClockConfig+0x260>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 020f 	bic.w	r2, r3, #15
 8004e40:	4929      	ldr	r1, [pc, #164]	@ (8004ee8 <HAL_RCC_ClockConfig+0x260>)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e48:	f7fd feac 	bl	8002ba4 <HAL_GetTick>
 8004e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e50:	f7fd fea8 	bl	8002ba4 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e03b      	b.n	8004ede <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b20      	ldr	r3, [pc, #128]	@ (8004ee8 <HAL_RCC_ClockConfig+0x260>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d1ed      	bne.n	8004e50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e80:	4b1a      	ldr	r3, [pc, #104]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4917      	ldr	r1, [pc, #92]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e9e:	4b13      	ldr	r3, [pc, #76]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	490f      	ldr	r1, [pc, #60]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eb2:	f000 f825 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004eec <HAL_RCC_ClockConfig+0x264>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	490c      	ldr	r1, [pc, #48]	@ (8004ef4 <HAL_RCC_ClockConfig+0x26c>)
 8004ec4:	5ccb      	ldrb	r3, [r1, r3]
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	fa22 f303 	lsr.w	r3, r2, r3
 8004ece:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef8 <HAL_RCC_ClockConfig+0x270>)
 8004ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8004efc <HAL_RCC_ClockConfig+0x274>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fd fe18 	bl	8002b0c <HAL_InitTick>
 8004edc:	4603      	mov	r3, r0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40022000 	.word	0x40022000
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	04c4b400 	.word	0x04c4b400
 8004ef4:	0800a474 	.word	0x0800a474
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	20000004 	.word	0x20000004

08004f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f06:	4b2c      	ldr	r3, [pc, #176]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d102      	bne.n	8004f18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f12:	4b2a      	ldr	r3, [pc, #168]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	e047      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f18:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d102      	bne.n	8004f2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f24:	4b26      	ldr	r3, [pc, #152]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	e03e      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f2a:	4b23      	ldr	r3, [pc, #140]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b0c      	cmp	r3, #12
 8004f34:	d136      	bne.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f36:	4b20      	ldr	r3, [pc, #128]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f40:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d10c      	bne.n	8004f6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f54:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	4a16      	ldr	r2, [pc, #88]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f5e:	68d2      	ldr	r2, [r2, #12]
 8004f60:	0a12      	lsrs	r2, r2, #8
 8004f62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f66:	fb02 f303 	mul.w	r3, r2, r3
 8004f6a:	617b      	str	r3, [r7, #20]
      break;
 8004f6c:	e00c      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f6e:	4a13      	ldr	r2, [pc, #76]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f76:	4a10      	ldr	r2, [pc, #64]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f78:	68d2      	ldr	r2, [r2, #12]
 8004f7a:	0a12      	lsrs	r2, r2, #8
 8004f7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f80:	fb02 f303 	mul.w	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]
      break;
 8004f86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f88:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	0e5b      	lsrs	r3, r3, #25
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	3301      	adds	r3, #1
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	e001      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fa8:	693b      	ldr	r3, [r7, #16]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	00f42400 	.word	0x00f42400
 8004fc0:	02dc6c00 	.word	0x02dc6c00

08004fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc8:	4b03      	ldr	r3, [pc, #12]	@ (8004fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fca:	681b      	ldr	r3, [r3, #0]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000000 	.word	0x20000000

08004fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fe0:	f7ff fff0 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4904      	ldr	r1, [pc, #16]	@ (8005004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000
 8005004:	0800a484 	.word	0x0800a484

08005008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800500c:	f7ff ffda 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8005010:	4602      	mov	r2, r0
 8005012:	4b06      	ldr	r3, [pc, #24]	@ (800502c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	0adb      	lsrs	r3, r3, #11
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	4904      	ldr	r1, [pc, #16]	@ (8005030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000
 8005030:	0800a484 	.word	0x0800a484

08005034 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800503a:	4b1e      	ldr	r3, [pc, #120]	@ (80050b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005044:	4b1b      	ldr	r3, [pc, #108]	@ (80050b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	3301      	adds	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d10c      	bne.n	8005072 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005058:	4a17      	ldr	r2, [pc, #92]	@ (80050b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	4a14      	ldr	r2, [pc, #80]	@ (80050b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005062:	68d2      	ldr	r2, [r2, #12]
 8005064:	0a12      	lsrs	r2, r2, #8
 8005066:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	617b      	str	r3, [r7, #20]
    break;
 8005070:	e00c      	b.n	800508c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005072:	4a12      	ldr	r2, [pc, #72]	@ (80050bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	fbb2 f3f3 	udiv	r3, r2, r3
 800507a:	4a0e      	ldr	r2, [pc, #56]	@ (80050b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800507c:	68d2      	ldr	r2, [r2, #12]
 800507e:	0a12      	lsrs	r2, r2, #8
 8005080:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	617b      	str	r3, [r7, #20]
    break;
 800508a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800508c:	4b09      	ldr	r3, [pc, #36]	@ (80050b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	0e5b      	lsrs	r3, r3, #25
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	3301      	adds	r3, #1
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80050a6:	687b      	ldr	r3, [r7, #4]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	40021000 	.word	0x40021000
 80050b8:	02dc6c00 	.word	0x02dc6c00
 80050bc:	00f42400 	.word	0x00f42400

080050c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050c8:	2300      	movs	r3, #0
 80050ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050cc:	2300      	movs	r3, #0
 80050ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8098 	beq.w	800520e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050de:	2300      	movs	r3, #0
 80050e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e2:	4b43      	ldr	r3, [pc, #268]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10d      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ee:	4b40      	ldr	r3, [pc, #256]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f2:	4a3f      	ldr	r2, [pc, #252]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050fa:	4b3d      	ldr	r3, [pc, #244]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005102:	60bb      	str	r3, [r7, #8]
 8005104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005106:	2301      	movs	r3, #1
 8005108:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800510a:	4b3a      	ldr	r3, [pc, #232]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a39      	ldr	r2, [pc, #228]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005114:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005116:	f7fd fd45 	bl	8002ba4 <HAL_GetTick>
 800511a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800511c:	e009      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511e:	f7fd fd41 	bl	8002ba4 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d902      	bls.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	74fb      	strb	r3, [r7, #19]
        break;
 8005130:	e005      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005132:	4b30      	ldr	r3, [pc, #192]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ef      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800513e:	7cfb      	ldrb	r3, [r7, #19]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d159      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005144:	4b2a      	ldr	r3, [pc, #168]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800514e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01e      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	d019      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005160:	4b23      	ldr	r3, [pc, #140]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800516c:	4b20      	ldr	r3, [pc, #128]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005172:	4a1f      	ldr	r2, [pc, #124]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800517c:	4b1c      	ldr	r3, [pc, #112]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005182:	4a1b      	ldr	r2, [pc, #108]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800518c:	4a18      	ldr	r2, [pc, #96]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519e:	f7fd fd01 	bl	8002ba4 <HAL_GetTick>
 80051a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a4:	e00b      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a6:	f7fd fcfd 	bl	8002ba4 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d902      	bls.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	74fb      	strb	r3, [r7, #19]
            break;
 80051bc:	e006      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051be:	4b0c      	ldr	r3, [pc, #48]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0ec      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10b      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d2:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e0:	4903      	ldr	r1, [pc, #12]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051e8:	e008      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051ea:	7cfb      	ldrb	r3, [r7, #19]
 80051ec:	74bb      	strb	r3, [r7, #18]
 80051ee:	e005      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f8:	7cfb      	ldrb	r3, [r7, #19]
 80051fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051fc:	7c7b      	ldrb	r3, [r7, #17]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d105      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005202:	4ba7      	ldr	r3, [pc, #668]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005206:	4aa6      	ldr	r2, [pc, #664]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800520c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800521a:	4ba1      	ldr	r3, [pc, #644]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005220:	f023 0203 	bic.w	r2, r3, #3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	499d      	ldr	r1, [pc, #628]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800523c:	4b98      	ldr	r3, [pc, #608]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005242:	f023 020c 	bic.w	r2, r3, #12
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	4995      	ldr	r1, [pc, #596]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800525e:	4b90      	ldr	r3, [pc, #576]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005264:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	498c      	ldr	r1, [pc, #560]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005280:	4b87      	ldr	r3, [pc, #540]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005286:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	4984      	ldr	r1, [pc, #528]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052a2:	4b7f      	ldr	r3, [pc, #508]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	497b      	ldr	r1, [pc, #492]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052c4:	4b76      	ldr	r3, [pc, #472]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	4973      	ldr	r1, [pc, #460]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052e6:	4b6e      	ldr	r3, [pc, #440]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	496a      	ldr	r1, [pc, #424]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005308:	4b65      	ldr	r3, [pc, #404]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	4962      	ldr	r1, [pc, #392]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800532a:	4b5d      	ldr	r3, [pc, #372]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005330:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	4959      	ldr	r1, [pc, #356]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800534c:	4b54      	ldr	r3, [pc, #336]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005352:	f023 0203 	bic.w	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535a:	4951      	ldr	r1, [pc, #324]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800536e:	4b4c      	ldr	r3, [pc, #304]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005374:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	4948      	ldr	r1, [pc, #288]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800538c:	2b00      	cmp	r3, #0
 800538e:	d015      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005390:	4b43      	ldr	r3, [pc, #268]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005396:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539e:	4940      	ldr	r1, [pc, #256]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ae:	d105      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b0:	4b3b      	ldr	r3, [pc, #236]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a3a      	ldr	r2, [pc, #232]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d015      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053c8:	4b35      	ldr	r3, [pc, #212]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d6:	4932      	ldr	r1, [pc, #200]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053e6:	d105      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e8:	4b2d      	ldr	r3, [pc, #180]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053f2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d015      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005400:	4b27      	ldr	r3, [pc, #156]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005406:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	4924      	ldr	r1, [pc, #144]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800541e:	d105      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005420:	4b1f      	ldr	r3, [pc, #124]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800542a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d015      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005438:	4b19      	ldr	r3, [pc, #100]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005446:	4916      	ldr	r1, [pc, #88]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005456:	d105      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005458:	4b11      	ldr	r3, [pc, #68]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a10      	ldr	r2, [pc, #64]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005462:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d019      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005470:	4b0b      	ldr	r3, [pc, #44]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	4908      	ldr	r1, [pc, #32]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800548e:	d109      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005490:	4b03      	ldr	r3, [pc, #12]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4a02      	ldr	r2, [pc, #8]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800549a:	60d3      	str	r3, [r2, #12]
 800549c:	e002      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054b0:	4b29      	ldr	r3, [pc, #164]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054be:	4926      	ldr	r1, [pc, #152]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ce:	d105      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054d0:	4b21      	ldr	r3, [pc, #132]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a20      	ldr	r2, [pc, #128]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054da:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80054e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f6:	4918      	ldr	r1, [pc, #96]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005506:	d105      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005508:	4b13      	ldr	r3, [pc, #76]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a12      	ldr	r2, [pc, #72]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800550e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005512:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d015      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005520:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005526:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552e:	490a      	ldr	r1, [pc, #40]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800553a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800553e:	d105      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005540:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4a04      	ldr	r2, [pc, #16]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800554a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800554c:	7cbb      	ldrb	r3, [r7, #18]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000

0800555c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e027      	b.n	80055be <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	7a5b      	ldrb	r3, [r3, #9]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d105      	bne.n	8005584 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fc fa84 	bl	8001a8c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f023 0108 	bic.w	r1, r3, #8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0204 	orr.w	r2, r2, #4
 80055ae:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	7a1b      	ldrb	r3, [r3, #8]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_RNG_GenerateRandomNumber+0x1a>
 80055dc:	2302      	movs	r3, #2
 80055de:	e044      	b.n	800566a <HAL_RNG_GenerateRandomNumber+0xa4>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	7a5b      	ldrb	r3, [r3, #9]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d133      	bne.n	8005658 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055f6:	f7fd fad5 	bl	8002ba4 <HAL_GetTick>
 80055fa:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80055fc:	e018      	b.n	8005630 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80055fe:	f7fd fad1 	bl	8002ba4 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d911      	bls.n	8005630 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d00a      	beq.n	8005630 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e01c      	b.n	800566a <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b01      	cmp	r3, #1
 800563c:	d1df      	bne.n	80055fe <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	725a      	strb	r2, [r3, #9]
 8005656:	e004      	b.n	8005662 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2204      	movs	r2, #4
 800565c:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	721a      	strb	r2, [r3, #8]

  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e049      	b.n	8005718 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7fc fa2b 	bl	8001af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f000 fc43 	bl	8005f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d001      	beq.n	8005738 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e04c      	b.n	80057d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a26      	ldr	r2, [pc, #152]	@ (80057e0 <HAL_TIM_Base_Start+0xc0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d022      	beq.n	8005790 <HAL_TIM_Base_Start+0x70>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005752:	d01d      	beq.n	8005790 <HAL_TIM_Base_Start+0x70>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a22      	ldr	r2, [pc, #136]	@ (80057e4 <HAL_TIM_Base_Start+0xc4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d018      	beq.n	8005790 <HAL_TIM_Base_Start+0x70>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a21      	ldr	r2, [pc, #132]	@ (80057e8 <HAL_TIM_Base_Start+0xc8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d013      	beq.n	8005790 <HAL_TIM_Base_Start+0x70>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1f      	ldr	r2, [pc, #124]	@ (80057ec <HAL_TIM_Base_Start+0xcc>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <HAL_TIM_Base_Start+0x70>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1e      	ldr	r2, [pc, #120]	@ (80057f0 <HAL_TIM_Base_Start+0xd0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_TIM_Base_Start+0x70>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1c      	ldr	r2, [pc, #112]	@ (80057f4 <HAL_TIM_Base_Start+0xd4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_TIM_Base_Start+0x70>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1b      	ldr	r2, [pc, #108]	@ (80057f8 <HAL_TIM_Base_Start+0xd8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d115      	bne.n	80057bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	4b19      	ldr	r3, [pc, #100]	@ (80057fc <HAL_TIM_Base_Start+0xdc>)
 8005798:	4013      	ands	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b06      	cmp	r3, #6
 80057a0:	d015      	beq.n	80057ce <HAL_TIM_Base_Start+0xae>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a8:	d011      	beq.n	80057ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	e008      	b.n	80057ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e000      	b.n	80057d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40015000 	.word	0x40015000
 80057fc:	00010007 	.word	0x00010007

08005800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e049      	b.n	80058a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f841 	bl	80058ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f000 fb7c 	bl	8005f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
	...

080058c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <HAL_TIM_PWM_Start+0x24>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	bf14      	ite	ne
 80058e0:	2301      	movne	r3, #1
 80058e2:	2300      	moveq	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	e03c      	b.n	8005962 <HAL_TIM_PWM_Start+0x9e>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d109      	bne.n	8005902 <HAL_TIM_PWM_Start+0x3e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	bf14      	ite	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	2300      	moveq	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	e02f      	b.n	8005962 <HAL_TIM_PWM_Start+0x9e>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d109      	bne.n	800591c <HAL_TIM_PWM_Start+0x58>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	bf14      	ite	ne
 8005914:	2301      	movne	r3, #1
 8005916:	2300      	moveq	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	e022      	b.n	8005962 <HAL_TIM_PWM_Start+0x9e>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b0c      	cmp	r3, #12
 8005920:	d109      	bne.n	8005936 <HAL_TIM_PWM_Start+0x72>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b01      	cmp	r3, #1
 800592c:	bf14      	ite	ne
 800592e:	2301      	movne	r3, #1
 8005930:	2300      	moveq	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	e015      	b.n	8005962 <HAL_TIM_PWM_Start+0x9e>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b10      	cmp	r3, #16
 800593a:	d109      	bne.n	8005950 <HAL_TIM_PWM_Start+0x8c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	e008      	b.n	8005962 <HAL_TIM_PWM_Start+0x9e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	bf14      	ite	ne
 800595c:	2301      	movne	r3, #1
 800595e:	2300      	moveq	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e0a6      	b.n	8005ab8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_TIM_PWM_Start+0xb6>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005978:	e023      	b.n	80059c2 <HAL_TIM_PWM_Start+0xfe>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b04      	cmp	r3, #4
 800597e:	d104      	bne.n	800598a <HAL_TIM_PWM_Start+0xc6>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005988:	e01b      	b.n	80059c2 <HAL_TIM_PWM_Start+0xfe>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b08      	cmp	r3, #8
 800598e:	d104      	bne.n	800599a <HAL_TIM_PWM_Start+0xd6>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005998:	e013      	b.n	80059c2 <HAL_TIM_PWM_Start+0xfe>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b0c      	cmp	r3, #12
 800599e:	d104      	bne.n	80059aa <HAL_TIM_PWM_Start+0xe6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059a8:	e00b      	b.n	80059c2 <HAL_TIM_PWM_Start+0xfe>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d104      	bne.n	80059ba <HAL_TIM_PWM_Start+0xf6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059b8:	e003      	b.n	80059c2 <HAL_TIM_PWM_Start+0xfe>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2201      	movs	r2, #1
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 ff30 	bl	8006830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ac0 <HAL_TIM_PWM_Start+0x1fc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d018      	beq.n	8005a0c <HAL_TIM_PWM_Start+0x148>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a39      	ldr	r2, [pc, #228]	@ (8005ac4 <HAL_TIM_PWM_Start+0x200>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <HAL_TIM_PWM_Start+0x148>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a37      	ldr	r2, [pc, #220]	@ (8005ac8 <HAL_TIM_PWM_Start+0x204>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00e      	beq.n	8005a0c <HAL_TIM_PWM_Start+0x148>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a36      	ldr	r2, [pc, #216]	@ (8005acc <HAL_TIM_PWM_Start+0x208>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d009      	beq.n	8005a0c <HAL_TIM_PWM_Start+0x148>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a34      	ldr	r2, [pc, #208]	@ (8005ad0 <HAL_TIM_PWM_Start+0x20c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d004      	beq.n	8005a0c <HAL_TIM_PWM_Start+0x148>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a33      	ldr	r2, [pc, #204]	@ (8005ad4 <HAL_TIM_PWM_Start+0x210>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIM_PWM_Start+0x14c>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <HAL_TIM_PWM_Start+0x14e>
 8005a10:	2300      	movs	r3, #0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d007      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a25      	ldr	r2, [pc, #148]	@ (8005ac0 <HAL_TIM_PWM_Start+0x1fc>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d022      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x1b2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a38:	d01d      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x1b2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a26      	ldr	r2, [pc, #152]	@ (8005ad8 <HAL_TIM_PWM_Start+0x214>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x1b2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a24      	ldr	r2, [pc, #144]	@ (8005adc <HAL_TIM_PWM_Start+0x218>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x1b2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a23      	ldr	r2, [pc, #140]	@ (8005ae0 <HAL_TIM_PWM_Start+0x21c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x1b2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a19      	ldr	r2, [pc, #100]	@ (8005ac4 <HAL_TIM_PWM_Start+0x200>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x1b2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a18      	ldr	r2, [pc, #96]	@ (8005ac8 <HAL_TIM_PWM_Start+0x204>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x1b2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a18      	ldr	r2, [pc, #96]	@ (8005ad4 <HAL_TIM_PWM_Start+0x210>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d115      	bne.n	8005aa2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	4b19      	ldr	r3, [pc, #100]	@ (8005ae4 <HAL_TIM_PWM_Start+0x220>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b06      	cmp	r3, #6
 8005a86:	d015      	beq.n	8005ab4 <HAL_TIM_PWM_Start+0x1f0>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a8e:	d011      	beq.n	8005ab4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa0:	e008      	b.n	8005ab4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0201 	orr.w	r2, r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e000      	b.n	8005ab6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40013400 	.word	0x40013400
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	40014400 	.word	0x40014400
 8005ad0:	40014800 	.word	0x40014800
 8005ad4:	40015000 	.word	0x40015000
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	00010007 	.word	0x00010007

08005ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e0ff      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b14      	cmp	r3, #20
 8005b12:	f200 80f0 	bhi.w	8005cf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b16:	a201      	add	r2, pc, #4	@ (adr r2, 8005b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005cf7 	.word	0x08005cf7
 8005b24:	08005cf7 	.word	0x08005cf7
 8005b28:	08005cf7 	.word	0x08005cf7
 8005b2c:	08005bb1 	.word	0x08005bb1
 8005b30:	08005cf7 	.word	0x08005cf7
 8005b34:	08005cf7 	.word	0x08005cf7
 8005b38:	08005cf7 	.word	0x08005cf7
 8005b3c:	08005bf3 	.word	0x08005bf3
 8005b40:	08005cf7 	.word	0x08005cf7
 8005b44:	08005cf7 	.word	0x08005cf7
 8005b48:	08005cf7 	.word	0x08005cf7
 8005b4c:	08005c33 	.word	0x08005c33
 8005b50:	08005cf7 	.word	0x08005cf7
 8005b54:	08005cf7 	.word	0x08005cf7
 8005b58:	08005cf7 	.word	0x08005cf7
 8005b5c:	08005c75 	.word	0x08005c75
 8005b60:	08005cf7 	.word	0x08005cf7
 8005b64:	08005cf7 	.word	0x08005cf7
 8005b68:	08005cf7 	.word	0x08005cf7
 8005b6c:	08005cb5 	.word	0x08005cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fa94 	bl	80060a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0208 	orr.w	r2, r2, #8
 8005b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0204 	bic.w	r2, r2, #4
 8005b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6999      	ldr	r1, [r3, #24]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	619a      	str	r2, [r3, #24]
      break;
 8005bae:	e0a5      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fb0e 	bl	80061d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6999      	ldr	r1, [r3, #24]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	021a      	lsls	r2, r3, #8
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	619a      	str	r2, [r3, #24]
      break;
 8005bf0:	e084      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fb81 	bl	8006300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0208 	orr.w	r2, r2, #8
 8005c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0204 	bic.w	r2, r2, #4
 8005c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69d9      	ldr	r1, [r3, #28]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	61da      	str	r2, [r3, #28]
      break;
 8005c30:	e064      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fbf3 	bl	8006424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69d9      	ldr	r1, [r3, #28]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	021a      	lsls	r2, r3, #8
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	61da      	str	r2, [r3, #28]
      break;
 8005c72:	e043      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fc66 	bl	800654c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0208 	orr.w	r2, r2, #8
 8005c8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0204 	bic.w	r2, r2, #4
 8005c9e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005cb2:	e023      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fcb0 	bl	8006620 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cde:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	021a      	lsls	r2, r3, #8
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005cf4:	e002      	b.n	8005cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop

08005d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_ConfigClockSource+0x1c>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e0f6      	b.n	8005f1a <HAL_TIM_ConfigClockSource+0x20a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005d4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a6f      	ldr	r2, [pc, #444]	@ (8005f24 <HAL_TIM_ConfigClockSource+0x214>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	f000 80c1 	beq.w	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005d6c:	4a6d      	ldr	r2, [pc, #436]	@ (8005f24 <HAL_TIM_ConfigClockSource+0x214>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	f200 80c6 	bhi.w	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d74:	4a6c      	ldr	r2, [pc, #432]	@ (8005f28 <HAL_TIM_ConfigClockSource+0x218>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	f000 80b9 	beq.w	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005d7c:	4a6a      	ldr	r2, [pc, #424]	@ (8005f28 <HAL_TIM_ConfigClockSource+0x218>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	f200 80be 	bhi.w	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d84:	4a69      	ldr	r2, [pc, #420]	@ (8005f2c <HAL_TIM_ConfigClockSource+0x21c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	f000 80b1 	beq.w	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005d8c:	4a67      	ldr	r2, [pc, #412]	@ (8005f2c <HAL_TIM_ConfigClockSource+0x21c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	f200 80b6 	bhi.w	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d94:	4a66      	ldr	r2, [pc, #408]	@ (8005f30 <HAL_TIM_ConfigClockSource+0x220>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	f000 80a9 	beq.w	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005d9c:	4a64      	ldr	r2, [pc, #400]	@ (8005f30 <HAL_TIM_ConfigClockSource+0x220>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	f200 80ae 	bhi.w	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005da4:	4a63      	ldr	r2, [pc, #396]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x224>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	f000 80a1 	beq.w	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005dac:	4a61      	ldr	r2, [pc, #388]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x224>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	f200 80a6 	bhi.w	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005db4:	4a60      	ldr	r2, [pc, #384]	@ (8005f38 <HAL_TIM_ConfigClockSource+0x228>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	f000 8099 	beq.w	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005dbc:	4a5e      	ldr	r2, [pc, #376]	@ (8005f38 <HAL_TIM_ConfigClockSource+0x228>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	f200 809e 	bhi.w	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005dc8:	f000 8091 	beq.w	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005dcc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005dd0:	f200 8096 	bhi.w	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dd8:	f000 8089 	beq.w	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005ddc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005de0:	f200 808e 	bhi.w	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005de8:	d03e      	beq.n	8005e68 <HAL_TIM_ConfigClockSource+0x158>
 8005dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dee:	f200 8087 	bhi.w	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df6:	f000 8086 	beq.w	8005f06 <HAL_TIM_ConfigClockSource+0x1f6>
 8005dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dfe:	d87f      	bhi.n	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e00:	2b70      	cmp	r3, #112	@ 0x70
 8005e02:	d01a      	beq.n	8005e3a <HAL_TIM_ConfigClockSource+0x12a>
 8005e04:	2b70      	cmp	r3, #112	@ 0x70
 8005e06:	d87b      	bhi.n	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e08:	2b60      	cmp	r3, #96	@ 0x60
 8005e0a:	d050      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x19e>
 8005e0c:	2b60      	cmp	r3, #96	@ 0x60
 8005e0e:	d877      	bhi.n	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e10:	2b50      	cmp	r3, #80	@ 0x50
 8005e12:	d03c      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x17e>
 8005e14:	2b50      	cmp	r3, #80	@ 0x50
 8005e16:	d873      	bhi.n	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e18:	2b40      	cmp	r3, #64	@ 0x40
 8005e1a:	d058      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0x1be>
 8005e1c:	2b40      	cmp	r3, #64	@ 0x40
 8005e1e:	d86f      	bhi.n	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e20:	2b30      	cmp	r3, #48	@ 0x30
 8005e22:	d064      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005e24:	2b30      	cmp	r3, #48	@ 0x30
 8005e26:	d86b      	bhi.n	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d060      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d867      	bhi.n	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d05c      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d05a      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0x1de>
 8005e38:	e062      	b.n	8005f00 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e4a:	f000 fcd1 	bl	80067f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	609a      	str	r2, [r3, #8]
      break;
 8005e66:	e04f      	b.n	8005f08 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e78:	f000 fcba 	bl	80067f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e8a:	609a      	str	r2, [r3, #8]
      break;
 8005e8c:	e03c      	b.n	8005f08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f000 fc2c 	bl	80066f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2150      	movs	r1, #80	@ 0x50
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fc85 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 8005eac:	e02c      	b.n	8005f08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f000 fc4b 	bl	8006756 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2160      	movs	r1, #96	@ 0x60
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fc75 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 8005ecc:	e01c      	b.n	8005f08 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eda:	461a      	mov	r2, r3
 8005edc:	f000 fc0c 	bl	80066f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2140      	movs	r1, #64	@ 0x40
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fc65 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 8005eec:	e00c      	b.n	8005f08 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f000 fc5c 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 8005efe:	e003      	b.n	8005f08 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
      break;
 8005f04:	e000      	b.n	8005f08 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005f06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	00100070 	.word	0x00100070
 8005f28:	00100060 	.word	0x00100060
 8005f2c:	00100050 	.word	0x00100050
 8005f30:	00100040 	.word	0x00100040
 8005f34:	00100030 	.word	0x00100030
 8005f38:	00100020 	.word	0x00100020

08005f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8006080 <TIM_Base_SetConfig+0x144>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d017      	beq.n	8005f84 <TIM_Base_SetConfig+0x48>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f5a:	d013      	beq.n	8005f84 <TIM_Base_SetConfig+0x48>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a49      	ldr	r2, [pc, #292]	@ (8006084 <TIM_Base_SetConfig+0x148>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00f      	beq.n	8005f84 <TIM_Base_SetConfig+0x48>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a48      	ldr	r2, [pc, #288]	@ (8006088 <TIM_Base_SetConfig+0x14c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00b      	beq.n	8005f84 <TIM_Base_SetConfig+0x48>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a47      	ldr	r2, [pc, #284]	@ (800608c <TIM_Base_SetConfig+0x150>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d007      	beq.n	8005f84 <TIM_Base_SetConfig+0x48>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a46      	ldr	r2, [pc, #280]	@ (8006090 <TIM_Base_SetConfig+0x154>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_Base_SetConfig+0x48>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a45      	ldr	r2, [pc, #276]	@ (8006094 <TIM_Base_SetConfig+0x158>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d108      	bne.n	8005f96 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a39      	ldr	r2, [pc, #228]	@ (8006080 <TIM_Base_SetConfig+0x144>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d023      	beq.n	8005fe6 <TIM_Base_SetConfig+0xaa>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa4:	d01f      	beq.n	8005fe6 <TIM_Base_SetConfig+0xaa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a36      	ldr	r2, [pc, #216]	@ (8006084 <TIM_Base_SetConfig+0x148>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d01b      	beq.n	8005fe6 <TIM_Base_SetConfig+0xaa>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a35      	ldr	r2, [pc, #212]	@ (8006088 <TIM_Base_SetConfig+0x14c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d017      	beq.n	8005fe6 <TIM_Base_SetConfig+0xaa>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a34      	ldr	r2, [pc, #208]	@ (800608c <TIM_Base_SetConfig+0x150>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d013      	beq.n	8005fe6 <TIM_Base_SetConfig+0xaa>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a33      	ldr	r2, [pc, #204]	@ (8006090 <TIM_Base_SetConfig+0x154>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00f      	beq.n	8005fe6 <TIM_Base_SetConfig+0xaa>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a33      	ldr	r2, [pc, #204]	@ (8006098 <TIM_Base_SetConfig+0x15c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00b      	beq.n	8005fe6 <TIM_Base_SetConfig+0xaa>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a32      	ldr	r2, [pc, #200]	@ (800609c <TIM_Base_SetConfig+0x160>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d007      	beq.n	8005fe6 <TIM_Base_SetConfig+0xaa>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a31      	ldr	r2, [pc, #196]	@ (80060a0 <TIM_Base_SetConfig+0x164>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_Base_SetConfig+0xaa>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8006094 <TIM_Base_SetConfig+0x158>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d108      	bne.n	8005ff8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a18      	ldr	r2, [pc, #96]	@ (8006080 <TIM_Base_SetConfig+0x144>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <TIM_Base_SetConfig+0x110>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a1a      	ldr	r2, [pc, #104]	@ (8006090 <TIM_Base_SetConfig+0x154>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00f      	beq.n	800604c <TIM_Base_SetConfig+0x110>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a1a      	ldr	r2, [pc, #104]	@ (8006098 <TIM_Base_SetConfig+0x15c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_Base_SetConfig+0x110>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a19      	ldr	r2, [pc, #100]	@ (800609c <TIM_Base_SetConfig+0x160>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_Base_SetConfig+0x110>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a18      	ldr	r2, [pc, #96]	@ (80060a0 <TIM_Base_SetConfig+0x164>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_Base_SetConfig+0x110>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a13      	ldr	r2, [pc, #76]	@ (8006094 <TIM_Base_SetConfig+0x158>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d103      	bne.n	8006054 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b01      	cmp	r3, #1
 8006064:	d105      	bne.n	8006072 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f023 0201 	bic.w	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	611a      	str	r2, [r3, #16]
  }
}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800
 800608c:	40000c00 	.word	0x40000c00
 8006090:	40013400 	.word	0x40013400
 8006094:	40015000 	.word	0x40015000
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800

080060a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	f023 0201 	bic.w	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0303 	bic.w	r3, r3, #3
 80060de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f023 0302 	bic.w	r3, r3, #2
 80060f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a30      	ldr	r2, [pc, #192]	@ (80061c0 <TIM_OC1_SetConfig+0x11c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <TIM_OC1_SetConfig+0x88>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a2f      	ldr	r2, [pc, #188]	@ (80061c4 <TIM_OC1_SetConfig+0x120>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00f      	beq.n	800612c <TIM_OC1_SetConfig+0x88>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a2e      	ldr	r2, [pc, #184]	@ (80061c8 <TIM_OC1_SetConfig+0x124>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_OC1_SetConfig+0x88>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a2d      	ldr	r2, [pc, #180]	@ (80061cc <TIM_OC1_SetConfig+0x128>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_OC1_SetConfig+0x88>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a2c      	ldr	r2, [pc, #176]	@ (80061d0 <TIM_OC1_SetConfig+0x12c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_OC1_SetConfig+0x88>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a2b      	ldr	r2, [pc, #172]	@ (80061d4 <TIM_OC1_SetConfig+0x130>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d10c      	bne.n	8006146 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f023 0308 	bic.w	r3, r3, #8
 8006132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 0304 	bic.w	r3, r3, #4
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a1d      	ldr	r2, [pc, #116]	@ (80061c0 <TIM_OC1_SetConfig+0x11c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <TIM_OC1_SetConfig+0xd2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1c      	ldr	r2, [pc, #112]	@ (80061c4 <TIM_OC1_SetConfig+0x120>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00f      	beq.n	8006176 <TIM_OC1_SetConfig+0xd2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a1b      	ldr	r2, [pc, #108]	@ (80061c8 <TIM_OC1_SetConfig+0x124>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00b      	beq.n	8006176 <TIM_OC1_SetConfig+0xd2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a1a      	ldr	r2, [pc, #104]	@ (80061cc <TIM_OC1_SetConfig+0x128>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <TIM_OC1_SetConfig+0xd2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a19      	ldr	r2, [pc, #100]	@ (80061d0 <TIM_OC1_SetConfig+0x12c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC1_SetConfig+0xd2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a18      	ldr	r2, [pc, #96]	@ (80061d4 <TIM_OC1_SetConfig+0x130>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d111      	bne.n	800619a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800617c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40013400 	.word	0x40013400
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40014400 	.word	0x40014400
 80061d0:	40014800 	.word	0x40014800
 80061d4:	40015000 	.word	0x40015000

080061d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	f023 0210 	bic.w	r2, r3, #16
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f023 0320 	bic.w	r3, r3, #32
 8006226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a2c      	ldr	r2, [pc, #176]	@ (80062e8 <TIM_OC2_SetConfig+0x110>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d007      	beq.n	800624c <TIM_OC2_SetConfig+0x74>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a2b      	ldr	r2, [pc, #172]	@ (80062ec <TIM_OC2_SetConfig+0x114>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_OC2_SetConfig+0x74>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a2a      	ldr	r2, [pc, #168]	@ (80062f0 <TIM_OC2_SetConfig+0x118>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d10d      	bne.n	8006268 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006266:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a1f      	ldr	r2, [pc, #124]	@ (80062e8 <TIM_OC2_SetConfig+0x110>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d013      	beq.n	8006298 <TIM_OC2_SetConfig+0xc0>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a1e      	ldr	r2, [pc, #120]	@ (80062ec <TIM_OC2_SetConfig+0x114>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00f      	beq.n	8006298 <TIM_OC2_SetConfig+0xc0>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a1e      	ldr	r2, [pc, #120]	@ (80062f4 <TIM_OC2_SetConfig+0x11c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00b      	beq.n	8006298 <TIM_OC2_SetConfig+0xc0>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <TIM_OC2_SetConfig+0x120>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d007      	beq.n	8006298 <TIM_OC2_SetConfig+0xc0>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a1c      	ldr	r2, [pc, #112]	@ (80062fc <TIM_OC2_SetConfig+0x124>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_OC2_SetConfig+0xc0>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a17      	ldr	r2, [pc, #92]	@ (80062f0 <TIM_OC2_SetConfig+0x118>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d113      	bne.n	80062c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800629e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40013400 	.word	0x40013400
 80062f0:	40015000 	.word	0x40015000
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400
 80062fc:	40014800 	.word	0x40014800

08006300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800632e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0303 	bic.w	r3, r3, #3
 800633a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800634c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2b      	ldr	r2, [pc, #172]	@ (800640c <TIM_OC3_SetConfig+0x10c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d007      	beq.n	8006372 <TIM_OC3_SetConfig+0x72>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a2a      	ldr	r2, [pc, #168]	@ (8006410 <TIM_OC3_SetConfig+0x110>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d003      	beq.n	8006372 <TIM_OC3_SetConfig+0x72>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a29      	ldr	r2, [pc, #164]	@ (8006414 <TIM_OC3_SetConfig+0x114>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d10d      	bne.n	800638e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	021b      	lsls	r3, r3, #8
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800638c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a1e      	ldr	r2, [pc, #120]	@ (800640c <TIM_OC3_SetConfig+0x10c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d013      	beq.n	80063be <TIM_OC3_SetConfig+0xbe>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a1d      	ldr	r2, [pc, #116]	@ (8006410 <TIM_OC3_SetConfig+0x110>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00f      	beq.n	80063be <TIM_OC3_SetConfig+0xbe>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006418 <TIM_OC3_SetConfig+0x118>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00b      	beq.n	80063be <TIM_OC3_SetConfig+0xbe>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a1c      	ldr	r2, [pc, #112]	@ (800641c <TIM_OC3_SetConfig+0x11c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <TIM_OC3_SetConfig+0xbe>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006420 <TIM_OC3_SetConfig+0x120>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_OC3_SetConfig+0xbe>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a16      	ldr	r2, [pc, #88]	@ (8006414 <TIM_OC3_SetConfig+0x114>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d113      	bne.n	80063e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	40012c00 	.word	0x40012c00
 8006410:	40013400 	.word	0x40013400
 8006414:	40015000 	.word	0x40015000
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400
 8006420:	40014800 	.word	0x40014800

08006424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800645e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	031b      	lsls	r3, r3, #12
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a2c      	ldr	r2, [pc, #176]	@ (8006534 <TIM_OC4_SetConfig+0x110>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d007      	beq.n	8006498 <TIM_OC4_SetConfig+0x74>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a2b      	ldr	r2, [pc, #172]	@ (8006538 <TIM_OC4_SetConfig+0x114>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_OC4_SetConfig+0x74>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a2a      	ldr	r2, [pc, #168]	@ (800653c <TIM_OC4_SetConfig+0x118>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d10d      	bne.n	80064b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800649e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	031b      	lsls	r3, r3, #12
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006534 <TIM_OC4_SetConfig+0x110>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d013      	beq.n	80064e4 <TIM_OC4_SetConfig+0xc0>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a1e      	ldr	r2, [pc, #120]	@ (8006538 <TIM_OC4_SetConfig+0x114>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00f      	beq.n	80064e4 <TIM_OC4_SetConfig+0xc0>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006540 <TIM_OC4_SetConfig+0x11c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00b      	beq.n	80064e4 <TIM_OC4_SetConfig+0xc0>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006544 <TIM_OC4_SetConfig+0x120>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d007      	beq.n	80064e4 <TIM_OC4_SetConfig+0xc0>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006548 <TIM_OC4_SetConfig+0x124>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d003      	beq.n	80064e4 <TIM_OC4_SetConfig+0xc0>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a17      	ldr	r2, [pc, #92]	@ (800653c <TIM_OC4_SetConfig+0x118>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d113      	bne.n	800650c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	019b      	lsls	r3, r3, #6
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	019b      	lsls	r3, r3, #6
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40012c00 	.word	0x40012c00
 8006538:	40013400 	.word	0x40013400
 800653c:	40015000 	.word	0x40015000
 8006540:	40014000 	.word	0x40014000
 8006544:	40014400 	.word	0x40014400
 8006548:	40014800 	.word	0x40014800

0800654c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800657a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a19      	ldr	r2, [pc, #100]	@ (8006608 <TIM_OC5_SetConfig+0xbc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <TIM_OC5_SetConfig+0x82>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a18      	ldr	r2, [pc, #96]	@ (800660c <TIM_OC5_SetConfig+0xc0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00f      	beq.n	80065ce <TIM_OC5_SetConfig+0x82>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a17      	ldr	r2, [pc, #92]	@ (8006610 <TIM_OC5_SetConfig+0xc4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_OC5_SetConfig+0x82>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a16      	ldr	r2, [pc, #88]	@ (8006614 <TIM_OC5_SetConfig+0xc8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <TIM_OC5_SetConfig+0x82>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a15      	ldr	r2, [pc, #84]	@ (8006618 <TIM_OC5_SetConfig+0xcc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_OC5_SetConfig+0x82>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a14      	ldr	r2, [pc, #80]	@ (800661c <TIM_OC5_SetConfig+0xd0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d109      	bne.n	80065e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	621a      	str	r2, [r3, #32]
}
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40013400 	.word	0x40013400
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800
 800661c:	40015000 	.word	0x40015000

08006620 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	051b      	lsls	r3, r3, #20
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a1a      	ldr	r2, [pc, #104]	@ (80066e0 <TIM_OC6_SetConfig+0xc0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d013      	beq.n	80066a4 <TIM_OC6_SetConfig+0x84>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a19      	ldr	r2, [pc, #100]	@ (80066e4 <TIM_OC6_SetConfig+0xc4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00f      	beq.n	80066a4 <TIM_OC6_SetConfig+0x84>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a18      	ldr	r2, [pc, #96]	@ (80066e8 <TIM_OC6_SetConfig+0xc8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_OC6_SetConfig+0x84>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a17      	ldr	r2, [pc, #92]	@ (80066ec <TIM_OC6_SetConfig+0xcc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_OC6_SetConfig+0x84>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a16      	ldr	r2, [pc, #88]	@ (80066f0 <TIM_OC6_SetConfig+0xd0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_OC6_SetConfig+0x84>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a15      	ldr	r2, [pc, #84]	@ (80066f4 <TIM_OC6_SetConfig+0xd4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d109      	bne.n	80066b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	029b      	lsls	r3, r3, #10
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40012c00 	.word	0x40012c00
 80066e4:	40013400 	.word	0x40013400
 80066e8:	40014000 	.word	0x40014000
 80066ec:	40014400 	.word	0x40014400
 80066f0:	40014800 	.word	0x40014800
 80066f4:	40015000 	.word	0x40015000

080066f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f023 0201 	bic.w	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f023 030a 	bic.w	r3, r3, #10
 8006734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006756:	b480      	push	{r7}
 8006758:	b087      	sub	sp, #28
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f023 0210 	bic.w	r2, r3, #16
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	031b      	lsls	r3, r3, #12
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006792:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	621a      	str	r2, [r3, #32]
}
 80067aa:	bf00      	nop
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80067cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f043 0307 	orr.w	r3, r3, #7
 80067dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	609a      	str	r2, [r3, #8]
}
 80067e4:	bf00      	nop
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800680a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	021a      	lsls	r2, r3, #8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	431a      	orrs	r2, r3
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4313      	orrs	r3, r2
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	609a      	str	r2, [r3, #8]
}
 8006824:	bf00      	nop
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2201      	movs	r2, #1
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1a      	ldr	r2, [r3, #32]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	43db      	mvns	r3, r3
 8006852:	401a      	ands	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a1a      	ldr	r2, [r3, #32]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	fa01 f303 	lsl.w	r3, r1, r3
 8006868:	431a      	orrs	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	621a      	str	r2, [r3, #32]
}
 800686e:	bf00      	nop
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006890:	2302      	movs	r3, #2
 8006892:	e074      	b.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a34      	ldr	r2, [pc, #208]	@ (800698c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a33      	ldr	r2, [pc, #204]	@ (8006990 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a31      	ldr	r2, [pc, #196]	@ (8006994 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d108      	bne.n	80068e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80068d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80068ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a21      	ldr	r2, [pc, #132]	@ (800698c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d022      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006914:	d01d      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1f      	ldr	r2, [pc, #124]	@ (8006998 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d018      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1d      	ldr	r2, [pc, #116]	@ (800699c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d013      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1c      	ldr	r2, [pc, #112]	@ (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00e      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a15      	ldr	r2, [pc, #84]	@ (8006990 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d009      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a18      	ldr	r2, [pc, #96]	@ (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d004      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a11      	ldr	r2, [pc, #68]	@ (8006994 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d10c      	bne.n	800696c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4313      	orrs	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40013400 	.word	0x40013400
 8006994:	40015000 	.word	0x40015000
 8006998:	40000400 	.word	0x40000400
 800699c:	40000800 	.word	0x40000800
 80069a0:	40000c00 	.word	0x40000c00
 80069a4:	40014000 	.word	0x40014000

080069a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e042      	b.n	8006a40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d106      	bne.n	80069d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fb f8f7 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2224      	movs	r2, #36	@ 0x24
 80069d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0201 	bic.w	r2, r2, #1
 80069e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fc7a 	bl	80072ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f97b 	bl	8006cf4 <UART_SetConfig>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e01b      	b.n	8006a40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fcf9 	bl	8007430 <UART_CheckIdleState>
 8006a3e:	4603      	mov	r3, r0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	@ 0x28
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	4613      	mov	r3, r2
 8006a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d17b      	bne.n	8006b5a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_UART_Transmit+0x26>
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e074      	b.n	8006b5c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2221      	movs	r2, #33	@ 0x21
 8006a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a82:	f7fc f88f 	bl	8002ba4 <HAL_GetTick>
 8006a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	88fa      	ldrh	r2, [r7, #6]
 8006a8c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	88fa      	ldrh	r2, [r7, #6]
 8006a94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa0:	d108      	bne.n	8006ab4 <HAL_UART_Transmit+0x6c>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	e003      	b.n	8006abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006abc:	e030      	b.n	8006b20 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2180      	movs	r1, #128	@ 0x80
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fd5b 	bl	8007584 <UART_WaitOnFlagUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e03d      	b.n	8006b5c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006af4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	3302      	adds	r3, #2
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	e007      	b.n	8006b0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1c8      	bne.n	8006abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2200      	movs	r2, #0
 8006b34:	2140      	movs	r1, #64	@ 0x40
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fd24 	bl	8007584 <UART_WaitOnFlagUntilTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e006      	b.n	8006b5c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	e000      	b.n	8006b5c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006b5a:	2302      	movs	r3, #2
  }
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	@ 0x28
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	4613      	mov	r3, r2
 8006b72:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	f040 80b5 	bne.w	8006cea <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_UART_Receive+0x28>
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0ad      	b.n	8006cec <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2222      	movs	r2, #34	@ 0x22
 8006b9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ba6:	f7fb fffd 	bl	8002ba4 <HAL_GetTick>
 8006baa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	88fa      	ldrh	r2, [r7, #6]
 8006bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	88fa      	ldrh	r2, [r7, #6]
 8006bb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bc4:	d10e      	bne.n	8006be4 <HAL_UART_Receive+0x80>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <HAL_UART_Receive+0x76>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006bd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bd8:	e02d      	b.n	8006c36 <HAL_UART_Receive+0xd2>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	22ff      	movs	r2, #255	@ 0xff
 8006bde:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006be2:	e028      	b.n	8006c36 <HAL_UART_Receive+0xd2>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10d      	bne.n	8006c08 <HAL_UART_Receive+0xa4>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <HAL_UART_Receive+0x9a>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	22ff      	movs	r2, #255	@ 0xff
 8006bf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bfc:	e01b      	b.n	8006c36 <HAL_UART_Receive+0xd2>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	227f      	movs	r2, #127	@ 0x7f
 8006c02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c06:	e016      	b.n	8006c36 <HAL_UART_Receive+0xd2>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c10:	d10d      	bne.n	8006c2e <HAL_UART_Receive+0xca>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d104      	bne.n	8006c24 <HAL_UART_Receive+0xc0>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	227f      	movs	r2, #127	@ 0x7f
 8006c1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c22:	e008      	b.n	8006c36 <HAL_UART_Receive+0xd2>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	223f      	movs	r2, #63	@ 0x3f
 8006c28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c2c:	e003      	b.n	8006c36 <HAL_UART_Receive+0xd2>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006c3c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c46:	d108      	bne.n	8006c5a <HAL_UART_Receive+0xf6>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006c50:	2300      	movs	r3, #0
 8006c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e003      	b.n	8006c62 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006c62:	e036      	b.n	8006cd2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2120      	movs	r1, #32
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 fc88 	bl	8007584 <UART_WaitOnFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e032      	b.n	8006cec <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10c      	bne.n	8006ca6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	8a7b      	ldrh	r3, [r7, #18]
 8006c96:	4013      	ands	r3, r2
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	3302      	adds	r3, #2
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	e00c      	b.n	8006cc0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	8a7b      	ldrh	r3, [r7, #18]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1c2      	bne.n	8006c64 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e000      	b.n	8006cec <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006cea:	2302      	movs	r3, #2
  }
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3720      	adds	r7, #32
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf8:	b08c      	sub	sp, #48	@ 0x30
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4baa      	ldr	r3, [pc, #680]	@ (8006fcc <UART_SetConfig+0x2d8>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	6812      	ldr	r2, [r2, #0]
 8006d2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a9f      	ldr	r2, [pc, #636]	@ (8006fd0 <UART_SetConfig+0x2dc>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006d6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d74:	430b      	orrs	r3, r1
 8006d76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	f023 010f 	bic.w	r1, r3, #15
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a90      	ldr	r2, [pc, #576]	@ (8006fd4 <UART_SetConfig+0x2e0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d125      	bne.n	8006de4 <UART_SetConfig+0xf0>
 8006d98:	4b8f      	ldr	r3, [pc, #572]	@ (8006fd8 <UART_SetConfig+0x2e4>)
 8006d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d81a      	bhi.n	8006ddc <UART_SetConfig+0xe8>
 8006da6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dac <UART_SetConfig+0xb8>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006dbd 	.word	0x08006dbd
 8006db0:	08006dcd 	.word	0x08006dcd
 8006db4:	08006dc5 	.word	0x08006dc5
 8006db8:	08006dd5 	.word	0x08006dd5
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc2:	e116      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dca:	e112      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd2:	e10e      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dda:	e10a      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006de2:	e106      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a7c      	ldr	r2, [pc, #496]	@ (8006fdc <UART_SetConfig+0x2e8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d138      	bne.n	8006e60 <UART_SetConfig+0x16c>
 8006dee:	4b7a      	ldr	r3, [pc, #488]	@ (8006fd8 <UART_SetConfig+0x2e4>)
 8006df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df4:	f003 030c 	and.w	r3, r3, #12
 8006df8:	2b0c      	cmp	r3, #12
 8006dfa:	d82d      	bhi.n	8006e58 <UART_SetConfig+0x164>
 8006dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006e04 <UART_SetConfig+0x110>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e39 	.word	0x08006e39
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006e59 	.word	0x08006e59
 8006e10:	08006e59 	.word	0x08006e59
 8006e14:	08006e49 	.word	0x08006e49
 8006e18:	08006e59 	.word	0x08006e59
 8006e1c:	08006e59 	.word	0x08006e59
 8006e20:	08006e59 	.word	0x08006e59
 8006e24:	08006e41 	.word	0x08006e41
 8006e28:	08006e59 	.word	0x08006e59
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	08006e59 	.word	0x08006e59
 8006e34:	08006e51 	.word	0x08006e51
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3e:	e0d8      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006e40:	2302      	movs	r3, #2
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e46:	e0d4      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006e48:	2304      	movs	r3, #4
 8006e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4e:	e0d0      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006e50:	2308      	movs	r3, #8
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e56:	e0cc      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5e:	e0c8      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a5e      	ldr	r2, [pc, #376]	@ (8006fe0 <UART_SetConfig+0x2ec>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d125      	bne.n	8006eb6 <UART_SetConfig+0x1c2>
 8006e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8006fd8 <UART_SetConfig+0x2e4>)
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e74:	2b30      	cmp	r3, #48	@ 0x30
 8006e76:	d016      	beq.n	8006ea6 <UART_SetConfig+0x1b2>
 8006e78:	2b30      	cmp	r3, #48	@ 0x30
 8006e7a:	d818      	bhi.n	8006eae <UART_SetConfig+0x1ba>
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d00a      	beq.n	8006e96 <UART_SetConfig+0x1a2>
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	d814      	bhi.n	8006eae <UART_SetConfig+0x1ba>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <UART_SetConfig+0x19a>
 8006e88:	2b10      	cmp	r3, #16
 8006e8a:	d008      	beq.n	8006e9e <UART_SetConfig+0x1aa>
 8006e8c:	e00f      	b.n	8006eae <UART_SetConfig+0x1ba>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e94:	e0ad      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006e96:	2302      	movs	r3, #2
 8006e98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9c:	e0a9      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea4:	e0a5      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eac:	e0a1      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006eae:	2310      	movs	r3, #16
 8006eb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eb4:	e09d      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a4a      	ldr	r2, [pc, #296]	@ (8006fe4 <UART_SetConfig+0x2f0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d125      	bne.n	8006f0c <UART_SetConfig+0x218>
 8006ec0:	4b45      	ldr	r3, [pc, #276]	@ (8006fd8 <UART_SetConfig+0x2e4>)
 8006ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006eca:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ecc:	d016      	beq.n	8006efc <UART_SetConfig+0x208>
 8006ece:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ed0:	d818      	bhi.n	8006f04 <UART_SetConfig+0x210>
 8006ed2:	2b80      	cmp	r3, #128	@ 0x80
 8006ed4:	d00a      	beq.n	8006eec <UART_SetConfig+0x1f8>
 8006ed6:	2b80      	cmp	r3, #128	@ 0x80
 8006ed8:	d814      	bhi.n	8006f04 <UART_SetConfig+0x210>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <UART_SetConfig+0x1f0>
 8006ede:	2b40      	cmp	r3, #64	@ 0x40
 8006ee0:	d008      	beq.n	8006ef4 <UART_SetConfig+0x200>
 8006ee2:	e00f      	b.n	8006f04 <UART_SetConfig+0x210>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eea:	e082      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006eec:	2302      	movs	r3, #2
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef2:	e07e      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efa:	e07a      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006efc:	2308      	movs	r3, #8
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f02:	e076      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006f04:	2310      	movs	r3, #16
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0a:	e072      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a35      	ldr	r2, [pc, #212]	@ (8006fe8 <UART_SetConfig+0x2f4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d12a      	bne.n	8006f6c <UART_SetConfig+0x278>
 8006f16:	4b30      	ldr	r3, [pc, #192]	@ (8006fd8 <UART_SetConfig+0x2e4>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f24:	d01a      	beq.n	8006f5c <UART_SetConfig+0x268>
 8006f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f2a:	d81b      	bhi.n	8006f64 <UART_SetConfig+0x270>
 8006f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f30:	d00c      	beq.n	8006f4c <UART_SetConfig+0x258>
 8006f32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f36:	d815      	bhi.n	8006f64 <UART_SetConfig+0x270>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <UART_SetConfig+0x250>
 8006f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f40:	d008      	beq.n	8006f54 <UART_SetConfig+0x260>
 8006f42:	e00f      	b.n	8006f64 <UART_SetConfig+0x270>
 8006f44:	2300      	movs	r3, #0
 8006f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f4a:	e052      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f52:	e04e      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006f54:	2304      	movs	r3, #4
 8006f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f5a:	e04a      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f62:	e046      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006f64:	2310      	movs	r3, #16
 8006f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f6a:	e042      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a17      	ldr	r2, [pc, #92]	@ (8006fd0 <UART_SetConfig+0x2dc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d13a      	bne.n	8006fec <UART_SetConfig+0x2f8>
 8006f76:	4b18      	ldr	r3, [pc, #96]	@ (8006fd8 <UART_SetConfig+0x2e4>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f84:	d01a      	beq.n	8006fbc <UART_SetConfig+0x2c8>
 8006f86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f8a:	d81b      	bhi.n	8006fc4 <UART_SetConfig+0x2d0>
 8006f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f90:	d00c      	beq.n	8006fac <UART_SetConfig+0x2b8>
 8006f92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f96:	d815      	bhi.n	8006fc4 <UART_SetConfig+0x2d0>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <UART_SetConfig+0x2b0>
 8006f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa0:	d008      	beq.n	8006fb4 <UART_SetConfig+0x2c0>
 8006fa2:	e00f      	b.n	8006fc4 <UART_SetConfig+0x2d0>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006faa:	e022      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006fac:	2302      	movs	r3, #2
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb2:	e01e      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fba:	e01a      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fc2:	e016      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fca:	e012      	b.n	8006ff2 <UART_SetConfig+0x2fe>
 8006fcc:	cfff69f3 	.word	0xcfff69f3
 8006fd0:	40008000 	.word	0x40008000
 8006fd4:	40013800 	.word	0x40013800
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	40004400 	.word	0x40004400
 8006fe0:	40004800 	.word	0x40004800
 8006fe4:	40004c00 	.word	0x40004c00
 8006fe8:	40005000 	.word	0x40005000
 8006fec:	2310      	movs	r3, #16
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4aae      	ldr	r2, [pc, #696]	@ (80072b0 <UART_SetConfig+0x5bc>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	f040 8097 	bne.w	800712c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007002:	2b08      	cmp	r3, #8
 8007004:	d823      	bhi.n	800704e <UART_SetConfig+0x35a>
 8007006:	a201      	add	r2, pc, #4	@ (adr r2, 800700c <UART_SetConfig+0x318>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	08007031 	.word	0x08007031
 8007010:	0800704f 	.word	0x0800704f
 8007014:	08007039 	.word	0x08007039
 8007018:	0800704f 	.word	0x0800704f
 800701c:	0800703f 	.word	0x0800703f
 8007020:	0800704f 	.word	0x0800704f
 8007024:	0800704f 	.word	0x0800704f
 8007028:	0800704f 	.word	0x0800704f
 800702c:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007030:	f7fd ffd4 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 8007034:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007036:	e010      	b.n	800705a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007038:	4b9e      	ldr	r3, [pc, #632]	@ (80072b4 <UART_SetConfig+0x5c0>)
 800703a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800703c:	e00d      	b.n	800705a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703e:	f7fd ff5f 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8007042:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007044:	e009      	b.n	800705a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800704c:	e005      	b.n	800705a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8130 	beq.w	80072c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	4a94      	ldr	r2, [pc, #592]	@ (80072b8 <UART_SetConfig+0x5c4>)
 8007068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800706c:	461a      	mov	r2, r3
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	fbb3 f3f2 	udiv	r3, r3, r2
 8007074:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4413      	add	r3, r2
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	429a      	cmp	r2, r3
 8007084:	d305      	bcc.n	8007092 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	429a      	cmp	r2, r3
 8007090:	d903      	bls.n	800709a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007098:	e113      	b.n	80072c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	2200      	movs	r2, #0
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	60fa      	str	r2, [r7, #12]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a6:	4a84      	ldr	r2, [pc, #528]	@ (80072b8 <UART_SetConfig+0x5c4>)
 80070a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2200      	movs	r2, #0
 80070b0:	603b      	str	r3, [r7, #0]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070bc:	f7f9 fd9c 	bl	8000bf8 <__aeabi_uldivmod>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4610      	mov	r0, r2
 80070c6:	4619      	mov	r1, r3
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	020b      	lsls	r3, r1, #8
 80070d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070d6:	0202      	lsls	r2, r0, #8
 80070d8:	6979      	ldr	r1, [r7, #20]
 80070da:	6849      	ldr	r1, [r1, #4]
 80070dc:	0849      	lsrs	r1, r1, #1
 80070de:	2000      	movs	r0, #0
 80070e0:	460c      	mov	r4, r1
 80070e2:	4605      	mov	r5, r0
 80070e4:	eb12 0804 	adds.w	r8, r2, r4
 80070e8:	eb43 0905 	adc.w	r9, r3, r5
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	469a      	mov	sl, r3
 80070f4:	4693      	mov	fp, r2
 80070f6:	4652      	mov	r2, sl
 80070f8:	465b      	mov	r3, fp
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 fd7b 	bl	8000bf8 <__aeabi_uldivmod>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4613      	mov	r3, r2
 8007108:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007110:	d308      	bcc.n	8007124 <UART_SetConfig+0x430>
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007118:	d204      	bcs.n	8007124 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6a3a      	ldr	r2, [r7, #32]
 8007120:	60da      	str	r2, [r3, #12]
 8007122:	e0ce      	b.n	80072c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800712a:	e0ca      	b.n	80072c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007134:	d166      	bne.n	8007204 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007136:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800713a:	2b08      	cmp	r3, #8
 800713c:	d827      	bhi.n	800718e <UART_SetConfig+0x49a>
 800713e:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <UART_SetConfig+0x450>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007169 	.word	0x08007169
 8007148:	08007171 	.word	0x08007171
 800714c:	08007179 	.word	0x08007179
 8007150:	0800718f 	.word	0x0800718f
 8007154:	0800717f 	.word	0x0800717f
 8007158:	0800718f 	.word	0x0800718f
 800715c:	0800718f 	.word	0x0800718f
 8007160:	0800718f 	.word	0x0800718f
 8007164:	08007187 	.word	0x08007187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007168:	f7fd ff38 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 800716c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800716e:	e014      	b.n	800719a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007170:	f7fd ff4a 	bl	8005008 <HAL_RCC_GetPCLK2Freq>
 8007174:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007176:	e010      	b.n	800719a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007178:	4b4e      	ldr	r3, [pc, #312]	@ (80072b4 <UART_SetConfig+0x5c0>)
 800717a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800717c:	e00d      	b.n	800719a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717e:	f7fd febf 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8007182:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007184:	e009      	b.n	800719a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800718a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800718c:	e005      	b.n	800719a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007198:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8090 	beq.w	80072c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a6:	4a44      	ldr	r2, [pc, #272]	@ (80072b8 <UART_SetConfig+0x5c4>)
 80071a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b4:	005a      	lsls	r2, r3, #1
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	441a      	add	r2, r3
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	2b0f      	cmp	r3, #15
 80071cc:	d916      	bls.n	80071fc <UART_SetConfig+0x508>
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071d4:	d212      	bcs.n	80071fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f023 030f 	bic.w	r3, r3, #15
 80071de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	085b      	lsrs	r3, r3, #1
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	8bfb      	ldrh	r3, [r7, #30]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	8bfa      	ldrh	r2, [r7, #30]
 80071f8:	60da      	str	r2, [r3, #12]
 80071fa:	e062      	b.n	80072c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007202:	e05e      	b.n	80072c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007204:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007208:	2b08      	cmp	r3, #8
 800720a:	d828      	bhi.n	800725e <UART_SetConfig+0x56a>
 800720c:	a201      	add	r2, pc, #4	@ (adr r2, 8007214 <UART_SetConfig+0x520>)
 800720e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007212:	bf00      	nop
 8007214:	08007239 	.word	0x08007239
 8007218:	08007241 	.word	0x08007241
 800721c:	08007249 	.word	0x08007249
 8007220:	0800725f 	.word	0x0800725f
 8007224:	0800724f 	.word	0x0800724f
 8007228:	0800725f 	.word	0x0800725f
 800722c:	0800725f 	.word	0x0800725f
 8007230:	0800725f 	.word	0x0800725f
 8007234:	08007257 	.word	0x08007257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007238:	f7fd fed0 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 800723c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800723e:	e014      	b.n	800726a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007240:	f7fd fee2 	bl	8005008 <HAL_RCC_GetPCLK2Freq>
 8007244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007246:	e010      	b.n	800726a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007248:	4b1a      	ldr	r3, [pc, #104]	@ (80072b4 <UART_SetConfig+0x5c0>)
 800724a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800724c:	e00d      	b.n	800726a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800724e:	f7fd fe57 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8007252:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007254:	e009      	b.n	800726a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800725a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800725c:	e005      	b.n	800726a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007268:	bf00      	nop
    }

    if (pclk != 0U)
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	2b00      	cmp	r3, #0
 800726e:	d028      	beq.n	80072c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007274:	4a10      	ldr	r2, [pc, #64]	@ (80072b8 <UART_SetConfig+0x5c4>)
 8007276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800727a:	461a      	mov	r2, r3
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	085b      	lsrs	r3, r3, #1
 8007288:	441a      	add	r2, r3
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007292:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	2b0f      	cmp	r3, #15
 8007298:	d910      	bls.n	80072bc <UART_SetConfig+0x5c8>
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a0:	d20c      	bcs.n	80072bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60da      	str	r2, [r3, #12]
 80072ac:	e009      	b.n	80072c2 <UART_SetConfig+0x5ce>
 80072ae:	bf00      	nop
 80072b0:	40008000 	.word	0x40008000
 80072b4:	00f42400 	.word	0x00f42400
 80072b8:	0800a48c 	.word	0x0800a48c
      }
      else
      {
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2200      	movs	r2, #0
 80072d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2200      	movs	r2, #0
 80072dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3730      	adds	r7, #48	@ 0x30
 80072e6:	46bd      	mov	sp, r7
 80072e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080072ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00a      	beq.n	800735a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01a      	beq.n	8007402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ea:	d10a      	bne.n	8007402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	605a      	str	r2, [r3, #4]
  }
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b098      	sub	sp, #96	@ 0x60
 8007434:	af02      	add	r7, sp, #8
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007440:	f7fb fbb0 	bl	8002ba4 <HAL_GetTick>
 8007444:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0308 	and.w	r3, r3, #8
 8007450:	2b08      	cmp	r3, #8
 8007452:	d12f      	bne.n	80074b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007454:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800745c:	2200      	movs	r2, #0
 800745e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f88e 	bl	8007584 <UART_WaitOnFlagUntilTimeout>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d022      	beq.n	80074b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800747c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007482:	653b      	str	r3, [r7, #80]	@ 0x50
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800748c:	647b      	str	r3, [r7, #68]	@ 0x44
 800748e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800749a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e6      	bne.n	800746e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e063      	b.n	800757c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0304 	and.w	r3, r3, #4
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d149      	bne.n	8007556 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ca:	2200      	movs	r2, #0
 80074cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f857 	bl	8007584 <UART_WaitOnFlagUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d03c      	beq.n	8007556 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	623b      	str	r3, [r7, #32]
   return(result);
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80074fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e6      	bne.n	80074dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3308      	adds	r3, #8
 8007514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	60fb      	str	r3, [r7, #12]
   return(result);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3308      	adds	r3, #8
 800752c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800752e:	61fa      	str	r2, [r7, #28]
 8007530:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	69b9      	ldr	r1, [r7, #24]
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	617b      	str	r3, [r7, #20]
   return(result);
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e5      	bne.n	800750e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e012      	b.n	800757c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3758      	adds	r7, #88	@ 0x58
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	4613      	mov	r3, r2
 8007592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007594:	e04f      	b.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d04b      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759e:	f7fb fb01 	bl	8002ba4 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d302      	bcc.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e04e      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d037      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b80      	cmp	r3, #128	@ 0x80
 80075ca:	d034      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b40      	cmp	r3, #64	@ 0x40
 80075d0:	d031      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d110      	bne.n	8007602 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2208      	movs	r2, #8
 80075e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f838 	bl	800765e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2208      	movs	r2, #8
 80075f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e029      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800760c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007610:	d111      	bne.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800761a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f81e 	bl	800765e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e00f      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69da      	ldr	r2, [r3, #28]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	429a      	cmp	r2, r3
 8007652:	d0a0      	beq.n	8007596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800765e:	b480      	push	{r7}
 8007660:	b095      	sub	sp, #84	@ 0x54
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800767a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007684:	643b      	str	r3, [r7, #64]	@ 0x40
 8007686:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800768a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e6      	bne.n	8007666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3308      	adds	r3, #8
 800769e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ae:	f023 0301 	bic.w	r3, r3, #1
 80076b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3308      	adds	r3, #8
 80076ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e3      	bne.n	8007698 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d118      	bne.n	800770a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f023 0310 	bic.w	r3, r3, #16
 80076ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f6:	61bb      	str	r3, [r7, #24]
 80076f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6979      	ldr	r1, [r7, #20]
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	613b      	str	r3, [r7, #16]
   return(result);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e6      	bne.n	80076d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2220      	movs	r2, #32
 800770e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800771e:	bf00      	nop
 8007720:	3754      	adds	r7, #84	@ 0x54
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_UARTEx_DisableFifoMode+0x16>
 800773c:	2302      	movs	r3, #2
 800773e:	e027      	b.n	8007790 <HAL_UARTEx_DisableFifoMode+0x66>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2224      	movs	r2, #36	@ 0x24
 800774c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0201 	bic.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800776e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e02d      	b.n	8007810 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2224      	movs	r2, #36	@ 0x24
 80077c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 0201 	bic.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f84f 	bl	8007894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800782c:	2302      	movs	r3, #2
 800782e:	e02d      	b.n	800788c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2224      	movs	r2, #36	@ 0x24
 800783c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0201 	bic.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f811 	bl	8007894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d108      	bne.n	80078b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078b4:	e031      	b.n	800791a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078b6:	2308      	movs	r3, #8
 80078b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078ba:	2308      	movs	r3, #8
 80078bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	0e5b      	lsrs	r3, r3, #25
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	0f5b      	lsrs	r3, r3, #29
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	7b3a      	ldrb	r2, [r7, #12]
 80078e2:	4911      	ldr	r1, [pc, #68]	@ (8007928 <UARTEx_SetNbDataToProcess+0x94>)
 80078e4:	5c8a      	ldrb	r2, [r1, r2]
 80078e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078ea:	7b3a      	ldrb	r2, [r7, #12]
 80078ec:	490f      	ldr	r1, [pc, #60]	@ (800792c <UARTEx_SetNbDataToProcess+0x98>)
 80078ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	7b7a      	ldrb	r2, [r7, #13]
 8007900:	4909      	ldr	r1, [pc, #36]	@ (8007928 <UARTEx_SetNbDataToProcess+0x94>)
 8007902:	5c8a      	ldrb	r2, [r1, r2]
 8007904:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007908:	7b7a      	ldrb	r2, [r7, #13]
 800790a:	4908      	ldr	r1, [pc, #32]	@ (800792c <UARTEx_SetNbDataToProcess+0x98>)
 800790c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800790e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800791a:	bf00      	nop
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	0800a4a4 	.word	0x0800a4a4
 800792c:	0800a4ac 	.word	0x0800a4ac

08007930 <atoi>:
 8007930:	220a      	movs	r2, #10
 8007932:	2100      	movs	r1, #0
 8007934:	f000 b938 	b.w	8007ba8 <strtol>

08007938 <malloc>:
 8007938:	4b02      	ldr	r3, [pc, #8]	@ (8007944 <malloc+0xc>)
 800793a:	4601      	mov	r1, r0
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	f000 b82d 	b.w	800799c <_malloc_r>
 8007942:	bf00      	nop
 8007944:	20000018 	.word	0x20000018

08007948 <free>:
 8007948:	4b02      	ldr	r3, [pc, #8]	@ (8007954 <free+0xc>)
 800794a:	4601      	mov	r1, r0
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	f001 be7f 	b.w	8009650 <_free_r>
 8007952:	bf00      	nop
 8007954:	20000018 	.word	0x20000018

08007958 <sbrk_aligned>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	4e0f      	ldr	r6, [pc, #60]	@ (8007998 <sbrk_aligned+0x40>)
 800795c:	460c      	mov	r4, r1
 800795e:	6831      	ldr	r1, [r6, #0]
 8007960:	4605      	mov	r5, r0
 8007962:	b911      	cbnz	r1, 800796a <sbrk_aligned+0x12>
 8007964:	f000 ffca 	bl	80088fc <_sbrk_r>
 8007968:	6030      	str	r0, [r6, #0]
 800796a:	4621      	mov	r1, r4
 800796c:	4628      	mov	r0, r5
 800796e:	f000 ffc5 	bl	80088fc <_sbrk_r>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	d103      	bne.n	800797e <sbrk_aligned+0x26>
 8007976:	f04f 34ff 	mov.w	r4, #4294967295
 800797a:	4620      	mov	r0, r4
 800797c:	bd70      	pop	{r4, r5, r6, pc}
 800797e:	1cc4      	adds	r4, r0, #3
 8007980:	f024 0403 	bic.w	r4, r4, #3
 8007984:	42a0      	cmp	r0, r4
 8007986:	d0f8      	beq.n	800797a <sbrk_aligned+0x22>
 8007988:	1a21      	subs	r1, r4, r0
 800798a:	4628      	mov	r0, r5
 800798c:	f000 ffb6 	bl	80088fc <_sbrk_r>
 8007990:	3001      	adds	r0, #1
 8007992:	d1f2      	bne.n	800797a <sbrk_aligned+0x22>
 8007994:	e7ef      	b.n	8007976 <sbrk_aligned+0x1e>
 8007996:	bf00      	nop
 8007998:	200004b0 	.word	0x200004b0

0800799c <_malloc_r>:
 800799c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079a0:	1ccd      	adds	r5, r1, #3
 80079a2:	f025 0503 	bic.w	r5, r5, #3
 80079a6:	3508      	adds	r5, #8
 80079a8:	2d0c      	cmp	r5, #12
 80079aa:	bf38      	it	cc
 80079ac:	250c      	movcc	r5, #12
 80079ae:	2d00      	cmp	r5, #0
 80079b0:	4606      	mov	r6, r0
 80079b2:	db01      	blt.n	80079b8 <_malloc_r+0x1c>
 80079b4:	42a9      	cmp	r1, r5
 80079b6:	d904      	bls.n	80079c2 <_malloc_r+0x26>
 80079b8:	230c      	movs	r3, #12
 80079ba:	6033      	str	r3, [r6, #0]
 80079bc:	2000      	movs	r0, #0
 80079be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a98 <_malloc_r+0xfc>
 80079c6:	f000 f869 	bl	8007a9c <__malloc_lock>
 80079ca:	f8d8 3000 	ldr.w	r3, [r8]
 80079ce:	461c      	mov	r4, r3
 80079d0:	bb44      	cbnz	r4, 8007a24 <_malloc_r+0x88>
 80079d2:	4629      	mov	r1, r5
 80079d4:	4630      	mov	r0, r6
 80079d6:	f7ff ffbf 	bl	8007958 <sbrk_aligned>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	4604      	mov	r4, r0
 80079de:	d158      	bne.n	8007a92 <_malloc_r+0xf6>
 80079e0:	f8d8 4000 	ldr.w	r4, [r8]
 80079e4:	4627      	mov	r7, r4
 80079e6:	2f00      	cmp	r7, #0
 80079e8:	d143      	bne.n	8007a72 <_malloc_r+0xd6>
 80079ea:	2c00      	cmp	r4, #0
 80079ec:	d04b      	beq.n	8007a86 <_malloc_r+0xea>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	4639      	mov	r1, r7
 80079f2:	4630      	mov	r0, r6
 80079f4:	eb04 0903 	add.w	r9, r4, r3
 80079f8:	f000 ff80 	bl	80088fc <_sbrk_r>
 80079fc:	4581      	cmp	r9, r0
 80079fe:	d142      	bne.n	8007a86 <_malloc_r+0xea>
 8007a00:	6821      	ldr	r1, [r4, #0]
 8007a02:	1a6d      	subs	r5, r5, r1
 8007a04:	4629      	mov	r1, r5
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ffa6 	bl	8007958 <sbrk_aligned>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d03a      	beq.n	8007a86 <_malloc_r+0xea>
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	442b      	add	r3, r5
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	f8d8 3000 	ldr.w	r3, [r8]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	bb62      	cbnz	r2, 8007a78 <_malloc_r+0xdc>
 8007a1e:	f8c8 7000 	str.w	r7, [r8]
 8007a22:	e00f      	b.n	8007a44 <_malloc_r+0xa8>
 8007a24:	6822      	ldr	r2, [r4, #0]
 8007a26:	1b52      	subs	r2, r2, r5
 8007a28:	d420      	bmi.n	8007a6c <_malloc_r+0xd0>
 8007a2a:	2a0b      	cmp	r2, #11
 8007a2c:	d917      	bls.n	8007a5e <_malloc_r+0xc2>
 8007a2e:	1961      	adds	r1, r4, r5
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	6025      	str	r5, [r4, #0]
 8007a34:	bf18      	it	ne
 8007a36:	6059      	strne	r1, [r3, #4]
 8007a38:	6863      	ldr	r3, [r4, #4]
 8007a3a:	bf08      	it	eq
 8007a3c:	f8c8 1000 	streq.w	r1, [r8]
 8007a40:	5162      	str	r2, [r4, r5]
 8007a42:	604b      	str	r3, [r1, #4]
 8007a44:	4630      	mov	r0, r6
 8007a46:	f000 f82f 	bl	8007aa8 <__malloc_unlock>
 8007a4a:	f104 000b 	add.w	r0, r4, #11
 8007a4e:	1d23      	adds	r3, r4, #4
 8007a50:	f020 0007 	bic.w	r0, r0, #7
 8007a54:	1ac2      	subs	r2, r0, r3
 8007a56:	bf1c      	itt	ne
 8007a58:	1a1b      	subne	r3, r3, r0
 8007a5a:	50a3      	strne	r3, [r4, r2]
 8007a5c:	e7af      	b.n	80079be <_malloc_r+0x22>
 8007a5e:	6862      	ldr	r2, [r4, #4]
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	bf0c      	ite	eq
 8007a64:	f8c8 2000 	streq.w	r2, [r8]
 8007a68:	605a      	strne	r2, [r3, #4]
 8007a6a:	e7eb      	b.n	8007a44 <_malloc_r+0xa8>
 8007a6c:	4623      	mov	r3, r4
 8007a6e:	6864      	ldr	r4, [r4, #4]
 8007a70:	e7ae      	b.n	80079d0 <_malloc_r+0x34>
 8007a72:	463c      	mov	r4, r7
 8007a74:	687f      	ldr	r7, [r7, #4]
 8007a76:	e7b6      	b.n	80079e6 <_malloc_r+0x4a>
 8007a78:	461a      	mov	r2, r3
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	42a3      	cmp	r3, r4
 8007a7e:	d1fb      	bne.n	8007a78 <_malloc_r+0xdc>
 8007a80:	2300      	movs	r3, #0
 8007a82:	6053      	str	r3, [r2, #4]
 8007a84:	e7de      	b.n	8007a44 <_malloc_r+0xa8>
 8007a86:	230c      	movs	r3, #12
 8007a88:	6033      	str	r3, [r6, #0]
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f000 f80c 	bl	8007aa8 <__malloc_unlock>
 8007a90:	e794      	b.n	80079bc <_malloc_r+0x20>
 8007a92:	6005      	str	r5, [r0, #0]
 8007a94:	e7d6      	b.n	8007a44 <_malloc_r+0xa8>
 8007a96:	bf00      	nop
 8007a98:	200004b4 	.word	0x200004b4

08007a9c <__malloc_lock>:
 8007a9c:	4801      	ldr	r0, [pc, #4]	@ (8007aa4 <__malloc_lock+0x8>)
 8007a9e:	f000 bf7a 	b.w	8008996 <__retarget_lock_acquire_recursive>
 8007aa2:	bf00      	nop
 8007aa4:	200005f8 	.word	0x200005f8

08007aa8 <__malloc_unlock>:
 8007aa8:	4801      	ldr	r0, [pc, #4]	@ (8007ab0 <__malloc_unlock+0x8>)
 8007aaa:	f000 bf75 	b.w	8008998 <__retarget_lock_release_recursive>
 8007aae:	bf00      	nop
 8007ab0:	200005f8 	.word	0x200005f8

08007ab4 <_strtol_l.isra.0>:
 8007ab4:	2b24      	cmp	r3, #36	@ 0x24
 8007ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aba:	4686      	mov	lr, r0
 8007abc:	4690      	mov	r8, r2
 8007abe:	d801      	bhi.n	8007ac4 <_strtol_l.isra.0+0x10>
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d106      	bne.n	8007ad2 <_strtol_l.isra.0+0x1e>
 8007ac4:	f000 ff3c 	bl	8008940 <__errno>
 8007ac8:	2316      	movs	r3, #22
 8007aca:	6003      	str	r3, [r0, #0]
 8007acc:	2000      	movs	r0, #0
 8007ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad2:	4834      	ldr	r0, [pc, #208]	@ (8007ba4 <_strtol_l.isra.0+0xf0>)
 8007ad4:	460d      	mov	r5, r1
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007adc:	5d06      	ldrb	r6, [r0, r4]
 8007ade:	f016 0608 	ands.w	r6, r6, #8
 8007ae2:	d1f8      	bne.n	8007ad6 <_strtol_l.isra.0+0x22>
 8007ae4:	2c2d      	cmp	r4, #45	@ 0x2d
 8007ae6:	d110      	bne.n	8007b0a <_strtol_l.isra.0+0x56>
 8007ae8:	782c      	ldrb	r4, [r5, #0]
 8007aea:	2601      	movs	r6, #1
 8007aec:	1c95      	adds	r5, r2, #2
 8007aee:	f033 0210 	bics.w	r2, r3, #16
 8007af2:	d115      	bne.n	8007b20 <_strtol_l.isra.0+0x6c>
 8007af4:	2c30      	cmp	r4, #48	@ 0x30
 8007af6:	d10d      	bne.n	8007b14 <_strtol_l.isra.0+0x60>
 8007af8:	782a      	ldrb	r2, [r5, #0]
 8007afa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007afe:	2a58      	cmp	r2, #88	@ 0x58
 8007b00:	d108      	bne.n	8007b14 <_strtol_l.isra.0+0x60>
 8007b02:	786c      	ldrb	r4, [r5, #1]
 8007b04:	3502      	adds	r5, #2
 8007b06:	2310      	movs	r3, #16
 8007b08:	e00a      	b.n	8007b20 <_strtol_l.isra.0+0x6c>
 8007b0a:	2c2b      	cmp	r4, #43	@ 0x2b
 8007b0c:	bf04      	itt	eq
 8007b0e:	782c      	ldrbeq	r4, [r5, #0]
 8007b10:	1c95      	addeq	r5, r2, #2
 8007b12:	e7ec      	b.n	8007aee <_strtol_l.isra.0+0x3a>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1f6      	bne.n	8007b06 <_strtol_l.isra.0+0x52>
 8007b18:	2c30      	cmp	r4, #48	@ 0x30
 8007b1a:	bf14      	ite	ne
 8007b1c:	230a      	movne	r3, #10
 8007b1e:	2308      	moveq	r3, #8
 8007b20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007b24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b28:	2200      	movs	r2, #0
 8007b2a:	fbbc f9f3 	udiv	r9, ip, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007b38:	2f09      	cmp	r7, #9
 8007b3a:	d80f      	bhi.n	8007b5c <_strtol_l.isra.0+0xa8>
 8007b3c:	463c      	mov	r4, r7
 8007b3e:	42a3      	cmp	r3, r4
 8007b40:	dd1b      	ble.n	8007b7a <_strtol_l.isra.0+0xc6>
 8007b42:	1c57      	adds	r7, r2, #1
 8007b44:	d007      	beq.n	8007b56 <_strtol_l.isra.0+0xa2>
 8007b46:	4581      	cmp	r9, r0
 8007b48:	d314      	bcc.n	8007b74 <_strtol_l.isra.0+0xc0>
 8007b4a:	d101      	bne.n	8007b50 <_strtol_l.isra.0+0x9c>
 8007b4c:	45a2      	cmp	sl, r4
 8007b4e:	db11      	blt.n	8007b74 <_strtol_l.isra.0+0xc0>
 8007b50:	fb00 4003 	mla	r0, r0, r3, r4
 8007b54:	2201      	movs	r2, #1
 8007b56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b5a:	e7eb      	b.n	8007b34 <_strtol_l.isra.0+0x80>
 8007b5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007b60:	2f19      	cmp	r7, #25
 8007b62:	d801      	bhi.n	8007b68 <_strtol_l.isra.0+0xb4>
 8007b64:	3c37      	subs	r4, #55	@ 0x37
 8007b66:	e7ea      	b.n	8007b3e <_strtol_l.isra.0+0x8a>
 8007b68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007b6c:	2f19      	cmp	r7, #25
 8007b6e:	d804      	bhi.n	8007b7a <_strtol_l.isra.0+0xc6>
 8007b70:	3c57      	subs	r4, #87	@ 0x57
 8007b72:	e7e4      	b.n	8007b3e <_strtol_l.isra.0+0x8a>
 8007b74:	f04f 32ff 	mov.w	r2, #4294967295
 8007b78:	e7ed      	b.n	8007b56 <_strtol_l.isra.0+0xa2>
 8007b7a:	1c53      	adds	r3, r2, #1
 8007b7c:	d108      	bne.n	8007b90 <_strtol_l.isra.0+0xdc>
 8007b7e:	2322      	movs	r3, #34	@ 0x22
 8007b80:	f8ce 3000 	str.w	r3, [lr]
 8007b84:	4660      	mov	r0, ip
 8007b86:	f1b8 0f00 	cmp.w	r8, #0
 8007b8a:	d0a0      	beq.n	8007ace <_strtol_l.isra.0+0x1a>
 8007b8c:	1e69      	subs	r1, r5, #1
 8007b8e:	e006      	b.n	8007b9e <_strtol_l.isra.0+0xea>
 8007b90:	b106      	cbz	r6, 8007b94 <_strtol_l.isra.0+0xe0>
 8007b92:	4240      	negs	r0, r0
 8007b94:	f1b8 0f00 	cmp.w	r8, #0
 8007b98:	d099      	beq.n	8007ace <_strtol_l.isra.0+0x1a>
 8007b9a:	2a00      	cmp	r2, #0
 8007b9c:	d1f6      	bne.n	8007b8c <_strtol_l.isra.0+0xd8>
 8007b9e:	f8c8 1000 	str.w	r1, [r8]
 8007ba2:	e794      	b.n	8007ace <_strtol_l.isra.0+0x1a>
 8007ba4:	0800a4b5 	.word	0x0800a4b5

08007ba8 <strtol>:
 8007ba8:	4613      	mov	r3, r2
 8007baa:	460a      	mov	r2, r1
 8007bac:	4601      	mov	r1, r0
 8007bae:	4802      	ldr	r0, [pc, #8]	@ (8007bb8 <strtol+0x10>)
 8007bb0:	6800      	ldr	r0, [r0, #0]
 8007bb2:	f7ff bf7f 	b.w	8007ab4 <_strtol_l.isra.0>
 8007bb6:	bf00      	nop
 8007bb8:	20000018 	.word	0x20000018

08007bbc <__cvt>:
 8007bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc0:	ec57 6b10 	vmov	r6, r7, d0
 8007bc4:	2f00      	cmp	r7, #0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	4619      	mov	r1, r3
 8007bca:	463b      	mov	r3, r7
 8007bcc:	bfbb      	ittet	lt
 8007bce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007bd2:	461f      	movlt	r7, r3
 8007bd4:	2300      	movge	r3, #0
 8007bd6:	232d      	movlt	r3, #45	@ 0x2d
 8007bd8:	700b      	strb	r3, [r1, #0]
 8007bda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bdc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007be0:	4691      	mov	r9, r2
 8007be2:	f023 0820 	bic.w	r8, r3, #32
 8007be6:	bfbc      	itt	lt
 8007be8:	4632      	movlt	r2, r6
 8007bea:	4616      	movlt	r6, r2
 8007bec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007bf0:	d005      	beq.n	8007bfe <__cvt+0x42>
 8007bf2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007bf6:	d100      	bne.n	8007bfa <__cvt+0x3e>
 8007bf8:	3401      	adds	r4, #1
 8007bfa:	2102      	movs	r1, #2
 8007bfc:	e000      	b.n	8007c00 <__cvt+0x44>
 8007bfe:	2103      	movs	r1, #3
 8007c00:	ab03      	add	r3, sp, #12
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	ab02      	add	r3, sp, #8
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	ec47 6b10 	vmov	d0, r6, r7
 8007c0c:	4653      	mov	r3, sl
 8007c0e:	4622      	mov	r2, r4
 8007c10:	f000 ff4e 	bl	8008ab0 <_dtoa_r>
 8007c14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c18:	4605      	mov	r5, r0
 8007c1a:	d119      	bne.n	8007c50 <__cvt+0x94>
 8007c1c:	f019 0f01 	tst.w	r9, #1
 8007c20:	d00e      	beq.n	8007c40 <__cvt+0x84>
 8007c22:	eb00 0904 	add.w	r9, r0, r4
 8007c26:	2200      	movs	r2, #0
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	f7f8 ff73 	bl	8000b18 <__aeabi_dcmpeq>
 8007c32:	b108      	cbz	r0, 8007c38 <__cvt+0x7c>
 8007c34:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c38:	2230      	movs	r2, #48	@ 0x30
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	454b      	cmp	r3, r9
 8007c3e:	d31e      	bcc.n	8007c7e <__cvt+0xc2>
 8007c40:	9b03      	ldr	r3, [sp, #12]
 8007c42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c44:	1b5b      	subs	r3, r3, r5
 8007c46:	4628      	mov	r0, r5
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	b004      	add	sp, #16
 8007c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c54:	eb00 0904 	add.w	r9, r0, r4
 8007c58:	d1e5      	bne.n	8007c26 <__cvt+0x6a>
 8007c5a:	7803      	ldrb	r3, [r0, #0]
 8007c5c:	2b30      	cmp	r3, #48	@ 0x30
 8007c5e:	d10a      	bne.n	8007c76 <__cvt+0xba>
 8007c60:	2200      	movs	r2, #0
 8007c62:	2300      	movs	r3, #0
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 ff56 	bl	8000b18 <__aeabi_dcmpeq>
 8007c6c:	b918      	cbnz	r0, 8007c76 <__cvt+0xba>
 8007c6e:	f1c4 0401 	rsb	r4, r4, #1
 8007c72:	f8ca 4000 	str.w	r4, [sl]
 8007c76:	f8da 3000 	ldr.w	r3, [sl]
 8007c7a:	4499      	add	r9, r3
 8007c7c:	e7d3      	b.n	8007c26 <__cvt+0x6a>
 8007c7e:	1c59      	adds	r1, r3, #1
 8007c80:	9103      	str	r1, [sp, #12]
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	e7d9      	b.n	8007c3a <__cvt+0x7e>

08007c86 <__exponent>:
 8007c86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c88:	2900      	cmp	r1, #0
 8007c8a:	bfba      	itte	lt
 8007c8c:	4249      	neglt	r1, r1
 8007c8e:	232d      	movlt	r3, #45	@ 0x2d
 8007c90:	232b      	movge	r3, #43	@ 0x2b
 8007c92:	2909      	cmp	r1, #9
 8007c94:	7002      	strb	r2, [r0, #0]
 8007c96:	7043      	strb	r3, [r0, #1]
 8007c98:	dd29      	ble.n	8007cee <__exponent+0x68>
 8007c9a:	f10d 0307 	add.w	r3, sp, #7
 8007c9e:	461d      	mov	r5, r3
 8007ca0:	270a      	movs	r7, #10
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ca8:	fb07 1416 	mls	r4, r7, r6, r1
 8007cac:	3430      	adds	r4, #48	@ 0x30
 8007cae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	2c63      	cmp	r4, #99	@ 0x63
 8007cb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cba:	4631      	mov	r1, r6
 8007cbc:	dcf1      	bgt.n	8007ca2 <__exponent+0x1c>
 8007cbe:	3130      	adds	r1, #48	@ 0x30
 8007cc0:	1e94      	subs	r4, r2, #2
 8007cc2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cc6:	1c41      	adds	r1, r0, #1
 8007cc8:	4623      	mov	r3, r4
 8007cca:	42ab      	cmp	r3, r5
 8007ccc:	d30a      	bcc.n	8007ce4 <__exponent+0x5e>
 8007cce:	f10d 0309 	add.w	r3, sp, #9
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	42ac      	cmp	r4, r5
 8007cd6:	bf88      	it	hi
 8007cd8:	2300      	movhi	r3, #0
 8007cda:	3302      	adds	r3, #2
 8007cdc:	4403      	add	r3, r0
 8007cde:	1a18      	subs	r0, r3, r0
 8007ce0:	b003      	add	sp, #12
 8007ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ce8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007cec:	e7ed      	b.n	8007cca <__exponent+0x44>
 8007cee:	2330      	movs	r3, #48	@ 0x30
 8007cf0:	3130      	adds	r1, #48	@ 0x30
 8007cf2:	7083      	strb	r3, [r0, #2]
 8007cf4:	70c1      	strb	r1, [r0, #3]
 8007cf6:	1d03      	adds	r3, r0, #4
 8007cf8:	e7f1      	b.n	8007cde <__exponent+0x58>
	...

08007cfc <_printf_float>:
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	b08d      	sub	sp, #52	@ 0x34
 8007d02:	460c      	mov	r4, r1
 8007d04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d08:	4616      	mov	r6, r2
 8007d0a:	461f      	mov	r7, r3
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	f000 fdbd 	bl	800888c <_localeconv_r>
 8007d12:	6803      	ldr	r3, [r0, #0]
 8007d14:	9304      	str	r3, [sp, #16]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7f8 fad2 	bl	80002c0 <strlen>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d20:	f8d8 3000 	ldr.w	r3, [r8]
 8007d24:	9005      	str	r0, [sp, #20]
 8007d26:	3307      	adds	r3, #7
 8007d28:	f023 0307 	bic.w	r3, r3, #7
 8007d2c:	f103 0208 	add.w	r2, r3, #8
 8007d30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d34:	f8d4 b000 	ldr.w	fp, [r4]
 8007d38:	f8c8 2000 	str.w	r2, [r8]
 8007d3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d44:	9307      	str	r3, [sp, #28]
 8007d46:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d52:	4b9c      	ldr	r3, [pc, #624]	@ (8007fc4 <_printf_float+0x2c8>)
 8007d54:	f04f 32ff 	mov.w	r2, #4294967295
 8007d58:	f7f8 ff10 	bl	8000b7c <__aeabi_dcmpun>
 8007d5c:	bb70      	cbnz	r0, 8007dbc <_printf_float+0xc0>
 8007d5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d62:	4b98      	ldr	r3, [pc, #608]	@ (8007fc4 <_printf_float+0x2c8>)
 8007d64:	f04f 32ff 	mov.w	r2, #4294967295
 8007d68:	f7f8 feea 	bl	8000b40 <__aeabi_dcmple>
 8007d6c:	bb30      	cbnz	r0, 8007dbc <_printf_float+0xc0>
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2300      	movs	r3, #0
 8007d72:	4640      	mov	r0, r8
 8007d74:	4649      	mov	r1, r9
 8007d76:	f7f8 fed9 	bl	8000b2c <__aeabi_dcmplt>
 8007d7a:	b110      	cbz	r0, 8007d82 <_printf_float+0x86>
 8007d7c:	232d      	movs	r3, #45	@ 0x2d
 8007d7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d82:	4a91      	ldr	r2, [pc, #580]	@ (8007fc8 <_printf_float+0x2cc>)
 8007d84:	4b91      	ldr	r3, [pc, #580]	@ (8007fcc <_printf_float+0x2d0>)
 8007d86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d8a:	bf8c      	ite	hi
 8007d8c:	4690      	movhi	r8, r2
 8007d8e:	4698      	movls	r8, r3
 8007d90:	2303      	movs	r3, #3
 8007d92:	6123      	str	r3, [r4, #16]
 8007d94:	f02b 0304 	bic.w	r3, fp, #4
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	f04f 0900 	mov.w	r9, #0
 8007d9e:	9700      	str	r7, [sp, #0]
 8007da0:	4633      	mov	r3, r6
 8007da2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007da4:	4621      	mov	r1, r4
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 f9d2 	bl	8008150 <_printf_common>
 8007dac:	3001      	adds	r0, #1
 8007dae:	f040 808d 	bne.w	8007ecc <_printf_float+0x1d0>
 8007db2:	f04f 30ff 	mov.w	r0, #4294967295
 8007db6:	b00d      	add	sp, #52	@ 0x34
 8007db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbc:	4642      	mov	r2, r8
 8007dbe:	464b      	mov	r3, r9
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	f7f8 feda 	bl	8000b7c <__aeabi_dcmpun>
 8007dc8:	b140      	cbz	r0, 8007ddc <_printf_float+0xe0>
 8007dca:	464b      	mov	r3, r9
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	bfbc      	itt	lt
 8007dd0:	232d      	movlt	r3, #45	@ 0x2d
 8007dd2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007dd6:	4a7e      	ldr	r2, [pc, #504]	@ (8007fd0 <_printf_float+0x2d4>)
 8007dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8007fd4 <_printf_float+0x2d8>)
 8007dda:	e7d4      	b.n	8007d86 <_printf_float+0x8a>
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007de2:	9206      	str	r2, [sp, #24]
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	d13b      	bne.n	8007e60 <_printf_float+0x164>
 8007de8:	2306      	movs	r3, #6
 8007dea:	6063      	str	r3, [r4, #4]
 8007dec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007df0:	2300      	movs	r3, #0
 8007df2:	6022      	str	r2, [r4, #0]
 8007df4:	9303      	str	r3, [sp, #12]
 8007df6:	ab0a      	add	r3, sp, #40	@ 0x28
 8007df8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007dfc:	ab09      	add	r3, sp, #36	@ 0x24
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	6861      	ldr	r1, [r4, #4]
 8007e02:	ec49 8b10 	vmov	d0, r8, r9
 8007e06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f7ff fed6 	bl	8007bbc <__cvt>
 8007e10:	9b06      	ldr	r3, [sp, #24]
 8007e12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e14:	2b47      	cmp	r3, #71	@ 0x47
 8007e16:	4680      	mov	r8, r0
 8007e18:	d129      	bne.n	8007e6e <_printf_float+0x172>
 8007e1a:	1cc8      	adds	r0, r1, #3
 8007e1c:	db02      	blt.n	8007e24 <_printf_float+0x128>
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	4299      	cmp	r1, r3
 8007e22:	dd41      	ble.n	8007ea8 <_printf_float+0x1ac>
 8007e24:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e28:	fa5f fa8a 	uxtb.w	sl, sl
 8007e2c:	3901      	subs	r1, #1
 8007e2e:	4652      	mov	r2, sl
 8007e30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e34:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e36:	f7ff ff26 	bl	8007c86 <__exponent>
 8007e3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e3c:	1813      	adds	r3, r2, r0
 8007e3e:	2a01      	cmp	r2, #1
 8007e40:	4681      	mov	r9, r0
 8007e42:	6123      	str	r3, [r4, #16]
 8007e44:	dc02      	bgt.n	8007e4c <_printf_float+0x150>
 8007e46:	6822      	ldr	r2, [r4, #0]
 8007e48:	07d2      	lsls	r2, r2, #31
 8007e4a:	d501      	bpl.n	8007e50 <_printf_float+0x154>
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	6123      	str	r3, [r4, #16]
 8007e50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0a2      	beq.n	8007d9e <_printf_float+0xa2>
 8007e58:	232d      	movs	r3, #45	@ 0x2d
 8007e5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e5e:	e79e      	b.n	8007d9e <_printf_float+0xa2>
 8007e60:	9a06      	ldr	r2, [sp, #24]
 8007e62:	2a47      	cmp	r2, #71	@ 0x47
 8007e64:	d1c2      	bne.n	8007dec <_printf_float+0xf0>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1c0      	bne.n	8007dec <_printf_float+0xf0>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e7bd      	b.n	8007dea <_printf_float+0xee>
 8007e6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e72:	d9db      	bls.n	8007e2c <_printf_float+0x130>
 8007e74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e78:	d118      	bne.n	8007eac <_printf_float+0x1b0>
 8007e7a:	2900      	cmp	r1, #0
 8007e7c:	6863      	ldr	r3, [r4, #4]
 8007e7e:	dd0b      	ble.n	8007e98 <_printf_float+0x19c>
 8007e80:	6121      	str	r1, [r4, #16]
 8007e82:	b913      	cbnz	r3, 8007e8a <_printf_float+0x18e>
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	07d0      	lsls	r0, r2, #31
 8007e88:	d502      	bpl.n	8007e90 <_printf_float+0x194>
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	440b      	add	r3, r1
 8007e8e:	6123      	str	r3, [r4, #16]
 8007e90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e92:	f04f 0900 	mov.w	r9, #0
 8007e96:	e7db      	b.n	8007e50 <_printf_float+0x154>
 8007e98:	b913      	cbnz	r3, 8007ea0 <_printf_float+0x1a4>
 8007e9a:	6822      	ldr	r2, [r4, #0]
 8007e9c:	07d2      	lsls	r2, r2, #31
 8007e9e:	d501      	bpl.n	8007ea4 <_printf_float+0x1a8>
 8007ea0:	3302      	adds	r3, #2
 8007ea2:	e7f4      	b.n	8007e8e <_printf_float+0x192>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e7f2      	b.n	8007e8e <_printf_float+0x192>
 8007ea8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eae:	4299      	cmp	r1, r3
 8007eb0:	db05      	blt.n	8007ebe <_printf_float+0x1c2>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	6121      	str	r1, [r4, #16]
 8007eb6:	07d8      	lsls	r0, r3, #31
 8007eb8:	d5ea      	bpl.n	8007e90 <_printf_float+0x194>
 8007eba:	1c4b      	adds	r3, r1, #1
 8007ebc:	e7e7      	b.n	8007e8e <_printf_float+0x192>
 8007ebe:	2900      	cmp	r1, #0
 8007ec0:	bfd4      	ite	le
 8007ec2:	f1c1 0202 	rsble	r2, r1, #2
 8007ec6:	2201      	movgt	r2, #1
 8007ec8:	4413      	add	r3, r2
 8007eca:	e7e0      	b.n	8007e8e <_printf_float+0x192>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	055a      	lsls	r2, r3, #21
 8007ed0:	d407      	bmi.n	8007ee2 <_printf_float+0x1e6>
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	4642      	mov	r2, r8
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4628      	mov	r0, r5
 8007eda:	47b8      	blx	r7
 8007edc:	3001      	adds	r0, #1
 8007ede:	d12b      	bne.n	8007f38 <_printf_float+0x23c>
 8007ee0:	e767      	b.n	8007db2 <_printf_float+0xb6>
 8007ee2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ee6:	f240 80dd 	bls.w	80080a4 <_printf_float+0x3a8>
 8007eea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f7f8 fe11 	bl	8000b18 <__aeabi_dcmpeq>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d033      	beq.n	8007f62 <_printf_float+0x266>
 8007efa:	4a37      	ldr	r2, [pc, #220]	@ (8007fd8 <_printf_float+0x2dc>)
 8007efc:	2301      	movs	r3, #1
 8007efe:	4631      	mov	r1, r6
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b8      	blx	r7
 8007f04:	3001      	adds	r0, #1
 8007f06:	f43f af54 	beq.w	8007db2 <_printf_float+0xb6>
 8007f0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f0e:	4543      	cmp	r3, r8
 8007f10:	db02      	blt.n	8007f18 <_printf_float+0x21c>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	07d8      	lsls	r0, r3, #31
 8007f16:	d50f      	bpl.n	8007f38 <_printf_float+0x23c>
 8007f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4628      	mov	r0, r5
 8007f20:	47b8      	blx	r7
 8007f22:	3001      	adds	r0, #1
 8007f24:	f43f af45 	beq.w	8007db2 <_printf_float+0xb6>
 8007f28:	f04f 0900 	mov.w	r9, #0
 8007f2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f30:	f104 0a1a 	add.w	sl, r4, #26
 8007f34:	45c8      	cmp	r8, r9
 8007f36:	dc09      	bgt.n	8007f4c <_printf_float+0x250>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	079b      	lsls	r3, r3, #30
 8007f3c:	f100 8103 	bmi.w	8008146 <_printf_float+0x44a>
 8007f40:	68e0      	ldr	r0, [r4, #12]
 8007f42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f44:	4298      	cmp	r0, r3
 8007f46:	bfb8      	it	lt
 8007f48:	4618      	movlt	r0, r3
 8007f4a:	e734      	b.n	8007db6 <_printf_float+0xba>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	4652      	mov	r2, sl
 8007f50:	4631      	mov	r1, r6
 8007f52:	4628      	mov	r0, r5
 8007f54:	47b8      	blx	r7
 8007f56:	3001      	adds	r0, #1
 8007f58:	f43f af2b 	beq.w	8007db2 <_printf_float+0xb6>
 8007f5c:	f109 0901 	add.w	r9, r9, #1
 8007f60:	e7e8      	b.n	8007f34 <_printf_float+0x238>
 8007f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	dc39      	bgt.n	8007fdc <_printf_float+0x2e0>
 8007f68:	4a1b      	ldr	r2, [pc, #108]	@ (8007fd8 <_printf_float+0x2dc>)
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4628      	mov	r0, r5
 8007f70:	47b8      	blx	r7
 8007f72:	3001      	adds	r0, #1
 8007f74:	f43f af1d 	beq.w	8007db2 <_printf_float+0xb6>
 8007f78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f7c:	ea59 0303 	orrs.w	r3, r9, r3
 8007f80:	d102      	bne.n	8007f88 <_printf_float+0x28c>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	07d9      	lsls	r1, r3, #31
 8007f86:	d5d7      	bpl.n	8007f38 <_printf_float+0x23c>
 8007f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	4628      	mov	r0, r5
 8007f90:	47b8      	blx	r7
 8007f92:	3001      	adds	r0, #1
 8007f94:	f43f af0d 	beq.w	8007db2 <_printf_float+0xb6>
 8007f98:	f04f 0a00 	mov.w	sl, #0
 8007f9c:	f104 0b1a 	add.w	fp, r4, #26
 8007fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa2:	425b      	negs	r3, r3
 8007fa4:	4553      	cmp	r3, sl
 8007fa6:	dc01      	bgt.n	8007fac <_printf_float+0x2b0>
 8007fa8:	464b      	mov	r3, r9
 8007faa:	e793      	b.n	8007ed4 <_printf_float+0x1d8>
 8007fac:	2301      	movs	r3, #1
 8007fae:	465a      	mov	r2, fp
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b8      	blx	r7
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	f43f aefb 	beq.w	8007db2 <_printf_float+0xb6>
 8007fbc:	f10a 0a01 	add.w	sl, sl, #1
 8007fc0:	e7ee      	b.n	8007fa0 <_printf_float+0x2a4>
 8007fc2:	bf00      	nop
 8007fc4:	7fefffff 	.word	0x7fefffff
 8007fc8:	0800a5b9 	.word	0x0800a5b9
 8007fcc:	0800a5b5 	.word	0x0800a5b5
 8007fd0:	0800a5c1 	.word	0x0800a5c1
 8007fd4:	0800a5bd 	.word	0x0800a5bd
 8007fd8:	0800a5c5 	.word	0x0800a5c5
 8007fdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fe2:	4553      	cmp	r3, sl
 8007fe4:	bfa8      	it	ge
 8007fe6:	4653      	movge	r3, sl
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	4699      	mov	r9, r3
 8007fec:	dc36      	bgt.n	800805c <_printf_float+0x360>
 8007fee:	f04f 0b00 	mov.w	fp, #0
 8007ff2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ff6:	f104 021a 	add.w	r2, r4, #26
 8007ffa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ffc:	9306      	str	r3, [sp, #24]
 8007ffe:	eba3 0309 	sub.w	r3, r3, r9
 8008002:	455b      	cmp	r3, fp
 8008004:	dc31      	bgt.n	800806a <_printf_float+0x36e>
 8008006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008008:	459a      	cmp	sl, r3
 800800a:	dc3a      	bgt.n	8008082 <_printf_float+0x386>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	07da      	lsls	r2, r3, #31
 8008010:	d437      	bmi.n	8008082 <_printf_float+0x386>
 8008012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008014:	ebaa 0903 	sub.w	r9, sl, r3
 8008018:	9b06      	ldr	r3, [sp, #24]
 800801a:	ebaa 0303 	sub.w	r3, sl, r3
 800801e:	4599      	cmp	r9, r3
 8008020:	bfa8      	it	ge
 8008022:	4699      	movge	r9, r3
 8008024:	f1b9 0f00 	cmp.w	r9, #0
 8008028:	dc33      	bgt.n	8008092 <_printf_float+0x396>
 800802a:	f04f 0800 	mov.w	r8, #0
 800802e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008032:	f104 0b1a 	add.w	fp, r4, #26
 8008036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008038:	ebaa 0303 	sub.w	r3, sl, r3
 800803c:	eba3 0309 	sub.w	r3, r3, r9
 8008040:	4543      	cmp	r3, r8
 8008042:	f77f af79 	ble.w	8007f38 <_printf_float+0x23c>
 8008046:	2301      	movs	r3, #1
 8008048:	465a      	mov	r2, fp
 800804a:	4631      	mov	r1, r6
 800804c:	4628      	mov	r0, r5
 800804e:	47b8      	blx	r7
 8008050:	3001      	adds	r0, #1
 8008052:	f43f aeae 	beq.w	8007db2 <_printf_float+0xb6>
 8008056:	f108 0801 	add.w	r8, r8, #1
 800805a:	e7ec      	b.n	8008036 <_printf_float+0x33a>
 800805c:	4642      	mov	r2, r8
 800805e:	4631      	mov	r1, r6
 8008060:	4628      	mov	r0, r5
 8008062:	47b8      	blx	r7
 8008064:	3001      	adds	r0, #1
 8008066:	d1c2      	bne.n	8007fee <_printf_float+0x2f2>
 8008068:	e6a3      	b.n	8007db2 <_printf_float+0xb6>
 800806a:	2301      	movs	r3, #1
 800806c:	4631      	mov	r1, r6
 800806e:	4628      	mov	r0, r5
 8008070:	9206      	str	r2, [sp, #24]
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	f43f ae9c 	beq.w	8007db2 <_printf_float+0xb6>
 800807a:	9a06      	ldr	r2, [sp, #24]
 800807c:	f10b 0b01 	add.w	fp, fp, #1
 8008080:	e7bb      	b.n	8007ffa <_printf_float+0x2fe>
 8008082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008086:	4631      	mov	r1, r6
 8008088:	4628      	mov	r0, r5
 800808a:	47b8      	blx	r7
 800808c:	3001      	adds	r0, #1
 800808e:	d1c0      	bne.n	8008012 <_printf_float+0x316>
 8008090:	e68f      	b.n	8007db2 <_printf_float+0xb6>
 8008092:	9a06      	ldr	r2, [sp, #24]
 8008094:	464b      	mov	r3, r9
 8008096:	4442      	add	r2, r8
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	d1c3      	bne.n	800802a <_printf_float+0x32e>
 80080a2:	e686      	b.n	8007db2 <_printf_float+0xb6>
 80080a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080a8:	f1ba 0f01 	cmp.w	sl, #1
 80080ac:	dc01      	bgt.n	80080b2 <_printf_float+0x3b6>
 80080ae:	07db      	lsls	r3, r3, #31
 80080b0:	d536      	bpl.n	8008120 <_printf_float+0x424>
 80080b2:	2301      	movs	r3, #1
 80080b4:	4642      	mov	r2, r8
 80080b6:	4631      	mov	r1, r6
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b8      	blx	r7
 80080bc:	3001      	adds	r0, #1
 80080be:	f43f ae78 	beq.w	8007db2 <_printf_float+0xb6>
 80080c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080c6:	4631      	mov	r1, r6
 80080c8:	4628      	mov	r0, r5
 80080ca:	47b8      	blx	r7
 80080cc:	3001      	adds	r0, #1
 80080ce:	f43f ae70 	beq.w	8007db2 <_printf_float+0xb6>
 80080d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080d6:	2200      	movs	r2, #0
 80080d8:	2300      	movs	r3, #0
 80080da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080de:	f7f8 fd1b 	bl	8000b18 <__aeabi_dcmpeq>
 80080e2:	b9c0      	cbnz	r0, 8008116 <_printf_float+0x41a>
 80080e4:	4653      	mov	r3, sl
 80080e6:	f108 0201 	add.w	r2, r8, #1
 80080ea:	4631      	mov	r1, r6
 80080ec:	4628      	mov	r0, r5
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	d10c      	bne.n	800810e <_printf_float+0x412>
 80080f4:	e65d      	b.n	8007db2 <_printf_float+0xb6>
 80080f6:	2301      	movs	r3, #1
 80080f8:	465a      	mov	r2, fp
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b8      	blx	r7
 8008100:	3001      	adds	r0, #1
 8008102:	f43f ae56 	beq.w	8007db2 <_printf_float+0xb6>
 8008106:	f108 0801 	add.w	r8, r8, #1
 800810a:	45d0      	cmp	r8, sl
 800810c:	dbf3      	blt.n	80080f6 <_printf_float+0x3fa>
 800810e:	464b      	mov	r3, r9
 8008110:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008114:	e6df      	b.n	8007ed6 <_printf_float+0x1da>
 8008116:	f04f 0800 	mov.w	r8, #0
 800811a:	f104 0b1a 	add.w	fp, r4, #26
 800811e:	e7f4      	b.n	800810a <_printf_float+0x40e>
 8008120:	2301      	movs	r3, #1
 8008122:	4642      	mov	r2, r8
 8008124:	e7e1      	b.n	80080ea <_printf_float+0x3ee>
 8008126:	2301      	movs	r3, #1
 8008128:	464a      	mov	r2, r9
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	f43f ae3e 	beq.w	8007db2 <_printf_float+0xb6>
 8008136:	f108 0801 	add.w	r8, r8, #1
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800813e:	1a5b      	subs	r3, r3, r1
 8008140:	4543      	cmp	r3, r8
 8008142:	dcf0      	bgt.n	8008126 <_printf_float+0x42a>
 8008144:	e6fc      	b.n	8007f40 <_printf_float+0x244>
 8008146:	f04f 0800 	mov.w	r8, #0
 800814a:	f104 0919 	add.w	r9, r4, #25
 800814e:	e7f4      	b.n	800813a <_printf_float+0x43e>

08008150 <_printf_common>:
 8008150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008154:	4616      	mov	r6, r2
 8008156:	4698      	mov	r8, r3
 8008158:	688a      	ldr	r2, [r1, #8]
 800815a:	690b      	ldr	r3, [r1, #16]
 800815c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008160:	4293      	cmp	r3, r2
 8008162:	bfb8      	it	lt
 8008164:	4613      	movlt	r3, r2
 8008166:	6033      	str	r3, [r6, #0]
 8008168:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800816c:	4607      	mov	r7, r0
 800816e:	460c      	mov	r4, r1
 8008170:	b10a      	cbz	r2, 8008176 <_printf_common+0x26>
 8008172:	3301      	adds	r3, #1
 8008174:	6033      	str	r3, [r6, #0]
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	0699      	lsls	r1, r3, #26
 800817a:	bf42      	ittt	mi
 800817c:	6833      	ldrmi	r3, [r6, #0]
 800817e:	3302      	addmi	r3, #2
 8008180:	6033      	strmi	r3, [r6, #0]
 8008182:	6825      	ldr	r5, [r4, #0]
 8008184:	f015 0506 	ands.w	r5, r5, #6
 8008188:	d106      	bne.n	8008198 <_printf_common+0x48>
 800818a:	f104 0a19 	add.w	sl, r4, #25
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	6832      	ldr	r2, [r6, #0]
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	42ab      	cmp	r3, r5
 8008196:	dc26      	bgt.n	80081e6 <_printf_common+0x96>
 8008198:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800819c:	6822      	ldr	r2, [r4, #0]
 800819e:	3b00      	subs	r3, #0
 80081a0:	bf18      	it	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	0692      	lsls	r2, r2, #26
 80081a6:	d42b      	bmi.n	8008200 <_printf_common+0xb0>
 80081a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081ac:	4641      	mov	r1, r8
 80081ae:	4638      	mov	r0, r7
 80081b0:	47c8      	blx	r9
 80081b2:	3001      	adds	r0, #1
 80081b4:	d01e      	beq.n	80081f4 <_printf_common+0xa4>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	6922      	ldr	r2, [r4, #16]
 80081ba:	f003 0306 	and.w	r3, r3, #6
 80081be:	2b04      	cmp	r3, #4
 80081c0:	bf02      	ittt	eq
 80081c2:	68e5      	ldreq	r5, [r4, #12]
 80081c4:	6833      	ldreq	r3, [r6, #0]
 80081c6:	1aed      	subeq	r5, r5, r3
 80081c8:	68a3      	ldr	r3, [r4, #8]
 80081ca:	bf0c      	ite	eq
 80081cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081d0:	2500      	movne	r5, #0
 80081d2:	4293      	cmp	r3, r2
 80081d4:	bfc4      	itt	gt
 80081d6:	1a9b      	subgt	r3, r3, r2
 80081d8:	18ed      	addgt	r5, r5, r3
 80081da:	2600      	movs	r6, #0
 80081dc:	341a      	adds	r4, #26
 80081de:	42b5      	cmp	r5, r6
 80081e0:	d11a      	bne.n	8008218 <_printf_common+0xc8>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e008      	b.n	80081f8 <_printf_common+0xa8>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4652      	mov	r2, sl
 80081ea:	4641      	mov	r1, r8
 80081ec:	4638      	mov	r0, r7
 80081ee:	47c8      	blx	r9
 80081f0:	3001      	adds	r0, #1
 80081f2:	d103      	bne.n	80081fc <_printf_common+0xac>
 80081f4:	f04f 30ff 	mov.w	r0, #4294967295
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	3501      	adds	r5, #1
 80081fe:	e7c6      	b.n	800818e <_printf_common+0x3e>
 8008200:	18e1      	adds	r1, r4, r3
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	2030      	movs	r0, #48	@ 0x30
 8008206:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800820a:	4422      	add	r2, r4
 800820c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008210:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008214:	3302      	adds	r3, #2
 8008216:	e7c7      	b.n	80081a8 <_printf_common+0x58>
 8008218:	2301      	movs	r3, #1
 800821a:	4622      	mov	r2, r4
 800821c:	4641      	mov	r1, r8
 800821e:	4638      	mov	r0, r7
 8008220:	47c8      	blx	r9
 8008222:	3001      	adds	r0, #1
 8008224:	d0e6      	beq.n	80081f4 <_printf_common+0xa4>
 8008226:	3601      	adds	r6, #1
 8008228:	e7d9      	b.n	80081de <_printf_common+0x8e>
	...

0800822c <_printf_i>:
 800822c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008230:	7e0f      	ldrb	r7, [r1, #24]
 8008232:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008234:	2f78      	cmp	r7, #120	@ 0x78
 8008236:	4691      	mov	r9, r2
 8008238:	4680      	mov	r8, r0
 800823a:	460c      	mov	r4, r1
 800823c:	469a      	mov	sl, r3
 800823e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008242:	d807      	bhi.n	8008254 <_printf_i+0x28>
 8008244:	2f62      	cmp	r7, #98	@ 0x62
 8008246:	d80a      	bhi.n	800825e <_printf_i+0x32>
 8008248:	2f00      	cmp	r7, #0
 800824a:	f000 80d1 	beq.w	80083f0 <_printf_i+0x1c4>
 800824e:	2f58      	cmp	r7, #88	@ 0x58
 8008250:	f000 80b8 	beq.w	80083c4 <_printf_i+0x198>
 8008254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008258:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800825c:	e03a      	b.n	80082d4 <_printf_i+0xa8>
 800825e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008262:	2b15      	cmp	r3, #21
 8008264:	d8f6      	bhi.n	8008254 <_printf_i+0x28>
 8008266:	a101      	add	r1, pc, #4	@ (adr r1, 800826c <_printf_i+0x40>)
 8008268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800826c:	080082c5 	.word	0x080082c5
 8008270:	080082d9 	.word	0x080082d9
 8008274:	08008255 	.word	0x08008255
 8008278:	08008255 	.word	0x08008255
 800827c:	08008255 	.word	0x08008255
 8008280:	08008255 	.word	0x08008255
 8008284:	080082d9 	.word	0x080082d9
 8008288:	08008255 	.word	0x08008255
 800828c:	08008255 	.word	0x08008255
 8008290:	08008255 	.word	0x08008255
 8008294:	08008255 	.word	0x08008255
 8008298:	080083d7 	.word	0x080083d7
 800829c:	08008303 	.word	0x08008303
 80082a0:	08008391 	.word	0x08008391
 80082a4:	08008255 	.word	0x08008255
 80082a8:	08008255 	.word	0x08008255
 80082ac:	080083f9 	.word	0x080083f9
 80082b0:	08008255 	.word	0x08008255
 80082b4:	08008303 	.word	0x08008303
 80082b8:	08008255 	.word	0x08008255
 80082bc:	08008255 	.word	0x08008255
 80082c0:	08008399 	.word	0x08008399
 80082c4:	6833      	ldr	r3, [r6, #0]
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6032      	str	r2, [r6, #0]
 80082cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082d4:	2301      	movs	r3, #1
 80082d6:	e09c      	b.n	8008412 <_printf_i+0x1e6>
 80082d8:	6833      	ldr	r3, [r6, #0]
 80082da:	6820      	ldr	r0, [r4, #0]
 80082dc:	1d19      	adds	r1, r3, #4
 80082de:	6031      	str	r1, [r6, #0]
 80082e0:	0606      	lsls	r6, r0, #24
 80082e2:	d501      	bpl.n	80082e8 <_printf_i+0xbc>
 80082e4:	681d      	ldr	r5, [r3, #0]
 80082e6:	e003      	b.n	80082f0 <_printf_i+0xc4>
 80082e8:	0645      	lsls	r5, r0, #25
 80082ea:	d5fb      	bpl.n	80082e4 <_printf_i+0xb8>
 80082ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082f0:	2d00      	cmp	r5, #0
 80082f2:	da03      	bge.n	80082fc <_printf_i+0xd0>
 80082f4:	232d      	movs	r3, #45	@ 0x2d
 80082f6:	426d      	negs	r5, r5
 80082f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082fc:	4858      	ldr	r0, [pc, #352]	@ (8008460 <_printf_i+0x234>)
 80082fe:	230a      	movs	r3, #10
 8008300:	e011      	b.n	8008326 <_printf_i+0xfa>
 8008302:	6821      	ldr	r1, [r4, #0]
 8008304:	6833      	ldr	r3, [r6, #0]
 8008306:	0608      	lsls	r0, r1, #24
 8008308:	f853 5b04 	ldr.w	r5, [r3], #4
 800830c:	d402      	bmi.n	8008314 <_printf_i+0xe8>
 800830e:	0649      	lsls	r1, r1, #25
 8008310:	bf48      	it	mi
 8008312:	b2ad      	uxthmi	r5, r5
 8008314:	2f6f      	cmp	r7, #111	@ 0x6f
 8008316:	4852      	ldr	r0, [pc, #328]	@ (8008460 <_printf_i+0x234>)
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	bf14      	ite	ne
 800831c:	230a      	movne	r3, #10
 800831e:	2308      	moveq	r3, #8
 8008320:	2100      	movs	r1, #0
 8008322:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008326:	6866      	ldr	r6, [r4, #4]
 8008328:	60a6      	str	r6, [r4, #8]
 800832a:	2e00      	cmp	r6, #0
 800832c:	db05      	blt.n	800833a <_printf_i+0x10e>
 800832e:	6821      	ldr	r1, [r4, #0]
 8008330:	432e      	orrs	r6, r5
 8008332:	f021 0104 	bic.w	r1, r1, #4
 8008336:	6021      	str	r1, [r4, #0]
 8008338:	d04b      	beq.n	80083d2 <_printf_i+0x1a6>
 800833a:	4616      	mov	r6, r2
 800833c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008340:	fb03 5711 	mls	r7, r3, r1, r5
 8008344:	5dc7      	ldrb	r7, [r0, r7]
 8008346:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800834a:	462f      	mov	r7, r5
 800834c:	42bb      	cmp	r3, r7
 800834e:	460d      	mov	r5, r1
 8008350:	d9f4      	bls.n	800833c <_printf_i+0x110>
 8008352:	2b08      	cmp	r3, #8
 8008354:	d10b      	bne.n	800836e <_printf_i+0x142>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	07df      	lsls	r7, r3, #31
 800835a:	d508      	bpl.n	800836e <_printf_i+0x142>
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	6861      	ldr	r1, [r4, #4]
 8008360:	4299      	cmp	r1, r3
 8008362:	bfde      	ittt	le
 8008364:	2330      	movle	r3, #48	@ 0x30
 8008366:	f806 3c01 	strble.w	r3, [r6, #-1]
 800836a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800836e:	1b92      	subs	r2, r2, r6
 8008370:	6122      	str	r2, [r4, #16]
 8008372:	f8cd a000 	str.w	sl, [sp]
 8008376:	464b      	mov	r3, r9
 8008378:	aa03      	add	r2, sp, #12
 800837a:	4621      	mov	r1, r4
 800837c:	4640      	mov	r0, r8
 800837e:	f7ff fee7 	bl	8008150 <_printf_common>
 8008382:	3001      	adds	r0, #1
 8008384:	d14a      	bne.n	800841c <_printf_i+0x1f0>
 8008386:	f04f 30ff 	mov.w	r0, #4294967295
 800838a:	b004      	add	sp, #16
 800838c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	f043 0320 	orr.w	r3, r3, #32
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	4832      	ldr	r0, [pc, #200]	@ (8008464 <_printf_i+0x238>)
 800839a:	2778      	movs	r7, #120	@ 0x78
 800839c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	6831      	ldr	r1, [r6, #0]
 80083a4:	061f      	lsls	r7, r3, #24
 80083a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80083aa:	d402      	bmi.n	80083b2 <_printf_i+0x186>
 80083ac:	065f      	lsls	r7, r3, #25
 80083ae:	bf48      	it	mi
 80083b0:	b2ad      	uxthmi	r5, r5
 80083b2:	6031      	str	r1, [r6, #0]
 80083b4:	07d9      	lsls	r1, r3, #31
 80083b6:	bf44      	itt	mi
 80083b8:	f043 0320 	orrmi.w	r3, r3, #32
 80083bc:	6023      	strmi	r3, [r4, #0]
 80083be:	b11d      	cbz	r5, 80083c8 <_printf_i+0x19c>
 80083c0:	2310      	movs	r3, #16
 80083c2:	e7ad      	b.n	8008320 <_printf_i+0xf4>
 80083c4:	4826      	ldr	r0, [pc, #152]	@ (8008460 <_printf_i+0x234>)
 80083c6:	e7e9      	b.n	800839c <_printf_i+0x170>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	f023 0320 	bic.w	r3, r3, #32
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	e7f6      	b.n	80083c0 <_printf_i+0x194>
 80083d2:	4616      	mov	r6, r2
 80083d4:	e7bd      	b.n	8008352 <_printf_i+0x126>
 80083d6:	6833      	ldr	r3, [r6, #0]
 80083d8:	6825      	ldr	r5, [r4, #0]
 80083da:	6961      	ldr	r1, [r4, #20]
 80083dc:	1d18      	adds	r0, r3, #4
 80083de:	6030      	str	r0, [r6, #0]
 80083e0:	062e      	lsls	r6, r5, #24
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	d501      	bpl.n	80083ea <_printf_i+0x1be>
 80083e6:	6019      	str	r1, [r3, #0]
 80083e8:	e002      	b.n	80083f0 <_printf_i+0x1c4>
 80083ea:	0668      	lsls	r0, r5, #25
 80083ec:	d5fb      	bpl.n	80083e6 <_printf_i+0x1ba>
 80083ee:	8019      	strh	r1, [r3, #0]
 80083f0:	2300      	movs	r3, #0
 80083f2:	6123      	str	r3, [r4, #16]
 80083f4:	4616      	mov	r6, r2
 80083f6:	e7bc      	b.n	8008372 <_printf_i+0x146>
 80083f8:	6833      	ldr	r3, [r6, #0]
 80083fa:	1d1a      	adds	r2, r3, #4
 80083fc:	6032      	str	r2, [r6, #0]
 80083fe:	681e      	ldr	r6, [r3, #0]
 8008400:	6862      	ldr	r2, [r4, #4]
 8008402:	2100      	movs	r1, #0
 8008404:	4630      	mov	r0, r6
 8008406:	f7f7 ff0b 	bl	8000220 <memchr>
 800840a:	b108      	cbz	r0, 8008410 <_printf_i+0x1e4>
 800840c:	1b80      	subs	r0, r0, r6
 800840e:	6060      	str	r0, [r4, #4]
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	6123      	str	r3, [r4, #16]
 8008414:	2300      	movs	r3, #0
 8008416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800841a:	e7aa      	b.n	8008372 <_printf_i+0x146>
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	4632      	mov	r2, r6
 8008420:	4649      	mov	r1, r9
 8008422:	4640      	mov	r0, r8
 8008424:	47d0      	blx	sl
 8008426:	3001      	adds	r0, #1
 8008428:	d0ad      	beq.n	8008386 <_printf_i+0x15a>
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	079b      	lsls	r3, r3, #30
 800842e:	d413      	bmi.n	8008458 <_printf_i+0x22c>
 8008430:	68e0      	ldr	r0, [r4, #12]
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	4298      	cmp	r0, r3
 8008436:	bfb8      	it	lt
 8008438:	4618      	movlt	r0, r3
 800843a:	e7a6      	b.n	800838a <_printf_i+0x15e>
 800843c:	2301      	movs	r3, #1
 800843e:	4632      	mov	r2, r6
 8008440:	4649      	mov	r1, r9
 8008442:	4640      	mov	r0, r8
 8008444:	47d0      	blx	sl
 8008446:	3001      	adds	r0, #1
 8008448:	d09d      	beq.n	8008386 <_printf_i+0x15a>
 800844a:	3501      	adds	r5, #1
 800844c:	68e3      	ldr	r3, [r4, #12]
 800844e:	9903      	ldr	r1, [sp, #12]
 8008450:	1a5b      	subs	r3, r3, r1
 8008452:	42ab      	cmp	r3, r5
 8008454:	dcf2      	bgt.n	800843c <_printf_i+0x210>
 8008456:	e7eb      	b.n	8008430 <_printf_i+0x204>
 8008458:	2500      	movs	r5, #0
 800845a:	f104 0619 	add.w	r6, r4, #25
 800845e:	e7f5      	b.n	800844c <_printf_i+0x220>
 8008460:	0800a5c7 	.word	0x0800a5c7
 8008464:	0800a5d8 	.word	0x0800a5d8

08008468 <std>:
 8008468:	2300      	movs	r3, #0
 800846a:	b510      	push	{r4, lr}
 800846c:	4604      	mov	r4, r0
 800846e:	e9c0 3300 	strd	r3, r3, [r0]
 8008472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008476:	6083      	str	r3, [r0, #8]
 8008478:	8181      	strh	r1, [r0, #12]
 800847a:	6643      	str	r3, [r0, #100]	@ 0x64
 800847c:	81c2      	strh	r2, [r0, #14]
 800847e:	6183      	str	r3, [r0, #24]
 8008480:	4619      	mov	r1, r3
 8008482:	2208      	movs	r2, #8
 8008484:	305c      	adds	r0, #92	@ 0x5c
 8008486:	f000 f9f9 	bl	800887c <memset>
 800848a:	4b0d      	ldr	r3, [pc, #52]	@ (80084c0 <std+0x58>)
 800848c:	6263      	str	r3, [r4, #36]	@ 0x24
 800848e:	4b0d      	ldr	r3, [pc, #52]	@ (80084c4 <std+0x5c>)
 8008490:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008492:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <std+0x60>)
 8008494:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008496:	4b0d      	ldr	r3, [pc, #52]	@ (80084cc <std+0x64>)
 8008498:	6323      	str	r3, [r4, #48]	@ 0x30
 800849a:	4b0d      	ldr	r3, [pc, #52]	@ (80084d0 <std+0x68>)
 800849c:	6224      	str	r4, [r4, #32]
 800849e:	429c      	cmp	r4, r3
 80084a0:	d006      	beq.n	80084b0 <std+0x48>
 80084a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084a6:	4294      	cmp	r4, r2
 80084a8:	d002      	beq.n	80084b0 <std+0x48>
 80084aa:	33d0      	adds	r3, #208	@ 0xd0
 80084ac:	429c      	cmp	r4, r3
 80084ae:	d105      	bne.n	80084bc <std+0x54>
 80084b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b8:	f000 ba6c 	b.w	8008994 <__retarget_lock_init_recursive>
 80084bc:	bd10      	pop	{r4, pc}
 80084be:	bf00      	nop
 80084c0:	080086cd 	.word	0x080086cd
 80084c4:	080086ef 	.word	0x080086ef
 80084c8:	08008727 	.word	0x08008727
 80084cc:	0800874b 	.word	0x0800874b
 80084d0:	200004b8 	.word	0x200004b8

080084d4 <stdio_exit_handler>:
 80084d4:	4a02      	ldr	r2, [pc, #8]	@ (80084e0 <stdio_exit_handler+0xc>)
 80084d6:	4903      	ldr	r1, [pc, #12]	@ (80084e4 <stdio_exit_handler+0x10>)
 80084d8:	4803      	ldr	r0, [pc, #12]	@ (80084e8 <stdio_exit_handler+0x14>)
 80084da:	f000 b869 	b.w	80085b0 <_fwalk_sglue>
 80084de:	bf00      	nop
 80084e0:	2000000c 	.word	0x2000000c
 80084e4:	0800a165 	.word	0x0800a165
 80084e8:	2000001c 	.word	0x2000001c

080084ec <cleanup_stdio>:
 80084ec:	6841      	ldr	r1, [r0, #4]
 80084ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008520 <cleanup_stdio+0x34>)
 80084f0:	4299      	cmp	r1, r3
 80084f2:	b510      	push	{r4, lr}
 80084f4:	4604      	mov	r4, r0
 80084f6:	d001      	beq.n	80084fc <cleanup_stdio+0x10>
 80084f8:	f001 fe34 	bl	800a164 <_fflush_r>
 80084fc:	68a1      	ldr	r1, [r4, #8]
 80084fe:	4b09      	ldr	r3, [pc, #36]	@ (8008524 <cleanup_stdio+0x38>)
 8008500:	4299      	cmp	r1, r3
 8008502:	d002      	beq.n	800850a <cleanup_stdio+0x1e>
 8008504:	4620      	mov	r0, r4
 8008506:	f001 fe2d 	bl	800a164 <_fflush_r>
 800850a:	68e1      	ldr	r1, [r4, #12]
 800850c:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <cleanup_stdio+0x3c>)
 800850e:	4299      	cmp	r1, r3
 8008510:	d004      	beq.n	800851c <cleanup_stdio+0x30>
 8008512:	4620      	mov	r0, r4
 8008514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008518:	f001 be24 	b.w	800a164 <_fflush_r>
 800851c:	bd10      	pop	{r4, pc}
 800851e:	bf00      	nop
 8008520:	200004b8 	.word	0x200004b8
 8008524:	20000520 	.word	0x20000520
 8008528:	20000588 	.word	0x20000588

0800852c <global_stdio_init.part.0>:
 800852c:	b510      	push	{r4, lr}
 800852e:	4b0b      	ldr	r3, [pc, #44]	@ (800855c <global_stdio_init.part.0+0x30>)
 8008530:	4c0b      	ldr	r4, [pc, #44]	@ (8008560 <global_stdio_init.part.0+0x34>)
 8008532:	4a0c      	ldr	r2, [pc, #48]	@ (8008564 <global_stdio_init.part.0+0x38>)
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	4620      	mov	r0, r4
 8008538:	2200      	movs	r2, #0
 800853a:	2104      	movs	r1, #4
 800853c:	f7ff ff94 	bl	8008468 <std>
 8008540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008544:	2201      	movs	r2, #1
 8008546:	2109      	movs	r1, #9
 8008548:	f7ff ff8e 	bl	8008468 <std>
 800854c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008550:	2202      	movs	r2, #2
 8008552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008556:	2112      	movs	r1, #18
 8008558:	f7ff bf86 	b.w	8008468 <std>
 800855c:	200005f0 	.word	0x200005f0
 8008560:	200004b8 	.word	0x200004b8
 8008564:	080084d5 	.word	0x080084d5

08008568 <__sfp_lock_acquire>:
 8008568:	4801      	ldr	r0, [pc, #4]	@ (8008570 <__sfp_lock_acquire+0x8>)
 800856a:	f000 ba14 	b.w	8008996 <__retarget_lock_acquire_recursive>
 800856e:	bf00      	nop
 8008570:	200005f9 	.word	0x200005f9

08008574 <__sfp_lock_release>:
 8008574:	4801      	ldr	r0, [pc, #4]	@ (800857c <__sfp_lock_release+0x8>)
 8008576:	f000 ba0f 	b.w	8008998 <__retarget_lock_release_recursive>
 800857a:	bf00      	nop
 800857c:	200005f9 	.word	0x200005f9

08008580 <__sinit>:
 8008580:	b510      	push	{r4, lr}
 8008582:	4604      	mov	r4, r0
 8008584:	f7ff fff0 	bl	8008568 <__sfp_lock_acquire>
 8008588:	6a23      	ldr	r3, [r4, #32]
 800858a:	b11b      	cbz	r3, 8008594 <__sinit+0x14>
 800858c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008590:	f7ff bff0 	b.w	8008574 <__sfp_lock_release>
 8008594:	4b04      	ldr	r3, [pc, #16]	@ (80085a8 <__sinit+0x28>)
 8008596:	6223      	str	r3, [r4, #32]
 8008598:	4b04      	ldr	r3, [pc, #16]	@ (80085ac <__sinit+0x2c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1f5      	bne.n	800858c <__sinit+0xc>
 80085a0:	f7ff ffc4 	bl	800852c <global_stdio_init.part.0>
 80085a4:	e7f2      	b.n	800858c <__sinit+0xc>
 80085a6:	bf00      	nop
 80085a8:	080084ed 	.word	0x080084ed
 80085ac:	200005f0 	.word	0x200005f0

080085b0 <_fwalk_sglue>:
 80085b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b4:	4607      	mov	r7, r0
 80085b6:	4688      	mov	r8, r1
 80085b8:	4614      	mov	r4, r2
 80085ba:	2600      	movs	r6, #0
 80085bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085c0:	f1b9 0901 	subs.w	r9, r9, #1
 80085c4:	d505      	bpl.n	80085d2 <_fwalk_sglue+0x22>
 80085c6:	6824      	ldr	r4, [r4, #0]
 80085c8:	2c00      	cmp	r4, #0
 80085ca:	d1f7      	bne.n	80085bc <_fwalk_sglue+0xc>
 80085cc:	4630      	mov	r0, r6
 80085ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d2:	89ab      	ldrh	r3, [r5, #12]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d907      	bls.n	80085e8 <_fwalk_sglue+0x38>
 80085d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085dc:	3301      	adds	r3, #1
 80085de:	d003      	beq.n	80085e8 <_fwalk_sglue+0x38>
 80085e0:	4629      	mov	r1, r5
 80085e2:	4638      	mov	r0, r7
 80085e4:	47c0      	blx	r8
 80085e6:	4306      	orrs	r6, r0
 80085e8:	3568      	adds	r5, #104	@ 0x68
 80085ea:	e7e9      	b.n	80085c0 <_fwalk_sglue+0x10>

080085ec <iprintf>:
 80085ec:	b40f      	push	{r0, r1, r2, r3}
 80085ee:	b507      	push	{r0, r1, r2, lr}
 80085f0:	4906      	ldr	r1, [pc, #24]	@ (800860c <iprintf+0x20>)
 80085f2:	ab04      	add	r3, sp, #16
 80085f4:	6808      	ldr	r0, [r1, #0]
 80085f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085fa:	6881      	ldr	r1, [r0, #8]
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	f001 fc15 	bl	8009e2c <_vfiprintf_r>
 8008602:	b003      	add	sp, #12
 8008604:	f85d eb04 	ldr.w	lr, [sp], #4
 8008608:	b004      	add	sp, #16
 800860a:	4770      	bx	lr
 800860c:	20000018 	.word	0x20000018

08008610 <_puts_r>:
 8008610:	6a03      	ldr	r3, [r0, #32]
 8008612:	b570      	push	{r4, r5, r6, lr}
 8008614:	6884      	ldr	r4, [r0, #8]
 8008616:	4605      	mov	r5, r0
 8008618:	460e      	mov	r6, r1
 800861a:	b90b      	cbnz	r3, 8008620 <_puts_r+0x10>
 800861c:	f7ff ffb0 	bl	8008580 <__sinit>
 8008620:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008622:	07db      	lsls	r3, r3, #31
 8008624:	d405      	bmi.n	8008632 <_puts_r+0x22>
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	0598      	lsls	r0, r3, #22
 800862a:	d402      	bmi.n	8008632 <_puts_r+0x22>
 800862c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800862e:	f000 f9b2 	bl	8008996 <__retarget_lock_acquire_recursive>
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	0719      	lsls	r1, r3, #28
 8008636:	d502      	bpl.n	800863e <_puts_r+0x2e>
 8008638:	6923      	ldr	r3, [r4, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d135      	bne.n	80086aa <_puts_r+0x9a>
 800863e:	4621      	mov	r1, r4
 8008640:	4628      	mov	r0, r5
 8008642:	f000 f8c5 	bl	80087d0 <__swsetup_r>
 8008646:	b380      	cbz	r0, 80086aa <_puts_r+0x9a>
 8008648:	f04f 35ff 	mov.w	r5, #4294967295
 800864c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800864e:	07da      	lsls	r2, r3, #31
 8008650:	d405      	bmi.n	800865e <_puts_r+0x4e>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	059b      	lsls	r3, r3, #22
 8008656:	d402      	bmi.n	800865e <_puts_r+0x4e>
 8008658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800865a:	f000 f99d 	bl	8008998 <__retarget_lock_release_recursive>
 800865e:	4628      	mov	r0, r5
 8008660:	bd70      	pop	{r4, r5, r6, pc}
 8008662:	2b00      	cmp	r3, #0
 8008664:	da04      	bge.n	8008670 <_puts_r+0x60>
 8008666:	69a2      	ldr	r2, [r4, #24]
 8008668:	429a      	cmp	r2, r3
 800866a:	dc17      	bgt.n	800869c <_puts_r+0x8c>
 800866c:	290a      	cmp	r1, #10
 800866e:	d015      	beq.n	800869c <_puts_r+0x8c>
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	7019      	strb	r1, [r3, #0]
 8008678:	68a3      	ldr	r3, [r4, #8]
 800867a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800867e:	3b01      	subs	r3, #1
 8008680:	60a3      	str	r3, [r4, #8]
 8008682:	2900      	cmp	r1, #0
 8008684:	d1ed      	bne.n	8008662 <_puts_r+0x52>
 8008686:	2b00      	cmp	r3, #0
 8008688:	da11      	bge.n	80086ae <_puts_r+0x9e>
 800868a:	4622      	mov	r2, r4
 800868c:	210a      	movs	r1, #10
 800868e:	4628      	mov	r0, r5
 8008690:	f000 f85f 	bl	8008752 <__swbuf_r>
 8008694:	3001      	adds	r0, #1
 8008696:	d0d7      	beq.n	8008648 <_puts_r+0x38>
 8008698:	250a      	movs	r5, #10
 800869a:	e7d7      	b.n	800864c <_puts_r+0x3c>
 800869c:	4622      	mov	r2, r4
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f857 	bl	8008752 <__swbuf_r>
 80086a4:	3001      	adds	r0, #1
 80086a6:	d1e7      	bne.n	8008678 <_puts_r+0x68>
 80086a8:	e7ce      	b.n	8008648 <_puts_r+0x38>
 80086aa:	3e01      	subs	r6, #1
 80086ac:	e7e4      	b.n	8008678 <_puts_r+0x68>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	6022      	str	r2, [r4, #0]
 80086b4:	220a      	movs	r2, #10
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	e7ee      	b.n	8008698 <_puts_r+0x88>
	...

080086bc <puts>:
 80086bc:	4b02      	ldr	r3, [pc, #8]	@ (80086c8 <puts+0xc>)
 80086be:	4601      	mov	r1, r0
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	f7ff bfa5 	b.w	8008610 <_puts_r>
 80086c6:	bf00      	nop
 80086c8:	20000018 	.word	0x20000018

080086cc <__sread>:
 80086cc:	b510      	push	{r4, lr}
 80086ce:	460c      	mov	r4, r1
 80086d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d4:	f000 f900 	bl	80088d8 <_read_r>
 80086d8:	2800      	cmp	r0, #0
 80086da:	bfab      	itete	ge
 80086dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086de:	89a3      	ldrhlt	r3, [r4, #12]
 80086e0:	181b      	addge	r3, r3, r0
 80086e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086e6:	bfac      	ite	ge
 80086e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086ea:	81a3      	strhlt	r3, [r4, #12]
 80086ec:	bd10      	pop	{r4, pc}

080086ee <__swrite>:
 80086ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f2:	461f      	mov	r7, r3
 80086f4:	898b      	ldrh	r3, [r1, #12]
 80086f6:	05db      	lsls	r3, r3, #23
 80086f8:	4605      	mov	r5, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	4616      	mov	r6, r2
 80086fe:	d505      	bpl.n	800870c <__swrite+0x1e>
 8008700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008704:	2302      	movs	r3, #2
 8008706:	2200      	movs	r2, #0
 8008708:	f000 f8d4 	bl	80088b4 <_lseek_r>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008712:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	4632      	mov	r2, r6
 800871a:	463b      	mov	r3, r7
 800871c:	4628      	mov	r0, r5
 800871e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008722:	f000 b8fb 	b.w	800891c <_write_r>

08008726 <__sseek>:
 8008726:	b510      	push	{r4, lr}
 8008728:	460c      	mov	r4, r1
 800872a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872e:	f000 f8c1 	bl	80088b4 <_lseek_r>
 8008732:	1c43      	adds	r3, r0, #1
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	bf15      	itete	ne
 8008738:	6560      	strne	r0, [r4, #84]	@ 0x54
 800873a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800873e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008742:	81a3      	strheq	r3, [r4, #12]
 8008744:	bf18      	it	ne
 8008746:	81a3      	strhne	r3, [r4, #12]
 8008748:	bd10      	pop	{r4, pc}

0800874a <__sclose>:
 800874a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874e:	f000 b8a1 	b.w	8008894 <_close_r>

08008752 <__swbuf_r>:
 8008752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008754:	460e      	mov	r6, r1
 8008756:	4614      	mov	r4, r2
 8008758:	4605      	mov	r5, r0
 800875a:	b118      	cbz	r0, 8008764 <__swbuf_r+0x12>
 800875c:	6a03      	ldr	r3, [r0, #32]
 800875e:	b90b      	cbnz	r3, 8008764 <__swbuf_r+0x12>
 8008760:	f7ff ff0e 	bl	8008580 <__sinit>
 8008764:	69a3      	ldr	r3, [r4, #24]
 8008766:	60a3      	str	r3, [r4, #8]
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	071a      	lsls	r2, r3, #28
 800876c:	d501      	bpl.n	8008772 <__swbuf_r+0x20>
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	b943      	cbnz	r3, 8008784 <__swbuf_r+0x32>
 8008772:	4621      	mov	r1, r4
 8008774:	4628      	mov	r0, r5
 8008776:	f000 f82b 	bl	80087d0 <__swsetup_r>
 800877a:	b118      	cbz	r0, 8008784 <__swbuf_r+0x32>
 800877c:	f04f 37ff 	mov.w	r7, #4294967295
 8008780:	4638      	mov	r0, r7
 8008782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	6922      	ldr	r2, [r4, #16]
 8008788:	1a98      	subs	r0, r3, r2
 800878a:	6963      	ldr	r3, [r4, #20]
 800878c:	b2f6      	uxtb	r6, r6
 800878e:	4283      	cmp	r3, r0
 8008790:	4637      	mov	r7, r6
 8008792:	dc05      	bgt.n	80087a0 <__swbuf_r+0x4e>
 8008794:	4621      	mov	r1, r4
 8008796:	4628      	mov	r0, r5
 8008798:	f001 fce4 	bl	800a164 <_fflush_r>
 800879c:	2800      	cmp	r0, #0
 800879e:	d1ed      	bne.n	800877c <__swbuf_r+0x2a>
 80087a0:	68a3      	ldr	r3, [r4, #8]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	6022      	str	r2, [r4, #0]
 80087ac:	701e      	strb	r6, [r3, #0]
 80087ae:	6962      	ldr	r2, [r4, #20]
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d004      	beq.n	80087c0 <__swbuf_r+0x6e>
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	07db      	lsls	r3, r3, #31
 80087ba:	d5e1      	bpl.n	8008780 <__swbuf_r+0x2e>
 80087bc:	2e0a      	cmp	r6, #10
 80087be:	d1df      	bne.n	8008780 <__swbuf_r+0x2e>
 80087c0:	4621      	mov	r1, r4
 80087c2:	4628      	mov	r0, r5
 80087c4:	f001 fcce 	bl	800a164 <_fflush_r>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d0d9      	beq.n	8008780 <__swbuf_r+0x2e>
 80087cc:	e7d6      	b.n	800877c <__swbuf_r+0x2a>
	...

080087d0 <__swsetup_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4b29      	ldr	r3, [pc, #164]	@ (8008878 <__swsetup_r+0xa8>)
 80087d4:	4605      	mov	r5, r0
 80087d6:	6818      	ldr	r0, [r3, #0]
 80087d8:	460c      	mov	r4, r1
 80087da:	b118      	cbz	r0, 80087e4 <__swsetup_r+0x14>
 80087dc:	6a03      	ldr	r3, [r0, #32]
 80087de:	b90b      	cbnz	r3, 80087e4 <__swsetup_r+0x14>
 80087e0:	f7ff fece 	bl	8008580 <__sinit>
 80087e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e8:	0719      	lsls	r1, r3, #28
 80087ea:	d422      	bmi.n	8008832 <__swsetup_r+0x62>
 80087ec:	06da      	lsls	r2, r3, #27
 80087ee:	d407      	bmi.n	8008800 <__swsetup_r+0x30>
 80087f0:	2209      	movs	r2, #9
 80087f2:	602a      	str	r2, [r5, #0]
 80087f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f8:	81a3      	strh	r3, [r4, #12]
 80087fa:	f04f 30ff 	mov.w	r0, #4294967295
 80087fe:	e033      	b.n	8008868 <__swsetup_r+0x98>
 8008800:	0758      	lsls	r0, r3, #29
 8008802:	d512      	bpl.n	800882a <__swsetup_r+0x5a>
 8008804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008806:	b141      	cbz	r1, 800881a <__swsetup_r+0x4a>
 8008808:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800880c:	4299      	cmp	r1, r3
 800880e:	d002      	beq.n	8008816 <__swsetup_r+0x46>
 8008810:	4628      	mov	r0, r5
 8008812:	f000 ff1d 	bl	8009650 <_free_r>
 8008816:	2300      	movs	r3, #0
 8008818:	6363      	str	r3, [r4, #52]	@ 0x34
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008820:	81a3      	strh	r3, [r4, #12]
 8008822:	2300      	movs	r3, #0
 8008824:	6063      	str	r3, [r4, #4]
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	f043 0308 	orr.w	r3, r3, #8
 8008830:	81a3      	strh	r3, [r4, #12]
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	b94b      	cbnz	r3, 800884a <__swsetup_r+0x7a>
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800883c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008840:	d003      	beq.n	800884a <__swsetup_r+0x7a>
 8008842:	4621      	mov	r1, r4
 8008844:	4628      	mov	r0, r5
 8008846:	f001 fcdb 	bl	800a200 <__smakebuf_r>
 800884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884e:	f013 0201 	ands.w	r2, r3, #1
 8008852:	d00a      	beq.n	800886a <__swsetup_r+0x9a>
 8008854:	2200      	movs	r2, #0
 8008856:	60a2      	str	r2, [r4, #8]
 8008858:	6962      	ldr	r2, [r4, #20]
 800885a:	4252      	negs	r2, r2
 800885c:	61a2      	str	r2, [r4, #24]
 800885e:	6922      	ldr	r2, [r4, #16]
 8008860:	b942      	cbnz	r2, 8008874 <__swsetup_r+0xa4>
 8008862:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008866:	d1c5      	bne.n	80087f4 <__swsetup_r+0x24>
 8008868:	bd38      	pop	{r3, r4, r5, pc}
 800886a:	0799      	lsls	r1, r3, #30
 800886c:	bf58      	it	pl
 800886e:	6962      	ldrpl	r2, [r4, #20]
 8008870:	60a2      	str	r2, [r4, #8]
 8008872:	e7f4      	b.n	800885e <__swsetup_r+0x8e>
 8008874:	2000      	movs	r0, #0
 8008876:	e7f7      	b.n	8008868 <__swsetup_r+0x98>
 8008878:	20000018 	.word	0x20000018

0800887c <memset>:
 800887c:	4402      	add	r2, r0
 800887e:	4603      	mov	r3, r0
 8008880:	4293      	cmp	r3, r2
 8008882:	d100      	bne.n	8008886 <memset+0xa>
 8008884:	4770      	bx	lr
 8008886:	f803 1b01 	strb.w	r1, [r3], #1
 800888a:	e7f9      	b.n	8008880 <memset+0x4>

0800888c <_localeconv_r>:
 800888c:	4800      	ldr	r0, [pc, #0]	@ (8008890 <_localeconv_r+0x4>)
 800888e:	4770      	bx	lr
 8008890:	20000158 	.word	0x20000158

08008894 <_close_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d06      	ldr	r5, [pc, #24]	@ (80088b0 <_close_r+0x1c>)
 8008898:	2300      	movs	r3, #0
 800889a:	4604      	mov	r4, r0
 800889c:	4608      	mov	r0, r1
 800889e:	602b      	str	r3, [r5, #0]
 80088a0:	f7f9 fa71 	bl	8001d86 <_close>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d102      	bne.n	80088ae <_close_r+0x1a>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	b103      	cbz	r3, 80088ae <_close_r+0x1a>
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	200005f4 	.word	0x200005f4

080088b4 <_lseek_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4d07      	ldr	r5, [pc, #28]	@ (80088d4 <_lseek_r+0x20>)
 80088b8:	4604      	mov	r4, r0
 80088ba:	4608      	mov	r0, r1
 80088bc:	4611      	mov	r1, r2
 80088be:	2200      	movs	r2, #0
 80088c0:	602a      	str	r2, [r5, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	f7f9 fa86 	bl	8001dd4 <_lseek>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_lseek_r+0x1e>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_lseek_r+0x1e>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	200005f4 	.word	0x200005f4

080088d8 <_read_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4d07      	ldr	r5, [pc, #28]	@ (80088f8 <_read_r+0x20>)
 80088dc:	4604      	mov	r4, r0
 80088de:	4608      	mov	r0, r1
 80088e0:	4611      	mov	r1, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	602a      	str	r2, [r5, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	f7f9 fa14 	bl	8001d14 <_read>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_read_r+0x1e>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_read_r+0x1e>
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	200005f4 	.word	0x200005f4

080088fc <_sbrk_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4d06      	ldr	r5, [pc, #24]	@ (8008918 <_sbrk_r+0x1c>)
 8008900:	2300      	movs	r3, #0
 8008902:	4604      	mov	r4, r0
 8008904:	4608      	mov	r0, r1
 8008906:	602b      	str	r3, [r5, #0]
 8008908:	f7f9 fa72 	bl	8001df0 <_sbrk>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_sbrk_r+0x1a>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_sbrk_r+0x1a>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	200005f4 	.word	0x200005f4

0800891c <_write_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	4d07      	ldr	r5, [pc, #28]	@ (800893c <_write_r+0x20>)
 8008920:	4604      	mov	r4, r0
 8008922:	4608      	mov	r0, r1
 8008924:	4611      	mov	r1, r2
 8008926:	2200      	movs	r2, #0
 8008928:	602a      	str	r2, [r5, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	f7f9 fa0f 	bl	8001d4e <_write>
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d102      	bne.n	800893a <_write_r+0x1e>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	b103      	cbz	r3, 800893a <_write_r+0x1e>
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	bd38      	pop	{r3, r4, r5, pc}
 800893c:	200005f4 	.word	0x200005f4

08008940 <__errno>:
 8008940:	4b01      	ldr	r3, [pc, #4]	@ (8008948 <__errno+0x8>)
 8008942:	6818      	ldr	r0, [r3, #0]
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	20000018 	.word	0x20000018

0800894c <__libc_init_array>:
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	4d0d      	ldr	r5, [pc, #52]	@ (8008984 <__libc_init_array+0x38>)
 8008950:	4c0d      	ldr	r4, [pc, #52]	@ (8008988 <__libc_init_array+0x3c>)
 8008952:	1b64      	subs	r4, r4, r5
 8008954:	10a4      	asrs	r4, r4, #2
 8008956:	2600      	movs	r6, #0
 8008958:	42a6      	cmp	r6, r4
 800895a:	d109      	bne.n	8008970 <__libc_init_array+0x24>
 800895c:	4d0b      	ldr	r5, [pc, #44]	@ (800898c <__libc_init_array+0x40>)
 800895e:	4c0c      	ldr	r4, [pc, #48]	@ (8008990 <__libc_init_array+0x44>)
 8008960:	f001 fd6a 	bl	800a438 <_init>
 8008964:	1b64      	subs	r4, r4, r5
 8008966:	10a4      	asrs	r4, r4, #2
 8008968:	2600      	movs	r6, #0
 800896a:	42a6      	cmp	r6, r4
 800896c:	d105      	bne.n	800897a <__libc_init_array+0x2e>
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	f855 3b04 	ldr.w	r3, [r5], #4
 8008974:	4798      	blx	r3
 8008976:	3601      	adds	r6, #1
 8008978:	e7ee      	b.n	8008958 <__libc_init_array+0xc>
 800897a:	f855 3b04 	ldr.w	r3, [r5], #4
 800897e:	4798      	blx	r3
 8008980:	3601      	adds	r6, #1
 8008982:	e7f2      	b.n	800896a <__libc_init_array+0x1e>
 8008984:	0800a830 	.word	0x0800a830
 8008988:	0800a830 	.word	0x0800a830
 800898c:	0800a830 	.word	0x0800a830
 8008990:	0800a834 	.word	0x0800a834

08008994 <__retarget_lock_init_recursive>:
 8008994:	4770      	bx	lr

08008996 <__retarget_lock_acquire_recursive>:
 8008996:	4770      	bx	lr

08008998 <__retarget_lock_release_recursive>:
 8008998:	4770      	bx	lr

0800899a <quorem>:
 800899a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899e:	6903      	ldr	r3, [r0, #16]
 80089a0:	690c      	ldr	r4, [r1, #16]
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	4607      	mov	r7, r0
 80089a6:	db7e      	blt.n	8008aa6 <quorem+0x10c>
 80089a8:	3c01      	subs	r4, #1
 80089aa:	f101 0814 	add.w	r8, r1, #20
 80089ae:	00a3      	lsls	r3, r4, #2
 80089b0:	f100 0514 	add.w	r5, r0, #20
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089c4:	3301      	adds	r3, #1
 80089c6:	429a      	cmp	r2, r3
 80089c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80089d0:	d32e      	bcc.n	8008a30 <quorem+0x96>
 80089d2:	f04f 0a00 	mov.w	sl, #0
 80089d6:	46c4      	mov	ip, r8
 80089d8:	46ae      	mov	lr, r5
 80089da:	46d3      	mov	fp, sl
 80089dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089e0:	b298      	uxth	r0, r3
 80089e2:	fb06 a000 	mla	r0, r6, r0, sl
 80089e6:	0c02      	lsrs	r2, r0, #16
 80089e8:	0c1b      	lsrs	r3, r3, #16
 80089ea:	fb06 2303 	mla	r3, r6, r3, r2
 80089ee:	f8de 2000 	ldr.w	r2, [lr]
 80089f2:	b280      	uxth	r0, r0
 80089f4:	b292      	uxth	r2, r2
 80089f6:	1a12      	subs	r2, r2, r0
 80089f8:	445a      	add	r2, fp
 80089fa:	f8de 0000 	ldr.w	r0, [lr]
 80089fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a0c:	b292      	uxth	r2, r2
 8008a0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a12:	45e1      	cmp	r9, ip
 8008a14:	f84e 2b04 	str.w	r2, [lr], #4
 8008a18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a1c:	d2de      	bcs.n	80089dc <quorem+0x42>
 8008a1e:	9b00      	ldr	r3, [sp, #0]
 8008a20:	58eb      	ldr	r3, [r5, r3]
 8008a22:	b92b      	cbnz	r3, 8008a30 <quorem+0x96>
 8008a24:	9b01      	ldr	r3, [sp, #4]
 8008a26:	3b04      	subs	r3, #4
 8008a28:	429d      	cmp	r5, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	d32f      	bcc.n	8008a8e <quorem+0xf4>
 8008a2e:	613c      	str	r4, [r7, #16]
 8008a30:	4638      	mov	r0, r7
 8008a32:	f001 f8c9 	bl	8009bc8 <__mcmp>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	db25      	blt.n	8008a86 <quorem+0xec>
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a42:	f8d1 c000 	ldr.w	ip, [r1]
 8008a46:	fa1f fe82 	uxth.w	lr, r2
 8008a4a:	fa1f f38c 	uxth.w	r3, ip
 8008a4e:	eba3 030e 	sub.w	r3, r3, lr
 8008a52:	4403      	add	r3, r0
 8008a54:	0c12      	lsrs	r2, r2, #16
 8008a56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a64:	45c1      	cmp	r9, r8
 8008a66:	f841 3b04 	str.w	r3, [r1], #4
 8008a6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a6e:	d2e6      	bcs.n	8008a3e <quorem+0xa4>
 8008a70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a78:	b922      	cbnz	r2, 8008a84 <quorem+0xea>
 8008a7a:	3b04      	subs	r3, #4
 8008a7c:	429d      	cmp	r5, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	d30b      	bcc.n	8008a9a <quorem+0x100>
 8008a82:	613c      	str	r4, [r7, #16]
 8008a84:	3601      	adds	r6, #1
 8008a86:	4630      	mov	r0, r6
 8008a88:	b003      	add	sp, #12
 8008a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8e:	6812      	ldr	r2, [r2, #0]
 8008a90:	3b04      	subs	r3, #4
 8008a92:	2a00      	cmp	r2, #0
 8008a94:	d1cb      	bne.n	8008a2e <quorem+0x94>
 8008a96:	3c01      	subs	r4, #1
 8008a98:	e7c6      	b.n	8008a28 <quorem+0x8e>
 8008a9a:	6812      	ldr	r2, [r2, #0]
 8008a9c:	3b04      	subs	r3, #4
 8008a9e:	2a00      	cmp	r2, #0
 8008aa0:	d1ef      	bne.n	8008a82 <quorem+0xe8>
 8008aa2:	3c01      	subs	r4, #1
 8008aa4:	e7ea      	b.n	8008a7c <quorem+0xe2>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e7ee      	b.n	8008a88 <quorem+0xee>
 8008aaa:	0000      	movs	r0, r0
 8008aac:	0000      	movs	r0, r0
	...

08008ab0 <_dtoa_r>:
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	69c7      	ldr	r7, [r0, #28]
 8008ab6:	b097      	sub	sp, #92	@ 0x5c
 8008ab8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008abc:	ec55 4b10 	vmov	r4, r5, d0
 8008ac0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008ac2:	9107      	str	r1, [sp, #28]
 8008ac4:	4681      	mov	r9, r0
 8008ac6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ac8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008aca:	b97f      	cbnz	r7, 8008aec <_dtoa_r+0x3c>
 8008acc:	2010      	movs	r0, #16
 8008ace:	f7fe ff33 	bl	8007938 <malloc>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	f8c9 001c 	str.w	r0, [r9, #28]
 8008ad8:	b920      	cbnz	r0, 8008ae4 <_dtoa_r+0x34>
 8008ada:	4ba9      	ldr	r3, [pc, #676]	@ (8008d80 <_dtoa_r+0x2d0>)
 8008adc:	21ef      	movs	r1, #239	@ 0xef
 8008ade:	48a9      	ldr	r0, [pc, #676]	@ (8008d84 <_dtoa_r+0x2d4>)
 8008ae0:	f001 fbfa 	bl	800a2d8 <__assert_func>
 8008ae4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ae8:	6007      	str	r7, [r0, #0]
 8008aea:	60c7      	str	r7, [r0, #12]
 8008aec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008af0:	6819      	ldr	r1, [r3, #0]
 8008af2:	b159      	cbz	r1, 8008b0c <_dtoa_r+0x5c>
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	604a      	str	r2, [r1, #4]
 8008af8:	2301      	movs	r3, #1
 8008afa:	4093      	lsls	r3, r2
 8008afc:	608b      	str	r3, [r1, #8]
 8008afe:	4648      	mov	r0, r9
 8008b00:	f000 fe30 	bl	8009764 <_Bfree>
 8008b04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	1e2b      	subs	r3, r5, #0
 8008b0e:	bfb9      	ittee	lt
 8008b10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b14:	9305      	strlt	r3, [sp, #20]
 8008b16:	2300      	movge	r3, #0
 8008b18:	6033      	strge	r3, [r6, #0]
 8008b1a:	9f05      	ldr	r7, [sp, #20]
 8008b1c:	4b9a      	ldr	r3, [pc, #616]	@ (8008d88 <_dtoa_r+0x2d8>)
 8008b1e:	bfbc      	itt	lt
 8008b20:	2201      	movlt	r2, #1
 8008b22:	6032      	strlt	r2, [r6, #0]
 8008b24:	43bb      	bics	r3, r7
 8008b26:	d112      	bne.n	8008b4e <_dtoa_r+0x9e>
 8008b28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b34:	4323      	orrs	r3, r4
 8008b36:	f000 855a 	beq.w	80095ee <_dtoa_r+0xb3e>
 8008b3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008d9c <_dtoa_r+0x2ec>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 855c 	beq.w	80095fe <_dtoa_r+0xb4e>
 8008b46:	f10a 0303 	add.w	r3, sl, #3
 8008b4a:	f000 bd56 	b.w	80095fa <_dtoa_r+0xb4a>
 8008b4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b52:	2200      	movs	r2, #0
 8008b54:	ec51 0b17 	vmov	r0, r1, d7
 8008b58:	2300      	movs	r3, #0
 8008b5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008b5e:	f7f7 ffdb 	bl	8000b18 <__aeabi_dcmpeq>
 8008b62:	4680      	mov	r8, r0
 8008b64:	b158      	cbz	r0, 8008b7e <_dtoa_r+0xce>
 8008b66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b68:	2301      	movs	r3, #1
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b6e:	b113      	cbz	r3, 8008b76 <_dtoa_r+0xc6>
 8008b70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008b72:	4b86      	ldr	r3, [pc, #536]	@ (8008d8c <_dtoa_r+0x2dc>)
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008da0 <_dtoa_r+0x2f0>
 8008b7a:	f000 bd40 	b.w	80095fe <_dtoa_r+0xb4e>
 8008b7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008b82:	aa14      	add	r2, sp, #80	@ 0x50
 8008b84:	a915      	add	r1, sp, #84	@ 0x54
 8008b86:	4648      	mov	r0, r9
 8008b88:	f001 f8ce 	bl	8009d28 <__d2b>
 8008b8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008b90:	9002      	str	r0, [sp, #8]
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	d078      	beq.n	8008c88 <_dtoa_r+0x1d8>
 8008b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ba4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ba8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008bac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	4b76      	ldr	r3, [pc, #472]	@ (8008d90 <_dtoa_r+0x2e0>)
 8008bb6:	f7f7 fb8f 	bl	80002d8 <__aeabi_dsub>
 8008bba:	a36b      	add	r3, pc, #428	@ (adr r3, 8008d68 <_dtoa_r+0x2b8>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f7f7 fd42 	bl	8000648 <__aeabi_dmul>
 8008bc4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008d70 <_dtoa_r+0x2c0>)
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f7f7 fb87 	bl	80002dc <__adddf3>
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	f7f7 fcce 	bl	8000574 <__aeabi_i2d>
 8008bd8:	a367      	add	r3, pc, #412	@ (adr r3, 8008d78 <_dtoa_r+0x2c8>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fd33 	bl	8000648 <__aeabi_dmul>
 8008be2:	4602      	mov	r2, r0
 8008be4:	460b      	mov	r3, r1
 8008be6:	4620      	mov	r0, r4
 8008be8:	4629      	mov	r1, r5
 8008bea:	f7f7 fb77 	bl	80002dc <__adddf3>
 8008bee:	4604      	mov	r4, r0
 8008bf0:	460d      	mov	r5, r1
 8008bf2:	f7f7 ffd9 	bl	8000ba8 <__aeabi_d2iz>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 ff94 	bl	8000b2c <__aeabi_dcmplt>
 8008c04:	b140      	cbz	r0, 8008c18 <_dtoa_r+0x168>
 8008c06:	4638      	mov	r0, r7
 8008c08:	f7f7 fcb4 	bl	8000574 <__aeabi_i2d>
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	462b      	mov	r3, r5
 8008c10:	f7f7 ff82 	bl	8000b18 <__aeabi_dcmpeq>
 8008c14:	b900      	cbnz	r0, 8008c18 <_dtoa_r+0x168>
 8008c16:	3f01      	subs	r7, #1
 8008c18:	2f16      	cmp	r7, #22
 8008c1a:	d852      	bhi.n	8008cc2 <_dtoa_r+0x212>
 8008c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8008d94 <_dtoa_r+0x2e4>)
 8008c1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c2a:	f7f7 ff7f 	bl	8000b2c <__aeabi_dcmplt>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d049      	beq.n	8008cc6 <_dtoa_r+0x216>
 8008c32:	3f01      	subs	r7, #1
 8008c34:	2300      	movs	r3, #0
 8008c36:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c3a:	1b9b      	subs	r3, r3, r6
 8008c3c:	1e5a      	subs	r2, r3, #1
 8008c3e:	bf45      	ittet	mi
 8008c40:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c44:	9300      	strmi	r3, [sp, #0]
 8008c46:	2300      	movpl	r3, #0
 8008c48:	2300      	movmi	r3, #0
 8008c4a:	9206      	str	r2, [sp, #24]
 8008c4c:	bf54      	ite	pl
 8008c4e:	9300      	strpl	r3, [sp, #0]
 8008c50:	9306      	strmi	r3, [sp, #24]
 8008c52:	2f00      	cmp	r7, #0
 8008c54:	db39      	blt.n	8008cca <_dtoa_r+0x21a>
 8008c56:	9b06      	ldr	r3, [sp, #24]
 8008c58:	970d      	str	r7, [sp, #52]	@ 0x34
 8008c5a:	443b      	add	r3, r7
 8008c5c:	9306      	str	r3, [sp, #24]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9308      	str	r3, [sp, #32]
 8008c62:	9b07      	ldr	r3, [sp, #28]
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	d863      	bhi.n	8008d30 <_dtoa_r+0x280>
 8008c68:	2b05      	cmp	r3, #5
 8008c6a:	bfc4      	itt	gt
 8008c6c:	3b04      	subgt	r3, #4
 8008c6e:	9307      	strgt	r3, [sp, #28]
 8008c70:	9b07      	ldr	r3, [sp, #28]
 8008c72:	f1a3 0302 	sub.w	r3, r3, #2
 8008c76:	bfcc      	ite	gt
 8008c78:	2400      	movgt	r4, #0
 8008c7a:	2401      	movle	r4, #1
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d863      	bhi.n	8008d48 <_dtoa_r+0x298>
 8008c80:	e8df f003 	tbb	[pc, r3]
 8008c84:	2b375452 	.word	0x2b375452
 8008c88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008c8c:	441e      	add	r6, r3
 8008c8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	bfc1      	itttt	gt
 8008c96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c9a:	409f      	lslgt	r7, r3
 8008c9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ca0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008ca4:	bfd6      	itet	le
 8008ca6:	f1c3 0320 	rsble	r3, r3, #32
 8008caa:	ea47 0003 	orrgt.w	r0, r7, r3
 8008cae:	fa04 f003 	lslle.w	r0, r4, r3
 8008cb2:	f7f7 fc4f 	bl	8000554 <__aeabi_ui2d>
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008cbc:	3e01      	subs	r6, #1
 8008cbe:	9212      	str	r2, [sp, #72]	@ 0x48
 8008cc0:	e776      	b.n	8008bb0 <_dtoa_r+0x100>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e7b7      	b.n	8008c36 <_dtoa_r+0x186>
 8008cc6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008cc8:	e7b6      	b.n	8008c38 <_dtoa_r+0x188>
 8008cca:	9b00      	ldr	r3, [sp, #0]
 8008ccc:	1bdb      	subs	r3, r3, r7
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	427b      	negs	r3, r7
 8008cd2:	9308      	str	r3, [sp, #32]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008cd8:	e7c3      	b.n	8008c62 <_dtoa_r+0x1b2>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ce0:	eb07 0b03 	add.w	fp, r7, r3
 8008ce4:	f10b 0301 	add.w	r3, fp, #1
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	9303      	str	r3, [sp, #12]
 8008cec:	bfb8      	it	lt
 8008cee:	2301      	movlt	r3, #1
 8008cf0:	e006      	b.n	8008d00 <_dtoa_r+0x250>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	dd28      	ble.n	8008d4e <_dtoa_r+0x29e>
 8008cfc:	469b      	mov	fp, r3
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008d04:	2100      	movs	r1, #0
 8008d06:	2204      	movs	r2, #4
 8008d08:	f102 0514 	add.w	r5, r2, #20
 8008d0c:	429d      	cmp	r5, r3
 8008d0e:	d926      	bls.n	8008d5e <_dtoa_r+0x2ae>
 8008d10:	6041      	str	r1, [r0, #4]
 8008d12:	4648      	mov	r0, r9
 8008d14:	f000 fce6 	bl	80096e4 <_Balloc>
 8008d18:	4682      	mov	sl, r0
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d142      	bne.n	8008da4 <_dtoa_r+0x2f4>
 8008d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008d98 <_dtoa_r+0x2e8>)
 8008d20:	4602      	mov	r2, r0
 8008d22:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d26:	e6da      	b.n	8008ade <_dtoa_r+0x2e>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	e7e3      	b.n	8008cf4 <_dtoa_r+0x244>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e7d5      	b.n	8008cdc <_dtoa_r+0x22c>
 8008d30:	2401      	movs	r4, #1
 8008d32:	2300      	movs	r3, #0
 8008d34:	9307      	str	r3, [sp, #28]
 8008d36:	9409      	str	r4, [sp, #36]	@ 0x24
 8008d38:	f04f 3bff 	mov.w	fp, #4294967295
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d42:	2312      	movs	r3, #18
 8008d44:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d46:	e7db      	b.n	8008d00 <_dtoa_r+0x250>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d4c:	e7f4      	b.n	8008d38 <_dtoa_r+0x288>
 8008d4e:	f04f 0b01 	mov.w	fp, #1
 8008d52:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d56:	465b      	mov	r3, fp
 8008d58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008d5c:	e7d0      	b.n	8008d00 <_dtoa_r+0x250>
 8008d5e:	3101      	adds	r1, #1
 8008d60:	0052      	lsls	r2, r2, #1
 8008d62:	e7d1      	b.n	8008d08 <_dtoa_r+0x258>
 8008d64:	f3af 8000 	nop.w
 8008d68:	636f4361 	.word	0x636f4361
 8008d6c:	3fd287a7 	.word	0x3fd287a7
 8008d70:	8b60c8b3 	.word	0x8b60c8b3
 8008d74:	3fc68a28 	.word	0x3fc68a28
 8008d78:	509f79fb 	.word	0x509f79fb
 8008d7c:	3fd34413 	.word	0x3fd34413
 8008d80:	0800a5f6 	.word	0x0800a5f6
 8008d84:	0800a60d 	.word	0x0800a60d
 8008d88:	7ff00000 	.word	0x7ff00000
 8008d8c:	0800a5c6 	.word	0x0800a5c6
 8008d90:	3ff80000 	.word	0x3ff80000
 8008d94:	0800a760 	.word	0x0800a760
 8008d98:	0800a665 	.word	0x0800a665
 8008d9c:	0800a5f2 	.word	0x0800a5f2
 8008da0:	0800a5c5 	.word	0x0800a5c5
 8008da4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008da8:	6018      	str	r0, [r3, #0]
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	2b0e      	cmp	r3, #14
 8008dae:	f200 80a1 	bhi.w	8008ef4 <_dtoa_r+0x444>
 8008db2:	2c00      	cmp	r4, #0
 8008db4:	f000 809e 	beq.w	8008ef4 <_dtoa_r+0x444>
 8008db8:	2f00      	cmp	r7, #0
 8008dba:	dd33      	ble.n	8008e24 <_dtoa_r+0x374>
 8008dbc:	4b9c      	ldr	r3, [pc, #624]	@ (8009030 <_dtoa_r+0x580>)
 8008dbe:	f007 020f 	and.w	r2, r7, #15
 8008dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dc6:	ed93 7b00 	vldr	d7, [r3]
 8008dca:	05f8      	lsls	r0, r7, #23
 8008dcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008dd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008dd4:	d516      	bpl.n	8008e04 <_dtoa_r+0x354>
 8008dd6:	4b97      	ldr	r3, [pc, #604]	@ (8009034 <_dtoa_r+0x584>)
 8008dd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008de0:	f7f7 fd5c 	bl	800089c <__aeabi_ddiv>
 8008de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008de8:	f004 040f 	and.w	r4, r4, #15
 8008dec:	2603      	movs	r6, #3
 8008dee:	4d91      	ldr	r5, [pc, #580]	@ (8009034 <_dtoa_r+0x584>)
 8008df0:	b954      	cbnz	r4, 8008e08 <_dtoa_r+0x358>
 8008df2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dfa:	f7f7 fd4f 	bl	800089c <__aeabi_ddiv>
 8008dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e02:	e028      	b.n	8008e56 <_dtoa_r+0x3a6>
 8008e04:	2602      	movs	r6, #2
 8008e06:	e7f2      	b.n	8008dee <_dtoa_r+0x33e>
 8008e08:	07e1      	lsls	r1, r4, #31
 8008e0a:	d508      	bpl.n	8008e1e <_dtoa_r+0x36e>
 8008e0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008e10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e14:	f7f7 fc18 	bl	8000648 <__aeabi_dmul>
 8008e18:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008e1c:	3601      	adds	r6, #1
 8008e1e:	1064      	asrs	r4, r4, #1
 8008e20:	3508      	adds	r5, #8
 8008e22:	e7e5      	b.n	8008df0 <_dtoa_r+0x340>
 8008e24:	f000 80af 	beq.w	8008f86 <_dtoa_r+0x4d6>
 8008e28:	427c      	negs	r4, r7
 8008e2a:	4b81      	ldr	r3, [pc, #516]	@ (8009030 <_dtoa_r+0x580>)
 8008e2c:	4d81      	ldr	r5, [pc, #516]	@ (8009034 <_dtoa_r+0x584>)
 8008e2e:	f004 020f 	and.w	r2, r4, #15
 8008e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e3e:	f7f7 fc03 	bl	8000648 <__aeabi_dmul>
 8008e42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e46:	1124      	asrs	r4, r4, #4
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2602      	movs	r6, #2
 8008e4c:	2c00      	cmp	r4, #0
 8008e4e:	f040 808f 	bne.w	8008f70 <_dtoa_r+0x4c0>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1d3      	bne.n	8008dfe <_dtoa_r+0x34e>
 8008e56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e58:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 8094 	beq.w	8008f8a <_dtoa_r+0x4da>
 8008e62:	4b75      	ldr	r3, [pc, #468]	@ (8009038 <_dtoa_r+0x588>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	4620      	mov	r0, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fe5f 	bl	8000b2c <__aeabi_dcmplt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f000 808b 	beq.w	8008f8a <_dtoa_r+0x4da>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 8087 	beq.w	8008f8a <_dtoa_r+0x4da>
 8008e7c:	f1bb 0f00 	cmp.w	fp, #0
 8008e80:	dd34      	ble.n	8008eec <_dtoa_r+0x43c>
 8008e82:	4620      	mov	r0, r4
 8008e84:	4b6d      	ldr	r3, [pc, #436]	@ (800903c <_dtoa_r+0x58c>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7f7 fbdd 	bl	8000648 <__aeabi_dmul>
 8008e8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e92:	f107 38ff 	add.w	r8, r7, #4294967295
 8008e96:	3601      	adds	r6, #1
 8008e98:	465c      	mov	r4, fp
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7f7 fb6a 	bl	8000574 <__aeabi_i2d>
 8008ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea4:	f7f7 fbd0 	bl	8000648 <__aeabi_dmul>
 8008ea8:	4b65      	ldr	r3, [pc, #404]	@ (8009040 <_dtoa_r+0x590>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f7f7 fa16 	bl	80002dc <__adddf3>
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008eb6:	2c00      	cmp	r4, #0
 8008eb8:	d16a      	bne.n	8008f90 <_dtoa_r+0x4e0>
 8008eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ebe:	4b61      	ldr	r3, [pc, #388]	@ (8009044 <_dtoa_r+0x594>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f7f7 fa09 	bl	80002d8 <__aeabi_dsub>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ece:	462a      	mov	r2, r5
 8008ed0:	4633      	mov	r3, r6
 8008ed2:	f7f7 fe49 	bl	8000b68 <__aeabi_dcmpgt>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f040 8298 	bne.w	800940c <_dtoa_r+0x95c>
 8008edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ee0:	462a      	mov	r2, r5
 8008ee2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ee6:	f7f7 fe21 	bl	8000b2c <__aeabi_dcmplt>
 8008eea:	bb38      	cbnz	r0, 8008f3c <_dtoa_r+0x48c>
 8008eec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008ef0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ef4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f2c0 8157 	blt.w	80091aa <_dtoa_r+0x6fa>
 8008efc:	2f0e      	cmp	r7, #14
 8008efe:	f300 8154 	bgt.w	80091aa <_dtoa_r+0x6fa>
 8008f02:	4b4b      	ldr	r3, [pc, #300]	@ (8009030 <_dtoa_r+0x580>)
 8008f04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f08:	ed93 7b00 	vldr	d7, [r3]
 8008f0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	ed8d 7b00 	vstr	d7, [sp]
 8008f14:	f280 80e5 	bge.w	80090e2 <_dtoa_r+0x632>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f300 80e1 	bgt.w	80090e2 <_dtoa_r+0x632>
 8008f20:	d10c      	bne.n	8008f3c <_dtoa_r+0x48c>
 8008f22:	4b48      	ldr	r3, [pc, #288]	@ (8009044 <_dtoa_r+0x594>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	ec51 0b17 	vmov	r0, r1, d7
 8008f2a:	f7f7 fb8d 	bl	8000648 <__aeabi_dmul>
 8008f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f32:	f7f7 fe0f 	bl	8000b54 <__aeabi_dcmpge>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f000 8266 	beq.w	8009408 <_dtoa_r+0x958>
 8008f3c:	2400      	movs	r4, #0
 8008f3e:	4625      	mov	r5, r4
 8008f40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f42:	4656      	mov	r6, sl
 8008f44:	ea6f 0803 	mvn.w	r8, r3
 8008f48:	2700      	movs	r7, #0
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	4648      	mov	r0, r9
 8008f4e:	f000 fc09 	bl	8009764 <_Bfree>
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	f000 80bd 	beq.w	80090d2 <_dtoa_r+0x622>
 8008f58:	b12f      	cbz	r7, 8008f66 <_dtoa_r+0x4b6>
 8008f5a:	42af      	cmp	r7, r5
 8008f5c:	d003      	beq.n	8008f66 <_dtoa_r+0x4b6>
 8008f5e:	4639      	mov	r1, r7
 8008f60:	4648      	mov	r0, r9
 8008f62:	f000 fbff 	bl	8009764 <_Bfree>
 8008f66:	4629      	mov	r1, r5
 8008f68:	4648      	mov	r0, r9
 8008f6a:	f000 fbfb 	bl	8009764 <_Bfree>
 8008f6e:	e0b0      	b.n	80090d2 <_dtoa_r+0x622>
 8008f70:	07e2      	lsls	r2, r4, #31
 8008f72:	d505      	bpl.n	8008f80 <_dtoa_r+0x4d0>
 8008f74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f78:	f7f7 fb66 	bl	8000648 <__aeabi_dmul>
 8008f7c:	3601      	adds	r6, #1
 8008f7e:	2301      	movs	r3, #1
 8008f80:	1064      	asrs	r4, r4, #1
 8008f82:	3508      	adds	r5, #8
 8008f84:	e762      	b.n	8008e4c <_dtoa_r+0x39c>
 8008f86:	2602      	movs	r6, #2
 8008f88:	e765      	b.n	8008e56 <_dtoa_r+0x3a6>
 8008f8a:	9c03      	ldr	r4, [sp, #12]
 8008f8c:	46b8      	mov	r8, r7
 8008f8e:	e784      	b.n	8008e9a <_dtoa_r+0x3ea>
 8008f90:	4b27      	ldr	r3, [pc, #156]	@ (8009030 <_dtoa_r+0x580>)
 8008f92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f9c:	4454      	add	r4, sl
 8008f9e:	2900      	cmp	r1, #0
 8008fa0:	d054      	beq.n	800904c <_dtoa_r+0x59c>
 8008fa2:	4929      	ldr	r1, [pc, #164]	@ (8009048 <_dtoa_r+0x598>)
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	f7f7 fc79 	bl	800089c <__aeabi_ddiv>
 8008faa:	4633      	mov	r3, r6
 8008fac:	462a      	mov	r2, r5
 8008fae:	f7f7 f993 	bl	80002d8 <__aeabi_dsub>
 8008fb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008fb6:	4656      	mov	r6, sl
 8008fb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fbc:	f7f7 fdf4 	bl	8000ba8 <__aeabi_d2iz>
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	f7f7 fad7 	bl	8000574 <__aeabi_i2d>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fce:	f7f7 f983 	bl	80002d8 <__aeabi_dsub>
 8008fd2:	3530      	adds	r5, #48	@ 0x30
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fdc:	f806 5b01 	strb.w	r5, [r6], #1
 8008fe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fe4:	f7f7 fda2 	bl	8000b2c <__aeabi_dcmplt>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d172      	bne.n	80090d2 <_dtoa_r+0x622>
 8008fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ff0:	4911      	ldr	r1, [pc, #68]	@ (8009038 <_dtoa_r+0x588>)
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	f7f7 f970 	bl	80002d8 <__aeabi_dsub>
 8008ff8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ffc:	f7f7 fd96 	bl	8000b2c <__aeabi_dcmplt>
 8009000:	2800      	cmp	r0, #0
 8009002:	f040 80b4 	bne.w	800916e <_dtoa_r+0x6be>
 8009006:	42a6      	cmp	r6, r4
 8009008:	f43f af70 	beq.w	8008eec <_dtoa_r+0x43c>
 800900c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009010:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <_dtoa_r+0x58c>)
 8009012:	2200      	movs	r2, #0
 8009014:	f7f7 fb18 	bl	8000648 <__aeabi_dmul>
 8009018:	4b08      	ldr	r3, [pc, #32]	@ (800903c <_dtoa_r+0x58c>)
 800901a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800901e:	2200      	movs	r2, #0
 8009020:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009024:	f7f7 fb10 	bl	8000648 <__aeabi_dmul>
 8009028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800902c:	e7c4      	b.n	8008fb8 <_dtoa_r+0x508>
 800902e:	bf00      	nop
 8009030:	0800a760 	.word	0x0800a760
 8009034:	0800a738 	.word	0x0800a738
 8009038:	3ff00000 	.word	0x3ff00000
 800903c:	40240000 	.word	0x40240000
 8009040:	401c0000 	.word	0x401c0000
 8009044:	40140000 	.word	0x40140000
 8009048:	3fe00000 	.word	0x3fe00000
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	f7f7 fafa 	bl	8000648 <__aeabi_dmul>
 8009054:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009058:	9413      	str	r4, [sp, #76]	@ 0x4c
 800905a:	4656      	mov	r6, sl
 800905c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009060:	f7f7 fda2 	bl	8000ba8 <__aeabi_d2iz>
 8009064:	4605      	mov	r5, r0
 8009066:	f7f7 fa85 	bl	8000574 <__aeabi_i2d>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009072:	f7f7 f931 	bl	80002d8 <__aeabi_dsub>
 8009076:	3530      	adds	r5, #48	@ 0x30
 8009078:	f806 5b01 	strb.w	r5, [r6], #1
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	42a6      	cmp	r6, r4
 8009082:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009086:	f04f 0200 	mov.w	r2, #0
 800908a:	d124      	bne.n	80090d6 <_dtoa_r+0x626>
 800908c:	4baf      	ldr	r3, [pc, #700]	@ (800934c <_dtoa_r+0x89c>)
 800908e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009092:	f7f7 f923 	bl	80002dc <__adddf3>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800909e:	f7f7 fd63 	bl	8000b68 <__aeabi_dcmpgt>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d163      	bne.n	800916e <_dtoa_r+0x6be>
 80090a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090aa:	49a8      	ldr	r1, [pc, #672]	@ (800934c <_dtoa_r+0x89c>)
 80090ac:	2000      	movs	r0, #0
 80090ae:	f7f7 f913 	bl	80002d8 <__aeabi_dsub>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090ba:	f7f7 fd37 	bl	8000b2c <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f43f af14 	beq.w	8008eec <_dtoa_r+0x43c>
 80090c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80090c6:	1e73      	subs	r3, r6, #1
 80090c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090ce:	2b30      	cmp	r3, #48	@ 0x30
 80090d0:	d0f8      	beq.n	80090c4 <_dtoa_r+0x614>
 80090d2:	4647      	mov	r7, r8
 80090d4:	e03b      	b.n	800914e <_dtoa_r+0x69e>
 80090d6:	4b9e      	ldr	r3, [pc, #632]	@ (8009350 <_dtoa_r+0x8a0>)
 80090d8:	f7f7 fab6 	bl	8000648 <__aeabi_dmul>
 80090dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090e0:	e7bc      	b.n	800905c <_dtoa_r+0x5ac>
 80090e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80090e6:	4656      	mov	r6, sl
 80090e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ec:	4620      	mov	r0, r4
 80090ee:	4629      	mov	r1, r5
 80090f0:	f7f7 fbd4 	bl	800089c <__aeabi_ddiv>
 80090f4:	f7f7 fd58 	bl	8000ba8 <__aeabi_d2iz>
 80090f8:	4680      	mov	r8, r0
 80090fa:	f7f7 fa3b 	bl	8000574 <__aeabi_i2d>
 80090fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009102:	f7f7 faa1 	bl	8000648 <__aeabi_dmul>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	4620      	mov	r0, r4
 800910c:	4629      	mov	r1, r5
 800910e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009112:	f7f7 f8e1 	bl	80002d8 <__aeabi_dsub>
 8009116:	f806 4b01 	strb.w	r4, [r6], #1
 800911a:	9d03      	ldr	r5, [sp, #12]
 800911c:	eba6 040a 	sub.w	r4, r6, sl
 8009120:	42a5      	cmp	r5, r4
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	d133      	bne.n	8009190 <_dtoa_r+0x6e0>
 8009128:	f7f7 f8d8 	bl	80002dc <__adddf3>
 800912c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009130:	4604      	mov	r4, r0
 8009132:	460d      	mov	r5, r1
 8009134:	f7f7 fd18 	bl	8000b68 <__aeabi_dcmpgt>
 8009138:	b9c0      	cbnz	r0, 800916c <_dtoa_r+0x6bc>
 800913a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800913e:	4620      	mov	r0, r4
 8009140:	4629      	mov	r1, r5
 8009142:	f7f7 fce9 	bl	8000b18 <__aeabi_dcmpeq>
 8009146:	b110      	cbz	r0, 800914e <_dtoa_r+0x69e>
 8009148:	f018 0f01 	tst.w	r8, #1
 800914c:	d10e      	bne.n	800916c <_dtoa_r+0x6bc>
 800914e:	9902      	ldr	r1, [sp, #8]
 8009150:	4648      	mov	r0, r9
 8009152:	f000 fb07 	bl	8009764 <_Bfree>
 8009156:	2300      	movs	r3, #0
 8009158:	7033      	strb	r3, [r6, #0]
 800915a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800915c:	3701      	adds	r7, #1
 800915e:	601f      	str	r7, [r3, #0]
 8009160:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 824b 	beq.w	80095fe <_dtoa_r+0xb4e>
 8009168:	601e      	str	r6, [r3, #0]
 800916a:	e248      	b.n	80095fe <_dtoa_r+0xb4e>
 800916c:	46b8      	mov	r8, r7
 800916e:	4633      	mov	r3, r6
 8009170:	461e      	mov	r6, r3
 8009172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009176:	2a39      	cmp	r2, #57	@ 0x39
 8009178:	d106      	bne.n	8009188 <_dtoa_r+0x6d8>
 800917a:	459a      	cmp	sl, r3
 800917c:	d1f8      	bne.n	8009170 <_dtoa_r+0x6c0>
 800917e:	2230      	movs	r2, #48	@ 0x30
 8009180:	f108 0801 	add.w	r8, r8, #1
 8009184:	f88a 2000 	strb.w	r2, [sl]
 8009188:	781a      	ldrb	r2, [r3, #0]
 800918a:	3201      	adds	r2, #1
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	e7a0      	b.n	80090d2 <_dtoa_r+0x622>
 8009190:	4b6f      	ldr	r3, [pc, #444]	@ (8009350 <_dtoa_r+0x8a0>)
 8009192:	2200      	movs	r2, #0
 8009194:	f7f7 fa58 	bl	8000648 <__aeabi_dmul>
 8009198:	2200      	movs	r2, #0
 800919a:	2300      	movs	r3, #0
 800919c:	4604      	mov	r4, r0
 800919e:	460d      	mov	r5, r1
 80091a0:	f7f7 fcba 	bl	8000b18 <__aeabi_dcmpeq>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d09f      	beq.n	80090e8 <_dtoa_r+0x638>
 80091a8:	e7d1      	b.n	800914e <_dtoa_r+0x69e>
 80091aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091ac:	2a00      	cmp	r2, #0
 80091ae:	f000 80ea 	beq.w	8009386 <_dtoa_r+0x8d6>
 80091b2:	9a07      	ldr	r2, [sp, #28]
 80091b4:	2a01      	cmp	r2, #1
 80091b6:	f300 80cd 	bgt.w	8009354 <_dtoa_r+0x8a4>
 80091ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80091bc:	2a00      	cmp	r2, #0
 80091be:	f000 80c1 	beq.w	8009344 <_dtoa_r+0x894>
 80091c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80091c6:	9c08      	ldr	r4, [sp, #32]
 80091c8:	9e00      	ldr	r6, [sp, #0]
 80091ca:	9a00      	ldr	r2, [sp, #0]
 80091cc:	441a      	add	r2, r3
 80091ce:	9200      	str	r2, [sp, #0]
 80091d0:	9a06      	ldr	r2, [sp, #24]
 80091d2:	2101      	movs	r1, #1
 80091d4:	441a      	add	r2, r3
 80091d6:	4648      	mov	r0, r9
 80091d8:	9206      	str	r2, [sp, #24]
 80091da:	f000 fb77 	bl	80098cc <__i2b>
 80091de:	4605      	mov	r5, r0
 80091e0:	b166      	cbz	r6, 80091fc <_dtoa_r+0x74c>
 80091e2:	9b06      	ldr	r3, [sp, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dd09      	ble.n	80091fc <_dtoa_r+0x74c>
 80091e8:	42b3      	cmp	r3, r6
 80091ea:	9a00      	ldr	r2, [sp, #0]
 80091ec:	bfa8      	it	ge
 80091ee:	4633      	movge	r3, r6
 80091f0:	1ad2      	subs	r2, r2, r3
 80091f2:	9200      	str	r2, [sp, #0]
 80091f4:	9a06      	ldr	r2, [sp, #24]
 80091f6:	1af6      	subs	r6, r6, r3
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	9306      	str	r3, [sp, #24]
 80091fc:	9b08      	ldr	r3, [sp, #32]
 80091fe:	b30b      	cbz	r3, 8009244 <_dtoa_r+0x794>
 8009200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 80c6 	beq.w	8009394 <_dtoa_r+0x8e4>
 8009208:	2c00      	cmp	r4, #0
 800920a:	f000 80c0 	beq.w	800938e <_dtoa_r+0x8de>
 800920e:	4629      	mov	r1, r5
 8009210:	4622      	mov	r2, r4
 8009212:	4648      	mov	r0, r9
 8009214:	f000 fc12 	bl	8009a3c <__pow5mult>
 8009218:	9a02      	ldr	r2, [sp, #8]
 800921a:	4601      	mov	r1, r0
 800921c:	4605      	mov	r5, r0
 800921e:	4648      	mov	r0, r9
 8009220:	f000 fb6a 	bl	80098f8 <__multiply>
 8009224:	9902      	ldr	r1, [sp, #8]
 8009226:	4680      	mov	r8, r0
 8009228:	4648      	mov	r0, r9
 800922a:	f000 fa9b 	bl	8009764 <_Bfree>
 800922e:	9b08      	ldr	r3, [sp, #32]
 8009230:	1b1b      	subs	r3, r3, r4
 8009232:	9308      	str	r3, [sp, #32]
 8009234:	f000 80b1 	beq.w	800939a <_dtoa_r+0x8ea>
 8009238:	9a08      	ldr	r2, [sp, #32]
 800923a:	4641      	mov	r1, r8
 800923c:	4648      	mov	r0, r9
 800923e:	f000 fbfd 	bl	8009a3c <__pow5mult>
 8009242:	9002      	str	r0, [sp, #8]
 8009244:	2101      	movs	r1, #1
 8009246:	4648      	mov	r0, r9
 8009248:	f000 fb40 	bl	80098cc <__i2b>
 800924c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800924e:	4604      	mov	r4, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 81d8 	beq.w	8009606 <_dtoa_r+0xb56>
 8009256:	461a      	mov	r2, r3
 8009258:	4601      	mov	r1, r0
 800925a:	4648      	mov	r0, r9
 800925c:	f000 fbee 	bl	8009a3c <__pow5mult>
 8009260:	9b07      	ldr	r3, [sp, #28]
 8009262:	2b01      	cmp	r3, #1
 8009264:	4604      	mov	r4, r0
 8009266:	f300 809f 	bgt.w	80093a8 <_dtoa_r+0x8f8>
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	f040 8097 	bne.w	80093a0 <_dtoa_r+0x8f0>
 8009272:	9b05      	ldr	r3, [sp, #20]
 8009274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009278:	2b00      	cmp	r3, #0
 800927a:	f040 8093 	bne.w	80093a4 <_dtoa_r+0x8f4>
 800927e:	9b05      	ldr	r3, [sp, #20]
 8009280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009284:	0d1b      	lsrs	r3, r3, #20
 8009286:	051b      	lsls	r3, r3, #20
 8009288:	b133      	cbz	r3, 8009298 <_dtoa_r+0x7e8>
 800928a:	9b00      	ldr	r3, [sp, #0]
 800928c:	3301      	adds	r3, #1
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	9b06      	ldr	r3, [sp, #24]
 8009292:	3301      	adds	r3, #1
 8009294:	9306      	str	r3, [sp, #24]
 8009296:	2301      	movs	r3, #1
 8009298:	9308      	str	r3, [sp, #32]
 800929a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 81b8 	beq.w	8009612 <_dtoa_r+0xb62>
 80092a2:	6923      	ldr	r3, [r4, #16]
 80092a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092a8:	6918      	ldr	r0, [r3, #16]
 80092aa:	f000 fac3 	bl	8009834 <__hi0bits>
 80092ae:	f1c0 0020 	rsb	r0, r0, #32
 80092b2:	9b06      	ldr	r3, [sp, #24]
 80092b4:	4418      	add	r0, r3
 80092b6:	f010 001f 	ands.w	r0, r0, #31
 80092ba:	f000 8082 	beq.w	80093c2 <_dtoa_r+0x912>
 80092be:	f1c0 0320 	rsb	r3, r0, #32
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	dd73      	ble.n	80093ae <_dtoa_r+0x8fe>
 80092c6:	9b00      	ldr	r3, [sp, #0]
 80092c8:	f1c0 001c 	rsb	r0, r0, #28
 80092cc:	4403      	add	r3, r0
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	9b06      	ldr	r3, [sp, #24]
 80092d2:	4403      	add	r3, r0
 80092d4:	4406      	add	r6, r0
 80092d6:	9306      	str	r3, [sp, #24]
 80092d8:	9b00      	ldr	r3, [sp, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	dd05      	ble.n	80092ea <_dtoa_r+0x83a>
 80092de:	9902      	ldr	r1, [sp, #8]
 80092e0:	461a      	mov	r2, r3
 80092e2:	4648      	mov	r0, r9
 80092e4:	f000 fc04 	bl	8009af0 <__lshift>
 80092e8:	9002      	str	r0, [sp, #8]
 80092ea:	9b06      	ldr	r3, [sp, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dd05      	ble.n	80092fc <_dtoa_r+0x84c>
 80092f0:	4621      	mov	r1, r4
 80092f2:	461a      	mov	r2, r3
 80092f4:	4648      	mov	r0, r9
 80092f6:	f000 fbfb 	bl	8009af0 <__lshift>
 80092fa:	4604      	mov	r4, r0
 80092fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d061      	beq.n	80093c6 <_dtoa_r+0x916>
 8009302:	9802      	ldr	r0, [sp, #8]
 8009304:	4621      	mov	r1, r4
 8009306:	f000 fc5f 	bl	8009bc8 <__mcmp>
 800930a:	2800      	cmp	r0, #0
 800930c:	da5b      	bge.n	80093c6 <_dtoa_r+0x916>
 800930e:	2300      	movs	r3, #0
 8009310:	9902      	ldr	r1, [sp, #8]
 8009312:	220a      	movs	r2, #10
 8009314:	4648      	mov	r0, r9
 8009316:	f000 fa47 	bl	80097a8 <__multadd>
 800931a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800931c:	9002      	str	r0, [sp, #8]
 800931e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 8177 	beq.w	8009616 <_dtoa_r+0xb66>
 8009328:	4629      	mov	r1, r5
 800932a:	2300      	movs	r3, #0
 800932c:	220a      	movs	r2, #10
 800932e:	4648      	mov	r0, r9
 8009330:	f000 fa3a 	bl	80097a8 <__multadd>
 8009334:	f1bb 0f00 	cmp.w	fp, #0
 8009338:	4605      	mov	r5, r0
 800933a:	dc6f      	bgt.n	800941c <_dtoa_r+0x96c>
 800933c:	9b07      	ldr	r3, [sp, #28]
 800933e:	2b02      	cmp	r3, #2
 8009340:	dc49      	bgt.n	80093d6 <_dtoa_r+0x926>
 8009342:	e06b      	b.n	800941c <_dtoa_r+0x96c>
 8009344:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009346:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800934a:	e73c      	b.n	80091c6 <_dtoa_r+0x716>
 800934c:	3fe00000 	.word	0x3fe00000
 8009350:	40240000 	.word	0x40240000
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	1e5c      	subs	r4, r3, #1
 8009358:	9b08      	ldr	r3, [sp, #32]
 800935a:	42a3      	cmp	r3, r4
 800935c:	db09      	blt.n	8009372 <_dtoa_r+0x8c2>
 800935e:	1b1c      	subs	r4, r3, r4
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f6bf af30 	bge.w	80091c8 <_dtoa_r+0x718>
 8009368:	9b00      	ldr	r3, [sp, #0]
 800936a:	9a03      	ldr	r2, [sp, #12]
 800936c:	1a9e      	subs	r6, r3, r2
 800936e:	2300      	movs	r3, #0
 8009370:	e72b      	b.n	80091ca <_dtoa_r+0x71a>
 8009372:	9b08      	ldr	r3, [sp, #32]
 8009374:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009376:	9408      	str	r4, [sp, #32]
 8009378:	1ae3      	subs	r3, r4, r3
 800937a:	441a      	add	r2, r3
 800937c:	9e00      	ldr	r6, [sp, #0]
 800937e:	9b03      	ldr	r3, [sp, #12]
 8009380:	920d      	str	r2, [sp, #52]	@ 0x34
 8009382:	2400      	movs	r4, #0
 8009384:	e721      	b.n	80091ca <_dtoa_r+0x71a>
 8009386:	9c08      	ldr	r4, [sp, #32]
 8009388:	9e00      	ldr	r6, [sp, #0]
 800938a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800938c:	e728      	b.n	80091e0 <_dtoa_r+0x730>
 800938e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009392:	e751      	b.n	8009238 <_dtoa_r+0x788>
 8009394:	9a08      	ldr	r2, [sp, #32]
 8009396:	9902      	ldr	r1, [sp, #8]
 8009398:	e750      	b.n	800923c <_dtoa_r+0x78c>
 800939a:	f8cd 8008 	str.w	r8, [sp, #8]
 800939e:	e751      	b.n	8009244 <_dtoa_r+0x794>
 80093a0:	2300      	movs	r3, #0
 80093a2:	e779      	b.n	8009298 <_dtoa_r+0x7e8>
 80093a4:	9b04      	ldr	r3, [sp, #16]
 80093a6:	e777      	b.n	8009298 <_dtoa_r+0x7e8>
 80093a8:	2300      	movs	r3, #0
 80093aa:	9308      	str	r3, [sp, #32]
 80093ac:	e779      	b.n	80092a2 <_dtoa_r+0x7f2>
 80093ae:	d093      	beq.n	80092d8 <_dtoa_r+0x828>
 80093b0:	9a00      	ldr	r2, [sp, #0]
 80093b2:	331c      	adds	r3, #28
 80093b4:	441a      	add	r2, r3
 80093b6:	9200      	str	r2, [sp, #0]
 80093b8:	9a06      	ldr	r2, [sp, #24]
 80093ba:	441a      	add	r2, r3
 80093bc:	441e      	add	r6, r3
 80093be:	9206      	str	r2, [sp, #24]
 80093c0:	e78a      	b.n	80092d8 <_dtoa_r+0x828>
 80093c2:	4603      	mov	r3, r0
 80093c4:	e7f4      	b.n	80093b0 <_dtoa_r+0x900>
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	46b8      	mov	r8, r7
 80093cc:	dc20      	bgt.n	8009410 <_dtoa_r+0x960>
 80093ce:	469b      	mov	fp, r3
 80093d0:	9b07      	ldr	r3, [sp, #28]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	dd1e      	ble.n	8009414 <_dtoa_r+0x964>
 80093d6:	f1bb 0f00 	cmp.w	fp, #0
 80093da:	f47f adb1 	bne.w	8008f40 <_dtoa_r+0x490>
 80093de:	4621      	mov	r1, r4
 80093e0:	465b      	mov	r3, fp
 80093e2:	2205      	movs	r2, #5
 80093e4:	4648      	mov	r0, r9
 80093e6:	f000 f9df 	bl	80097a8 <__multadd>
 80093ea:	4601      	mov	r1, r0
 80093ec:	4604      	mov	r4, r0
 80093ee:	9802      	ldr	r0, [sp, #8]
 80093f0:	f000 fbea 	bl	8009bc8 <__mcmp>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f77f ada3 	ble.w	8008f40 <_dtoa_r+0x490>
 80093fa:	4656      	mov	r6, sl
 80093fc:	2331      	movs	r3, #49	@ 0x31
 80093fe:	f806 3b01 	strb.w	r3, [r6], #1
 8009402:	f108 0801 	add.w	r8, r8, #1
 8009406:	e59f      	b.n	8008f48 <_dtoa_r+0x498>
 8009408:	9c03      	ldr	r4, [sp, #12]
 800940a:	46b8      	mov	r8, r7
 800940c:	4625      	mov	r5, r4
 800940e:	e7f4      	b.n	80093fa <_dtoa_r+0x94a>
 8009410:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 8101 	beq.w	800961e <_dtoa_r+0xb6e>
 800941c:	2e00      	cmp	r6, #0
 800941e:	dd05      	ble.n	800942c <_dtoa_r+0x97c>
 8009420:	4629      	mov	r1, r5
 8009422:	4632      	mov	r2, r6
 8009424:	4648      	mov	r0, r9
 8009426:	f000 fb63 	bl	8009af0 <__lshift>
 800942a:	4605      	mov	r5, r0
 800942c:	9b08      	ldr	r3, [sp, #32]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d05c      	beq.n	80094ec <_dtoa_r+0xa3c>
 8009432:	6869      	ldr	r1, [r5, #4]
 8009434:	4648      	mov	r0, r9
 8009436:	f000 f955 	bl	80096e4 <_Balloc>
 800943a:	4606      	mov	r6, r0
 800943c:	b928      	cbnz	r0, 800944a <_dtoa_r+0x99a>
 800943e:	4b82      	ldr	r3, [pc, #520]	@ (8009648 <_dtoa_r+0xb98>)
 8009440:	4602      	mov	r2, r0
 8009442:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009446:	f7ff bb4a 	b.w	8008ade <_dtoa_r+0x2e>
 800944a:	692a      	ldr	r2, [r5, #16]
 800944c:	3202      	adds	r2, #2
 800944e:	0092      	lsls	r2, r2, #2
 8009450:	f105 010c 	add.w	r1, r5, #12
 8009454:	300c      	adds	r0, #12
 8009456:	f000 ff31 	bl	800a2bc <memcpy>
 800945a:	2201      	movs	r2, #1
 800945c:	4631      	mov	r1, r6
 800945e:	4648      	mov	r0, r9
 8009460:	f000 fb46 	bl	8009af0 <__lshift>
 8009464:	f10a 0301 	add.w	r3, sl, #1
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	eb0a 030b 	add.w	r3, sl, fp
 800946e:	9308      	str	r3, [sp, #32]
 8009470:	9b04      	ldr	r3, [sp, #16]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	462f      	mov	r7, r5
 8009478:	9306      	str	r3, [sp, #24]
 800947a:	4605      	mov	r5, r0
 800947c:	9b00      	ldr	r3, [sp, #0]
 800947e:	9802      	ldr	r0, [sp, #8]
 8009480:	4621      	mov	r1, r4
 8009482:	f103 3bff 	add.w	fp, r3, #4294967295
 8009486:	f7ff fa88 	bl	800899a <quorem>
 800948a:	4603      	mov	r3, r0
 800948c:	3330      	adds	r3, #48	@ 0x30
 800948e:	9003      	str	r0, [sp, #12]
 8009490:	4639      	mov	r1, r7
 8009492:	9802      	ldr	r0, [sp, #8]
 8009494:	9309      	str	r3, [sp, #36]	@ 0x24
 8009496:	f000 fb97 	bl	8009bc8 <__mcmp>
 800949a:	462a      	mov	r2, r5
 800949c:	9004      	str	r0, [sp, #16]
 800949e:	4621      	mov	r1, r4
 80094a0:	4648      	mov	r0, r9
 80094a2:	f000 fbad 	bl	8009c00 <__mdiff>
 80094a6:	68c2      	ldr	r2, [r0, #12]
 80094a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094aa:	4606      	mov	r6, r0
 80094ac:	bb02      	cbnz	r2, 80094f0 <_dtoa_r+0xa40>
 80094ae:	4601      	mov	r1, r0
 80094b0:	9802      	ldr	r0, [sp, #8]
 80094b2:	f000 fb89 	bl	8009bc8 <__mcmp>
 80094b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b8:	4602      	mov	r2, r0
 80094ba:	4631      	mov	r1, r6
 80094bc:	4648      	mov	r0, r9
 80094be:	920c      	str	r2, [sp, #48]	@ 0x30
 80094c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80094c2:	f000 f94f 	bl	8009764 <_Bfree>
 80094c6:	9b07      	ldr	r3, [sp, #28]
 80094c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80094ca:	9e00      	ldr	r6, [sp, #0]
 80094cc:	ea42 0103 	orr.w	r1, r2, r3
 80094d0:	9b06      	ldr	r3, [sp, #24]
 80094d2:	4319      	orrs	r1, r3
 80094d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d6:	d10d      	bne.n	80094f4 <_dtoa_r+0xa44>
 80094d8:	2b39      	cmp	r3, #57	@ 0x39
 80094da:	d027      	beq.n	800952c <_dtoa_r+0xa7c>
 80094dc:	9a04      	ldr	r2, [sp, #16]
 80094de:	2a00      	cmp	r2, #0
 80094e0:	dd01      	ble.n	80094e6 <_dtoa_r+0xa36>
 80094e2:	9b03      	ldr	r3, [sp, #12]
 80094e4:	3331      	adds	r3, #49	@ 0x31
 80094e6:	f88b 3000 	strb.w	r3, [fp]
 80094ea:	e52e      	b.n	8008f4a <_dtoa_r+0x49a>
 80094ec:	4628      	mov	r0, r5
 80094ee:	e7b9      	b.n	8009464 <_dtoa_r+0x9b4>
 80094f0:	2201      	movs	r2, #1
 80094f2:	e7e2      	b.n	80094ba <_dtoa_r+0xa0a>
 80094f4:	9904      	ldr	r1, [sp, #16]
 80094f6:	2900      	cmp	r1, #0
 80094f8:	db04      	blt.n	8009504 <_dtoa_r+0xa54>
 80094fa:	9807      	ldr	r0, [sp, #28]
 80094fc:	4301      	orrs	r1, r0
 80094fe:	9806      	ldr	r0, [sp, #24]
 8009500:	4301      	orrs	r1, r0
 8009502:	d120      	bne.n	8009546 <_dtoa_r+0xa96>
 8009504:	2a00      	cmp	r2, #0
 8009506:	ddee      	ble.n	80094e6 <_dtoa_r+0xa36>
 8009508:	9902      	ldr	r1, [sp, #8]
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	2201      	movs	r2, #1
 800950e:	4648      	mov	r0, r9
 8009510:	f000 faee 	bl	8009af0 <__lshift>
 8009514:	4621      	mov	r1, r4
 8009516:	9002      	str	r0, [sp, #8]
 8009518:	f000 fb56 	bl	8009bc8 <__mcmp>
 800951c:	2800      	cmp	r0, #0
 800951e:	9b00      	ldr	r3, [sp, #0]
 8009520:	dc02      	bgt.n	8009528 <_dtoa_r+0xa78>
 8009522:	d1e0      	bne.n	80094e6 <_dtoa_r+0xa36>
 8009524:	07da      	lsls	r2, r3, #31
 8009526:	d5de      	bpl.n	80094e6 <_dtoa_r+0xa36>
 8009528:	2b39      	cmp	r3, #57	@ 0x39
 800952a:	d1da      	bne.n	80094e2 <_dtoa_r+0xa32>
 800952c:	2339      	movs	r3, #57	@ 0x39
 800952e:	f88b 3000 	strb.w	r3, [fp]
 8009532:	4633      	mov	r3, r6
 8009534:	461e      	mov	r6, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800953c:	2a39      	cmp	r2, #57	@ 0x39
 800953e:	d04e      	beq.n	80095de <_dtoa_r+0xb2e>
 8009540:	3201      	adds	r2, #1
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	e501      	b.n	8008f4a <_dtoa_r+0x49a>
 8009546:	2a00      	cmp	r2, #0
 8009548:	dd03      	ble.n	8009552 <_dtoa_r+0xaa2>
 800954a:	2b39      	cmp	r3, #57	@ 0x39
 800954c:	d0ee      	beq.n	800952c <_dtoa_r+0xa7c>
 800954e:	3301      	adds	r3, #1
 8009550:	e7c9      	b.n	80094e6 <_dtoa_r+0xa36>
 8009552:	9a00      	ldr	r2, [sp, #0]
 8009554:	9908      	ldr	r1, [sp, #32]
 8009556:	f802 3c01 	strb.w	r3, [r2, #-1]
 800955a:	428a      	cmp	r2, r1
 800955c:	d028      	beq.n	80095b0 <_dtoa_r+0xb00>
 800955e:	9902      	ldr	r1, [sp, #8]
 8009560:	2300      	movs	r3, #0
 8009562:	220a      	movs	r2, #10
 8009564:	4648      	mov	r0, r9
 8009566:	f000 f91f 	bl	80097a8 <__multadd>
 800956a:	42af      	cmp	r7, r5
 800956c:	9002      	str	r0, [sp, #8]
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	f04f 020a 	mov.w	r2, #10
 8009576:	4639      	mov	r1, r7
 8009578:	4648      	mov	r0, r9
 800957a:	d107      	bne.n	800958c <_dtoa_r+0xadc>
 800957c:	f000 f914 	bl	80097a8 <__multadd>
 8009580:	4607      	mov	r7, r0
 8009582:	4605      	mov	r5, r0
 8009584:	9b00      	ldr	r3, [sp, #0]
 8009586:	3301      	adds	r3, #1
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	e777      	b.n	800947c <_dtoa_r+0x9cc>
 800958c:	f000 f90c 	bl	80097a8 <__multadd>
 8009590:	4629      	mov	r1, r5
 8009592:	4607      	mov	r7, r0
 8009594:	2300      	movs	r3, #0
 8009596:	220a      	movs	r2, #10
 8009598:	4648      	mov	r0, r9
 800959a:	f000 f905 	bl	80097a8 <__multadd>
 800959e:	4605      	mov	r5, r0
 80095a0:	e7f0      	b.n	8009584 <_dtoa_r+0xad4>
 80095a2:	f1bb 0f00 	cmp.w	fp, #0
 80095a6:	bfcc      	ite	gt
 80095a8:	465e      	movgt	r6, fp
 80095aa:	2601      	movle	r6, #1
 80095ac:	4456      	add	r6, sl
 80095ae:	2700      	movs	r7, #0
 80095b0:	9902      	ldr	r1, [sp, #8]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	2201      	movs	r2, #1
 80095b6:	4648      	mov	r0, r9
 80095b8:	f000 fa9a 	bl	8009af0 <__lshift>
 80095bc:	4621      	mov	r1, r4
 80095be:	9002      	str	r0, [sp, #8]
 80095c0:	f000 fb02 	bl	8009bc8 <__mcmp>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	dcb4      	bgt.n	8009532 <_dtoa_r+0xa82>
 80095c8:	d102      	bne.n	80095d0 <_dtoa_r+0xb20>
 80095ca:	9b00      	ldr	r3, [sp, #0]
 80095cc:	07db      	lsls	r3, r3, #31
 80095ce:	d4b0      	bmi.n	8009532 <_dtoa_r+0xa82>
 80095d0:	4633      	mov	r3, r6
 80095d2:	461e      	mov	r6, r3
 80095d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095d8:	2a30      	cmp	r2, #48	@ 0x30
 80095da:	d0fa      	beq.n	80095d2 <_dtoa_r+0xb22>
 80095dc:	e4b5      	b.n	8008f4a <_dtoa_r+0x49a>
 80095de:	459a      	cmp	sl, r3
 80095e0:	d1a8      	bne.n	8009534 <_dtoa_r+0xa84>
 80095e2:	2331      	movs	r3, #49	@ 0x31
 80095e4:	f108 0801 	add.w	r8, r8, #1
 80095e8:	f88a 3000 	strb.w	r3, [sl]
 80095ec:	e4ad      	b.n	8008f4a <_dtoa_r+0x49a>
 80095ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800964c <_dtoa_r+0xb9c>
 80095f4:	b11b      	cbz	r3, 80095fe <_dtoa_r+0xb4e>
 80095f6:	f10a 0308 	add.w	r3, sl, #8
 80095fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	4650      	mov	r0, sl
 8009600:	b017      	add	sp, #92	@ 0x5c
 8009602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009606:	9b07      	ldr	r3, [sp, #28]
 8009608:	2b01      	cmp	r3, #1
 800960a:	f77f ae2e 	ble.w	800926a <_dtoa_r+0x7ba>
 800960e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009610:	9308      	str	r3, [sp, #32]
 8009612:	2001      	movs	r0, #1
 8009614:	e64d      	b.n	80092b2 <_dtoa_r+0x802>
 8009616:	f1bb 0f00 	cmp.w	fp, #0
 800961a:	f77f aed9 	ble.w	80093d0 <_dtoa_r+0x920>
 800961e:	4656      	mov	r6, sl
 8009620:	9802      	ldr	r0, [sp, #8]
 8009622:	4621      	mov	r1, r4
 8009624:	f7ff f9b9 	bl	800899a <quorem>
 8009628:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800962c:	f806 3b01 	strb.w	r3, [r6], #1
 8009630:	eba6 020a 	sub.w	r2, r6, sl
 8009634:	4593      	cmp	fp, r2
 8009636:	ddb4      	ble.n	80095a2 <_dtoa_r+0xaf2>
 8009638:	9902      	ldr	r1, [sp, #8]
 800963a:	2300      	movs	r3, #0
 800963c:	220a      	movs	r2, #10
 800963e:	4648      	mov	r0, r9
 8009640:	f000 f8b2 	bl	80097a8 <__multadd>
 8009644:	9002      	str	r0, [sp, #8]
 8009646:	e7eb      	b.n	8009620 <_dtoa_r+0xb70>
 8009648:	0800a665 	.word	0x0800a665
 800964c:	0800a5e9 	.word	0x0800a5e9

08009650 <_free_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4605      	mov	r5, r0
 8009654:	2900      	cmp	r1, #0
 8009656:	d041      	beq.n	80096dc <_free_r+0x8c>
 8009658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800965c:	1f0c      	subs	r4, r1, #4
 800965e:	2b00      	cmp	r3, #0
 8009660:	bfb8      	it	lt
 8009662:	18e4      	addlt	r4, r4, r3
 8009664:	f7fe fa1a 	bl	8007a9c <__malloc_lock>
 8009668:	4a1d      	ldr	r2, [pc, #116]	@ (80096e0 <_free_r+0x90>)
 800966a:	6813      	ldr	r3, [r2, #0]
 800966c:	b933      	cbnz	r3, 800967c <_free_r+0x2c>
 800966e:	6063      	str	r3, [r4, #4]
 8009670:	6014      	str	r4, [r2, #0]
 8009672:	4628      	mov	r0, r5
 8009674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009678:	f7fe ba16 	b.w	8007aa8 <__malloc_unlock>
 800967c:	42a3      	cmp	r3, r4
 800967e:	d908      	bls.n	8009692 <_free_r+0x42>
 8009680:	6820      	ldr	r0, [r4, #0]
 8009682:	1821      	adds	r1, r4, r0
 8009684:	428b      	cmp	r3, r1
 8009686:	bf01      	itttt	eq
 8009688:	6819      	ldreq	r1, [r3, #0]
 800968a:	685b      	ldreq	r3, [r3, #4]
 800968c:	1809      	addeq	r1, r1, r0
 800968e:	6021      	streq	r1, [r4, #0]
 8009690:	e7ed      	b.n	800966e <_free_r+0x1e>
 8009692:	461a      	mov	r2, r3
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	b10b      	cbz	r3, 800969c <_free_r+0x4c>
 8009698:	42a3      	cmp	r3, r4
 800969a:	d9fa      	bls.n	8009692 <_free_r+0x42>
 800969c:	6811      	ldr	r1, [r2, #0]
 800969e:	1850      	adds	r0, r2, r1
 80096a0:	42a0      	cmp	r0, r4
 80096a2:	d10b      	bne.n	80096bc <_free_r+0x6c>
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	4401      	add	r1, r0
 80096a8:	1850      	adds	r0, r2, r1
 80096aa:	4283      	cmp	r3, r0
 80096ac:	6011      	str	r1, [r2, #0]
 80096ae:	d1e0      	bne.n	8009672 <_free_r+0x22>
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	6053      	str	r3, [r2, #4]
 80096b6:	4408      	add	r0, r1
 80096b8:	6010      	str	r0, [r2, #0]
 80096ba:	e7da      	b.n	8009672 <_free_r+0x22>
 80096bc:	d902      	bls.n	80096c4 <_free_r+0x74>
 80096be:	230c      	movs	r3, #12
 80096c0:	602b      	str	r3, [r5, #0]
 80096c2:	e7d6      	b.n	8009672 <_free_r+0x22>
 80096c4:	6820      	ldr	r0, [r4, #0]
 80096c6:	1821      	adds	r1, r4, r0
 80096c8:	428b      	cmp	r3, r1
 80096ca:	bf04      	itt	eq
 80096cc:	6819      	ldreq	r1, [r3, #0]
 80096ce:	685b      	ldreq	r3, [r3, #4]
 80096d0:	6063      	str	r3, [r4, #4]
 80096d2:	bf04      	itt	eq
 80096d4:	1809      	addeq	r1, r1, r0
 80096d6:	6021      	streq	r1, [r4, #0]
 80096d8:	6054      	str	r4, [r2, #4]
 80096da:	e7ca      	b.n	8009672 <_free_r+0x22>
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop
 80096e0:	200004b4 	.word	0x200004b4

080096e4 <_Balloc>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	69c6      	ldr	r6, [r0, #28]
 80096e8:	4604      	mov	r4, r0
 80096ea:	460d      	mov	r5, r1
 80096ec:	b976      	cbnz	r6, 800970c <_Balloc+0x28>
 80096ee:	2010      	movs	r0, #16
 80096f0:	f7fe f922 	bl	8007938 <malloc>
 80096f4:	4602      	mov	r2, r0
 80096f6:	61e0      	str	r0, [r4, #28]
 80096f8:	b920      	cbnz	r0, 8009704 <_Balloc+0x20>
 80096fa:	4b18      	ldr	r3, [pc, #96]	@ (800975c <_Balloc+0x78>)
 80096fc:	4818      	ldr	r0, [pc, #96]	@ (8009760 <_Balloc+0x7c>)
 80096fe:	216b      	movs	r1, #107	@ 0x6b
 8009700:	f000 fdea 	bl	800a2d8 <__assert_func>
 8009704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009708:	6006      	str	r6, [r0, #0]
 800970a:	60c6      	str	r6, [r0, #12]
 800970c:	69e6      	ldr	r6, [r4, #28]
 800970e:	68f3      	ldr	r3, [r6, #12]
 8009710:	b183      	cbz	r3, 8009734 <_Balloc+0x50>
 8009712:	69e3      	ldr	r3, [r4, #28]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800971a:	b9b8      	cbnz	r0, 800974c <_Balloc+0x68>
 800971c:	2101      	movs	r1, #1
 800971e:	fa01 f605 	lsl.w	r6, r1, r5
 8009722:	1d72      	adds	r2, r6, #5
 8009724:	0092      	lsls	r2, r2, #2
 8009726:	4620      	mov	r0, r4
 8009728:	f000 fdf4 	bl	800a314 <_calloc_r>
 800972c:	b160      	cbz	r0, 8009748 <_Balloc+0x64>
 800972e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009732:	e00e      	b.n	8009752 <_Balloc+0x6e>
 8009734:	2221      	movs	r2, #33	@ 0x21
 8009736:	2104      	movs	r1, #4
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fdeb 	bl	800a314 <_calloc_r>
 800973e:	69e3      	ldr	r3, [r4, #28]
 8009740:	60f0      	str	r0, [r6, #12]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e4      	bne.n	8009712 <_Balloc+0x2e>
 8009748:	2000      	movs	r0, #0
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	6802      	ldr	r2, [r0, #0]
 800974e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009752:	2300      	movs	r3, #0
 8009754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009758:	e7f7      	b.n	800974a <_Balloc+0x66>
 800975a:	bf00      	nop
 800975c:	0800a5f6 	.word	0x0800a5f6
 8009760:	0800a676 	.word	0x0800a676

08009764 <_Bfree>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	69c6      	ldr	r6, [r0, #28]
 8009768:	4605      	mov	r5, r0
 800976a:	460c      	mov	r4, r1
 800976c:	b976      	cbnz	r6, 800978c <_Bfree+0x28>
 800976e:	2010      	movs	r0, #16
 8009770:	f7fe f8e2 	bl	8007938 <malloc>
 8009774:	4602      	mov	r2, r0
 8009776:	61e8      	str	r0, [r5, #28]
 8009778:	b920      	cbnz	r0, 8009784 <_Bfree+0x20>
 800977a:	4b09      	ldr	r3, [pc, #36]	@ (80097a0 <_Bfree+0x3c>)
 800977c:	4809      	ldr	r0, [pc, #36]	@ (80097a4 <_Bfree+0x40>)
 800977e:	218f      	movs	r1, #143	@ 0x8f
 8009780:	f000 fdaa 	bl	800a2d8 <__assert_func>
 8009784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009788:	6006      	str	r6, [r0, #0]
 800978a:	60c6      	str	r6, [r0, #12]
 800978c:	b13c      	cbz	r4, 800979e <_Bfree+0x3a>
 800978e:	69eb      	ldr	r3, [r5, #28]
 8009790:	6862      	ldr	r2, [r4, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009798:	6021      	str	r1, [r4, #0]
 800979a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	0800a5f6 	.word	0x0800a5f6
 80097a4:	0800a676 	.word	0x0800a676

080097a8 <__multadd>:
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	690d      	ldr	r5, [r1, #16]
 80097ae:	4607      	mov	r7, r0
 80097b0:	460c      	mov	r4, r1
 80097b2:	461e      	mov	r6, r3
 80097b4:	f101 0c14 	add.w	ip, r1, #20
 80097b8:	2000      	movs	r0, #0
 80097ba:	f8dc 3000 	ldr.w	r3, [ip]
 80097be:	b299      	uxth	r1, r3
 80097c0:	fb02 6101 	mla	r1, r2, r1, r6
 80097c4:	0c1e      	lsrs	r6, r3, #16
 80097c6:	0c0b      	lsrs	r3, r1, #16
 80097c8:	fb02 3306 	mla	r3, r2, r6, r3
 80097cc:	b289      	uxth	r1, r1
 80097ce:	3001      	adds	r0, #1
 80097d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097d4:	4285      	cmp	r5, r0
 80097d6:	f84c 1b04 	str.w	r1, [ip], #4
 80097da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097de:	dcec      	bgt.n	80097ba <__multadd+0x12>
 80097e0:	b30e      	cbz	r6, 8009826 <__multadd+0x7e>
 80097e2:	68a3      	ldr	r3, [r4, #8]
 80097e4:	42ab      	cmp	r3, r5
 80097e6:	dc19      	bgt.n	800981c <__multadd+0x74>
 80097e8:	6861      	ldr	r1, [r4, #4]
 80097ea:	4638      	mov	r0, r7
 80097ec:	3101      	adds	r1, #1
 80097ee:	f7ff ff79 	bl	80096e4 <_Balloc>
 80097f2:	4680      	mov	r8, r0
 80097f4:	b928      	cbnz	r0, 8009802 <__multadd+0x5a>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b0c      	ldr	r3, [pc, #48]	@ (800982c <__multadd+0x84>)
 80097fa:	480d      	ldr	r0, [pc, #52]	@ (8009830 <__multadd+0x88>)
 80097fc:	21ba      	movs	r1, #186	@ 0xba
 80097fe:	f000 fd6b 	bl	800a2d8 <__assert_func>
 8009802:	6922      	ldr	r2, [r4, #16]
 8009804:	3202      	adds	r2, #2
 8009806:	f104 010c 	add.w	r1, r4, #12
 800980a:	0092      	lsls	r2, r2, #2
 800980c:	300c      	adds	r0, #12
 800980e:	f000 fd55 	bl	800a2bc <memcpy>
 8009812:	4621      	mov	r1, r4
 8009814:	4638      	mov	r0, r7
 8009816:	f7ff ffa5 	bl	8009764 <_Bfree>
 800981a:	4644      	mov	r4, r8
 800981c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009820:	3501      	adds	r5, #1
 8009822:	615e      	str	r6, [r3, #20]
 8009824:	6125      	str	r5, [r4, #16]
 8009826:	4620      	mov	r0, r4
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982c:	0800a665 	.word	0x0800a665
 8009830:	0800a676 	.word	0x0800a676

08009834 <__hi0bits>:
 8009834:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009838:	4603      	mov	r3, r0
 800983a:	bf36      	itet	cc
 800983c:	0403      	lslcc	r3, r0, #16
 800983e:	2000      	movcs	r0, #0
 8009840:	2010      	movcc	r0, #16
 8009842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009846:	bf3c      	itt	cc
 8009848:	021b      	lslcc	r3, r3, #8
 800984a:	3008      	addcc	r0, #8
 800984c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009850:	bf3c      	itt	cc
 8009852:	011b      	lslcc	r3, r3, #4
 8009854:	3004      	addcc	r0, #4
 8009856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800985a:	bf3c      	itt	cc
 800985c:	009b      	lslcc	r3, r3, #2
 800985e:	3002      	addcc	r0, #2
 8009860:	2b00      	cmp	r3, #0
 8009862:	db05      	blt.n	8009870 <__hi0bits+0x3c>
 8009864:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009868:	f100 0001 	add.w	r0, r0, #1
 800986c:	bf08      	it	eq
 800986e:	2020      	moveq	r0, #32
 8009870:	4770      	bx	lr

08009872 <__lo0bits>:
 8009872:	6803      	ldr	r3, [r0, #0]
 8009874:	4602      	mov	r2, r0
 8009876:	f013 0007 	ands.w	r0, r3, #7
 800987a:	d00b      	beq.n	8009894 <__lo0bits+0x22>
 800987c:	07d9      	lsls	r1, r3, #31
 800987e:	d421      	bmi.n	80098c4 <__lo0bits+0x52>
 8009880:	0798      	lsls	r0, r3, #30
 8009882:	bf49      	itett	mi
 8009884:	085b      	lsrmi	r3, r3, #1
 8009886:	089b      	lsrpl	r3, r3, #2
 8009888:	2001      	movmi	r0, #1
 800988a:	6013      	strmi	r3, [r2, #0]
 800988c:	bf5c      	itt	pl
 800988e:	6013      	strpl	r3, [r2, #0]
 8009890:	2002      	movpl	r0, #2
 8009892:	4770      	bx	lr
 8009894:	b299      	uxth	r1, r3
 8009896:	b909      	cbnz	r1, 800989c <__lo0bits+0x2a>
 8009898:	0c1b      	lsrs	r3, r3, #16
 800989a:	2010      	movs	r0, #16
 800989c:	b2d9      	uxtb	r1, r3
 800989e:	b909      	cbnz	r1, 80098a4 <__lo0bits+0x32>
 80098a0:	3008      	adds	r0, #8
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	0719      	lsls	r1, r3, #28
 80098a6:	bf04      	itt	eq
 80098a8:	091b      	lsreq	r3, r3, #4
 80098aa:	3004      	addeq	r0, #4
 80098ac:	0799      	lsls	r1, r3, #30
 80098ae:	bf04      	itt	eq
 80098b0:	089b      	lsreq	r3, r3, #2
 80098b2:	3002      	addeq	r0, #2
 80098b4:	07d9      	lsls	r1, r3, #31
 80098b6:	d403      	bmi.n	80098c0 <__lo0bits+0x4e>
 80098b8:	085b      	lsrs	r3, r3, #1
 80098ba:	f100 0001 	add.w	r0, r0, #1
 80098be:	d003      	beq.n	80098c8 <__lo0bits+0x56>
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	4770      	bx	lr
 80098c4:	2000      	movs	r0, #0
 80098c6:	4770      	bx	lr
 80098c8:	2020      	movs	r0, #32
 80098ca:	4770      	bx	lr

080098cc <__i2b>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	460c      	mov	r4, r1
 80098d0:	2101      	movs	r1, #1
 80098d2:	f7ff ff07 	bl	80096e4 <_Balloc>
 80098d6:	4602      	mov	r2, r0
 80098d8:	b928      	cbnz	r0, 80098e6 <__i2b+0x1a>
 80098da:	4b05      	ldr	r3, [pc, #20]	@ (80098f0 <__i2b+0x24>)
 80098dc:	4805      	ldr	r0, [pc, #20]	@ (80098f4 <__i2b+0x28>)
 80098de:	f240 1145 	movw	r1, #325	@ 0x145
 80098e2:	f000 fcf9 	bl	800a2d8 <__assert_func>
 80098e6:	2301      	movs	r3, #1
 80098e8:	6144      	str	r4, [r0, #20]
 80098ea:	6103      	str	r3, [r0, #16]
 80098ec:	bd10      	pop	{r4, pc}
 80098ee:	bf00      	nop
 80098f0:	0800a665 	.word	0x0800a665
 80098f4:	0800a676 	.word	0x0800a676

080098f8 <__multiply>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	4617      	mov	r7, r2
 80098fe:	690a      	ldr	r2, [r1, #16]
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	429a      	cmp	r2, r3
 8009904:	bfa8      	it	ge
 8009906:	463b      	movge	r3, r7
 8009908:	4689      	mov	r9, r1
 800990a:	bfa4      	itt	ge
 800990c:	460f      	movge	r7, r1
 800990e:	4699      	movge	r9, r3
 8009910:	693d      	ldr	r5, [r7, #16]
 8009912:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	eb05 060a 	add.w	r6, r5, sl
 800991e:	42b3      	cmp	r3, r6
 8009920:	b085      	sub	sp, #20
 8009922:	bfb8      	it	lt
 8009924:	3101      	addlt	r1, #1
 8009926:	f7ff fedd 	bl	80096e4 <_Balloc>
 800992a:	b930      	cbnz	r0, 800993a <__multiply+0x42>
 800992c:	4602      	mov	r2, r0
 800992e:	4b41      	ldr	r3, [pc, #260]	@ (8009a34 <__multiply+0x13c>)
 8009930:	4841      	ldr	r0, [pc, #260]	@ (8009a38 <__multiply+0x140>)
 8009932:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009936:	f000 fccf 	bl	800a2d8 <__assert_func>
 800993a:	f100 0414 	add.w	r4, r0, #20
 800993e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009942:	4623      	mov	r3, r4
 8009944:	2200      	movs	r2, #0
 8009946:	4573      	cmp	r3, lr
 8009948:	d320      	bcc.n	800998c <__multiply+0x94>
 800994a:	f107 0814 	add.w	r8, r7, #20
 800994e:	f109 0114 	add.w	r1, r9, #20
 8009952:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009956:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800995a:	9302      	str	r3, [sp, #8]
 800995c:	1beb      	subs	r3, r5, r7
 800995e:	3b15      	subs	r3, #21
 8009960:	f023 0303 	bic.w	r3, r3, #3
 8009964:	3304      	adds	r3, #4
 8009966:	3715      	adds	r7, #21
 8009968:	42bd      	cmp	r5, r7
 800996a:	bf38      	it	cc
 800996c:	2304      	movcc	r3, #4
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	9b02      	ldr	r3, [sp, #8]
 8009972:	9103      	str	r1, [sp, #12]
 8009974:	428b      	cmp	r3, r1
 8009976:	d80c      	bhi.n	8009992 <__multiply+0x9a>
 8009978:	2e00      	cmp	r6, #0
 800997a:	dd03      	ble.n	8009984 <__multiply+0x8c>
 800997c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009980:	2b00      	cmp	r3, #0
 8009982:	d055      	beq.n	8009a30 <__multiply+0x138>
 8009984:	6106      	str	r6, [r0, #16]
 8009986:	b005      	add	sp, #20
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998c:	f843 2b04 	str.w	r2, [r3], #4
 8009990:	e7d9      	b.n	8009946 <__multiply+0x4e>
 8009992:	f8b1 a000 	ldrh.w	sl, [r1]
 8009996:	f1ba 0f00 	cmp.w	sl, #0
 800999a:	d01f      	beq.n	80099dc <__multiply+0xe4>
 800999c:	46c4      	mov	ip, r8
 800999e:	46a1      	mov	r9, r4
 80099a0:	2700      	movs	r7, #0
 80099a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099a6:	f8d9 3000 	ldr.w	r3, [r9]
 80099aa:	fa1f fb82 	uxth.w	fp, r2
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80099b4:	443b      	add	r3, r7
 80099b6:	f8d9 7000 	ldr.w	r7, [r9]
 80099ba:	0c12      	lsrs	r2, r2, #16
 80099bc:	0c3f      	lsrs	r7, r7, #16
 80099be:	fb0a 7202 	mla	r2, sl, r2, r7
 80099c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099cc:	4565      	cmp	r5, ip
 80099ce:	f849 3b04 	str.w	r3, [r9], #4
 80099d2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80099d6:	d8e4      	bhi.n	80099a2 <__multiply+0xaa>
 80099d8:	9b01      	ldr	r3, [sp, #4]
 80099da:	50e7      	str	r7, [r4, r3]
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80099e2:	3104      	adds	r1, #4
 80099e4:	f1b9 0f00 	cmp.w	r9, #0
 80099e8:	d020      	beq.n	8009a2c <__multiply+0x134>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	4647      	mov	r7, r8
 80099ee:	46a4      	mov	ip, r4
 80099f0:	f04f 0a00 	mov.w	sl, #0
 80099f4:	f8b7 b000 	ldrh.w	fp, [r7]
 80099f8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80099fc:	fb09 220b 	mla	r2, r9, fp, r2
 8009a00:	4452      	add	r2, sl
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a08:	f84c 3b04 	str.w	r3, [ip], #4
 8009a0c:	f857 3b04 	ldr.w	r3, [r7], #4
 8009a10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a14:	f8bc 3000 	ldrh.w	r3, [ip]
 8009a18:	fb09 330a 	mla	r3, r9, sl, r3
 8009a1c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009a20:	42bd      	cmp	r5, r7
 8009a22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a26:	d8e5      	bhi.n	80099f4 <__multiply+0xfc>
 8009a28:	9a01      	ldr	r2, [sp, #4]
 8009a2a:	50a3      	str	r3, [r4, r2]
 8009a2c:	3404      	adds	r4, #4
 8009a2e:	e79f      	b.n	8009970 <__multiply+0x78>
 8009a30:	3e01      	subs	r6, #1
 8009a32:	e7a1      	b.n	8009978 <__multiply+0x80>
 8009a34:	0800a665 	.word	0x0800a665
 8009a38:	0800a676 	.word	0x0800a676

08009a3c <__pow5mult>:
 8009a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a40:	4615      	mov	r5, r2
 8009a42:	f012 0203 	ands.w	r2, r2, #3
 8009a46:	4607      	mov	r7, r0
 8009a48:	460e      	mov	r6, r1
 8009a4a:	d007      	beq.n	8009a5c <__pow5mult+0x20>
 8009a4c:	4c25      	ldr	r4, [pc, #148]	@ (8009ae4 <__pow5mult+0xa8>)
 8009a4e:	3a01      	subs	r2, #1
 8009a50:	2300      	movs	r3, #0
 8009a52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a56:	f7ff fea7 	bl	80097a8 <__multadd>
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	10ad      	asrs	r5, r5, #2
 8009a5e:	d03d      	beq.n	8009adc <__pow5mult+0xa0>
 8009a60:	69fc      	ldr	r4, [r7, #28]
 8009a62:	b97c      	cbnz	r4, 8009a84 <__pow5mult+0x48>
 8009a64:	2010      	movs	r0, #16
 8009a66:	f7fd ff67 	bl	8007938 <malloc>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	61f8      	str	r0, [r7, #28]
 8009a6e:	b928      	cbnz	r0, 8009a7c <__pow5mult+0x40>
 8009a70:	4b1d      	ldr	r3, [pc, #116]	@ (8009ae8 <__pow5mult+0xac>)
 8009a72:	481e      	ldr	r0, [pc, #120]	@ (8009aec <__pow5mult+0xb0>)
 8009a74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a78:	f000 fc2e 	bl	800a2d8 <__assert_func>
 8009a7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a80:	6004      	str	r4, [r0, #0]
 8009a82:	60c4      	str	r4, [r0, #12]
 8009a84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a8c:	b94c      	cbnz	r4, 8009aa2 <__pow5mult+0x66>
 8009a8e:	f240 2171 	movw	r1, #625	@ 0x271
 8009a92:	4638      	mov	r0, r7
 8009a94:	f7ff ff1a 	bl	80098cc <__i2b>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	6003      	str	r3, [r0, #0]
 8009aa2:	f04f 0900 	mov.w	r9, #0
 8009aa6:	07eb      	lsls	r3, r5, #31
 8009aa8:	d50a      	bpl.n	8009ac0 <__pow5mult+0x84>
 8009aaa:	4631      	mov	r1, r6
 8009aac:	4622      	mov	r2, r4
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f7ff ff22 	bl	80098f8 <__multiply>
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	4638      	mov	r0, r7
 8009aba:	f7ff fe53 	bl	8009764 <_Bfree>
 8009abe:	4646      	mov	r6, r8
 8009ac0:	106d      	asrs	r5, r5, #1
 8009ac2:	d00b      	beq.n	8009adc <__pow5mult+0xa0>
 8009ac4:	6820      	ldr	r0, [r4, #0]
 8009ac6:	b938      	cbnz	r0, 8009ad8 <__pow5mult+0x9c>
 8009ac8:	4622      	mov	r2, r4
 8009aca:	4621      	mov	r1, r4
 8009acc:	4638      	mov	r0, r7
 8009ace:	f7ff ff13 	bl	80098f8 <__multiply>
 8009ad2:	6020      	str	r0, [r4, #0]
 8009ad4:	f8c0 9000 	str.w	r9, [r0]
 8009ad8:	4604      	mov	r4, r0
 8009ada:	e7e4      	b.n	8009aa6 <__pow5mult+0x6a>
 8009adc:	4630      	mov	r0, r6
 8009ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800a728 	.word	0x0800a728
 8009ae8:	0800a5f6 	.word	0x0800a5f6
 8009aec:	0800a676 	.word	0x0800a676

08009af0 <__lshift>:
 8009af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af4:	460c      	mov	r4, r1
 8009af6:	6849      	ldr	r1, [r1, #4]
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009afe:	68a3      	ldr	r3, [r4, #8]
 8009b00:	4607      	mov	r7, r0
 8009b02:	4691      	mov	r9, r2
 8009b04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b08:	f108 0601 	add.w	r6, r8, #1
 8009b0c:	42b3      	cmp	r3, r6
 8009b0e:	db0b      	blt.n	8009b28 <__lshift+0x38>
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff fde7 	bl	80096e4 <_Balloc>
 8009b16:	4605      	mov	r5, r0
 8009b18:	b948      	cbnz	r0, 8009b2e <__lshift+0x3e>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	4b28      	ldr	r3, [pc, #160]	@ (8009bc0 <__lshift+0xd0>)
 8009b1e:	4829      	ldr	r0, [pc, #164]	@ (8009bc4 <__lshift+0xd4>)
 8009b20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009b24:	f000 fbd8 	bl	800a2d8 <__assert_func>
 8009b28:	3101      	adds	r1, #1
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	e7ee      	b.n	8009b0c <__lshift+0x1c>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f100 0114 	add.w	r1, r0, #20
 8009b34:	f100 0210 	add.w	r2, r0, #16
 8009b38:	4618      	mov	r0, r3
 8009b3a:	4553      	cmp	r3, sl
 8009b3c:	db33      	blt.n	8009ba6 <__lshift+0xb6>
 8009b3e:	6920      	ldr	r0, [r4, #16]
 8009b40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b44:	f104 0314 	add.w	r3, r4, #20
 8009b48:	f019 091f 	ands.w	r9, r9, #31
 8009b4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b54:	d02b      	beq.n	8009bae <__lshift+0xbe>
 8009b56:	f1c9 0e20 	rsb	lr, r9, #32
 8009b5a:	468a      	mov	sl, r1
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	fa00 f009 	lsl.w	r0, r0, r9
 8009b64:	4310      	orrs	r0, r2
 8009b66:	f84a 0b04 	str.w	r0, [sl], #4
 8009b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6e:	459c      	cmp	ip, r3
 8009b70:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b74:	d8f3      	bhi.n	8009b5e <__lshift+0x6e>
 8009b76:	ebac 0304 	sub.w	r3, ip, r4
 8009b7a:	3b15      	subs	r3, #21
 8009b7c:	f023 0303 	bic.w	r3, r3, #3
 8009b80:	3304      	adds	r3, #4
 8009b82:	f104 0015 	add.w	r0, r4, #21
 8009b86:	4560      	cmp	r0, ip
 8009b88:	bf88      	it	hi
 8009b8a:	2304      	movhi	r3, #4
 8009b8c:	50ca      	str	r2, [r1, r3]
 8009b8e:	b10a      	cbz	r2, 8009b94 <__lshift+0xa4>
 8009b90:	f108 0602 	add.w	r6, r8, #2
 8009b94:	3e01      	subs	r6, #1
 8009b96:	4638      	mov	r0, r7
 8009b98:	612e      	str	r6, [r5, #16]
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	f7ff fde2 	bl	8009764 <_Bfree>
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009baa:	3301      	adds	r3, #1
 8009bac:	e7c5      	b.n	8009b3a <__lshift+0x4a>
 8009bae:	3904      	subs	r1, #4
 8009bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bb8:	459c      	cmp	ip, r3
 8009bba:	d8f9      	bhi.n	8009bb0 <__lshift+0xc0>
 8009bbc:	e7ea      	b.n	8009b94 <__lshift+0xa4>
 8009bbe:	bf00      	nop
 8009bc0:	0800a665 	.word	0x0800a665
 8009bc4:	0800a676 	.word	0x0800a676

08009bc8 <__mcmp>:
 8009bc8:	690a      	ldr	r2, [r1, #16]
 8009bca:	4603      	mov	r3, r0
 8009bcc:	6900      	ldr	r0, [r0, #16]
 8009bce:	1a80      	subs	r0, r0, r2
 8009bd0:	b530      	push	{r4, r5, lr}
 8009bd2:	d10e      	bne.n	8009bf2 <__mcmp+0x2a>
 8009bd4:	3314      	adds	r3, #20
 8009bd6:	3114      	adds	r1, #20
 8009bd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009bdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009be0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009be4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009be8:	4295      	cmp	r5, r2
 8009bea:	d003      	beq.n	8009bf4 <__mcmp+0x2c>
 8009bec:	d205      	bcs.n	8009bfa <__mcmp+0x32>
 8009bee:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf2:	bd30      	pop	{r4, r5, pc}
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	d3f3      	bcc.n	8009be0 <__mcmp+0x18>
 8009bf8:	e7fb      	b.n	8009bf2 <__mcmp+0x2a>
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	e7f9      	b.n	8009bf2 <__mcmp+0x2a>
	...

08009c00 <__mdiff>:
 8009c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c04:	4689      	mov	r9, r1
 8009c06:	4606      	mov	r6, r0
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4648      	mov	r0, r9
 8009c0c:	4614      	mov	r4, r2
 8009c0e:	f7ff ffdb 	bl	8009bc8 <__mcmp>
 8009c12:	1e05      	subs	r5, r0, #0
 8009c14:	d112      	bne.n	8009c3c <__mdiff+0x3c>
 8009c16:	4629      	mov	r1, r5
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff fd63 	bl	80096e4 <_Balloc>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	b928      	cbnz	r0, 8009c2e <__mdiff+0x2e>
 8009c22:	4b3f      	ldr	r3, [pc, #252]	@ (8009d20 <__mdiff+0x120>)
 8009c24:	f240 2137 	movw	r1, #567	@ 0x237
 8009c28:	483e      	ldr	r0, [pc, #248]	@ (8009d24 <__mdiff+0x124>)
 8009c2a:	f000 fb55 	bl	800a2d8 <__assert_func>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c34:	4610      	mov	r0, r2
 8009c36:	b003      	add	sp, #12
 8009c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	bfbc      	itt	lt
 8009c3e:	464b      	movlt	r3, r9
 8009c40:	46a1      	movlt	r9, r4
 8009c42:	4630      	mov	r0, r6
 8009c44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c48:	bfba      	itte	lt
 8009c4a:	461c      	movlt	r4, r3
 8009c4c:	2501      	movlt	r5, #1
 8009c4e:	2500      	movge	r5, #0
 8009c50:	f7ff fd48 	bl	80096e4 <_Balloc>
 8009c54:	4602      	mov	r2, r0
 8009c56:	b918      	cbnz	r0, 8009c60 <__mdiff+0x60>
 8009c58:	4b31      	ldr	r3, [pc, #196]	@ (8009d20 <__mdiff+0x120>)
 8009c5a:	f240 2145 	movw	r1, #581	@ 0x245
 8009c5e:	e7e3      	b.n	8009c28 <__mdiff+0x28>
 8009c60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c64:	6926      	ldr	r6, [r4, #16]
 8009c66:	60c5      	str	r5, [r0, #12]
 8009c68:	f109 0310 	add.w	r3, r9, #16
 8009c6c:	f109 0514 	add.w	r5, r9, #20
 8009c70:	f104 0e14 	add.w	lr, r4, #20
 8009c74:	f100 0b14 	add.w	fp, r0, #20
 8009c78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	46d9      	mov	r9, fp
 8009c84:	f04f 0c00 	mov.w	ip, #0
 8009c88:	9b01      	ldr	r3, [sp, #4]
 8009c8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	fa1f f38a 	uxth.w	r3, sl
 8009c98:	4619      	mov	r1, r3
 8009c9a:	b283      	uxth	r3, r0
 8009c9c:	1acb      	subs	r3, r1, r3
 8009c9e:	0c00      	lsrs	r0, r0, #16
 8009ca0:	4463      	add	r3, ip
 8009ca2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ca6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009cb0:	4576      	cmp	r6, lr
 8009cb2:	f849 3b04 	str.w	r3, [r9], #4
 8009cb6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cba:	d8e5      	bhi.n	8009c88 <__mdiff+0x88>
 8009cbc:	1b33      	subs	r3, r6, r4
 8009cbe:	3b15      	subs	r3, #21
 8009cc0:	f023 0303 	bic.w	r3, r3, #3
 8009cc4:	3415      	adds	r4, #21
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	42a6      	cmp	r6, r4
 8009cca:	bf38      	it	cc
 8009ccc:	2304      	movcc	r3, #4
 8009cce:	441d      	add	r5, r3
 8009cd0:	445b      	add	r3, fp
 8009cd2:	461e      	mov	r6, r3
 8009cd4:	462c      	mov	r4, r5
 8009cd6:	4544      	cmp	r4, r8
 8009cd8:	d30e      	bcc.n	8009cf8 <__mdiff+0xf8>
 8009cda:	f108 0103 	add.w	r1, r8, #3
 8009cde:	1b49      	subs	r1, r1, r5
 8009ce0:	f021 0103 	bic.w	r1, r1, #3
 8009ce4:	3d03      	subs	r5, #3
 8009ce6:	45a8      	cmp	r8, r5
 8009ce8:	bf38      	it	cc
 8009cea:	2100      	movcc	r1, #0
 8009cec:	440b      	add	r3, r1
 8009cee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cf2:	b191      	cbz	r1, 8009d1a <__mdiff+0x11a>
 8009cf4:	6117      	str	r7, [r2, #16]
 8009cf6:	e79d      	b.n	8009c34 <__mdiff+0x34>
 8009cf8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009cfc:	46e6      	mov	lr, ip
 8009cfe:	0c08      	lsrs	r0, r1, #16
 8009d00:	fa1c fc81 	uxtah	ip, ip, r1
 8009d04:	4471      	add	r1, lr
 8009d06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009d0a:	b289      	uxth	r1, r1
 8009d0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d10:	f846 1b04 	str.w	r1, [r6], #4
 8009d14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d18:	e7dd      	b.n	8009cd6 <__mdiff+0xd6>
 8009d1a:	3f01      	subs	r7, #1
 8009d1c:	e7e7      	b.n	8009cee <__mdiff+0xee>
 8009d1e:	bf00      	nop
 8009d20:	0800a665 	.word	0x0800a665
 8009d24:	0800a676 	.word	0x0800a676

08009d28 <__d2b>:
 8009d28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d2c:	460f      	mov	r7, r1
 8009d2e:	2101      	movs	r1, #1
 8009d30:	ec59 8b10 	vmov	r8, r9, d0
 8009d34:	4616      	mov	r6, r2
 8009d36:	f7ff fcd5 	bl	80096e4 <_Balloc>
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	b930      	cbnz	r0, 8009d4c <__d2b+0x24>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	4b23      	ldr	r3, [pc, #140]	@ (8009dd0 <__d2b+0xa8>)
 8009d42:	4824      	ldr	r0, [pc, #144]	@ (8009dd4 <__d2b+0xac>)
 8009d44:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d48:	f000 fac6 	bl	800a2d8 <__assert_func>
 8009d4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d54:	b10d      	cbz	r5, 8009d5a <__d2b+0x32>
 8009d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	f1b8 0300 	subs.w	r3, r8, #0
 8009d60:	d023      	beq.n	8009daa <__d2b+0x82>
 8009d62:	4668      	mov	r0, sp
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	f7ff fd84 	bl	8009872 <__lo0bits>
 8009d6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d6e:	b1d0      	cbz	r0, 8009da6 <__d2b+0x7e>
 8009d70:	f1c0 0320 	rsb	r3, r0, #32
 8009d74:	fa02 f303 	lsl.w	r3, r2, r3
 8009d78:	430b      	orrs	r3, r1
 8009d7a:	40c2      	lsrs	r2, r0
 8009d7c:	6163      	str	r3, [r4, #20]
 8009d7e:	9201      	str	r2, [sp, #4]
 8009d80:	9b01      	ldr	r3, [sp, #4]
 8009d82:	61a3      	str	r3, [r4, #24]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	bf0c      	ite	eq
 8009d88:	2201      	moveq	r2, #1
 8009d8a:	2202      	movne	r2, #2
 8009d8c:	6122      	str	r2, [r4, #16]
 8009d8e:	b1a5      	cbz	r5, 8009dba <__d2b+0x92>
 8009d90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d94:	4405      	add	r5, r0
 8009d96:	603d      	str	r5, [r7, #0]
 8009d98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d9c:	6030      	str	r0, [r6, #0]
 8009d9e:	4620      	mov	r0, r4
 8009da0:	b003      	add	sp, #12
 8009da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009da6:	6161      	str	r1, [r4, #20]
 8009da8:	e7ea      	b.n	8009d80 <__d2b+0x58>
 8009daa:	a801      	add	r0, sp, #4
 8009dac:	f7ff fd61 	bl	8009872 <__lo0bits>
 8009db0:	9b01      	ldr	r3, [sp, #4]
 8009db2:	6163      	str	r3, [r4, #20]
 8009db4:	3020      	adds	r0, #32
 8009db6:	2201      	movs	r2, #1
 8009db8:	e7e8      	b.n	8009d8c <__d2b+0x64>
 8009dba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009dc2:	6038      	str	r0, [r7, #0]
 8009dc4:	6918      	ldr	r0, [r3, #16]
 8009dc6:	f7ff fd35 	bl	8009834 <__hi0bits>
 8009dca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dce:	e7e5      	b.n	8009d9c <__d2b+0x74>
 8009dd0:	0800a665 	.word	0x0800a665
 8009dd4:	0800a676 	.word	0x0800a676

08009dd8 <__sfputc_r>:
 8009dd8:	6893      	ldr	r3, [r2, #8]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	b410      	push	{r4}
 8009de0:	6093      	str	r3, [r2, #8]
 8009de2:	da08      	bge.n	8009df6 <__sfputc_r+0x1e>
 8009de4:	6994      	ldr	r4, [r2, #24]
 8009de6:	42a3      	cmp	r3, r4
 8009de8:	db01      	blt.n	8009dee <__sfputc_r+0x16>
 8009dea:	290a      	cmp	r1, #10
 8009dec:	d103      	bne.n	8009df6 <__sfputc_r+0x1e>
 8009dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df2:	f7fe bcae 	b.w	8008752 <__swbuf_r>
 8009df6:	6813      	ldr	r3, [r2, #0]
 8009df8:	1c58      	adds	r0, r3, #1
 8009dfa:	6010      	str	r0, [r2, #0]
 8009dfc:	7019      	strb	r1, [r3, #0]
 8009dfe:	4608      	mov	r0, r1
 8009e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <__sfputs_r>:
 8009e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e08:	4606      	mov	r6, r0
 8009e0a:	460f      	mov	r7, r1
 8009e0c:	4614      	mov	r4, r2
 8009e0e:	18d5      	adds	r5, r2, r3
 8009e10:	42ac      	cmp	r4, r5
 8009e12:	d101      	bne.n	8009e18 <__sfputs_r+0x12>
 8009e14:	2000      	movs	r0, #0
 8009e16:	e007      	b.n	8009e28 <__sfputs_r+0x22>
 8009e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1c:	463a      	mov	r2, r7
 8009e1e:	4630      	mov	r0, r6
 8009e20:	f7ff ffda 	bl	8009dd8 <__sfputc_r>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d1f3      	bne.n	8009e10 <__sfputs_r+0xa>
 8009e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e2c <_vfiprintf_r>:
 8009e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	460d      	mov	r5, r1
 8009e32:	b09d      	sub	sp, #116	@ 0x74
 8009e34:	4614      	mov	r4, r2
 8009e36:	4698      	mov	r8, r3
 8009e38:	4606      	mov	r6, r0
 8009e3a:	b118      	cbz	r0, 8009e44 <_vfiprintf_r+0x18>
 8009e3c:	6a03      	ldr	r3, [r0, #32]
 8009e3e:	b90b      	cbnz	r3, 8009e44 <_vfiprintf_r+0x18>
 8009e40:	f7fe fb9e 	bl	8008580 <__sinit>
 8009e44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e46:	07d9      	lsls	r1, r3, #31
 8009e48:	d405      	bmi.n	8009e56 <_vfiprintf_r+0x2a>
 8009e4a:	89ab      	ldrh	r3, [r5, #12]
 8009e4c:	059a      	lsls	r2, r3, #22
 8009e4e:	d402      	bmi.n	8009e56 <_vfiprintf_r+0x2a>
 8009e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e52:	f7fe fda0 	bl	8008996 <__retarget_lock_acquire_recursive>
 8009e56:	89ab      	ldrh	r3, [r5, #12]
 8009e58:	071b      	lsls	r3, r3, #28
 8009e5a:	d501      	bpl.n	8009e60 <_vfiprintf_r+0x34>
 8009e5c:	692b      	ldr	r3, [r5, #16]
 8009e5e:	b99b      	cbnz	r3, 8009e88 <_vfiprintf_r+0x5c>
 8009e60:	4629      	mov	r1, r5
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7fe fcb4 	bl	80087d0 <__swsetup_r>
 8009e68:	b170      	cbz	r0, 8009e88 <_vfiprintf_r+0x5c>
 8009e6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e6c:	07dc      	lsls	r4, r3, #31
 8009e6e:	d504      	bpl.n	8009e7a <_vfiprintf_r+0x4e>
 8009e70:	f04f 30ff 	mov.w	r0, #4294967295
 8009e74:	b01d      	add	sp, #116	@ 0x74
 8009e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7a:	89ab      	ldrh	r3, [r5, #12]
 8009e7c:	0598      	lsls	r0, r3, #22
 8009e7e:	d4f7      	bmi.n	8009e70 <_vfiprintf_r+0x44>
 8009e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e82:	f7fe fd89 	bl	8008998 <__retarget_lock_release_recursive>
 8009e86:	e7f3      	b.n	8009e70 <_vfiprintf_r+0x44>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e8c:	2320      	movs	r3, #32
 8009e8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e96:	2330      	movs	r3, #48	@ 0x30
 8009e98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a048 <_vfiprintf_r+0x21c>
 8009e9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ea0:	f04f 0901 	mov.w	r9, #1
 8009ea4:	4623      	mov	r3, r4
 8009ea6:	469a      	mov	sl, r3
 8009ea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eac:	b10a      	cbz	r2, 8009eb2 <_vfiprintf_r+0x86>
 8009eae:	2a25      	cmp	r2, #37	@ 0x25
 8009eb0:	d1f9      	bne.n	8009ea6 <_vfiprintf_r+0x7a>
 8009eb2:	ebba 0b04 	subs.w	fp, sl, r4
 8009eb6:	d00b      	beq.n	8009ed0 <_vfiprintf_r+0xa4>
 8009eb8:	465b      	mov	r3, fp
 8009eba:	4622      	mov	r2, r4
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f7ff ffa1 	bl	8009e06 <__sfputs_r>
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	f000 80a7 	beq.w	800a018 <_vfiprintf_r+0x1ec>
 8009eca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ecc:	445a      	add	r2, fp
 8009ece:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 809f 	beq.w	800a018 <_vfiprintf_r+0x1ec>
 8009eda:	2300      	movs	r3, #0
 8009edc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ee4:	f10a 0a01 	add.w	sl, sl, #1
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	9307      	str	r3, [sp, #28]
 8009eec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ef0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ef2:	4654      	mov	r4, sl
 8009ef4:	2205      	movs	r2, #5
 8009ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009efa:	4853      	ldr	r0, [pc, #332]	@ (800a048 <_vfiprintf_r+0x21c>)
 8009efc:	f7f6 f990 	bl	8000220 <memchr>
 8009f00:	9a04      	ldr	r2, [sp, #16]
 8009f02:	b9d8      	cbnz	r0, 8009f3c <_vfiprintf_r+0x110>
 8009f04:	06d1      	lsls	r1, r2, #27
 8009f06:	bf44      	itt	mi
 8009f08:	2320      	movmi	r3, #32
 8009f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f0e:	0713      	lsls	r3, r2, #28
 8009f10:	bf44      	itt	mi
 8009f12:	232b      	movmi	r3, #43	@ 0x2b
 8009f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f18:	f89a 3000 	ldrb.w	r3, [sl]
 8009f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f1e:	d015      	beq.n	8009f4c <_vfiprintf_r+0x120>
 8009f20:	9a07      	ldr	r2, [sp, #28]
 8009f22:	4654      	mov	r4, sl
 8009f24:	2000      	movs	r0, #0
 8009f26:	f04f 0c0a 	mov.w	ip, #10
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f30:	3b30      	subs	r3, #48	@ 0x30
 8009f32:	2b09      	cmp	r3, #9
 8009f34:	d94b      	bls.n	8009fce <_vfiprintf_r+0x1a2>
 8009f36:	b1b0      	cbz	r0, 8009f66 <_vfiprintf_r+0x13a>
 8009f38:	9207      	str	r2, [sp, #28]
 8009f3a:	e014      	b.n	8009f66 <_vfiprintf_r+0x13a>
 8009f3c:	eba0 0308 	sub.w	r3, r0, r8
 8009f40:	fa09 f303 	lsl.w	r3, r9, r3
 8009f44:	4313      	orrs	r3, r2
 8009f46:	9304      	str	r3, [sp, #16]
 8009f48:	46a2      	mov	sl, r4
 8009f4a:	e7d2      	b.n	8009ef2 <_vfiprintf_r+0xc6>
 8009f4c:	9b03      	ldr	r3, [sp, #12]
 8009f4e:	1d19      	adds	r1, r3, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	9103      	str	r1, [sp, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	bfbb      	ittet	lt
 8009f58:	425b      	neglt	r3, r3
 8009f5a:	f042 0202 	orrlt.w	r2, r2, #2
 8009f5e:	9307      	strge	r3, [sp, #28]
 8009f60:	9307      	strlt	r3, [sp, #28]
 8009f62:	bfb8      	it	lt
 8009f64:	9204      	strlt	r2, [sp, #16]
 8009f66:	7823      	ldrb	r3, [r4, #0]
 8009f68:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f6a:	d10a      	bne.n	8009f82 <_vfiprintf_r+0x156>
 8009f6c:	7863      	ldrb	r3, [r4, #1]
 8009f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f70:	d132      	bne.n	8009fd8 <_vfiprintf_r+0x1ac>
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	1d1a      	adds	r2, r3, #4
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	9203      	str	r2, [sp, #12]
 8009f7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f7e:	3402      	adds	r4, #2
 8009f80:	9305      	str	r3, [sp, #20]
 8009f82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a058 <_vfiprintf_r+0x22c>
 8009f86:	7821      	ldrb	r1, [r4, #0]
 8009f88:	2203      	movs	r2, #3
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	f7f6 f948 	bl	8000220 <memchr>
 8009f90:	b138      	cbz	r0, 8009fa2 <_vfiprintf_r+0x176>
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	eba0 000a 	sub.w	r0, r0, sl
 8009f98:	2240      	movs	r2, #64	@ 0x40
 8009f9a:	4082      	lsls	r2, r0
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	3401      	adds	r4, #1
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa6:	4829      	ldr	r0, [pc, #164]	@ (800a04c <_vfiprintf_r+0x220>)
 8009fa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fac:	2206      	movs	r2, #6
 8009fae:	f7f6 f937 	bl	8000220 <memchr>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d03f      	beq.n	800a036 <_vfiprintf_r+0x20a>
 8009fb6:	4b26      	ldr	r3, [pc, #152]	@ (800a050 <_vfiprintf_r+0x224>)
 8009fb8:	bb1b      	cbnz	r3, 800a002 <_vfiprintf_r+0x1d6>
 8009fba:	9b03      	ldr	r3, [sp, #12]
 8009fbc:	3307      	adds	r3, #7
 8009fbe:	f023 0307 	bic.w	r3, r3, #7
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	9303      	str	r3, [sp, #12]
 8009fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc8:	443b      	add	r3, r7
 8009fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fcc:	e76a      	b.n	8009ea4 <_vfiprintf_r+0x78>
 8009fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	e7a8      	b.n	8009f2a <_vfiprintf_r+0xfe>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	3401      	adds	r4, #1
 8009fdc:	9305      	str	r3, [sp, #20]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	f04f 0c0a 	mov.w	ip, #10
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fea:	3a30      	subs	r2, #48	@ 0x30
 8009fec:	2a09      	cmp	r2, #9
 8009fee:	d903      	bls.n	8009ff8 <_vfiprintf_r+0x1cc>
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0c6      	beq.n	8009f82 <_vfiprintf_r+0x156>
 8009ff4:	9105      	str	r1, [sp, #20]
 8009ff6:	e7c4      	b.n	8009f82 <_vfiprintf_r+0x156>
 8009ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	2301      	movs	r3, #1
 800a000:	e7f0      	b.n	8009fe4 <_vfiprintf_r+0x1b8>
 800a002:	ab03      	add	r3, sp, #12
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	462a      	mov	r2, r5
 800a008:	4b12      	ldr	r3, [pc, #72]	@ (800a054 <_vfiprintf_r+0x228>)
 800a00a:	a904      	add	r1, sp, #16
 800a00c:	4630      	mov	r0, r6
 800a00e:	f7fd fe75 	bl	8007cfc <_printf_float>
 800a012:	4607      	mov	r7, r0
 800a014:	1c78      	adds	r0, r7, #1
 800a016:	d1d6      	bne.n	8009fc6 <_vfiprintf_r+0x19a>
 800a018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a01a:	07d9      	lsls	r1, r3, #31
 800a01c:	d405      	bmi.n	800a02a <_vfiprintf_r+0x1fe>
 800a01e:	89ab      	ldrh	r3, [r5, #12]
 800a020:	059a      	lsls	r2, r3, #22
 800a022:	d402      	bmi.n	800a02a <_vfiprintf_r+0x1fe>
 800a024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a026:	f7fe fcb7 	bl	8008998 <__retarget_lock_release_recursive>
 800a02a:	89ab      	ldrh	r3, [r5, #12]
 800a02c:	065b      	lsls	r3, r3, #25
 800a02e:	f53f af1f 	bmi.w	8009e70 <_vfiprintf_r+0x44>
 800a032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a034:	e71e      	b.n	8009e74 <_vfiprintf_r+0x48>
 800a036:	ab03      	add	r3, sp, #12
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	462a      	mov	r2, r5
 800a03c:	4b05      	ldr	r3, [pc, #20]	@ (800a054 <_vfiprintf_r+0x228>)
 800a03e:	a904      	add	r1, sp, #16
 800a040:	4630      	mov	r0, r6
 800a042:	f7fe f8f3 	bl	800822c <_printf_i>
 800a046:	e7e4      	b.n	800a012 <_vfiprintf_r+0x1e6>
 800a048:	0800a6cf 	.word	0x0800a6cf
 800a04c:	0800a6d9 	.word	0x0800a6d9
 800a050:	08007cfd 	.word	0x08007cfd
 800a054:	08009e07 	.word	0x08009e07
 800a058:	0800a6d5 	.word	0x0800a6d5

0800a05c <__sflush_r>:
 800a05c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a064:	0716      	lsls	r6, r2, #28
 800a066:	4605      	mov	r5, r0
 800a068:	460c      	mov	r4, r1
 800a06a:	d454      	bmi.n	800a116 <__sflush_r+0xba>
 800a06c:	684b      	ldr	r3, [r1, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dc02      	bgt.n	800a078 <__sflush_r+0x1c>
 800a072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	dd48      	ble.n	800a10a <__sflush_r+0xae>
 800a078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	d045      	beq.n	800a10a <__sflush_r+0xae>
 800a07e:	2300      	movs	r3, #0
 800a080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a084:	682f      	ldr	r7, [r5, #0]
 800a086:	6a21      	ldr	r1, [r4, #32]
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	d030      	beq.n	800a0ee <__sflush_r+0x92>
 800a08c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	0759      	lsls	r1, r3, #29
 800a092:	d505      	bpl.n	800a0a0 <__sflush_r+0x44>
 800a094:	6863      	ldr	r3, [r4, #4]
 800a096:	1ad2      	subs	r2, r2, r3
 800a098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a09a:	b10b      	cbz	r3, 800a0a0 <__sflush_r+0x44>
 800a09c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a09e:	1ad2      	subs	r2, r2, r3
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0a4:	6a21      	ldr	r1, [r4, #32]
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	47b0      	blx	r6
 800a0aa:	1c43      	adds	r3, r0, #1
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	d106      	bne.n	800a0be <__sflush_r+0x62>
 800a0b0:	6829      	ldr	r1, [r5, #0]
 800a0b2:	291d      	cmp	r1, #29
 800a0b4:	d82b      	bhi.n	800a10e <__sflush_r+0xb2>
 800a0b6:	4a2a      	ldr	r2, [pc, #168]	@ (800a160 <__sflush_r+0x104>)
 800a0b8:	40ca      	lsrs	r2, r1
 800a0ba:	07d6      	lsls	r6, r2, #31
 800a0bc:	d527      	bpl.n	800a10e <__sflush_r+0xb2>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	6062      	str	r2, [r4, #4]
 800a0c2:	04d9      	lsls	r1, r3, #19
 800a0c4:	6922      	ldr	r2, [r4, #16]
 800a0c6:	6022      	str	r2, [r4, #0]
 800a0c8:	d504      	bpl.n	800a0d4 <__sflush_r+0x78>
 800a0ca:	1c42      	adds	r2, r0, #1
 800a0cc:	d101      	bne.n	800a0d2 <__sflush_r+0x76>
 800a0ce:	682b      	ldr	r3, [r5, #0]
 800a0d0:	b903      	cbnz	r3, 800a0d4 <__sflush_r+0x78>
 800a0d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0d6:	602f      	str	r7, [r5, #0]
 800a0d8:	b1b9      	cbz	r1, 800a10a <__sflush_r+0xae>
 800a0da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0de:	4299      	cmp	r1, r3
 800a0e0:	d002      	beq.n	800a0e8 <__sflush_r+0x8c>
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f7ff fab4 	bl	8009650 <_free_r>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0ec:	e00d      	b.n	800a10a <__sflush_r+0xae>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b0      	blx	r6
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	1c50      	adds	r0, r2, #1
 800a0f8:	d1c9      	bne.n	800a08e <__sflush_r+0x32>
 800a0fa:	682b      	ldr	r3, [r5, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0c6      	beq.n	800a08e <__sflush_r+0x32>
 800a100:	2b1d      	cmp	r3, #29
 800a102:	d001      	beq.n	800a108 <__sflush_r+0xac>
 800a104:	2b16      	cmp	r3, #22
 800a106:	d11e      	bne.n	800a146 <__sflush_r+0xea>
 800a108:	602f      	str	r7, [r5, #0]
 800a10a:	2000      	movs	r0, #0
 800a10c:	e022      	b.n	800a154 <__sflush_r+0xf8>
 800a10e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a112:	b21b      	sxth	r3, r3
 800a114:	e01b      	b.n	800a14e <__sflush_r+0xf2>
 800a116:	690f      	ldr	r7, [r1, #16]
 800a118:	2f00      	cmp	r7, #0
 800a11a:	d0f6      	beq.n	800a10a <__sflush_r+0xae>
 800a11c:	0793      	lsls	r3, r2, #30
 800a11e:	680e      	ldr	r6, [r1, #0]
 800a120:	bf08      	it	eq
 800a122:	694b      	ldreq	r3, [r1, #20]
 800a124:	600f      	str	r7, [r1, #0]
 800a126:	bf18      	it	ne
 800a128:	2300      	movne	r3, #0
 800a12a:	eba6 0807 	sub.w	r8, r6, r7
 800a12e:	608b      	str	r3, [r1, #8]
 800a130:	f1b8 0f00 	cmp.w	r8, #0
 800a134:	dde9      	ble.n	800a10a <__sflush_r+0xae>
 800a136:	6a21      	ldr	r1, [r4, #32]
 800a138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a13a:	4643      	mov	r3, r8
 800a13c:	463a      	mov	r2, r7
 800a13e:	4628      	mov	r0, r5
 800a140:	47b0      	blx	r6
 800a142:	2800      	cmp	r0, #0
 800a144:	dc08      	bgt.n	800a158 <__sflush_r+0xfc>
 800a146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	f04f 30ff 	mov.w	r0, #4294967295
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a158:	4407      	add	r7, r0
 800a15a:	eba8 0800 	sub.w	r8, r8, r0
 800a15e:	e7e7      	b.n	800a130 <__sflush_r+0xd4>
 800a160:	20400001 	.word	0x20400001

0800a164 <_fflush_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	4605      	mov	r5, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	b913      	cbnz	r3, 800a174 <_fflush_r+0x10>
 800a16e:	2500      	movs	r5, #0
 800a170:	4628      	mov	r0, r5
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	b118      	cbz	r0, 800a17e <_fflush_r+0x1a>
 800a176:	6a03      	ldr	r3, [r0, #32]
 800a178:	b90b      	cbnz	r3, 800a17e <_fflush_r+0x1a>
 800a17a:	f7fe fa01 	bl	8008580 <__sinit>
 800a17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0f3      	beq.n	800a16e <_fflush_r+0xa>
 800a186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a188:	07d0      	lsls	r0, r2, #31
 800a18a:	d404      	bmi.n	800a196 <_fflush_r+0x32>
 800a18c:	0599      	lsls	r1, r3, #22
 800a18e:	d402      	bmi.n	800a196 <_fflush_r+0x32>
 800a190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a192:	f7fe fc00 	bl	8008996 <__retarget_lock_acquire_recursive>
 800a196:	4628      	mov	r0, r5
 800a198:	4621      	mov	r1, r4
 800a19a:	f7ff ff5f 	bl	800a05c <__sflush_r>
 800a19e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1a0:	07da      	lsls	r2, r3, #31
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	d4e4      	bmi.n	800a170 <_fflush_r+0xc>
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	059b      	lsls	r3, r3, #22
 800a1aa:	d4e1      	bmi.n	800a170 <_fflush_r+0xc>
 800a1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ae:	f7fe fbf3 	bl	8008998 <__retarget_lock_release_recursive>
 800a1b2:	e7dd      	b.n	800a170 <_fflush_r+0xc>

0800a1b4 <__swhatbuf_r>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	b096      	sub	sp, #88	@ 0x58
 800a1c0:	4615      	mov	r5, r2
 800a1c2:	461e      	mov	r6, r3
 800a1c4:	da0d      	bge.n	800a1e2 <__swhatbuf_r+0x2e>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1cc:	f04f 0100 	mov.w	r1, #0
 800a1d0:	bf14      	ite	ne
 800a1d2:	2340      	movne	r3, #64	@ 0x40
 800a1d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1d8:	2000      	movs	r0, #0
 800a1da:	6031      	str	r1, [r6, #0]
 800a1dc:	602b      	str	r3, [r5, #0]
 800a1de:	b016      	add	sp, #88	@ 0x58
 800a1e0:	bd70      	pop	{r4, r5, r6, pc}
 800a1e2:	466a      	mov	r2, sp
 800a1e4:	f000 f848 	bl	800a278 <_fstat_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	dbec      	blt.n	800a1c6 <__swhatbuf_r+0x12>
 800a1ec:	9901      	ldr	r1, [sp, #4]
 800a1ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1f6:	4259      	negs	r1, r3
 800a1f8:	4159      	adcs	r1, r3
 800a1fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1fe:	e7eb      	b.n	800a1d8 <__swhatbuf_r+0x24>

0800a200 <__smakebuf_r>:
 800a200:	898b      	ldrh	r3, [r1, #12]
 800a202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a204:	079d      	lsls	r5, r3, #30
 800a206:	4606      	mov	r6, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	d507      	bpl.n	800a21c <__smakebuf_r+0x1c>
 800a20c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	6123      	str	r3, [r4, #16]
 800a214:	2301      	movs	r3, #1
 800a216:	6163      	str	r3, [r4, #20]
 800a218:	b003      	add	sp, #12
 800a21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a21c:	ab01      	add	r3, sp, #4
 800a21e:	466a      	mov	r2, sp
 800a220:	f7ff ffc8 	bl	800a1b4 <__swhatbuf_r>
 800a224:	9f00      	ldr	r7, [sp, #0]
 800a226:	4605      	mov	r5, r0
 800a228:	4639      	mov	r1, r7
 800a22a:	4630      	mov	r0, r6
 800a22c:	f7fd fbb6 	bl	800799c <_malloc_r>
 800a230:	b948      	cbnz	r0, 800a246 <__smakebuf_r+0x46>
 800a232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a236:	059a      	lsls	r2, r3, #22
 800a238:	d4ee      	bmi.n	800a218 <__smakebuf_r+0x18>
 800a23a:	f023 0303 	bic.w	r3, r3, #3
 800a23e:	f043 0302 	orr.w	r3, r3, #2
 800a242:	81a3      	strh	r3, [r4, #12]
 800a244:	e7e2      	b.n	800a20c <__smakebuf_r+0xc>
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	6020      	str	r0, [r4, #0]
 800a24a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	9b01      	ldr	r3, [sp, #4]
 800a252:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a256:	b15b      	cbz	r3, 800a270 <__smakebuf_r+0x70>
 800a258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a25c:	4630      	mov	r0, r6
 800a25e:	f000 f81d 	bl	800a29c <_isatty_r>
 800a262:	b128      	cbz	r0, 800a270 <__smakebuf_r+0x70>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	431d      	orrs	r5, r3
 800a274:	81a5      	strh	r5, [r4, #12]
 800a276:	e7cf      	b.n	800a218 <__smakebuf_r+0x18>

0800a278 <_fstat_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d07      	ldr	r5, [pc, #28]	@ (800a298 <_fstat_r+0x20>)
 800a27c:	2300      	movs	r3, #0
 800a27e:	4604      	mov	r4, r0
 800a280:	4608      	mov	r0, r1
 800a282:	4611      	mov	r1, r2
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	f7f7 fd8a 	bl	8001d9e <_fstat>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	d102      	bne.n	800a294 <_fstat_r+0x1c>
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	b103      	cbz	r3, 800a294 <_fstat_r+0x1c>
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	bd38      	pop	{r3, r4, r5, pc}
 800a296:	bf00      	nop
 800a298:	200005f4 	.word	0x200005f4

0800a29c <_isatty_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d06      	ldr	r5, [pc, #24]	@ (800a2b8 <_isatty_r+0x1c>)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	602b      	str	r3, [r5, #0]
 800a2a8:	f7f7 fd89 	bl	8001dbe <_isatty>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_isatty_r+0x1a>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_isatty_r+0x1a>
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	200005f4 	.word	0x200005f4

0800a2bc <memcpy>:
 800a2bc:	440a      	add	r2, r1
 800a2be:	4291      	cmp	r1, r2
 800a2c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2c4:	d100      	bne.n	800a2c8 <memcpy+0xc>
 800a2c6:	4770      	bx	lr
 800a2c8:	b510      	push	{r4, lr}
 800a2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2d2:	4291      	cmp	r1, r2
 800a2d4:	d1f9      	bne.n	800a2ca <memcpy+0xe>
 800a2d6:	bd10      	pop	{r4, pc}

0800a2d8 <__assert_func>:
 800a2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2da:	4614      	mov	r4, r2
 800a2dc:	461a      	mov	r2, r3
 800a2de:	4b09      	ldr	r3, [pc, #36]	@ (800a304 <__assert_func+0x2c>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4605      	mov	r5, r0
 800a2e4:	68d8      	ldr	r0, [r3, #12]
 800a2e6:	b14c      	cbz	r4, 800a2fc <__assert_func+0x24>
 800a2e8:	4b07      	ldr	r3, [pc, #28]	@ (800a308 <__assert_func+0x30>)
 800a2ea:	9100      	str	r1, [sp, #0]
 800a2ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2f0:	4906      	ldr	r1, [pc, #24]	@ (800a30c <__assert_func+0x34>)
 800a2f2:	462b      	mov	r3, r5
 800a2f4:	f000 f842 	bl	800a37c <fiprintf>
 800a2f8:	f000 f852 	bl	800a3a0 <abort>
 800a2fc:	4b04      	ldr	r3, [pc, #16]	@ (800a310 <__assert_func+0x38>)
 800a2fe:	461c      	mov	r4, r3
 800a300:	e7f3      	b.n	800a2ea <__assert_func+0x12>
 800a302:	bf00      	nop
 800a304:	20000018 	.word	0x20000018
 800a308:	0800a6ea 	.word	0x0800a6ea
 800a30c:	0800a6f7 	.word	0x0800a6f7
 800a310:	0800a725 	.word	0x0800a725

0800a314 <_calloc_r>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	fba1 5402 	umull	r5, r4, r1, r2
 800a31a:	b934      	cbnz	r4, 800a32a <_calloc_r+0x16>
 800a31c:	4629      	mov	r1, r5
 800a31e:	f7fd fb3d 	bl	800799c <_malloc_r>
 800a322:	4606      	mov	r6, r0
 800a324:	b928      	cbnz	r0, 800a332 <_calloc_r+0x1e>
 800a326:	4630      	mov	r0, r6
 800a328:	bd70      	pop	{r4, r5, r6, pc}
 800a32a:	220c      	movs	r2, #12
 800a32c:	6002      	str	r2, [r0, #0]
 800a32e:	2600      	movs	r6, #0
 800a330:	e7f9      	b.n	800a326 <_calloc_r+0x12>
 800a332:	462a      	mov	r2, r5
 800a334:	4621      	mov	r1, r4
 800a336:	f7fe faa1 	bl	800887c <memset>
 800a33a:	e7f4      	b.n	800a326 <_calloc_r+0x12>

0800a33c <__ascii_mbtowc>:
 800a33c:	b082      	sub	sp, #8
 800a33e:	b901      	cbnz	r1, 800a342 <__ascii_mbtowc+0x6>
 800a340:	a901      	add	r1, sp, #4
 800a342:	b142      	cbz	r2, 800a356 <__ascii_mbtowc+0x1a>
 800a344:	b14b      	cbz	r3, 800a35a <__ascii_mbtowc+0x1e>
 800a346:	7813      	ldrb	r3, [r2, #0]
 800a348:	600b      	str	r3, [r1, #0]
 800a34a:	7812      	ldrb	r2, [r2, #0]
 800a34c:	1e10      	subs	r0, r2, #0
 800a34e:	bf18      	it	ne
 800a350:	2001      	movne	r0, #1
 800a352:	b002      	add	sp, #8
 800a354:	4770      	bx	lr
 800a356:	4610      	mov	r0, r2
 800a358:	e7fb      	b.n	800a352 <__ascii_mbtowc+0x16>
 800a35a:	f06f 0001 	mvn.w	r0, #1
 800a35e:	e7f8      	b.n	800a352 <__ascii_mbtowc+0x16>

0800a360 <__ascii_wctomb>:
 800a360:	4603      	mov	r3, r0
 800a362:	4608      	mov	r0, r1
 800a364:	b141      	cbz	r1, 800a378 <__ascii_wctomb+0x18>
 800a366:	2aff      	cmp	r2, #255	@ 0xff
 800a368:	d904      	bls.n	800a374 <__ascii_wctomb+0x14>
 800a36a:	228a      	movs	r2, #138	@ 0x8a
 800a36c:	601a      	str	r2, [r3, #0]
 800a36e:	f04f 30ff 	mov.w	r0, #4294967295
 800a372:	4770      	bx	lr
 800a374:	700a      	strb	r2, [r1, #0]
 800a376:	2001      	movs	r0, #1
 800a378:	4770      	bx	lr
	...

0800a37c <fiprintf>:
 800a37c:	b40e      	push	{r1, r2, r3}
 800a37e:	b503      	push	{r0, r1, lr}
 800a380:	4601      	mov	r1, r0
 800a382:	ab03      	add	r3, sp, #12
 800a384:	4805      	ldr	r0, [pc, #20]	@ (800a39c <fiprintf+0x20>)
 800a386:	f853 2b04 	ldr.w	r2, [r3], #4
 800a38a:	6800      	ldr	r0, [r0, #0]
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	f7ff fd4d 	bl	8009e2c <_vfiprintf_r>
 800a392:	b002      	add	sp, #8
 800a394:	f85d eb04 	ldr.w	lr, [sp], #4
 800a398:	b003      	add	sp, #12
 800a39a:	4770      	bx	lr
 800a39c:	20000018 	.word	0x20000018

0800a3a0 <abort>:
 800a3a0:	b508      	push	{r3, lr}
 800a3a2:	2006      	movs	r0, #6
 800a3a4:	f000 f82c 	bl	800a400 <raise>
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	f7f7 fca8 	bl	8001cfe <_exit>

0800a3ae <_raise_r>:
 800a3ae:	291f      	cmp	r1, #31
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	d904      	bls.n	800a3c2 <_raise_r+0x14>
 800a3b8:	2316      	movs	r3, #22
 800a3ba:	6003      	str	r3, [r0, #0]
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	bd38      	pop	{r3, r4, r5, pc}
 800a3c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a3c4:	b112      	cbz	r2, 800a3cc <_raise_r+0x1e>
 800a3c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3ca:	b94b      	cbnz	r3, 800a3e0 <_raise_r+0x32>
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f000 f831 	bl	800a434 <_getpid_r>
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	4601      	mov	r1, r0
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3dc:	f000 b818 	b.w	800a410 <_kill_r>
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d00a      	beq.n	800a3fa <_raise_r+0x4c>
 800a3e4:	1c59      	adds	r1, r3, #1
 800a3e6:	d103      	bne.n	800a3f0 <_raise_r+0x42>
 800a3e8:	2316      	movs	r3, #22
 800a3ea:	6003      	str	r3, [r0, #0]
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	e7e7      	b.n	800a3c0 <_raise_r+0x12>
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	4798      	blx	r3
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	e7e0      	b.n	800a3c0 <_raise_r+0x12>
	...

0800a400 <raise>:
 800a400:	4b02      	ldr	r3, [pc, #8]	@ (800a40c <raise+0xc>)
 800a402:	4601      	mov	r1, r0
 800a404:	6818      	ldr	r0, [r3, #0]
 800a406:	f7ff bfd2 	b.w	800a3ae <_raise_r>
 800a40a:	bf00      	nop
 800a40c:	20000018 	.word	0x20000018

0800a410 <_kill_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	4d07      	ldr	r5, [pc, #28]	@ (800a430 <_kill_r+0x20>)
 800a414:	2300      	movs	r3, #0
 800a416:	4604      	mov	r4, r0
 800a418:	4608      	mov	r0, r1
 800a41a:	4611      	mov	r1, r2
 800a41c:	602b      	str	r3, [r5, #0]
 800a41e:	f7f7 fc5e 	bl	8001cde <_kill>
 800a422:	1c43      	adds	r3, r0, #1
 800a424:	d102      	bne.n	800a42c <_kill_r+0x1c>
 800a426:	682b      	ldr	r3, [r5, #0]
 800a428:	b103      	cbz	r3, 800a42c <_kill_r+0x1c>
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	bd38      	pop	{r3, r4, r5, pc}
 800a42e:	bf00      	nop
 800a430:	200005f4 	.word	0x200005f4

0800a434 <_getpid_r>:
 800a434:	f7f7 bc4b 	b.w	8001cce <_getpid>

0800a438 <_init>:
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43a:	bf00      	nop
 800a43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a43e:	bc08      	pop	{r3}
 800a440:	469e      	mov	lr, r3
 800a442:	4770      	bx	lr

0800a444 <_fini>:
 800a444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a446:	bf00      	nop
 800a448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44a:	bc08      	pop	{r3}
 800a44c:	469e      	mov	lr, r3
 800a44e:	4770      	bx	lr
