
microDCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dfc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08009fe0  08009fe0  0000afe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3d0  0800a3d0  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3d0  0800a3d0  0000b3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3d8  0800a3d8  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3d8  0800a3d8  0000b3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3dc  0800a3dc  0000b3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a3e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200001d4  0800a5b4  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  0800a5b4  0000c5e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be64  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363d  00000000  00000000  00028068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0002b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137f  00000000  00000000  0002cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa27  00000000  00000000  0002e337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f45e  00000000  00000000  00058d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117c11  00000000  00000000  000781bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fdcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c98  00000000  00000000  0018fe10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00197aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009fc4 	.word	0x08009fc4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08009fc4 	.word	0x08009fc4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <shunt_okay_average>:



struct VM_State vm_state;

uint32_t shunt_okay_average(struct PSU_STATE* psu_state) {
 8000ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eec:	b091      	sub	sp, #68	@ 0x44
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	466b      	mov	r3, sp
 8000ef4:	461e      	mov	r6, r3
	uint32_t sum = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c

	const uint32_t size = 5;
 8000efa:	2305      	movs	r3, #5
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28

	uint32_t set[size];
 8000efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f00:	3b01      	subs	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f06:	2200      	movs	r2, #0
 8000f08:	4698      	mov	r8, r3
 8000f0a:	4691      	mov	r9, r2
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000f18:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000f1c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f22:	2200      	movs	r2, #0
 8000f24:	461c      	mov	r4, r3
 8000f26:	4615      	mov	r5, r2
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	016b      	lsls	r3, r5, #5
 8000f32:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000f36:	0162      	lsls	r2, r4, #5
 8000f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	3307      	adds	r3, #7
 8000f3e:	08db      	lsrs	r3, r3, #3
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	ebad 0d03 	sub.w	sp, sp, r3
 8000f46:	466b      	mov	r3, sp
 8000f48:	3303      	adds	r3, #3
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]

	for (int j = 0; j < size; j++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f54:	e011      	b.n	8000f7a <shunt_okay_average+0x92>
		set[j] = psu_shunt_diff(psu_state);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fd13 	bl	8001982 <psu_shunt_diff>
 8000f5c:	4601      	mov	r1, r0
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  //printf("value: %i\n", set[j]);
	  sum += set[j];
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f70:	4413      	add	r3, r2
 8000f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int j = 0; j < size; j++) {
 8000f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f76:	3301      	adds	r3, #1
 8000f78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d8e9      	bhi.n	8000f56 <shunt_okay_average+0x6e>
	}

	//printf("cumulative: %i\n", sum);

	uint32_t mean = sum / size;
 8000f82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	61fb      	str	r3, [r7, #28]

	sum=0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

	//printf("mean: %i\n", mean);

	for (int j = 0; j < size; j++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f94:	e00d      	b.n	8000fb2 <shunt_okay_average+0xca>
	  uint32_t diff = set[j] - mean;
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	60fb      	str	r3, [r7, #12]
	  //printf("diff: %i\n", diff);
	  sum += diff < 0 ? -diff : diff;
 8000fa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int j = 0; j < size; j++) {
 8000fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fae:	3301      	adds	r3, #1
 8000fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d8ed      	bhi.n	8000f96 <shunt_okay_average+0xae>
	}

	uint32_t dev = sum / size;
 8000fba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	61bb      	str	r3, [r7, #24]

	//printf("dev: %i\n", dev);

	uint32_t lower = mean - 3 * dev - 1;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
	uint32_t upper = mean + 3 * dev + 1;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	441a      	add	r2, r3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	4413      	add	r3, r2
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]

	//printf("lower: %i\n", lower);

	//printf("upper: %i\n", upper);

	sum=0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint32_t count = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	@ 0x30
	for (int j = 0; j < size; j++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ff0:	e01c      	b.n	800102c <shunt_okay_average+0x144>
	  if (set[j] > lower-1 && set[j] <= upper+1) {
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ff6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d911      	bls.n	8001026 <shunt_okay_average+0x13e>
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001006:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3301      	adds	r3, #1
 800100e:	429a      	cmp	r2, r3
 8001010:	d809      	bhi.n	8001026 <shunt_okay_average+0x13e>
		  sum += set[j];
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800101c:	4413      	add	r3, r2
 800101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  count++;
 8001020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001022:	3301      	adds	r3, #1
 8001024:	633b      	str	r3, [r7, #48]	@ 0x30
	for (int j = 0; j < size; j++) {
 8001026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001028:	3301      	adds	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800102c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001030:	429a      	cmp	r2, r3
 8001032:	d8de      	bhi.n	8000ff2 <shunt_okay_average+0x10a>
	  }

	}

	if (sum == 0) {
 8001034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <shunt_okay_average+0x156>
		return mean;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	e003      	b.n	8001046 <shunt_okay_average+0x15e>
	} else {
		return sum / count;
 800103e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	46b5      	mov	sp, r6
	}
}
 8001048:	4618      	mov	r0, r3
 800104a:	3744      	adds	r7, #68	@ 0x44
 800104c:	46bd      	mov	sp, r7
 800104e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001058:	f5ad 5dce 	sub.w	sp, sp, #6592	@ 0x19c0
 800105c:	b084      	sub	sp, #16
 800105e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001060:	f001 f8b1 	bl	80021c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001064:	f000 f980 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001068:	f000 fbfe 	bl	8001868 <MX_GPIO_Init>
  MX_TIM2_Init();
 800106c:	f000 faec 	bl	8001648 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001070:	f000 fbae 	bl	80017d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001074:	f000 fa92 	bl	800159c <MX_I2C1_Init>
  MX_ADC2_Init();
 8001078:	f000 f9c2 	bl	8001400 <MX_ADC2_Init>
  MX_ADC5_Init();
 800107c:	f000 fa28 	bl	80014d0 <MX_ADC5_Init>
  MX_RNG_Init();
 8001080:	f000 facc 	bl	800161c <MX_RNG_Init>
  MX_TIM3_Init();
 8001084:	f000 fb56 	bl	8001734 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //Timer 3 is used in misc_delay_us
  HAL_TIM_Base_Start(&htim3);
 8001088:	48ac      	ldr	r0, [pc, #688]	@ (800133c <main+0x2e8>)
 800108a:	f004 f9a3 	bl	80053d4 <HAL_TIM_Base_Start>

  uint8_t buff[100];

  /* Setup VM */

  const uint32_t call_stack_size = 100;
 800108e:	2364      	movs	r3, #100	@ 0x64
 8001090:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 8001094:	f102 0214 	add.w	r2, r2, #20
 8001098:	6013      	str	r3, [r2, #0]
  const uint32_t operand_stack_size = 100;
 800109a:	2364      	movs	r3, #100	@ 0x64
 800109c:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 80010a0:	f102 0210 	add.w	r2, r2, #16
 80010a4:	6013      	str	r3, [r2, #0]

  uint32_t call_stack[call_stack_size];
 80010a6:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 80010aa:	f103 0314 	add.w	r3, r3, #20
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 80010b6:	f102 020c 	add.w	r2, r2, #12
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 80010c0:	f103 0314 	add.w	r3, r3, #20
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	014b      	lsls	r3, r1, #5
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	014a      	lsls	r2, r1, #5
 80010e2:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 80010e6:	f103 0314 	add.w	r3, r3, #20
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	469a      	mov	sl, r3
 80010f0:	4693      	mov	fp, r2
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80010fe:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001102:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001106:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 800110a:	f103 0314 	add.w	r3, r3, #20
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	3307      	adds	r3, #7
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	ebad 0d03 	sub.w	sp, sp, r3
 800111c:	ab04      	add	r3, sp, #16
 800111e:	3303      	adds	r3, #3
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 8001128:	f102 0208 	add.w	r2, r2, #8
 800112c:	6013      	str	r3, [r2, #0]
  uint32_t operand_stack[operand_stack_size];
 800112e:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 8001132:	f103 0310 	add.w	r3, r3, #16
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3b01      	subs	r3, #1
 800113a:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 800113e:	f102 0204 	add.w	r2, r2, #4
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 8001148:	f103 0310 	add.w	r3, r3, #16
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	4698      	mov	r8, r3
 8001152:	4691      	mov	r9, r2
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001160:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001164:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001168:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 800116c:	f103 0310 	add.w	r3, r3, #16
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	461c      	mov	r4, r3
 8001176:	4615      	mov	r5, r2
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	016b      	lsls	r3, r5, #5
 8001182:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001186:	0162      	lsls	r2, r4, #5
 8001188:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 800118c:	f103 0310 	add.w	r3, r3, #16
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	3307      	adds	r3, #7
 8001196:	08db      	lsrs	r3, r3, #3
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	ebad 0d03 	sub.w	sp, sp, r3
 800119e:	ab04      	add	r3, sp, #16
 80011a0:	3303      	adds	r3, #3
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 80011aa:	6013      	str	r3, [r2, #0]

  uint8_t rom[29] = {42, 6, 0, 0, 0, 200, 41, 0, 0, 0, 0, 60, 100, 0, 0, 0, 23, 60, 2, 0, 0, 0, 1, 203, 43, 0, 0, 0, 0, };
 80011ac:	4b64      	ldr	r3, [pc, #400]	@ (8001340 <main+0x2ec>)
 80011ae:	f507 54c8 	add.w	r4, r7, #6400	@ 0x1900
 80011b2:	f104 041c 	add.w	r4, r4, #28
 80011b6:	461d      	mov	r5, r3
 80011b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011c0:	c407      	stmia	r4!, {r0, r1, r2}
 80011c2:	7023      	strb	r3, [r4, #0]

  vm_init(&vm_state, call_stack, operand_stack, call_stack_size, operand_stack_size, rom, sizeof(rom));
 80011c4:	231d      	movs	r3, #29
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	f507 53c8 	add.w	r3, r7, #6400	@ 0x1900
 80011cc:	f103 031c 	add.w	r3, r3, #28
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 80011d6:	f103 0310 	add.w	r3, r3, #16
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 80011e2:	f103 0314 	add.w	r3, r3, #20
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	f507 51cd 	add.w	r1, r7, #6560	@ 0x19a0
 80011f2:	f101 0108 	add.w	r1, r1, #8
 80011f6:	6809      	ldr	r1, [r1, #0]
 80011f8:	4852      	ldr	r0, [pc, #328]	@ (8001344 <main+0x2f0>)
 80011fa:	f000 ff8d 	bl	8002118 <vm_init>

  /* Setup and test RNG */

  rng_global_init(&hrng);
 80011fe:	4852      	ldr	r0, [pc, #328]	@ (8001348 <main+0x2f4>)
 8001200:	f000 fbce 	bl	80019a0 <rng_global_init>

  printf("rng: %u\n", (unsigned int)rng_global_next32());
 8001204:	f000 fbe2 	bl	80019cc <rng_global_next32>
 8001208:	4603      	mov	r3, r0
 800120a:	4619      	mov	r1, r3
 800120c:	484f      	ldr	r0, [pc, #316]	@ (800134c <main+0x2f8>)
 800120e:	f006 ff03 	bl	8008018 <iprintf>
  printf("rng: %u\n", (unsigned int)rng_global_next32());
 8001212:	f000 fbdb 	bl	80019cc <rng_global_next32>
 8001216:	4603      	mov	r3, r0
 8001218:	4619      	mov	r1, r3
 800121a:	484c      	ldr	r0, [pc, #304]	@ (800134c <main+0x2f8>)
 800121c:	f006 fefc 	bl	8008018 <iprintf>
  printf("rng: %u\n", (unsigned int)rng_global_next32());
 8001220:	f000 fbd4 	bl	80019cc <rng_global_next32>
 8001224:	4603      	mov	r3, r0
 8001226:	4619      	mov	r1, r3
 8001228:	4848      	ldr	r0, [pc, #288]	@ (800134c <main+0x2f8>)
 800122a:	f006 fef5 	bl	8008018 <iprintf>
  printf("rng: %u\n", (unsigned int)rng_global_next32());
 800122e:	f000 fbcd 	bl	80019cc <rng_global_next32>
 8001232:	4603      	mov	r3, r0
 8001234:	4619      	mov	r1, r3
 8001236:	4845      	ldr	r0, [pc, #276]	@ (800134c <main+0x2f8>)
 8001238:	f006 feee 	bl	8008018 <iprintf>
  printf("main i2c: %i\n", retb);
  printf("whoami: %i\n", who_am_i);*/

  struct PSU_STATE psu_state;

  psu_init(&psu_state, &hadc2, &hadc5, &htim2, &TIM2->CCR1, TIM_CHANNEL_1);
 800123c:	f507 50c8 	add.w	r0, r7, #6400	@ 0x1900
 8001240:	f100 0008 	add.w	r0, r0, #8
 8001244:	2300      	movs	r3, #0
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <main+0x2fc>)
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <main+0x300>)
 800124e:	4a42      	ldr	r2, [pc, #264]	@ (8001358 <main+0x304>)
 8001250:	4942      	ldr	r1, [pc, #264]	@ (800135c <main+0x308>)
 8001252:	f000 fb4b 	bl	80018ec <psu_init>

    /* USER CODE BEGIN 3 */

	  //vm_execute(&vm_state);

	  printf("Enter pwm: \n");
 8001256:	4842      	ldr	r0, [pc, #264]	@ (8001360 <main+0x30c>)
 8001258:	f006 ff46 	bl	80080e8 <puts>

	  read_uart_into_buffer(buff, 100, '\n');
 800125c:	f507 53c9 	add.w	r3, r7, #6432	@ 0x1920
 8001260:	f103 031c 	add.w	r3, r3, #28
 8001264:	220a      	movs	r2, #10
 8001266:	2164      	movs	r1, #100	@ 0x64
 8001268:	4618      	mov	r0, r3
 800126a:	f000 ff15 	bl	8002098 <read_uart_into_buffer>

	  //psu_intensity(&psu_state, atoi(buff));

	  //printf("drop: %i\n", psu_shunt_diff(&psu_state));

	  for (int i = 0; i < 1600; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 8001274:	f102 021c 	add.w	r2, r2, #28
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e02d      	b.n	80012d8 <main+0x284>
		  psu_intensity(&psu_state, i);
 800127c:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 8001280:	f103 031c 	add.w	r3, r3, #28
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f507 53c8 	add.w	r3, r7, #6400	@ 0x1900
 800128a:	f103 0308 	add.w	r3, r3, #8
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fb53 	bl	800193c <psu_intensity>

		  HAL_Delay(1);
 8001296:	2001      	movs	r0, #1
 8001298:	f001 f806 	bl	80022a8 <HAL_Delay>



		  //printf("value: %i\n", value);

		  values[i] = shunt_okay_average(&psu_state); //psu_shunt_diff(&psu_state) + psu_shunt_diff(&psu_state) + psu_shunt_diff(&psu_state) + psu_shunt_diff(&psu_state) + psu_shunt_diff(&psu_state);
 800129c:	f507 53c8 	add.w	r3, r7, #6400	@ 0x1900
 80012a0:	f103 0308 	add.w	r3, r3, #8
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe1f 	bl	8000ee8 <shunt_okay_average>
 80012aa:	4601      	mov	r1, r0
 80012ac:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 80012b0:	f6a3 13b8 	subw	r3, r3, #2488	@ 0x9b8
 80012b4:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 80012b8:	f102 021c 	add.w	r2, r2, #28
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for (int i = 0; i < 1600; i++) {
 80012c2:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 80012c6:	f103 031c 	add.w	r3, r3, #28
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 80012d2:	f102 021c 	add.w	r2, r2, #28
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 80012dc:	f103 031c 	add.w	r3, r3, #28
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80012e6:	dbc9      	blt.n	800127c <main+0x228>

	  }

	  for (int i = 0; i < 1600; i++) {
 80012e8:	2300      	movs	r3, #0
 80012ea:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 80012ee:	f102 0218 	add.w	r2, r2, #24
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e019      	b.n	800132a <main+0x2d6>
		  printf("%i\n", values[i]);
 80012f6:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 80012fa:	f6a3 13b8 	subw	r3, r3, #2488	@ 0x9b8
 80012fe:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 8001302:	f102 0218 	add.w	r2, r2, #24
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	4619      	mov	r1, r3
 800130e:	4815      	ldr	r0, [pc, #84]	@ (8001364 <main+0x310>)
 8001310:	f006 fe82 	bl	8008018 <iprintf>
	  for (int i = 0; i < 1600; i++) {
 8001314:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 8001318:	f103 0318 	add.w	r3, r3, #24
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	f507 52cd 	add.w	r2, r7, #6560	@ 0x19a0
 8001324:	f102 0218 	add.w	r2, r2, #24
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	f507 53cd 	add.w	r3, r7, #6560	@ 0x19a0
 800132e:	f103 0318 	add.w	r3, r3, #24
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001338:	dbdd      	blt.n	80012f6 <main+0x2a2>
	  printf("Enter pwm: \n");
 800133a:	e78c      	b.n	8001256 <main+0x202>
 800133c:	2000037c 	.word	0x2000037c
 8001340:	08009ffc 	.word	0x08009ffc
 8001344:	2000045c 	.word	0x2000045c
 8001348:	2000031c 	.word	0x2000031c
 800134c:	08009fe0 	.word	0x08009fe0
 8001350:	40000034 	.word	0x40000034
 8001354:	20000330 	.word	0x20000330
 8001358:	2000025c 	.word	0x2000025c
 800135c:	200001f0 	.word	0x200001f0
 8001360:	08009fec 	.word	0x08009fec
 8001364:	08009ff8 	.word	0x08009ff8

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	@ 0x50
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0318 	add.w	r3, r7, #24
 8001372:	2238      	movs	r2, #56	@ 0x38
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f006 ff96 	bl	80082a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800138e:	f002 ff0f 	bl	80041b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001396:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139c:	2340      	movs	r3, #64	@ 0x40
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a0:	2302      	movs	r3, #2
 80013a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a4:	2302      	movs	r3, #2
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80013ac:	230c      	movs	r3, #12
 80013ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80013b4:	2304      	movs	r3, #4
 80013b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 0318 	add.w	r3, r7, #24
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 ffa9 	bl	8004318 <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80013cc:	f000 fa88 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d4:	2303      	movs	r3, #3
 80013d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2103      	movs	r1, #3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 faa7 	bl	800493c <HAL_RCC_ClockConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80013f4:	f000 fa74 	bl	80018e0 <Error_Handler>
  }
}
 80013f8:	bf00      	nop
 80013fa:	3750      	adds	r7, #80	@ 0x50
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	2220      	movs	r2, #32
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f006 ff4b 	bl	80082a8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001412:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 8001414:	4a2b      	ldr	r2, [pc, #172]	@ (80014c4 <MX_ADC2_Init+0xc4>)
 8001416:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001418:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 800141a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800141e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001420:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001426:	4b26      	ldr	r3, [pc, #152]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800142c:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001432:	4b23      	ldr	r3, [pc, #140]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001438:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 800143a:	2204      	movs	r2, #4
 800143c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 8001440:	2200      	movs	r2, #0
 8001442:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001444:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 8001446:	2200      	movs	r2, #0
 8001448:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 800144c:	2201      	movs	r2, #1
 800144e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 800145a:	2200      	movs	r2, #0
 800145c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 8001460:	2200      	movs	r2, #0
 8001462:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 800146e:	2200      	movs	r2, #0
 8001470:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800147a:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 800147c:	f001 f988 	bl	8002790 <HAL_ADC_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001486:	f000 fa2b 	bl	80018e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <MX_ADC2_Init+0xc8>)
 800148c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148e:	2306      	movs	r3, #6
 8001490:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <MX_ADC2_Init+0xcc>)
 8001498:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800149a:	2304      	movs	r3, #4
 800149c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	@ (80014c0 <MX_ADC2_Init+0xc0>)
 80014a8:	f001 fd26 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80014b2:	f000 fa15 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3720      	adds	r7, #32
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200001f0 	.word	0x200001f0
 80014c4:	50000100 	.word	0x50000100
 80014c8:	04300002 	.word	0x04300002
 80014cc:	407f0000 	.word	0x407f0000

080014d0 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	2220      	movs	r2, #32
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f006 fee3 	bl	80082a8 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80014e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <MX_ADC5_Init+0xc0>)
 80014e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001594 <MX_ADC5_Init+0xc4>)
 80014e6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80014e8:	4b29      	ldr	r3, [pc, #164]	@ (8001590 <MX_ADC5_Init+0xc0>)
 80014ea:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80014ee:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <MX_ADC5_Init+0xc0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f6:	4b26      	ldr	r3, [pc, #152]	@ (8001590 <MX_ADC5_Init+0xc0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80014fc:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <MX_ADC5_Init+0xc0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001502:	4b23      	ldr	r3, [pc, #140]	@ (8001590 <MX_ADC5_Init+0xc0>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <MX_ADC5_Init+0xc0>)
 800150a:	2204      	movs	r2, #4
 800150c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800150e:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <MX_ADC5_Init+0xc0>)
 8001510:	2200      	movs	r2, #0
 8001512:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001514:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <MX_ADC5_Init+0xc0>)
 8001516:	2200      	movs	r2, #0
 8001518:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <MX_ADC5_Init+0xc0>)
 800151c:	2201      	movs	r2, #1
 800151e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <MX_ADC5_Init+0xc0>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MX_ADC5_Init+0xc0>)
 800152a:	2200      	movs	r2, #0
 800152c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152e:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <MX_ADC5_Init+0xc0>)
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_ADC5_Init+0xc0>)
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_ADC5_Init+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <MX_ADC5_Init+0xc0>)
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800154a:	4811      	ldr	r0, [pc, #68]	@ (8001590 <MX_ADC5_Init+0xc0>)
 800154c:	f001 f920 	bl	8002790 <HAL_ADC_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8001556:	f000 f9c3 	bl	80018e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_ADC5_Init+0xc8>)
 800155c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800155e:	2306      	movs	r3, #6
 8001560:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001566:	237f      	movs	r3, #127	@ 0x7f
 8001568:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800156a:	2304      	movs	r3, #4
 800156c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	@ (8001590 <MX_ADC5_Init+0xc0>)
 8001578:	f001 fcbe 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001582:	f000 f9ad 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000025c 	.word	0x2000025c
 8001594:	50000600 	.word	0x50000600
 8001598:	04300002 	.word	0x04300002

0800159c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <MX_I2C1_Init+0x78>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B17DB6;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001618 <MX_I2C1_Init+0x7c>)
 80015aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d6:	480e      	ldr	r0, [pc, #56]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015d8:	f002 fcb8 	bl	8003f4c <HAL_I2C_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015e2:	f000 f97d 	bl	80018e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015e6:	2100      	movs	r1, #0
 80015e8:	4809      	ldr	r0, [pc, #36]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015ea:	f002 fd4a 	bl	8004082 <HAL_I2CEx_ConfigAnalogFilter>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015f4:	f000 f974 	bl	80018e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015f8:	2100      	movs	r1, #0
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_I2C1_Init+0x74>)
 80015fc:	f002 fd8c 	bl	8004118 <HAL_I2CEx_ConfigDigitalFilter>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001606:	f000 f96b 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200002c8 	.word	0x200002c8
 8001614:	40005400 	.word	0x40005400
 8001618:	20b17db6 	.word	0x20b17db6

0800161c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001620:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <MX_RNG_Init+0x24>)
 8001622:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <MX_RNG_Init+0x28>)
 8001624:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <MX_RNG_Init+0x24>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	@ (8001640 <MX_RNG_Init+0x24>)
 800162e:	f003 fdef 	bl	8005210 <HAL_RNG_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001638:	f000 f952 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000031c 	.word	0x2000031c
 8001644:	50060800 	.word	0x50060800

08001648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	@ 0x38
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800167a:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <MX_TIM2_Init+0xe8>)
 800167c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001680:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001682:	4b2b      	ldr	r3, [pc, #172]	@ (8001730 <MX_TIM2_Init+0xe8>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b29      	ldr	r3, [pc, #164]	@ (8001730 <MX_TIM2_Init+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 800168e:	4b28      	ldr	r3, [pc, #160]	@ (8001730 <MX_TIM2_Init+0xe8>)
 8001690:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8001694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b26      	ldr	r3, [pc, #152]	@ (8001730 <MX_TIM2_Init+0xe8>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800169c:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <MX_TIM2_Init+0xe8>)
 800169e:	2280      	movs	r2, #128	@ 0x80
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a2:	4823      	ldr	r0, [pc, #140]	@ (8001730 <MX_TIM2_Init+0xe8>)
 80016a4:	f003 fe3f 	bl	8005326 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80016ae:	f000 f917 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016bc:	4619      	mov	r1, r3
 80016be:	481c      	ldr	r0, [pc, #112]	@ (8001730 <MX_TIM2_Init+0xe8>)
 80016c0:	f004 f980 	bl	80059c4 <HAL_TIM_ConfigClockSource>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80016ca:	f000 f909 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016ce:	4818      	ldr	r0, [pc, #96]	@ (8001730 <MX_TIM2_Init+0xe8>)
 80016d0:	f003 fef0 	bl	80054b4 <HAL_TIM_PWM_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016da:	f000 f901 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4810      	ldr	r0, [pc, #64]	@ (8001730 <MX_TIM2_Init+0xe8>)
 80016ee:	f004 ff1f 	bl	8006530 <HAL_TIMEx_MasterConfigSynchronization>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016f8:	f000 f8f2 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fc:	2360      	movs	r3, #96	@ 0x60
 80016fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	4807      	ldr	r0, [pc, #28]	@ (8001730 <MX_TIM2_Init+0xe8>)
 8001714:	f004 f842 	bl	800579c <HAL_TIM_PWM_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800171e:	f000 f8df 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001722:	4803      	ldr	r0, [pc, #12]	@ (8001730 <MX_TIM2_Init+0xe8>)
 8001724:	f000 fb12 	bl	8001d4c <HAL_TIM_MspPostInit>

}
 8001728:	bf00      	nop
 800172a:	3738      	adds	r7, #56	@ 0x38
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000330 	.word	0x20000330

08001734 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <MX_TIM3_Init+0x94>)
 8001754:	4a1d      	ldr	r2, [pc, #116]	@ (80017cc <MX_TIM3_Init+0x98>)
 8001756:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001758:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <MX_TIM3_Init+0x94>)
 800175a:	225f      	movs	r2, #95	@ 0x5f
 800175c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_TIM3_Init+0x94>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <MX_TIM3_Init+0x94>)
 8001766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800176a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <MX_TIM3_Init+0x94>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <MX_TIM3_Init+0x94>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001778:	4813      	ldr	r0, [pc, #76]	@ (80017c8 <MX_TIM3_Init+0x94>)
 800177a:	f003 fdd4 	bl	8005326 <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001784:	f000 f8ac 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	@ (80017c8 <MX_TIM3_Init+0x94>)
 8001796:	f004 f915 	bl	80059c4 <HAL_TIM_ConfigClockSource>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017a0:	f000 f89e 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <MX_TIM3_Init+0x94>)
 80017b2:	f004 febd 	bl	8006530 <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017bc:	f000 f890 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000037c 	.word	0x2000037c
 80017cc:	40000400 	.word	0x40000400

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017d6:	4a23      	ldr	r2, [pc, #140]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001818:	4811      	ldr	r0, [pc, #68]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 800181a:	f004 ff1f 	bl	800665c <HAL_UART_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001824:	f000 f85c 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	480d      	ldr	r0, [pc, #52]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 800182c:	f005 fe10 	bl	8007450 <HAL_UARTEx_SetTxFifoThreshold>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001836:	f000 f853 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183a:	2100      	movs	r1, #0
 800183c:	4808      	ldr	r0, [pc, #32]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 800183e:	f005 fe45 	bl	80074cc <HAL_UARTEx_SetRxFifoThreshold>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001848:	f000 f84a 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 800184e:	f005 fdc6 	bl	80073de <HAL_UARTEx_DisableFifoMode>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001858:	f000 f842 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200003c8 	.word	0x200003c8
 8001864:	40004400 	.word	0x40004400

08001868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <MX_GPIO_Init+0x74>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a1a      	ldr	r2, [pc, #104]	@ (80018dc <MX_GPIO_Init+0x74>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <MX_GPIO_Init+0x74>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <MX_GPIO_Init+0x74>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a14      	ldr	r2, [pc, #80]	@ (80018dc <MX_GPIO_Init+0x74>)
 800188c:	f043 0320 	orr.w	r3, r3, #32
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <MX_GPIO_Init+0x74>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <MX_GPIO_Init+0x74>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a0e      	ldr	r2, [pc, #56]	@ (80018dc <MX_GPIO_Init+0x74>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <MX_GPIO_Init+0x74>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <MX_GPIO_Init+0x74>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <MX_GPIO_Init+0x74>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <MX_GPIO_Init+0x74>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <Error_Handler+0x8>

080018ec <psu_init>:
		struct PSU_STATE* psu_handle,
		ADC_HandleTypeDef* _adc_diff,
		ADC_HandleTypeDef* _adc_single,
		TIM_HandleTypeDef* _pwm_timer,
		volatile uint32_t* _ccr,
		uint32_t pwm_channel) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]

	psu_handle->adc_diff = _adc_diff;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	605a      	str	r2, [r3, #4]
	psu_handle->adc_single = _adc_single;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	601a      	str	r2, [r3, #0]
	psu_handle->pwm_timer = _pwm_timer;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	609a      	str	r2, [r3, #8]

	psu_handle->ccr = _ccr;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	60da      	str	r2, [r3, #12]

	HAL_TIM_PWM_Start(_pwm_timer, pwm_channel);
 8001912:	69f9      	ldr	r1, [r7, #28]
 8001914:	6838      	ldr	r0, [r7, #0]
 8001916:	f003 fe2f 	bl	8005578 <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(_adc_single, ADC_SINGLE_ENDED);
 800191a:	217f      	movs	r1, #127	@ 0x7f
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f002 f84d 	bl	80039bc <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(_adc_diff, ADC_DIFFERENTIAL_ENDED);
 8001922:	4905      	ldr	r1, [pc, #20]	@ (8001938 <psu_init+0x4c>)
 8001924:	68b8      	ldr	r0, [r7, #8]
 8001926:	f002 f849 	bl	80039bc <HAL_ADCEx_Calibration_Start>


	*_ccr = 0;
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	407f0000 	.word	0x407f0000

0800193c <psu_intensity>:

void psu_intensity(struct PSU_STATE* psu_handle, uint32_t intensity) {
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	*psu_handle->ccr = intensity;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	601a      	str	r2, [r3, #0]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <psu_generic_read>:

uint32_t psu_generic_read(ADC_HandleTypeDef* adc) {
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adc);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f001 f8d0 	bl	8002b08 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(adc, 100); // poll for conversion
 8001968:	2164      	movs	r1, #100	@ 0x64
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f001 f9b0 	bl	8002cd0 <HAL_ADC_PollForConversion>

	uint32_t r = HAL_ADC_GetValue(adc);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f001 fab3 	bl	8002edc <HAL_ADC_GetValue>
 8001976:	60f8      	str	r0, [r7, #12]

	return r;
 8001978:	68fb      	ldr	r3, [r7, #12]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <psu_shunt_diff>:
uint32_t psu_output_voltage(struct PSU_STATE* psu_handle) {

	return psu_generic_read(psu_handle->adc_single);
}

uint32_t psu_shunt_diff(struct PSU_STATE* psu_handle) {
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]

	return psu_generic_read(psu_handle->adc_diff);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ffe3 	bl	800195a <psu_generic_read>
 8001994:	4603      	mov	r3, r0


}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <rng_global_init>:
#include "rng.h"

struct RNG_State GLOBAL_RNG_STATE;

/* Initialise the rng state with a seed from the RNG peripheral */
void rng_global_init(RNG_HandleTypeDef* _hrng) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	if (HAL_RNG_GenerateRandomNumber(_hrng, &(GLOBAL_RNG_STATE._state)) != HAL_OK) {
 80019a8:	4907      	ldr	r1, [pc, #28]	@ (80019c8 <rng_global_init+0x28>)
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f003 fc65 	bl	800527a <HAL_RNG_GenerateRandomNumber>
		//error
	}

	//Zero is a fixed point so we map it to 1 instead
	if (GLOBAL_RNG_STATE._state == 0) {
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <rng_global_init+0x28>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <rng_global_init+0x1e>
		GLOBAL_RNG_STATE._state = 1;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <rng_global_init+0x28>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
	}
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000488 	.word	0x20000488

080019cc <rng_global_next32>:
		GLOBAL_RNG_STATE._state = seed;
	}
}

/* Use xorshift32 to generate the next seed */
uint32_t rng_global_next32() {
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state << 13;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <rng_global_next32+0x44>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <rng_global_next32+0x44>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	035b      	lsls	r3, r3, #13
 80019da:	4053      	eors	r3, r2
 80019dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a10 <rng_global_next32+0x44>)
 80019de:	6013      	str	r3, [r2, #0]
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state >> 17;
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <rng_global_next32+0x44>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <rng_global_next32+0x44>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0c5b      	lsrs	r3, r3, #17
 80019ea:	4053      	eors	r3, r2
 80019ec:	4a08      	ldr	r2, [pc, #32]	@ (8001a10 <rng_global_next32+0x44>)
 80019ee:	6013      	str	r3, [r2, #0]
	GLOBAL_RNG_STATE._state ^= GLOBAL_RNG_STATE._state << 5;
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <rng_global_next32+0x44>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <rng_global_next32+0x44>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	015b      	lsls	r3, r3, #5
 80019fa:	4053      	eors	r3, r2
 80019fc:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <rng_global_next32+0x44>)
 80019fe:	6013      	str	r3, [r2, #0]
	return GLOBAL_RNG_STATE._state;
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <rng_global_next32+0x44>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000488 	.word	0x20000488

08001a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a36:	4a08      	ldr	r2, [pc, #32]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a3e:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a4a:	f002 fc55 	bl	80042f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0a0      	sub	sp, #128	@ 0x80
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	2254      	movs	r2, #84	@ 0x54
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f006 fc13 	bl	80082a8 <memset>
  if(hadc->Instance==ADC2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a3c      	ldr	r2, [pc, #240]	@ (8001b78 <HAL_ADC_MspInit+0x11c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d135      	bne.n	8001af8 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a90:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a92:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a98:	f107 0318 	add.w	r3, r7, #24
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 f969 	bl	8004d74 <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001aa8:	f7ff ff1a 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001aac:	4b33      	ldr	r3, [pc, #204]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab0:	4a32      	ldr	r2, [pc, #200]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001ab2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab8:	4b30      	ldr	r3, [pc, #192]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001adc:	23c3      	movs	r3, #195	@ 0xc3
 8001ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001aec:	4619      	mov	r1, r3
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af2:	f002 f8a9 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001af6:	e03a      	b.n	8001b6e <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC5)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a20      	ldr	r2, [pc, #128]	@ (8001b80 <HAL_ADC_MspInit+0x124>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d135      	bne.n	8001b6e <HAL_ADC_MspInit+0x112>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001b02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001b08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001b0c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 f92e 	bl	8004d74 <HAL_RCCEx_PeriphCLKConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_ADC_MspInit+0xc6>
      Error_Handler();
 8001b1e:	f7ff fedf 	bl	80018e0 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001b22:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2e:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_ADC_MspInit+0x120>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b64:	4619      	mov	r1, r3
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6a:	f002 f86d 	bl	8003c48 <HAL_GPIO_Init>
}
 8001b6e:	bf00      	nop
 8001b70:	3780      	adds	r7, #128	@ 0x80
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	50000100 	.word	0x50000100
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	50000600 	.word	0x50000600

08001b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0a0      	sub	sp, #128	@ 0x80
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	f107 0318 	add.w	r3, r7, #24
 8001ba0:	2254      	movs	r2, #84	@ 0x54
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f006 fb7f 	bl	80082a8 <memset>
  if(hi2c->Instance==I2C1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a30      	ldr	r2, [pc, #192]	@ (8001c70 <HAL_I2C_MspInit+0xec>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d159      	bne.n	8001c68 <HAL_I2C_MspInit+0xe4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bb4:	2340      	movs	r3, #64	@ 0x40
 8001bb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bbc:	f107 0318 	add.w	r3, r7, #24
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 f8d7 	bl	8004d74 <HAL_RCCEx_PeriphCLKConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bcc:	f7ff fe88 	bl	80018e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <HAL_I2C_MspInit+0xf0>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd4:	4a27      	ldr	r2, [pc, #156]	@ (8001c74 <HAL_I2C_MspInit+0xf0>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bdc:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <HAL_I2C_MspInit+0xf0>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <HAL_I2C_MspInit+0xf0>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bec:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <HAL_I2C_MspInit+0xf0>)
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <HAL_I2C_MspInit+0xf0>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c06:	2312      	movs	r3, #18
 8001c08:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c12:	2304      	movs	r3, #4
 8001c14:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c20:	f002 f812 	bl	8003c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c24:	2380      	movs	r3, #128	@ 0x80
 8001c26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c28:	2312      	movs	r3, #18
 8001c2a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c34:	2304      	movs	r3, #4
 8001c36:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480e      	ldr	r0, [pc, #56]	@ (8001c78 <HAL_I2C_MspInit+0xf4>)
 8001c40:	f002 f802 	bl	8003c48 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001c44:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <HAL_I2C_MspInit+0xf8>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a0c      	ldr	r2, [pc, #48]	@ (8001c7c <HAL_I2C_MspInit+0xf8>)
 8001c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_I2C_MspInit+0xf0>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	4a07      	ldr	r2, [pc, #28]	@ (8001c74 <HAL_I2C_MspInit+0xf0>)
 8001c56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_I2C_MspInit+0xf0>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c68:	bf00      	nop
 8001c6a:	3780      	adds	r7, #128	@ 0x80
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40005400 	.word	0x40005400
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	40010000 	.word	0x40010000

08001c80 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b098      	sub	sp, #96	@ 0x60
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	2254      	movs	r2, #84	@ 0x54
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f006 fb09 	bl	80082a8 <memset>
  if(hrng->Instance==RNG)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ce0 <HAL_RNG_MspInit+0x60>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d11b      	bne.n	8001cd8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001ca0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ca4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8001ca6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 f85f 	bl	8004d74 <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001cbc:	f7ff fe10 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_RNG_MspInit+0x64>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_RNG_MspInit+0x64>)
 8001cc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_RNG_MspInit+0x64>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001cd8:	bf00      	nop
 8001cda:	3760      	adds	r7, #96	@ 0x60
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	50060800 	.word	0x50060800
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfa:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <HAL_TIM_Base_MspInit+0x5c>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	4a11      	ldr	r2, [pc, #68]	@ (8001d44 <HAL_TIM_Base_MspInit+0x5c>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d06:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <HAL_TIM_Base_MspInit+0x5c>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d12:	e010      	b.n	8001d36 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	@ (8001d48 <HAL_TIM_Base_MspInit+0x60>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10b      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_TIM_Base_MspInit+0x5c>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <HAL_TIM_Base_MspInit+0x5c>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_TIM_Base_MspInit+0x5c>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40000400 	.word	0x40000400

08001d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d6c:	d11c      	bne.n	8001da8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <HAL_TIM_MspPostInit+0x64>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d72:	4a0f      	ldr	r2, [pc, #60]	@ (8001db0 <HAL_TIM_MspPostInit+0x64>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <HAL_TIM_MspPostInit+0x64>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d86:	2320      	movs	r3, #32
 8001d88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da4:	f001 ff50 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b09e      	sub	sp, #120	@ 0x78
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	2254      	movs	r2, #84	@ 0x54
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f006 fa67 	bl	80082a8 <memset>
  if(huart->Instance==USART2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1f      	ldr	r2, [pc, #124]	@ (8001e5c <HAL_UART_MspInit+0xa8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d136      	bne.n	8001e52 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001de4:	2302      	movs	r3, #2
 8001de6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 ffbf 	bl	8004d74 <HAL_RCCEx_PeriphCLKConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dfc:	f7ff fd70 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e00:	4b17      	ldr	r3, [pc, #92]	@ (8001e60 <HAL_UART_MspInit+0xac>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	4a16      	ldr	r2, [pc, #88]	@ (8001e60 <HAL_UART_MspInit+0xac>)
 8001e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <HAL_UART_MspInit+0xac>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_UART_MspInit+0xac>)
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1c:	4a10      	ldr	r2, [pc, #64]	@ (8001e60 <HAL_UART_MspInit+0xac>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e24:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <HAL_UART_MspInit+0xac>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e30:	230c      	movs	r3, #12
 8001e32:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e40:	2307      	movs	r3, #7
 8001e42:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e4e:	f001 fefb 	bl	8003c48 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e52:	bf00      	nop
 8001e54:	3778      	adds	r7, #120	@ 0x78
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40004400 	.word	0x40004400
 8001e60:	40021000 	.word	0x40021000

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <NMI_Handler+0x4>

08001e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <HardFault_Handler+0x4>

08001e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <MemManage_Handler+0x4>

08001e7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <BusFault_Handler+0x4>

08001e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <UsageFault_Handler+0x4>

08001e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eba:	f000 f9d7 	bl	800226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  return 1;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_kill>:

int _kill(int pid, int sig)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001edc:	f006 fa36 	bl	800834c <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2216      	movs	r2, #22
 8001ee4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_exit>:

void _exit (int status)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001efa:	f04f 31ff 	mov.w	r1, #4294967295
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffe7 	bl	8001ed2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <_exit+0x12>

08001f08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	e00a      	b.n	8001f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f1a:	f3af 8000 	nop.w
 8001f1e:	4601      	mov	r1, r0
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	60ba      	str	r2, [r7, #8]
 8001f26:	b2ca      	uxtb	r2, r1
 8001f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf0      	blt.n	8001f1a <_read+0x12>
  }

  return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e009      	b.n	8001f68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	60ba      	str	r2, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f889 	bl	8002074 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dbf1      	blt.n	8001f54 <_write+0x12>
  }
  return len;
 8001f70:	687b      	ldr	r3, [r7, #4]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_close>:

int _close(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa2:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <_isatty>:

int _isatty(int file)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <_sbrk+0x5c>)
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <_sbrk+0x60>)
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <_sbrk+0x64>)
 8002002:	4a12      	ldr	r2, [pc, #72]	@ (800204c <_sbrk+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d207      	bcs.n	8002024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002014:	f006 f99a 	bl	800834c <__errno>
 8002018:	4603      	mov	r3, r0
 800201a:	220c      	movs	r2, #12
 800201c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e009      	b.n	8002038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <_sbrk+0x64>)
 8002034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20020000 	.word	0x20020000
 8002044:	00000400 	.word	0x00000400
 8002048:	20000490 	.word	0x20000490
 800204c:	200005e8 	.word	0x200005e8

08002050 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <SystemInit+0x20>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	4a05      	ldr	r2, [pc, #20]	@ (8002070 <SystemInit+0x20>)
 800205c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800207c:	1d39      	adds	r1, r7, #4
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	2201      	movs	r2, #1
 8002084:	4803      	ldr	r0, [pc, #12]	@ (8002094 <__io_putchar+0x20>)
 8002086:	f004 fb39 	bl	80066fc <HAL_UART_Transmit>
  return ch;
 800208a:	687b      	ldr	r3, [r7, #4]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200003c8 	.word	0x200003c8

08002098 <read_uart_into_buffer>:

uint32_t read_uart_into_buffer(uint8_t* buffer, uint32_t buffer_size, uint8_t stop_character) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	4613      	mov	r3, r2
 80020a4:	71fb      	strb	r3, [r7, #7]
	//Keep reading into the until either a) the stop character is reached or b) we run out of buffer space
	uint32_t count = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]

	while (1) {


		if (count >= buffer_size) {
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d302      	bcc.n	80020b8 <read_uart_into_buffer+0x20>
			return -1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e028      	b.n	800210a <read_uart_into_buffer+0x72>
		}

		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80020b8:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <read_uart_into_buffer+0x7c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2208      	movs	r2, #8
 80020be:	621a      	str	r2, [r3, #32]

		HAL_UART_Receive(&huart2, buffer + count, 1, HAL_MAX_DELAY);
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	18d1      	adds	r1, r2, r3
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	2201      	movs	r2, #1
 80020cc:	4811      	ldr	r0, [pc, #68]	@ (8002114 <read_uart_into_buffer+0x7c>)
 80020ce:	f004 fba3 	bl	8006818 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, buffer + count, 1, HAL_MAX_DELAY);
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	18d1      	adds	r1, r2, r3
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
 80020dc:	2201      	movs	r2, #1
 80020de:	480d      	ldr	r0, [pc, #52]	@ (8002114 <read_uart_into_buffer+0x7c>)
 80020e0:	f004 fb0c 	bl	80066fc <HAL_UART_Transmit>

		if (buffer[count] == stop_character) {
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	79fa      	ldrb	r2, [r7, #7]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d107      	bne.n	8002102 <read_uart_into_buffer+0x6a>
			buffer[count] = '\0';
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	4413      	add	r3, r2
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
			return count+1;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	e003      	b.n	800210a <read_uart_into_buffer+0x72>
		}

		count += 1;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
		if (count >= buffer_size) {
 8002108:	e7cf      	b.n	80020aa <read_uart_into_buffer+0x12>
	}
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200003c8 	.word	0x200003c8

08002118 <vm_init>:
		uint32_t* _call_stack,
		uint32_t* _operand_stack,
		uint32_t _call_stack_size,
		uint32_t _operand_stack_size,
		uint8_t* _rom,
		uint32_t _rom_size) {
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
	state->call_stack = _call_stack;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	601a      	str	r2, [r3, #0]
	state->operand_stack = _operand_stack;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	605a      	str	r2, [r3, #4]
	state->call_stack_size = _call_stack_size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	609a      	str	r2, [r3, #8]
	state->operand_stack_size = _operand_stack_size;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	60da      	str	r2, [r3, #12]
	state->rom = _rom;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	611a      	str	r2, [r3, #16]
	state->rom_size = _rom_size;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a3a      	ldr	r2, [r7, #32]
 8002148:	615a      	str	r2, [r3, #20]
	state->pc = 0;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	61da      	str	r2, [r3, #28]
	state->bp = 0;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	629a      	str	r2, [r3, #40]	@ 0x28
	state->csp = -1;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	621a      	str	r2, [r3, #32]
	state->osp = -1;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24



}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002174:	480d      	ldr	r0, [pc, #52]	@ (80021ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002176:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002178:	f7ff ff6a 	bl	8002050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800217c:	480c      	ldr	r0, [pc, #48]	@ (80021b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800217e:	490d      	ldr	r1, [pc, #52]	@ (80021b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <LoopForever+0xe>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002194:	4c0a      	ldr	r4, [pc, #40]	@ (80021c0 <LoopForever+0x16>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a2:	f006 f8d9 	bl	8008358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021a6:	f7fe ff55 	bl	8001054 <main>

080021aa <LoopForever>:

LoopForever:
    b LoopForever
 80021aa:	e7fe      	b.n	80021aa <LoopForever>
  ldr   r0, =_estack
 80021ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021b8:	0800a3e0 	.word	0x0800a3e0
  ldr r2, =_sbss
 80021bc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80021c0:	200005e4 	.word	0x200005e4

080021c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC1_2_IRQHandler>

080021c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d0:	2003      	movs	r0, #3
 80021d2:	f001 fd07 	bl	8003be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021d6:	2000      	movs	r0, #0
 80021d8:	f000 f80e 	bl	80021f8 <HAL_InitTick>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	71fb      	strb	r3, [r7, #7]
 80021e6:	e001      	b.n	80021ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021e8:	f7ff fc14 	bl	8001a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021ec:	79fb      	ldrb	r3, [r7, #7]

}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002204:	4b16      	ldr	r3, [pc, #88]	@ (8002260 <HAL_InitTick+0x68>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d022      	beq.n	8002252 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800220c:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_InitTick+0x6c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <HAL_InitTick+0x68>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002218:	fbb1 f3f3 	udiv	r3, r1, r3
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	4618      	mov	r0, r3
 8002222:	f001 fd04 	bl	8003c2e <HAL_SYSTICK_Config>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10f      	bne.n	800224c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b0f      	cmp	r3, #15
 8002230:	d809      	bhi.n	8002246 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002232:	2200      	movs	r2, #0
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	f04f 30ff 	mov.w	r0, #4294967295
 800223a:	f001 fcde 	bl	8003bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800223e:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <HAL_InitTick+0x70>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e007      	b.n	8002256 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e004      	b.n	8002256 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e001      	b.n	8002256 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000008 	.word	0x20000008
 8002264:	20000000 	.word	0x20000000
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_IncTick+0x1c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_IncTick+0x20>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4413      	add	r3, r2
 800227a:	4a03      	ldr	r2, [pc, #12]	@ (8002288 <HAL_IncTick+0x1c>)
 800227c:	6013      	str	r3, [r2, #0]
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	20000494 	.word	0x20000494
 800228c:	20000008 	.word	0x20000008

08002290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <HAL_GetTick+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000494 	.word	0x20000494

080022a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff ffee 	bl	8002290 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d004      	beq.n	80022cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <HAL_Delay+0x40>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022cc:	bf00      	nop
 80022ce:	f7ff ffdf 	bl	8002290 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d8f7      	bhi.n	80022ce <HAL_Delay+0x26>
  {
  }
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000008 	.word	0x20000008

080022ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3360      	adds	r3, #96	@ 0x60
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <LL_ADC_SetOffset+0x44>)
 8002376:	4013      	ands	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	4313      	orrs	r3, r2
 8002384:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800238c:	bf00      	nop
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	03fff000 	.word	0x03fff000

0800239c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3360      	adds	r3, #96	@ 0x60
 80023aa:	461a      	mov	r2, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3360      	adds	r3, #96	@ 0x60
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023fe:	b480      	push	{r7}
 8002400:	b087      	sub	sp, #28
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3360      	adds	r3, #96	@ 0x60
 800240e:	461a      	mov	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	431a      	orrs	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3360      	adds	r3, #96	@ 0x60
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	431a      	orrs	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800245e:	bf00      	nop
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	615a      	str	r2, [r3, #20]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b087      	sub	sp, #28
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3330      	adds	r3, #48	@ 0x30
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	4413      	add	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	211f      	movs	r1, #31
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	401a      	ands	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	f003 011f 	and.w	r1, r3, #31
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	431a      	orrs	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800250e:	b480      	push	{r7}
 8002510:	b087      	sub	sp, #28
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3314      	adds	r3, #20
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	0e5b      	lsrs	r3, r3, #25
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	4413      	add	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	0d1b      	lsrs	r3, r3, #20
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	2107      	movs	r1, #7
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	401a      	ands	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	0d1b      	lsrs	r3, r3, #20
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	431a      	orrs	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	43db      	mvns	r3, r3
 800257e:	401a      	ands	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0318 	and.w	r3, r3, #24
 8002586:	4908      	ldr	r1, [pc, #32]	@ (80025a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002588:	40d9      	lsrs	r1, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	400b      	ands	r3, r1
 800258e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002592:	431a      	orrs	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	0007ffff 	.word	0x0007ffff

080025ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 031f 	and.w	r3, r3, #31
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6093      	str	r3, [r2, #8]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800261c:	d101      	bne.n	8002622 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002640:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002644:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002668:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800266c:	d101      	bne.n	8002672 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002690:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026bc:	f043 0202 	orr.w	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <LL_ADC_IsEnabled+0x18>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <LL_ADC_IsEnabled+0x1a>
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b02      	cmp	r3, #2
 8002708:	d101      	bne.n	800270e <LL_ADC_IsDisableOngoing+0x18>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <LL_ADC_IsDisableOngoing+0x1a>
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800272c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002730:	f043 0204 	orr.w	r2, r3, #4
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b04      	cmp	r3, #4
 8002756:	d101      	bne.n	800275c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b08      	cmp	r3, #8
 800277c:	d101      	bne.n	8002782 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e1a9      	b.n	8002afe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff f94f 	bl	8001a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff19 	bl	8002608 <LL_ADC_IsDeepPowerDownEnabled>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff feff 	bl	80025e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ff34 	bl	8002658 <LL_ADC_IsInternalRegulatorEnabled>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d115      	bne.n	8002822 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff18 	bl	8002630 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002800:	4b9c      	ldr	r3, [pc, #624]	@ (8002a74 <HAL_ADC_Init+0x2e4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	4a9c      	ldr	r2, [pc, #624]	@ (8002a78 <HAL_ADC_Init+0x2e8>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	099b      	lsrs	r3, r3, #6
 800280e:	3301      	adds	r3, #1
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002814:	e002      	b.n	800281c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3b01      	subs	r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f9      	bne.n	8002816 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff16 	bl	8002658 <LL_ADC_IsInternalRegulatorEnabled>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10d      	bne.n	800284e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002836:	f043 0210 	orr.w	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ff76 	bl	8002744 <LL_ADC_REG_IsConversionOngoing>
 8002858:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 8142 	bne.w	8002aec <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f040 813e 	bne.w	8002aec <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002874:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002878:	f043 0202 	orr.w	r2, r3, #2
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff23 	bl	80026d0 <LL_ADC_IsEnabled>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d141      	bne.n	8002914 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002898:	d004      	beq.n	80028a4 <HAL_ADC_Init+0x114>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a77      	ldr	r2, [pc, #476]	@ (8002a7c <HAL_ADC_Init+0x2ec>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d10f      	bne.n	80028c4 <HAL_ADC_Init+0x134>
 80028a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028a8:	f7ff ff12 	bl	80026d0 <LL_ADC_IsEnabled>
 80028ac:	4604      	mov	r4, r0
 80028ae:	4873      	ldr	r0, [pc, #460]	@ (8002a7c <HAL_ADC_Init+0x2ec>)
 80028b0:	f7ff ff0e 	bl	80026d0 <LL_ADC_IsEnabled>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4323      	orrs	r3, r4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e012      	b.n	80028ea <HAL_ADC_Init+0x15a>
 80028c4:	486e      	ldr	r0, [pc, #440]	@ (8002a80 <HAL_ADC_Init+0x2f0>)
 80028c6:	f7ff ff03 	bl	80026d0 <LL_ADC_IsEnabled>
 80028ca:	4604      	mov	r4, r0
 80028cc:	486d      	ldr	r0, [pc, #436]	@ (8002a84 <HAL_ADC_Init+0x2f4>)
 80028ce:	f7ff feff 	bl	80026d0 <LL_ADC_IsEnabled>
 80028d2:	4603      	mov	r3, r0
 80028d4:	431c      	orrs	r4, r3
 80028d6:	486c      	ldr	r0, [pc, #432]	@ (8002a88 <HAL_ADC_Init+0x2f8>)
 80028d8:	f7ff fefa 	bl	80026d0 <LL_ADC_IsEnabled>
 80028dc:	4603      	mov	r3, r0
 80028de:	4323      	orrs	r3, r4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d012      	beq.n	8002914 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f6:	d004      	beq.n	8002902 <HAL_ADC_Init+0x172>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5f      	ldr	r2, [pc, #380]	@ (8002a7c <HAL_ADC_Init+0x2ec>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d101      	bne.n	8002906 <HAL_ADC_Init+0x176>
 8002902:	4a62      	ldr	r2, [pc, #392]	@ (8002a8c <HAL_ADC_Init+0x2fc>)
 8002904:	e000      	b.n	8002908 <HAL_ADC_Init+0x178>
 8002906:	4a62      	ldr	r2, [pc, #392]	@ (8002a90 <HAL_ADC_Init+0x300>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f7ff fcec 	bl	80022ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7f5b      	ldrb	r3, [r3, #29]
 8002918:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800291e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002924:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800292a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002932:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800293e:	2b01      	cmp	r3, #1
 8002940:	d106      	bne.n	8002950 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	045b      	lsls	r3, r3, #17
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	4b48      	ldr	r3, [pc, #288]	@ (8002a94 <HAL_ADC_Init+0x304>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	430b      	orrs	r3, r1
 800297e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fee5 	bl	800276a <LL_ADC_INJ_IsConversionOngoing>
 80029a0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d17f      	bne.n	8002aa8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d17c      	bne.n	8002aa8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ca:	f023 0302 	bic.w	r3, r3, #2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d017      	beq.n	8002a10 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6911      	ldr	r1, [r2, #16]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a0e:	e013      	b.n	8002a38 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a34:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d12a      	bne.n	8002a98 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a58:	4311      	orrs	r1, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a64:	430a      	orrs	r2, r1
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	611a      	str	r2, [r3, #16]
 8002a72:	e019      	b.n	8002aa8 <HAL_ADC_Init+0x318>
 8002a74:	20000000 	.word	0x20000000
 8002a78:	053e2d63 	.word	0x053e2d63
 8002a7c:	50000100 	.word	0x50000100
 8002a80:	50000400 	.word	0x50000400
 8002a84:	50000500 	.word	0x50000500
 8002a88:	50000600 	.word	0x50000600
 8002a8c:	50000300 	.word	0x50000300
 8002a90:	50000700 	.word	0x50000700
 8002a94:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10c      	bne.n	8002aca <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f023 010f 	bic.w	r1, r3, #15
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	1e5a      	subs	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ac8:	e007      	b.n	8002ada <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 020f 	bic.w	r2, r2, #15
 8002ad8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aea:	e007      	b.n	8002afc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	@ 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop

08002b08 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b18:	d004      	beq.n	8002b24 <HAL_ADC_Start+0x1c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a67      	ldr	r2, [pc, #412]	@ (8002cbc <HAL_ADC_Start+0x1b4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_Start+0x20>
 8002b24:	4b66      	ldr	r3, [pc, #408]	@ (8002cc0 <HAL_ADC_Start+0x1b8>)
 8002b26:	e000      	b.n	8002b2a <HAL_ADC_Start+0x22>
 8002b28:	4b66      	ldr	r3, [pc, #408]	@ (8002cc4 <HAL_ADC_Start+0x1bc>)
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fd3e 	bl	80025ac <LL_ADC_GetMultimode>
 8002b30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fe04 	bl	8002744 <LL_ADC_REG_IsConversionOngoing>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 80b4 	bne.w	8002cac <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADC_Start+0x4a>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e0af      	b.n	8002cb2 <HAL_ADC_Start+0x1aa>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fe0c 	bl	8003778 <ADC_Enable>
 8002b60:	4603      	mov	r3, r0
 8002b62:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 809b 	bne.w	8002ca2 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	@ (8002cbc <HAL_ADC_Start+0x1b4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_ADC_Start+0x96>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4e      	ldr	r2, [pc, #312]	@ (8002cc8 <HAL_ADC_Start+0x1c0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d002      	beq.n	8002b9a <HAL_ADC_Start+0x92>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	e003      	b.n	8002ba2 <HAL_ADC_Start+0x9a>
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <HAL_ADC_Start+0x1c4>)
 8002b9c:	e001      	b.n	8002ba2 <HAL_ADC_Start+0x9a>
 8002b9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d002      	beq.n	8002bb0 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bce:	f023 0206 	bic.w	r2, r3, #6
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002bd6:	e002      	b.n	8002bde <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	221c      	movs	r2, #28
 8002be4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a32      	ldr	r2, [pc, #200]	@ (8002cbc <HAL_ADC_Start+0x1b4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_ADC_Start+0x104>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a32      	ldr	r2, [pc, #200]	@ (8002cc8 <HAL_ADC_Start+0x1c0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d002      	beq.n	8002c08 <HAL_ADC_Start+0x100>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	e003      	b.n	8002c10 <HAL_ADC_Start+0x108>
 8002c08:	4b30      	ldr	r3, [pc, #192]	@ (8002ccc <HAL_ADC_Start+0x1c4>)
 8002c0a:	e001      	b.n	8002c10 <HAL_ADC_Start+0x108>
 8002c0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d008      	beq.n	8002c2a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d002      	beq.n	8002c2a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b09      	cmp	r3, #9
 8002c28:	d114      	bne.n	8002c54 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fd65 	bl	800271c <LL_ADC_REG_StartConversion>
 8002c52:	e02d      	b.n	8002cb0 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c58:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a15      	ldr	r2, [pc, #84]	@ (8002cbc <HAL_ADC_Start+0x1b4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_ADC_Start+0x176>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a16      	ldr	r2, [pc, #88]	@ (8002cc8 <HAL_ADC_Start+0x1c0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d002      	beq.n	8002c7a <HAL_ADC_Start+0x172>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	e003      	b.n	8002c82 <HAL_ADC_Start+0x17a>
 8002c7a:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <HAL_ADC_Start+0x1c4>)
 8002c7c:	e001      	b.n	8002c82 <HAL_ADC_Start+0x17a>
 8002c7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c82:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00f      	beq.n	8002cb0 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ca0:	e006      	b.n	8002cb0 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002caa:	e001      	b.n	8002cb0 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
 8002cae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	50000100 	.word	0x50000100
 8002cc0:	50000300 	.word	0x50000300
 8002cc4:	50000700 	.word	0x50000700
 8002cc8:	50000500 	.word	0x50000500
 8002ccc:	50000400 	.word	0x50000400

08002cd0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_PollForConversion+0x1e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a77      	ldr	r2, [pc, #476]	@ (8002ec8 <HAL_ADC_PollForConversion+0x1f8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_PollForConversion+0x22>
 8002cee:	4b77      	ldr	r3, [pc, #476]	@ (8002ecc <HAL_ADC_PollForConversion+0x1fc>)
 8002cf0:	e000      	b.n	8002cf4 <HAL_ADC_PollForConversion+0x24>
 8002cf2:	4b77      	ldr	r3, [pc, #476]	@ (8002ed0 <HAL_ADC_PollForConversion+0x200>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fc59 	bl	80025ac <LL_ADC_GetMultimode>
 8002cfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d102      	bne.n	8002d0a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d04:	2308      	movs	r3, #8
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	e037      	b.n	8002d7a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d002      	beq.n	8002d1c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b09      	cmp	r3, #9
 8002d1a:	d111      	bne.n	8002d40 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0c1      	b.n	8002ebe <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d3e:	e01c      	b.n	8002d7a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d48:	d004      	beq.n	8002d54 <HAL_ADC_PollForConversion+0x84>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ec8 <HAL_ADC_PollForConversion+0x1f8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_PollForConversion+0x88>
 8002d54:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_ADC_PollForConversion+0x1fc>)
 8002d56:	e000      	b.n	8002d5a <HAL_ADC_PollForConversion+0x8a>
 8002d58:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed0 <HAL_ADC_PollForConversion+0x200>)
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fc34 	bl	80025c8 <LL_ADC_GetMultiDMATransfer>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0a3      	b.n	8002ebe <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d76:	2304      	movs	r3, #4
 8002d78:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d7a:	f7ff fa89 	bl	8002290 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d80:	e021      	b.n	8002dc6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d01d      	beq.n	8002dc6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d8a:	f7ff fa81 	bl	8002290 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <HAL_ADC_PollForConversion+0xd0>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d112      	bne.n	8002dc6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	f043 0204 	orr.w	r2, r3, #4
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e07b      	b.n	8002ebe <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0d6      	beq.n	8002d82 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fb53 	bl	8002490 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01c      	beq.n	8002e2a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7f5b      	ldrb	r3, [r3, #29]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d118      	bne.n	8002e2a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d111      	bne.n	8002e2a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a26      	ldr	r2, [pc, #152]	@ (8002ec8 <HAL_ADC_PollForConversion+0x1f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d009      	beq.n	8002e48 <HAL_ADC_PollForConversion+0x178>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a26      	ldr	r2, [pc, #152]	@ (8002ed4 <HAL_ADC_PollForConversion+0x204>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d002      	beq.n	8002e44 <HAL_ADC_PollForConversion+0x174>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	e003      	b.n	8002e4c <HAL_ADC_PollForConversion+0x17c>
 8002e44:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <HAL_ADC_PollForConversion+0x208>)
 8002e46:	e001      	b.n	8002e4c <HAL_ADC_PollForConversion+0x17c>
 8002e48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d008      	beq.n	8002e66 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d002      	beq.n	8002e66 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b09      	cmp	r3, #9
 8002e64:	d104      	bne.n	8002e70 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e014      	b.n	8002e9a <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a14      	ldr	r2, [pc, #80]	@ (8002ec8 <HAL_ADC_PollForConversion+0x1f8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_ADC_PollForConversion+0x1be>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a15      	ldr	r2, [pc, #84]	@ (8002ed4 <HAL_ADC_PollForConversion+0x204>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d002      	beq.n	8002e8a <HAL_ADC_PollForConversion+0x1ba>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	e003      	b.n	8002e92 <HAL_ADC_PollForConversion+0x1c2>
 8002e8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <HAL_ADC_PollForConversion+0x208>)
 8002e8c:	e001      	b.n	8002e92 <HAL_ADC_PollForConversion+0x1c2>
 8002e8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e92:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d104      	bne.n	8002eaa <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e008      	b.n	8002ebc <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	220c      	movs	r2, #12
 8002eba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	50000100 	.word	0x50000100
 8002ecc:	50000300 	.word	0x50000300
 8002ed0:	50000700 	.word	0x50000700
 8002ed4:	50000500 	.word	0x50000500
 8002ed8:	50000400 	.word	0x50000400

08002edc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0b6      	sub	sp, #216	@ 0xd8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d102      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x24>
 8002f16:	2302      	movs	r3, #2
 8002f18:	f000 bc13 	b.w	8003742 <HAL_ADC_ConfigChannel+0x84a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fc0b 	bl	8002744 <LL_ADC_REG_IsConversionOngoing>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 83f3 	bne.w	800371c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f7ff fab7 	bl	80024b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fbf9 	bl	8002744 <LL_ADC_REG_IsConversionOngoing>
 8002f52:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fc05 	bl	800276a <LL_ADC_INJ_IsConversionOngoing>
 8002f60:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 81d9 	bne.w	8003320 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 81d4 	bne.w	8003320 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f80:	d10f      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f7ff fabe 	bl	800250e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fa65 	bl	800246a <LL_ADC_SetSamplingTimeCommonConfig>
 8002fa0:	e00e      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6819      	ldr	r1, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f7ff faad 	bl	800250e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fa55 	bl	800246a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	08db      	lsrs	r3, r3, #3
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d022      	beq.n	8003028 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6919      	ldr	r1, [r3, #16]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ff2:	f7ff f9af 	bl	8002354 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6919      	ldr	r1, [r3, #16]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	461a      	mov	r2, r3
 8003004:	f7ff f9fb 	bl	80023fe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003014:	2b01      	cmp	r3, #1
 8003016:	d102      	bne.n	800301e <HAL_ADC_ConfigChannel+0x126>
 8003018:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800301c:	e000      	b.n	8003020 <HAL_ADC_ConfigChannel+0x128>
 800301e:	2300      	movs	r3, #0
 8003020:	461a      	mov	r2, r3
 8003022:	f7ff fa07 	bl	8002434 <LL_ADC_SetOffsetSaturation>
 8003026:	e17b      	b.n	8003320 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f9b4 	bl	800239c <LL_ADC_GetOffsetChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x15c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff f9a9 	bl	800239c <LL_ADC_GetOffsetChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	0e9b      	lsrs	r3, r3, #26
 800304e:	f003 021f 	and.w	r2, r3, #31
 8003052:	e01e      	b.n	8003092 <HAL_ADC_ConfigChannel+0x19a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f99e 	bl	800239c <LL_ADC_GetOffsetChannel>
 8003060:	4603      	mov	r3, r0
 8003062:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003072:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003076:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800307a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003082:	2320      	movs	r3, #32
 8003084:	e004      	b.n	8003090 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003086:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x1b2>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	0e9b      	lsrs	r3, r3, #26
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	e018      	b.n	80030dc <HAL_ADC_ConfigChannel+0x1e4>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80030be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80030c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80030ce:	2320      	movs	r3, #32
 80030d0:	e004      	b.n	80030dc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80030d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030dc:	429a      	cmp	r2, r3
 80030de:	d106      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f96d 	bl	80023c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2101      	movs	r1, #1
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff f951 	bl	800239c <LL_ADC_GetOffsetChannel>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <HAL_ADC_ConfigChannel+0x222>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f946 	bl	800239c <LL_ADC_GetOffsetChannel>
 8003110:	4603      	mov	r3, r0
 8003112:	0e9b      	lsrs	r3, r3, #26
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	e01e      	b.n	8003158 <HAL_ADC_ConfigChannel+0x260>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff f93b 	bl	800239c <LL_ADC_GetOffsetChannel>
 8003126:	4603      	mov	r3, r0
 8003128:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003138:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800313c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	e004      	b.n	8003156 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800314c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x278>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e9b      	lsrs	r3, r3, #26
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	e018      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x2aa>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003184:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003188:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800318c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	e004      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003198:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d106      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	2101      	movs	r1, #1
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff f90a 	bl	80023c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2102      	movs	r1, #2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f8ee 	bl	800239c <LL_ADC_GetOffsetChannel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x2e8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2102      	movs	r1, #2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f8e3 	bl	800239c <LL_ADC_GetOffsetChannel>
 80031d6:	4603      	mov	r3, r0
 80031d8:	0e9b      	lsrs	r3, r3, #26
 80031da:	f003 021f 	and.w	r2, r3, #31
 80031de:	e01e      	b.n	800321e <HAL_ADC_ConfigChannel+0x326>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2102      	movs	r1, #2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f8d8 	bl	800239c <LL_ADC_GetOffsetChannel>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80031fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003202:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003206:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e004      	b.n	800321c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003212:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x33e>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	0e9b      	lsrs	r3, r3, #26
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	e016      	b.n	8003264 <HAL_ADC_ConfigChannel+0x36c>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003248:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800324a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800324e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e004      	b.n	8003264 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800325a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003264:	429a      	cmp	r2, r3
 8003266:	d106      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2200      	movs	r2, #0
 800326e:	2102      	movs	r1, #2
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f8a9 	bl	80023c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2103      	movs	r1, #3
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff f88d 	bl	800239c <LL_ADC_GetOffsetChannel>
 8003282:	4603      	mov	r3, r0
 8003284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x3aa>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2103      	movs	r1, #3
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f882 	bl	800239c <LL_ADC_GetOffsetChannel>
 8003298:	4603      	mov	r3, r0
 800329a:	0e9b      	lsrs	r3, r3, #26
 800329c:	f003 021f 	and.w	r2, r3, #31
 80032a0:	e017      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x3da>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2103      	movs	r1, #3
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff f877 	bl	800239c <LL_ADC_GetOffsetChannel>
 80032ae:	4603      	mov	r3, r0
 80032b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b4:	fa93 f3a3 	rbit	r3, r3
 80032b8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80032ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032bc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80032be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80032c4:	2320      	movs	r3, #32
 80032c6:	e003      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80032c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x3f2>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	e011      	b.n	800330e <HAL_ADC_ConfigChannel+0x416>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80032f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80032fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003302:	2320      	movs	r3, #32
 8003304:	e003      	b.n	800330e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800330e:	429a      	cmp	r2, r3
 8003310:	d106      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2200      	movs	r2, #0
 8003318:	2103      	movs	r1, #3
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff f854 	bl	80023c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff f9d3 	bl	80026d0 <LL_ADC_IsEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	f040 813d 	bne.w	80035ac <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	461a      	mov	r2, r3
 8003340:	f7ff f910 	bl	8002564 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4aa2      	ldr	r2, [pc, #648]	@ (80035d4 <HAL_ADC_ConfigChannel+0x6dc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	f040 812e 	bne.w	80035ac <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10b      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x480>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	3301      	adds	r3, #1
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2b09      	cmp	r3, #9
 800336e:	bf94      	ite	ls
 8003370:	2301      	movls	r3, #1
 8003372:	2300      	movhi	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e019      	b.n	80033ac <HAL_ADC_ConfigChannel+0x4b4>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003388:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800338a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003390:	2320      	movs	r3, #32
 8003392:	e003      	b.n	800339c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3301      	adds	r3, #1
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2b09      	cmp	r3, #9
 80033a4:	bf94      	ite	ls
 80033a6:	2301      	movls	r3, #1
 80033a8:	2300      	movhi	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d079      	beq.n	80034a4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d107      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x4d4>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	0e9b      	lsrs	r3, r3, #26
 80033c2:	3301      	adds	r3, #1
 80033c4:	069b      	lsls	r3, r3, #26
 80033c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033ca:	e015      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x500>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80033da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80033de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80033e4:	2320      	movs	r3, #32
 80033e6:	e003      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80033e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	069b      	lsls	r3, r3, #26
 80033f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x520>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0e9b      	lsrs	r3, r3, #26
 800340a:	3301      	adds	r3, #1
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	e017      	b.n	8003448 <HAL_ADC_ConfigChannel+0x550>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003428:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800342a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003430:	2320      	movs	r3, #32
 8003432:	e003      	b.n	800343c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2101      	movs	r1, #1
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	ea42 0103 	orr.w	r1, r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <HAL_ADC_ConfigChannel+0x576>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	0e9b      	lsrs	r3, r3, #26
 800345e:	3301      	adds	r3, #1
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	051b      	lsls	r3, r3, #20
 800346c:	e018      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x5a8>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800347c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003486:	2320      	movs	r3, #32
 8003488:	e003      	b.n	8003492 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800348a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800348c:	fab3 f383 	clz	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	3301      	adds	r3, #1
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4613      	mov	r3, r2
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	4413      	add	r3, r2
 800349e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a0:	430b      	orrs	r3, r1
 80034a2:	e07e      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x5c8>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	0e9b      	lsrs	r3, r3, #26
 80034b6:	3301      	adds	r3, #1
 80034b8:	069b      	lsls	r3, r3, #26
 80034ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034be:	e015      	b.n	80034ec <HAL_ADC_ConfigChannel+0x5f4>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80034ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80034d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80034d8:	2320      	movs	r3, #32
 80034da:	e003      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	069b      	lsls	r3, r3, #26
 80034e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <HAL_ADC_ConfigChannel+0x614>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0e9b      	lsrs	r3, r3, #26
 80034fe:	3301      	adds	r3, #1
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2101      	movs	r1, #1
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	e017      	b.n	800353c <HAL_ADC_ConfigChannel+0x644>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	61fb      	str	r3, [r7, #28]
  return result;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003524:	2320      	movs	r3, #32
 8003526:	e003      	b.n	8003530 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3301      	adds	r3, #1
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2101      	movs	r1, #1
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	ea42 0103 	orr.w	r1, r2, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10d      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x670>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0e9b      	lsrs	r3, r3, #26
 8003552:	3301      	adds	r3, #1
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	3b1e      	subs	r3, #30
 8003560:	051b      	lsls	r3, r3, #20
 8003562:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003566:	e01b      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x6a8>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	613b      	str	r3, [r7, #16]
  return result;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003580:	2320      	movs	r3, #32
 8003582:	e003      	b.n	800358c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3301      	adds	r3, #1
 800358e:	f003 021f 	and.w	r2, r3, #31
 8003592:	4613      	mov	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	3b1e      	subs	r3, #30
 800359a:	051b      	lsls	r3, r3, #20
 800359c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a6:	4619      	mov	r1, r3
 80035a8:	f7fe ffb1 	bl	800250e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <HAL_ADC_ConfigChannel+0x6e0>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80be 	beq.w	8003736 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035c2:	d004      	beq.n	80035ce <HAL_ADC_ConfigChannel+0x6d6>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a04      	ldr	r2, [pc, #16]	@ (80035dc <HAL_ADC_ConfigChannel+0x6e4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10a      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x6ec>
 80035ce:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <HAL_ADC_ConfigChannel+0x6e8>)
 80035d0:	e009      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x6ee>
 80035d2:	bf00      	nop
 80035d4:	407f0000 	.word	0x407f0000
 80035d8:	80080000 	.word	0x80080000
 80035dc:	50000100 	.word	0x50000100
 80035e0:	50000300 	.word	0x50000300
 80035e4:	4b59      	ldr	r3, [pc, #356]	@ (800374c <HAL_ADC_ConfigChannel+0x854>)
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe fea6 	bl	8002338 <LL_ADC_GetCommonPathInternalCh>
 80035ec:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a56      	ldr	r2, [pc, #344]	@ (8003750 <HAL_ADC_ConfigChannel+0x858>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_ADC_ConfigChannel+0x70c>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a55      	ldr	r2, [pc, #340]	@ (8003754 <HAL_ADC_ConfigChannel+0x85c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d13a      	bne.n	800367a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003608:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d134      	bne.n	800367a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003618:	d005      	beq.n	8003626 <HAL_ADC_ConfigChannel+0x72e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a4e      	ldr	r2, [pc, #312]	@ (8003758 <HAL_ADC_ConfigChannel+0x860>)
 8003620:	4293      	cmp	r3, r2
 8003622:	f040 8085 	bne.w	8003730 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800362e:	d004      	beq.n	800363a <HAL_ADC_ConfigChannel+0x742>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a49      	ldr	r2, [pc, #292]	@ (800375c <HAL_ADC_ConfigChannel+0x864>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_ADC_ConfigChannel+0x746>
 800363a:	4a49      	ldr	r2, [pc, #292]	@ (8003760 <HAL_ADC_ConfigChannel+0x868>)
 800363c:	e000      	b.n	8003640 <HAL_ADC_ConfigChannel+0x748>
 800363e:	4a43      	ldr	r2, [pc, #268]	@ (800374c <HAL_ADC_ConfigChannel+0x854>)
 8003640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003644:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f7fe fe61 	bl	8002312 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003650:	4b44      	ldr	r3, [pc, #272]	@ (8003764 <HAL_ADC_ConfigChannel+0x86c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	4a44      	ldr	r2, [pc, #272]	@ (8003768 <HAL_ADC_ConfigChannel+0x870>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800366a:	e002      	b.n	8003672 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3b01      	subs	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f9      	bne.n	800366c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003678:	e05a      	b.n	8003730 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a3b      	ldr	r2, [pc, #236]	@ (800376c <HAL_ADC_ConfigChannel+0x874>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d125      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11f      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a31      	ldr	r2, [pc, #196]	@ (800375c <HAL_ADC_ConfigChannel+0x864>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d104      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x7ac>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a34      	ldr	r2, [pc, #208]	@ (8003770 <HAL_ADC_ConfigChannel+0x878>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d047      	beq.n	8003734 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ac:	d004      	beq.n	80036b8 <HAL_ADC_ConfigChannel+0x7c0>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2a      	ldr	r2, [pc, #168]	@ (800375c <HAL_ADC_ConfigChannel+0x864>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x7c4>
 80036b8:	4a29      	ldr	r2, [pc, #164]	@ (8003760 <HAL_ADC_ConfigChannel+0x868>)
 80036ba:	e000      	b.n	80036be <HAL_ADC_ConfigChannel+0x7c6>
 80036bc:	4a23      	ldr	r2, [pc, #140]	@ (800374c <HAL_ADC_ConfigChannel+0x854>)
 80036be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f7fe fe22 	bl	8002312 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ce:	e031      	b.n	8003734 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a27      	ldr	r2, [pc, #156]	@ (8003774 <HAL_ADC_ConfigChannel+0x87c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d12d      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d127      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1c      	ldr	r2, [pc, #112]	@ (800375c <HAL_ADC_ConfigChannel+0x864>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d022      	beq.n	8003736 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f8:	d004      	beq.n	8003704 <HAL_ADC_ConfigChannel+0x80c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a17      	ldr	r2, [pc, #92]	@ (800375c <HAL_ADC_ConfigChannel+0x864>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x810>
 8003704:	4a16      	ldr	r2, [pc, #88]	@ (8003760 <HAL_ADC_ConfigChannel+0x868>)
 8003706:	e000      	b.n	800370a <HAL_ADC_ConfigChannel+0x812>
 8003708:	4a10      	ldr	r2, [pc, #64]	@ (800374c <HAL_ADC_ConfigChannel+0x854>)
 800370a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800370e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003712:	4619      	mov	r1, r3
 8003714:	4610      	mov	r0, r2
 8003716:	f7fe fdfc 	bl	8002312 <LL_ADC_SetCommonPathInternalCh>
 800371a:	e00c      	b.n	8003736 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800372e:	e002      	b.n	8003736 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003734:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800373e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003742:	4618      	mov	r0, r3
 8003744:	37d8      	adds	r7, #216	@ 0xd8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	50000700 	.word	0x50000700
 8003750:	c3210000 	.word	0xc3210000
 8003754:	90c00010 	.word	0x90c00010
 8003758:	50000600 	.word	0x50000600
 800375c:	50000100 	.word	0x50000100
 8003760:	50000300 	.word	0x50000300
 8003764:	20000000 	.word	0x20000000
 8003768:	053e2d63 	.word	0x053e2d63
 800376c:	c7520000 	.word	0xc7520000
 8003770:	50000500 	.word	0x50000500
 8003774:	cb840000 	.word	0xcb840000

08003778 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003780:	2300      	movs	r3, #0
 8003782:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe ffa1 	bl	80026d0 <LL_ADC_IsEnabled>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d176      	bne.n	8003882 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	4b3c      	ldr	r3, [pc, #240]	@ (800388c <ADC_Enable+0x114>)
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	f043 0210 	orr.w	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b2:	f043 0201 	orr.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e062      	b.n	8003884 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe ff5c 	bl	8002680 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d0:	d004      	beq.n	80037dc <ADC_Enable+0x64>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003890 <ADC_Enable+0x118>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d101      	bne.n	80037e0 <ADC_Enable+0x68>
 80037dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003894 <ADC_Enable+0x11c>)
 80037de:	e000      	b.n	80037e2 <ADC_Enable+0x6a>
 80037e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003898 <ADC_Enable+0x120>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fda8 	bl	8002338 <LL_ADC_GetCommonPathInternalCh>
 80037e8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d013      	beq.n	800381a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037f2:	4b2a      	ldr	r3, [pc, #168]	@ (800389c <ADC_Enable+0x124>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	4a29      	ldr	r2, [pc, #164]	@ (80038a0 <ADC_Enable+0x128>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800380c:	e002      	b.n	8003814 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3b01      	subs	r3, #1
 8003812:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f9      	bne.n	800380e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800381a:	f7fe fd39 	bl	8002290 <HAL_GetTick>
 800381e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003820:	e028      	b.n	8003874 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe ff52 	bl	80026d0 <LL_ADC_IsEnabled>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe ff22 	bl	8002680 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800383c:	f7fe fd28 	bl	8002290 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d914      	bls.n	8003874 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d00d      	beq.n	8003874 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385c:	f043 0210 	orr.w	r2, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003868:	f043 0201 	orr.w	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e007      	b.n	8003884 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d1cf      	bne.n	8003822 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	8000003f 	.word	0x8000003f
 8003890:	50000100 	.word	0x50000100
 8003894:	50000300 	.word	0x50000300
 8003898:	50000700 	.word	0x50000700
 800389c:	20000000 	.word	0x20000000
 80038a0:	053e2d63 	.word	0x053e2d63

080038a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe ff20 	bl	80026f6 <LL_ADC_IsDisableOngoing>
 80038b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe ff07 	bl	80026d0 <LL_ADC_IsEnabled>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d047      	beq.n	8003958 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d144      	bne.n	8003958 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030d 	and.w	r3, r3, #13
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d10c      	bne.n	80038f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe fee1 	bl	80026a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2203      	movs	r2, #3
 80038ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038ee:	f7fe fccf 	bl	8002290 <HAL_GetTick>
 80038f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038f4:	e029      	b.n	800394a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	f043 0210 	orr.w	r2, r3, #16
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003906:	f043 0201 	orr.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e023      	b.n	800395a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003912:	f7fe fcbd 	bl	8002290 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d914      	bls.n	800394a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00d      	beq.n	800394a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	f043 0210 	orr.w	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e007      	b.n	800395a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1dc      	bne.n	8003912 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <LL_ADC_StartCalibration>:
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800397e:	4313      	orrs	r3, r2
 8003980:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	609a      	str	r2, [r3, #8]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_ADC_IsCalibrationOnGoing>:
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039a8:	d101      	bne.n	80039ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e04d      	b.n	8003a74 <HAL_ADCEx_Calibration_Start+0xb8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ff5f 	bl	80038a4 <ADC_Disable>
 80039e6:	4603      	mov	r3, r0
 80039e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d136      	bne.n	8003a5e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039f8:	f023 0302 	bic.w	r3, r3, #2
 80039fc:	f043 0202 	orr.w	r2, r3, #2
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ffa9 	bl	8003962 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a10:	e014      	b.n	8003a3c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3301      	adds	r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4a18      	ldr	r2, [pc, #96]	@ (8003a7c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d90d      	bls.n	8003a3c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f023 0312 	bic.w	r3, r3, #18
 8003a28:	f043 0210 	orr.w	r2, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e01b      	b.n	8003a74 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ffa7 	bl	8003994 <LL_ADC_IsCalibrationOnGoing>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e2      	bne.n	8003a12 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f023 0303 	bic.w	r3, r3, #3
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a5c:	e005      	b.n	8003a6a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	f043 0210 	orr.w	r2, r3, #16
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	0004de01 	.word	0x0004de01

08003a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ab2:	4a04      	ldr	r2, [pc, #16]	@ (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	60d3      	str	r3, [r2, #12]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003acc:	4b04      	ldr	r3, [pc, #16]	@ (8003ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	f003 0307 	and.w	r3, r3, #7
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db0a      	blt.n	8003b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	490c      	ldr	r1, [pc, #48]	@ (8003b30 <__NVIC_SetPriority+0x4c>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	0112      	lsls	r2, r2, #4
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	440b      	add	r3, r1
 8003b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b0c:	e00a      	b.n	8003b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4908      	ldr	r1, [pc, #32]	@ (8003b34 <__NVIC_SetPriority+0x50>)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3b04      	subs	r3, #4
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	440b      	add	r3, r1
 8003b22:	761a      	strb	r2, [r3, #24]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000e100 	.word	0xe000e100
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	@ 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f1c3 0307 	rsb	r3, r3, #7
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf28      	it	cs
 8003b56:	2304      	movcs	r3, #4
 8003b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d902      	bls.n	8003b68 <NVIC_EncodePriority+0x30>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3b03      	subs	r3, #3
 8003b66:	e000      	b.n	8003b6a <NVIC_EncodePriority+0x32>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43da      	mvns	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43d9      	mvns	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b90:	4313      	orrs	r3, r2
         );
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3724      	adds	r7, #36	@ 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bb0:	d301      	bcc.n	8003bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00f      	b.n	8003bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003be0 <SysTick_Config+0x40>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bbe:	210f      	movs	r1, #15
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	f7ff ff8e 	bl	8003ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc8:	4b05      	ldr	r3, [pc, #20]	@ (8003be0 <SysTick_Config+0x40>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bce:	4b04      	ldr	r3, [pc, #16]	@ (8003be0 <SysTick_Config+0x40>)
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	e000e010 	.word	0xe000e010

08003be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff47 	bl	8003a80 <__NVIC_SetPriorityGrouping>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	4603      	mov	r3, r0
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c08:	f7ff ff5e 	bl	8003ac8 <__NVIC_GetPriorityGrouping>
 8003c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f7ff ff90 	bl	8003b38 <NVIC_EncodePriority>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff5f 	bl	8003ae4 <__NVIC_SetPriority>
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ffb2 	bl	8003ba0 <SysTick_Config>
 8003c3c:	4603      	mov	r3, r0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c56:	e15a      	b.n	8003f0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	4013      	ands	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 814c 	beq.w	8003f08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d005      	beq.n	8003c88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d130      	bne.n	8003cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0201 	and.w	r2, r3, #1
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d017      	beq.n	8003d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d123      	bne.n	8003d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	08da      	lsrs	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3208      	adds	r2, #8
 8003d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	08da      	lsrs	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3208      	adds	r2, #8
 8003d74:	6939      	ldr	r1, [r7, #16]
 8003d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	2203      	movs	r2, #3
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0203 	and.w	r2, r3, #3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80a6 	beq.w	8003f08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8003f2c <HAL_GPIO_Init+0x2e4>)
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8003f2c <HAL_GPIO_Init+0x2e4>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dc8:	4b58      	ldr	r3, [pc, #352]	@ (8003f2c <HAL_GPIO_Init+0x2e4>)
 8003dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dd4:	4a56      	ldr	r2, [pc, #344]	@ (8003f30 <HAL_GPIO_Init+0x2e8>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	220f      	movs	r2, #15
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dfe:	d01f      	beq.n	8003e40 <HAL_GPIO_Init+0x1f8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a4c      	ldr	r2, [pc, #304]	@ (8003f34 <HAL_GPIO_Init+0x2ec>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d019      	beq.n	8003e3c <HAL_GPIO_Init+0x1f4>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a4b      	ldr	r2, [pc, #300]	@ (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_GPIO_Init+0x1f0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a4a      	ldr	r2, [pc, #296]	@ (8003f3c <HAL_GPIO_Init+0x2f4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00d      	beq.n	8003e34 <HAL_GPIO_Init+0x1ec>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a49      	ldr	r2, [pc, #292]	@ (8003f40 <HAL_GPIO_Init+0x2f8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d007      	beq.n	8003e30 <HAL_GPIO_Init+0x1e8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a48      	ldr	r2, [pc, #288]	@ (8003f44 <HAL_GPIO_Init+0x2fc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_GPIO_Init+0x1e4>
 8003e28:	2305      	movs	r3, #5
 8003e2a:	e00a      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e2c:	2306      	movs	r3, #6
 8003e2e:	e008      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e30:	2304      	movs	r3, #4
 8003e32:	e006      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e34:	2303      	movs	r3, #3
 8003e36:	e004      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e002      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e40:	2300      	movs	r3, #0
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	f002 0203 	and.w	r2, r2, #3
 8003e48:	0092      	lsls	r2, r2, #2
 8003e4a:	4093      	lsls	r3, r2
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e52:	4937      	ldr	r1, [pc, #220]	@ (8003f30 <HAL_GPIO_Init+0x2e8>)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e60:	4b39      	ldr	r3, [pc, #228]	@ (8003f48 <HAL_GPIO_Init+0x300>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e84:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <HAL_GPIO_Init+0x300>)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f48 <HAL_GPIO_Init+0x300>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eae:	4a26      	ldr	r2, [pc, #152]	@ (8003f48 <HAL_GPIO_Init+0x300>)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003eb4:	4b24      	ldr	r3, [pc, #144]	@ (8003f48 <HAL_GPIO_Init+0x300>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f48 <HAL_GPIO_Init+0x300>)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ede:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <HAL_GPIO_Init+0x300>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f02:	4a11      	ldr	r2, [pc, #68]	@ (8003f48 <HAL_GPIO_Init+0x300>)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f47f ae9d 	bne.w	8003c58 <HAL_GPIO_Init+0x10>
  }
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40010000 	.word	0x40010000
 8003f34:	48000400 	.word	0x48000400
 8003f38:	48000800 	.word	0x48000800
 8003f3c:	48000c00 	.word	0x48000c00
 8003f40:	48001000 	.word	0x48001000
 8003f44:	48001400 	.word	0x48001400
 8003f48:	40010400 	.word	0x40010400

08003f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e08d      	b.n	800407a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd fe06 	bl	8001b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	@ 0x24
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	e006      	b.n	8003fd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d108      	bne.n	8003fee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	e007      	b.n	8003ffe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ffc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800400c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004010:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004020:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69d9      	ldr	r1, [r3, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b20      	cmp	r3, #32
 8004096:	d138      	bne.n	800410a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e032      	b.n	800410c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2224      	movs	r2, #36	@ 0x24
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6819      	ldr	r1, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	d139      	bne.n	80041a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004138:	2302      	movs	r3, #2
 800413a:	e033      	b.n	80041a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	@ 0x24
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800416a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e000      	b.n	80041a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d141      	bne.n	8004242 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041be:	4b4b      	ldr	r3, [pc, #300]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ca:	d131      	bne.n	8004230 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041cc:	4b47      	ldr	r3, [pc, #284]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041d2:	4a46      	ldr	r2, [pc, #280]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041dc:	4b43      	ldr	r3, [pc, #268]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041e4:	4a41      	ldr	r2, [pc, #260]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041ec:	4b40      	ldr	r3, [pc, #256]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2232      	movs	r2, #50	@ 0x32
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	4a3f      	ldr	r2, [pc, #252]	@ (80042f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041f8:	fba2 2303 	umull	r2, r3, r2, r3
 80041fc:	0c9b      	lsrs	r3, r3, #18
 80041fe:	3301      	adds	r3, #1
 8004200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004202:	e002      	b.n	800420a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3b01      	subs	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800420a:	4b38      	ldr	r3, [pc, #224]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004216:	d102      	bne.n	800421e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f2      	bne.n	8004204 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800421e:	4b33      	ldr	r3, [pc, #204]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422a:	d158      	bne.n	80042de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e057      	b.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004230:	4b2e      	ldr	r3, [pc, #184]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004236:	4a2d      	ldr	r2, [pc, #180]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800423c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004240:	e04d      	b.n	80042de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004248:	d141      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800424a:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004256:	d131      	bne.n	80042bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004258:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800425e:	4a23      	ldr	r2, [pc, #140]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004264:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004268:	4b20      	ldr	r3, [pc, #128]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004270:	4a1e      	ldr	r2, [pc, #120]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004272:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004276:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004278:	4b1d      	ldr	r3, [pc, #116]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2232      	movs	r2, #50	@ 0x32
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	4a1c      	ldr	r2, [pc, #112]	@ (80042f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	0c9b      	lsrs	r3, r3, #18
 800428a:	3301      	adds	r3, #1
 800428c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800428e:	e002      	b.n	8004296 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3b01      	subs	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004296:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a2:	d102      	bne.n	80042aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f2      	bne.n	8004290 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042aa:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b6:	d112      	bne.n	80042de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e011      	b.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042bc:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c2:	4a0a      	ldr	r2, [pc, #40]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042cc:	e007      	b.n	80042de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042ce:	4b07      	ldr	r3, [pc, #28]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042d6:	4a05      	ldr	r2, [pc, #20]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40007000 	.word	0x40007000
 80042f0:	20000000 	.word	0x20000000
 80042f4:	431bde83 	.word	0x431bde83

080042f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80042fc:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a04      	ldr	r2, [pc, #16]	@ (8004314 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004302:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004306:	6093      	str	r3, [r2, #8]
}
 8004308:	bf00      	nop
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40007000 	.word	0x40007000

08004318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e2fe      	b.n	8004928 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d075      	beq.n	8004422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004336:	4b97      	ldr	r3, [pc, #604]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004340:	4b94      	ldr	r3, [pc, #592]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b0c      	cmp	r3, #12
 800434e:	d102      	bne.n	8004356 <HAL_RCC_OscConfig+0x3e>
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2b03      	cmp	r3, #3
 8004354:	d002      	beq.n	800435c <HAL_RCC_OscConfig+0x44>
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d10b      	bne.n	8004374 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435c:	4b8d      	ldr	r3, [pc, #564]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d05b      	beq.n	8004420 <HAL_RCC_OscConfig+0x108>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d157      	bne.n	8004420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e2d9      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800437c:	d106      	bne.n	800438c <HAL_RCC_OscConfig+0x74>
 800437e:	4b85      	ldr	r3, [pc, #532]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a84      	ldr	r2, [pc, #528]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e01d      	b.n	80043c8 <HAL_RCC_OscConfig+0xb0>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x98>
 8004396:	4b7f      	ldr	r3, [pc, #508]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7e      	ldr	r2, [pc, #504]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 800439c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a7b      	ldr	r2, [pc, #492]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0xb0>
 80043b0:	4b78      	ldr	r3, [pc, #480]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a77      	ldr	r2, [pc, #476]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b75      	ldr	r3, [pc, #468]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a74      	ldr	r2, [pc, #464]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd ff5e 	bl	8002290 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd ff5a 	bl	8002290 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	@ 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e29e      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0xc0>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd ff4a 	bl	8002290 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fd ff46 	bl	8002290 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	@ 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e28a      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004412:	4b60      	ldr	r3, [pc, #384]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0xe8>
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d075      	beq.n	800451a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442e:	4b59      	ldr	r3, [pc, #356]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004438:	4b56      	ldr	r3, [pc, #344]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d102      	bne.n	800444e <HAL_RCC_OscConfig+0x136>
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d002      	beq.n	8004454 <HAL_RCC_OscConfig+0x13c>
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b04      	cmp	r3, #4
 8004452:	d11f      	bne.n	8004494 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004454:	4b4f      	ldr	r3, [pc, #316]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_OscConfig+0x154>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e25d      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446c:	4b49      	ldr	r3, [pc, #292]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	4946      	ldr	r1, [pc, #280]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004480:	4b45      	ldr	r3, [pc, #276]	@ (8004598 <HAL_RCC_OscConfig+0x280>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd feb7 	bl	80021f8 <HAL_InitTick>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d043      	beq.n	8004518 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e249      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d023      	beq.n	80044e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449c:	4b3d      	ldr	r3, [pc, #244]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80044a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd fef2 	bl	8002290 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b0:	f7fd feee 	bl	8002290 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e232      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c2:	4b34      	ldr	r3, [pc, #208]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ce:	4b31      	ldr	r3, [pc, #196]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	061b      	lsls	r3, r3, #24
 80044dc:	492d      	ldr	r1, [pc, #180]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]
 80044e2:	e01a      	b.n	800451a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 80044ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd fece 	bl	8002290 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f8:	f7fd feca 	bl	8002290 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e20e      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800450a:	4b22      	ldr	r3, [pc, #136]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1e0>
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004518:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d041      	beq.n	80045aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01c      	beq.n	8004568 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452e:	4b19      	ldr	r3, [pc, #100]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004534:	4a17      	ldr	r2, [pc, #92]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fd fea7 	bl	8002290 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004546:	f7fd fea3 	bl	8002290 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e1e7      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004558:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 800455a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ef      	beq.n	8004546 <HAL_RCC_OscConfig+0x22e>
 8004566:	e020      	b.n	80045aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004568:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 800456a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800456e:	4a09      	ldr	r2, [pc, #36]	@ (8004594 <HAL_RCC_OscConfig+0x27c>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004578:	f7fd fe8a 	bl	8002290 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800457e:	e00d      	b.n	800459c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004580:	f7fd fe86 	bl	8002290 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d906      	bls.n	800459c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e1ca      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800459c:	4b8c      	ldr	r3, [pc, #560]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 800459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ea      	bne.n	8004580 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80a6 	beq.w	8004704 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b8:	2300      	movs	r3, #0
 80045ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045bc:	4b84      	ldr	r3, [pc, #528]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_OscConfig+0x2b4>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <HAL_RCC_OscConfig+0x2b6>
 80045cc:	2300      	movs	r3, #0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00d      	beq.n	80045ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	4b7f      	ldr	r3, [pc, #508]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 80045d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d6:	4a7e      	ldr	r2, [pc, #504]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 80045d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80045de:	4b7c      	ldr	r3, [pc, #496]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045ea:	2301      	movs	r3, #1
 80045ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ee:	4b79      	ldr	r3, [pc, #484]	@ (80047d4 <HAL_RCC_OscConfig+0x4bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d118      	bne.n	800462c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045fa:	4b76      	ldr	r3, [pc, #472]	@ (80047d4 <HAL_RCC_OscConfig+0x4bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a75      	ldr	r2, [pc, #468]	@ (80047d4 <HAL_RCC_OscConfig+0x4bc>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004606:	f7fd fe43 	bl	8002290 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fd fe3f 	bl	8002290 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e183      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004620:	4b6c      	ldr	r3, [pc, #432]	@ (80047d4 <HAL_RCC_OscConfig+0x4bc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d108      	bne.n	8004646 <HAL_RCC_OscConfig+0x32e>
 8004634:	4b66      	ldr	r3, [pc, #408]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463a:	4a65      	ldr	r2, [pc, #404]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004644:	e024      	b.n	8004690 <HAL_RCC_OscConfig+0x378>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b05      	cmp	r3, #5
 800464c:	d110      	bne.n	8004670 <HAL_RCC_OscConfig+0x358>
 800464e:	4b60      	ldr	r3, [pc, #384]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004654:	4a5e      	ldr	r2, [pc, #376]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004656:	f043 0304 	orr.w	r3, r3, #4
 800465a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800465e:	4b5c      	ldr	r3, [pc, #368]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004664:	4a5a      	ldr	r2, [pc, #360]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800466e:	e00f      	b.n	8004690 <HAL_RCC_OscConfig+0x378>
 8004670:	4b57      	ldr	r3, [pc, #348]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004676:	4a56      	ldr	r2, [pc, #344]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004680:	4b53      	ldr	r3, [pc, #332]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	4a52      	ldr	r2, [pc, #328]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d016      	beq.n	80046c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fd fdfa 	bl	8002290 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a0:	f7fd fdf6 	bl	8002290 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e138      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b6:	4b46      	ldr	r3, [pc, #280]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 80046b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0ed      	beq.n	80046a0 <HAL_RCC_OscConfig+0x388>
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fd fde3 	bl	8002290 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fd fddf 	bl	8002290 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e121      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046e4:	4b3a      	ldr	r3, [pc, #232]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ed      	bne.n	80046ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046f2:	7ffb      	ldrb	r3, [r7, #31]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f8:	4b35      	ldr	r3, [pc, #212]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fc:	4a34      	ldr	r2, [pc, #208]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 80046fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004702:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d03c      	beq.n	800478a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01c      	beq.n	8004752 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004718:	4b2d      	ldr	r3, [pc, #180]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 800471a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800471e:	4a2c      	ldr	r2, [pc, #176]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004728:	f7fd fdb2 	bl	8002290 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004730:	f7fd fdae 	bl	8002290 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e0f2      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004742:	4b23      	ldr	r3, [pc, #140]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004744:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0ef      	beq.n	8004730 <HAL_RCC_OscConfig+0x418>
 8004750:	e01b      	b.n	800478a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004752:	4b1f      	ldr	r3, [pc, #124]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004754:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004758:	4a1d      	ldr	r2, [pc, #116]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004762:	f7fd fd95 	bl	8002290 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800476a:	f7fd fd91 	bl	8002290 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0d5      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800477c:	4b14      	ldr	r3, [pc, #80]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 800477e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1ef      	bne.n	800476a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80c9 	beq.w	8004926 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004794:	4b0e      	ldr	r3, [pc, #56]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b0c      	cmp	r3, #12
 800479e:	f000 8083 	beq.w	80048a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d15e      	bne.n	8004868 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047aa:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a08      	ldr	r2, [pc, #32]	@ (80047d0 <HAL_RCC_OscConfig+0x4b8>)
 80047b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fd fd6b 	bl	8002290 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047bc:	e00c      	b.n	80047d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047be:	f7fd fd67 	bl	8002290 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d905      	bls.n	80047d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e0ab      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d8:	4b55      	ldr	r3, [pc, #340]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ec      	bne.n	80047be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047e4:	4b52      	ldr	r3, [pc, #328]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	4b52      	ldr	r3, [pc, #328]	@ (8004934 <HAL_RCC_OscConfig+0x61c>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6a11      	ldr	r1, [r2, #32]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047f4:	3a01      	subs	r2, #1
 80047f6:	0112      	lsls	r2, r2, #4
 80047f8:	4311      	orrs	r1, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80047fe:	0212      	lsls	r2, r2, #8
 8004800:	4311      	orrs	r1, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004806:	0852      	lsrs	r2, r2, #1
 8004808:	3a01      	subs	r2, #1
 800480a:	0552      	lsls	r2, r2, #21
 800480c:	4311      	orrs	r1, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004812:	0852      	lsrs	r2, r2, #1
 8004814:	3a01      	subs	r2, #1
 8004816:	0652      	lsls	r2, r2, #25
 8004818:	4311      	orrs	r1, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800481e:	06d2      	lsls	r2, r2, #27
 8004820:	430a      	orrs	r2, r1
 8004822:	4943      	ldr	r1, [pc, #268]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 8004824:	4313      	orrs	r3, r2
 8004826:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004828:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a40      	ldr	r2, [pc, #256]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 800482e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004832:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004834:	4b3e      	ldr	r3, [pc, #248]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a3d      	ldr	r2, [pc, #244]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 800483a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800483e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fd fd26 	bl	8002290 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004848:	f7fd fd22 	bl	8002290 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e066      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485a:	4b35      	ldr	r3, [pc, #212]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x530>
 8004866:	e05e      	b.n	8004926 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b31      	ldr	r3, [pc, #196]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a30      	ldr	r2, [pc, #192]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 800486e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fd fd0c 	bl	8002290 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487c:	f7fd fd08 	bl	8002290 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e04c      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800488e:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800489a:	4b25      	ldr	r3, [pc, #148]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	4924      	ldr	r1, [pc, #144]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 80048a0:	4b25      	ldr	r3, [pc, #148]	@ (8004938 <HAL_RCC_OscConfig+0x620>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	60cb      	str	r3, [r1, #12]
 80048a6:	e03e      	b.n	8004926 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e039      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80048b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004930 <HAL_RCC_OscConfig+0x618>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f003 0203 	and.w	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d12c      	bne.n	8004922 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	3b01      	subs	r3, #1
 80048d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d123      	bne.n	8004922 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d11b      	bne.n	8004922 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d113      	bne.n	8004922 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	3b01      	subs	r3, #1
 8004908:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800490a:	429a      	cmp	r2, r3
 800490c:	d109      	bne.n	8004922 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	3b01      	subs	r3, #1
 800491c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	019f800c 	.word	0x019f800c
 8004938:	feeefffc 	.word	0xfeeefffc

0800493c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e11e      	b.n	8004b92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004954:	4b91      	ldr	r3, [pc, #580]	@ (8004b9c <HAL_RCC_ClockConfig+0x260>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d910      	bls.n	8004984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b8e      	ldr	r3, [pc, #568]	@ (8004b9c <HAL_RCC_ClockConfig+0x260>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 020f 	bic.w	r2, r3, #15
 800496a:	498c      	ldr	r1, [pc, #560]	@ (8004b9c <HAL_RCC_ClockConfig+0x260>)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004972:	4b8a      	ldr	r3, [pc, #552]	@ (8004b9c <HAL_RCC_ClockConfig+0x260>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e106      	b.n	8004b92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d073      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d129      	bne.n	80049ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004998:	4b81      	ldr	r3, [pc, #516]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0f4      	b.n	8004b92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049a8:	f000 f99e 	bl	8004ce8 <RCC_GetSysClockFreqFromPLLSource>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4a7c      	ldr	r2, [pc, #496]	@ (8004ba4 <HAL_RCC_ClockConfig+0x268>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d93f      	bls.n	8004a36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049b6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d033      	beq.n	8004a36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d12f      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049d6:	4b72      	ldr	r3, [pc, #456]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049de:	4a70      	ldr	r2, [pc, #448]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 80049e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049e6:	2380      	movs	r3, #128	@ 0x80
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e024      	b.n	8004a36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f4:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0c6      	b.n	8004b92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a04:	4b66      	ldr	r3, [pc, #408]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0be      	b.n	8004b92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a14:	f000 f8ce 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4a61      	ldr	r2, [pc, #388]	@ (8004ba4 <HAL_RCC_ClockConfig+0x268>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d909      	bls.n	8004a36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a22:	4b5f      	ldr	r3, [pc, #380]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a2a:	4a5d      	ldr	r2, [pc, #372]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	4b5a      	ldr	r3, [pc, #360]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f023 0203 	bic.w	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4957      	ldr	r1, [pc, #348]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a48:	f7fd fc22 	bl	8002290 <HAL_GetTick>
 8004a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a50:	f7fd fc1e 	bl	8002290 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e095      	b.n	8004b92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	4b4e      	ldr	r3, [pc, #312]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 020c 	and.w	r2, r3, #12
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d1eb      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d023      	beq.n	8004acc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a90:	4b43      	ldr	r3, [pc, #268]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a42      	ldr	r2, [pc, #264]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004a96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ab0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004ab2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ab6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab8:	4b39      	ldr	r3, [pc, #228]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4936      	ldr	r1, [pc, #216]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
 8004aca:	e008      	b.n	8004ade <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b80      	cmp	r3, #128	@ 0x80
 8004ad0:	d105      	bne.n	8004ade <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ad2:	4b33      	ldr	r3, [pc, #204]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	4a32      	ldr	r2, [pc, #200]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004ad8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004adc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ade:	4b2f      	ldr	r3, [pc, #188]	@ (8004b9c <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d21d      	bcs.n	8004b28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aec:	4b2b      	ldr	r3, [pc, #172]	@ (8004b9c <HAL_RCC_ClockConfig+0x260>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 020f 	bic.w	r2, r3, #15
 8004af4:	4929      	ldr	r1, [pc, #164]	@ (8004b9c <HAL_RCC_ClockConfig+0x260>)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004afc:	f7fd fbc8 	bl	8002290 <HAL_GetTick>
 8004b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b02:	e00a      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b04:	f7fd fbc4 	bl	8002290 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e03b      	b.n	8004b92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1a:	4b20      	ldr	r3, [pc, #128]	@ (8004b9c <HAL_RCC_ClockConfig+0x260>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d1ed      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b34:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4917      	ldr	r1, [pc, #92]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b52:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	490f      	ldr	r1, [pc, #60]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b66:	f000 f825 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	490c      	ldr	r1, [pc, #48]	@ (8004ba8 <HAL_RCC_ClockConfig+0x26c>)
 8004b78:	5ccb      	ldrb	r3, [r1, r3]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b82:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <HAL_RCC_ClockConfig+0x270>)
 8004b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b86:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb0 <HAL_RCC_ClockConfig+0x274>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fb34 	bl	80021f8 <HAL_InitTick>
 8004b90:	4603      	mov	r3, r0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40022000 	.word	0x40022000
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	04c4b400 	.word	0x04c4b400
 8004ba8:	0800a01c 	.word	0x0800a01c
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	20000004 	.word	0x20000004

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bba:	4b2c      	ldr	r3, [pc, #176]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d102      	bne.n	8004bcc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	e047      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004bcc:	4b27      	ldr	r3, [pc, #156]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 030c 	and.w	r3, r3, #12
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d102      	bne.n	8004bde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bd8:	4b26      	ldr	r3, [pc, #152]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	e03e      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004bde:	4b23      	ldr	r3, [pc, #140]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b0c      	cmp	r3, #12
 8004be8:	d136      	bne.n	8004c58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bea:	4b20      	ldr	r3, [pc, #128]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d10c      	bne.n	8004c22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c08:	4a1a      	ldr	r2, [pc, #104]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	4a16      	ldr	r2, [pc, #88]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c12:	68d2      	ldr	r2, [r2, #12]
 8004c14:	0a12      	lsrs	r2, r2, #8
 8004c16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	617b      	str	r3, [r7, #20]
      break;
 8004c20:	e00c      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c22:	4a13      	ldr	r2, [pc, #76]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2a:	4a10      	ldr	r2, [pc, #64]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c2c:	68d2      	ldr	r2, [r2, #12]
 8004c2e:	0a12      	lsrs	r2, r2, #8
 8004c30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c34:	fb02 f303 	mul.w	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]
      break;
 8004c3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	0e5b      	lsrs	r3, r3, #25
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	3301      	adds	r3, #1
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	e001      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c5c:	693b      	ldr	r3, [r7, #16]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	02dc6c00 	.word	0x02dc6c00

08004c78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	@ (8004c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000000 	.word	0x20000000

08004c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c94:	f7ff fff0 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	0a1b      	lsrs	r3, r3, #8
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	4904      	ldr	r1, [pc, #16]	@ (8004cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	0800a02c 	.word	0x0800a02c

08004cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cc0:	f7ff ffda 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	0adb      	lsrs	r3, r3, #11
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	4904      	ldr	r1, [pc, #16]	@ (8004ce4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cd2:	5ccb      	ldrb	r3, [r1, r3]
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	0800a02c 	.word	0x0800a02c

08004ce8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cee:	4b1e      	ldr	r3, [pc, #120]	@ (8004d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	3301      	adds	r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d10c      	bne.n	8004d26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d0c:	4a17      	ldr	r2, [pc, #92]	@ (8004d6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	4a14      	ldr	r2, [pc, #80]	@ (8004d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d16:	68d2      	ldr	r2, [r2, #12]
 8004d18:	0a12      	lsrs	r2, r2, #8
 8004d1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	617b      	str	r3, [r7, #20]
    break;
 8004d24:	e00c      	b.n	8004d40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d26:	4a12      	ldr	r2, [pc, #72]	@ (8004d70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d30:	68d2      	ldr	r2, [r2, #12]
 8004d32:	0a12      	lsrs	r2, r2, #8
 8004d34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d38:	fb02 f303 	mul.w	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]
    break;
 8004d3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d40:	4b09      	ldr	r3, [pc, #36]	@ (8004d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	0e5b      	lsrs	r3, r3, #25
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004d5a:	687b      	ldr	r3, [r7, #4]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	02dc6c00 	.word	0x02dc6c00
 8004d70:	00f42400 	.word	0x00f42400

08004d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d80:	2300      	movs	r3, #0
 8004d82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8098 	beq.w	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d92:	2300      	movs	r3, #0
 8004d94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d96:	4b43      	ldr	r3, [pc, #268]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	4b40      	ldr	r3, [pc, #256]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dae:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a39      	ldr	r2, [pc, #228]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dca:	f7fd fa61 	bl	8002290 <HAL_GetTick>
 8004dce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dd0:	e009      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd2:	f7fd fa5d 	bl	8002290 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d902      	bls.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	74fb      	strb	r3, [r7, #19]
        break;
 8004de4:	e005      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004de6:	4b30      	ldr	r3, [pc, #192]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0ef      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d159      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004df8:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01e      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d019      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e14:	4b23      	ldr	r3, [pc, #140]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e20:	4b20      	ldr	r3, [pc, #128]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e26:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e30:	4b1c      	ldr	r3, [pc, #112]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e36:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e40:	4a18      	ldr	r2, [pc, #96]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fd fa1d 	bl	8002290 <HAL_GetTick>
 8004e56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e58:	e00b      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7fd fa19 	bl	8002290 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d902      	bls.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	74fb      	strb	r3, [r7, #19]
            break;
 8004e70:	e006      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e72:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0ec      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e86:	4b07      	ldr	r3, [pc, #28]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e94:	4903      	ldr	r1, [pc, #12]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ea0:	74bb      	strb	r3, [r7, #18]
 8004ea2:	e005      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eb0:	7c7b      	ldrb	r3, [r7, #17]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d105      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb6:	4ba7      	ldr	r3, [pc, #668]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eba:	4aa6      	ldr	r2, [pc, #664]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ec0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ece:	4ba1      	ldr	r3, [pc, #644]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed4:	f023 0203 	bic.w	r2, r3, #3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	499d      	ldr	r1, [pc, #628]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ef0:	4b98      	ldr	r3, [pc, #608]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef6:	f023 020c 	bic.w	r2, r3, #12
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	4995      	ldr	r1, [pc, #596]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f12:	4b90      	ldr	r3, [pc, #576]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	498c      	ldr	r1, [pc, #560]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f34:	4b87      	ldr	r3, [pc, #540]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	4984      	ldr	r1, [pc, #528]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f56:	4b7f      	ldr	r3, [pc, #508]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	497b      	ldr	r1, [pc, #492]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f78:	4b76      	ldr	r3, [pc, #472]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	4973      	ldr	r1, [pc, #460]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	496a      	ldr	r1, [pc, #424]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fbc:	4b65      	ldr	r3, [pc, #404]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	4962      	ldr	r1, [pc, #392]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fde:	4b5d      	ldr	r3, [pc, #372]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	4959      	ldr	r1, [pc, #356]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005000:	4b54      	ldr	r3, [pc, #336]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005002:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005006:	f023 0203 	bic.w	r2, r3, #3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	4951      	ldr	r1, [pc, #324]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005022:	4b4c      	ldr	r3, [pc, #304]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005028:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005030:	4948      	ldr	r1, [pc, #288]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	d015      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005044:	4b43      	ldr	r3, [pc, #268]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	4940      	ldr	r1, [pc, #256]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005062:	d105      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005064:	4b3b      	ldr	r3, [pc, #236]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4a3a      	ldr	r2, [pc, #232]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800506e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005078:	2b00      	cmp	r3, #0
 800507a:	d015      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800507c:	4b35      	ldr	r3, [pc, #212]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005082:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508a:	4932      	ldr	r1, [pc, #200]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800509a:	d105      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800509c:	4b2d      	ldr	r3, [pc, #180]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d015      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050b4:	4b27      	ldr	r3, [pc, #156]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c2:	4924      	ldr	r1, [pc, #144]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050d2:	d105      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d015      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ec:	4b19      	ldr	r3, [pc, #100]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fa:	4916      	ldr	r1, [pc, #88]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800510a:	d105      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800510c:	4b11      	ldr	r3, [pc, #68]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	4a10      	ldr	r2, [pc, #64]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005116:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d019      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005124:	4b0b      	ldr	r3, [pc, #44]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	4908      	ldr	r1, [pc, #32]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005142:	d109      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005144:	4b03      	ldr	r3, [pc, #12]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4a02      	ldr	r2, [pc, #8]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800514e:	60d3      	str	r3, [r2, #12]
 8005150:	e002      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d015      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005164:	4b29      	ldr	r3, [pc, #164]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005172:	4926      	ldr	r1, [pc, #152]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005182:	d105      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005184:	4b21      	ldr	r3, [pc, #132]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4a20      	ldr	r2, [pc, #128]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800518a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800518e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d015      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800519c:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051aa:	4918      	ldr	r1, [pc, #96]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ba:	d105      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051bc:	4b13      	ldr	r3, [pc, #76]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4a12      	ldr	r2, [pc, #72]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051d4:	4b0d      	ldr	r3, [pc, #52]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e2:	490a      	ldr	r1, [pc, #40]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051f2:	d105      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051f4:	4b05      	ldr	r3, [pc, #20]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4a04      	ldr	r2, [pc, #16]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005200:	7cbb      	ldrb	r3, [r7, #18]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000

08005210 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e027      	b.n	8005272 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	7a5b      	ldrb	r3, [r3, #9]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d105      	bne.n	8005238 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc fd24 	bl	8001c80 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f023 0108 	bic.w	r1, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0204 	orr.w	r2, r2, #4
 8005262:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7a1b      	ldrb	r3, [r3, #8]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005290:	2302      	movs	r3, #2
 8005292:	e044      	b.n	800531e <HAL_RNG_GenerateRandomNumber+0xa4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7a5b      	ldrb	r3, [r3, #9]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d133      	bne.n	800530c <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052aa:	f7fc fff1 	bl	8002290 <HAL_GetTick>
 80052ae:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80052b0:	e018      	b.n	80052e4 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80052b2:	f7fc ffed 	bl	8002290 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d911      	bls.n	80052e4 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d00a      	beq.n	80052e4 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e01c      	b.n	800531e <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d1df      	bne.n	80052b2 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	725a      	strb	r2, [r3, #9]
 800530a:	e004      	b.n	8005316 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2204      	movs	r2, #4
 8005310:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	721a      	strb	r2, [r3, #8]

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e049      	b.n	80053cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fc fccb 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f000 fc43 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d001      	beq.n	80053ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e04c      	b.n	8005486 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a26      	ldr	r2, [pc, #152]	@ (8005494 <HAL_TIM_Base_Start+0xc0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d022      	beq.n	8005444 <HAL_TIM_Base_Start+0x70>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005406:	d01d      	beq.n	8005444 <HAL_TIM_Base_Start+0x70>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a22      	ldr	r2, [pc, #136]	@ (8005498 <HAL_TIM_Base_Start+0xc4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d018      	beq.n	8005444 <HAL_TIM_Base_Start+0x70>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a21      	ldr	r2, [pc, #132]	@ (800549c <HAL_TIM_Base_Start+0xc8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <HAL_TIM_Base_Start+0x70>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1f      	ldr	r2, [pc, #124]	@ (80054a0 <HAL_TIM_Base_Start+0xcc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00e      	beq.n	8005444 <HAL_TIM_Base_Start+0x70>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1e      	ldr	r2, [pc, #120]	@ (80054a4 <HAL_TIM_Base_Start+0xd0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d009      	beq.n	8005444 <HAL_TIM_Base_Start+0x70>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1c      	ldr	r2, [pc, #112]	@ (80054a8 <HAL_TIM_Base_Start+0xd4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <HAL_TIM_Base_Start+0x70>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1b      	ldr	r2, [pc, #108]	@ (80054ac <HAL_TIM_Base_Start+0xd8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d115      	bne.n	8005470 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	4b19      	ldr	r3, [pc, #100]	@ (80054b0 <HAL_TIM_Base_Start+0xdc>)
 800544c:	4013      	ands	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b06      	cmp	r3, #6
 8005454:	d015      	beq.n	8005482 <HAL_TIM_Base_Start+0xae>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545c:	d011      	beq.n	8005482 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0201 	orr.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	e008      	b.n	8005482 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e000      	b.n	8005484 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005482:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40015000 	.word	0x40015000
 80054b0:	00010007 	.word	0x00010007

080054b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e049      	b.n	800555a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f841 	bl	8005562 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f000 fb7c 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d109      	bne.n	800559c <HAL_TIM_PWM_Start+0x24>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	bf14      	ite	ne
 8005594:	2301      	movne	r3, #1
 8005596:	2300      	moveq	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	e03c      	b.n	8005616 <HAL_TIM_PWM_Start+0x9e>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d109      	bne.n	80055b6 <HAL_TIM_PWM_Start+0x3e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	bf14      	ite	ne
 80055ae:	2301      	movne	r3, #1
 80055b0:	2300      	moveq	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	e02f      	b.n	8005616 <HAL_TIM_PWM_Start+0x9e>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d109      	bne.n	80055d0 <HAL_TIM_PWM_Start+0x58>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	bf14      	ite	ne
 80055c8:	2301      	movne	r3, #1
 80055ca:	2300      	moveq	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	e022      	b.n	8005616 <HAL_TIM_PWM_Start+0x9e>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b0c      	cmp	r3, #12
 80055d4:	d109      	bne.n	80055ea <HAL_TIM_PWM_Start+0x72>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	bf14      	ite	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	2300      	moveq	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	e015      	b.n	8005616 <HAL_TIM_PWM_Start+0x9e>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d109      	bne.n	8005604 <HAL_TIM_PWM_Start+0x8c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	e008      	b.n	8005616 <HAL_TIM_PWM_Start+0x9e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	bf14      	ite	ne
 8005610:	2301      	movne	r3, #1
 8005612:	2300      	moveq	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e0a6      	b.n	800576c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <HAL_TIM_PWM_Start+0xb6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800562c:	e023      	b.n	8005676 <HAL_TIM_PWM_Start+0xfe>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d104      	bne.n	800563e <HAL_TIM_PWM_Start+0xc6>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800563c:	e01b      	b.n	8005676 <HAL_TIM_PWM_Start+0xfe>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d104      	bne.n	800564e <HAL_TIM_PWM_Start+0xd6>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800564c:	e013      	b.n	8005676 <HAL_TIM_PWM_Start+0xfe>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b0c      	cmp	r3, #12
 8005652:	d104      	bne.n	800565e <HAL_TIM_PWM_Start+0xe6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800565c:	e00b      	b.n	8005676 <HAL_TIM_PWM_Start+0xfe>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b10      	cmp	r3, #16
 8005662:	d104      	bne.n	800566e <HAL_TIM_PWM_Start+0xf6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800566c:	e003      	b.n	8005676 <HAL_TIM_PWM_Start+0xfe>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2201      	movs	r2, #1
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 ff30 	bl	80064e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a3a      	ldr	r2, [pc, #232]	@ (8005774 <HAL_TIM_PWM_Start+0x1fc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d018      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x148>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a39      	ldr	r2, [pc, #228]	@ (8005778 <HAL_TIM_PWM_Start+0x200>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x148>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a37      	ldr	r2, [pc, #220]	@ (800577c <HAL_TIM_PWM_Start+0x204>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00e      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x148>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a36      	ldr	r2, [pc, #216]	@ (8005780 <HAL_TIM_PWM_Start+0x208>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d009      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x148>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a34      	ldr	r2, [pc, #208]	@ (8005784 <HAL_TIM_PWM_Start+0x20c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x148>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a33      	ldr	r2, [pc, #204]	@ (8005788 <HAL_TIM_PWM_Start+0x210>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d101      	bne.n	80056c4 <HAL_TIM_PWM_Start+0x14c>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <HAL_TIM_PWM_Start+0x14e>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a25      	ldr	r2, [pc, #148]	@ (8005774 <HAL_TIM_PWM_Start+0x1fc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d022      	beq.n	800572a <HAL_TIM_PWM_Start+0x1b2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ec:	d01d      	beq.n	800572a <HAL_TIM_PWM_Start+0x1b2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a26      	ldr	r2, [pc, #152]	@ (800578c <HAL_TIM_PWM_Start+0x214>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_TIM_PWM_Start+0x1b2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a24      	ldr	r2, [pc, #144]	@ (8005790 <HAL_TIM_PWM_Start+0x218>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <HAL_TIM_PWM_Start+0x1b2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a23      	ldr	r2, [pc, #140]	@ (8005794 <HAL_TIM_PWM_Start+0x21c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_TIM_PWM_Start+0x1b2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a19      	ldr	r2, [pc, #100]	@ (8005778 <HAL_TIM_PWM_Start+0x200>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_TIM_PWM_Start+0x1b2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a18      	ldr	r2, [pc, #96]	@ (800577c <HAL_TIM_PWM_Start+0x204>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_TIM_PWM_Start+0x1b2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a18      	ldr	r2, [pc, #96]	@ (8005788 <HAL_TIM_PWM_Start+0x210>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d115      	bne.n	8005756 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	4b19      	ldr	r3, [pc, #100]	@ (8005798 <HAL_TIM_PWM_Start+0x220>)
 8005732:	4013      	ands	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b06      	cmp	r3, #6
 800573a:	d015      	beq.n	8005768 <HAL_TIM_PWM_Start+0x1f0>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005742:	d011      	beq.n	8005768 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	e008      	b.n	8005768 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e000      	b.n	800576a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005768:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40013400 	.word	0x40013400
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800
 8005788:	40015000 	.word	0x40015000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	00010007 	.word	0x00010007

0800579c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e0ff      	b.n	80059ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b14      	cmp	r3, #20
 80057c6:	f200 80f0 	bhi.w	80059aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057ca:	a201      	add	r2, pc, #4	@ (adr r2, 80057d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	08005825 	.word	0x08005825
 80057d4:	080059ab 	.word	0x080059ab
 80057d8:	080059ab 	.word	0x080059ab
 80057dc:	080059ab 	.word	0x080059ab
 80057e0:	08005865 	.word	0x08005865
 80057e4:	080059ab 	.word	0x080059ab
 80057e8:	080059ab 	.word	0x080059ab
 80057ec:	080059ab 	.word	0x080059ab
 80057f0:	080058a7 	.word	0x080058a7
 80057f4:	080059ab 	.word	0x080059ab
 80057f8:	080059ab 	.word	0x080059ab
 80057fc:	080059ab 	.word	0x080059ab
 8005800:	080058e7 	.word	0x080058e7
 8005804:	080059ab 	.word	0x080059ab
 8005808:	080059ab 	.word	0x080059ab
 800580c:	080059ab 	.word	0x080059ab
 8005810:	08005929 	.word	0x08005929
 8005814:	080059ab 	.word	0x080059ab
 8005818:	080059ab 	.word	0x080059ab
 800581c:	080059ab 	.word	0x080059ab
 8005820:	08005969 	.word	0x08005969
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fa94 	bl	8005d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0208 	orr.w	r2, r2, #8
 800583e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0204 	bic.w	r2, r2, #4
 800584e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6999      	ldr	r1, [r3, #24]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	619a      	str	r2, [r3, #24]
      break;
 8005862:	e0a5      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fb0e 	bl	8005e8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800587e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800588e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6999      	ldr	r1, [r3, #24]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	021a      	lsls	r2, r3, #8
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	619a      	str	r2, [r3, #24]
      break;
 80058a4:	e084      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fb81 	bl	8005fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0208 	orr.w	r2, r2, #8
 80058c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0204 	bic.w	r2, r2, #4
 80058d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69d9      	ldr	r1, [r3, #28]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	61da      	str	r2, [r3, #28]
      break;
 80058e4:	e064      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fbf3 	bl	80060d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69d9      	ldr	r1, [r3, #28]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	021a      	lsls	r2, r3, #8
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	61da      	str	r2, [r3, #28]
      break;
 8005926:	e043      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fc66 	bl	8006200 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0208 	orr.w	r2, r2, #8
 8005942:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0204 	bic.w	r2, r2, #4
 8005952:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005966:	e023      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fcb0 	bl	80062d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005982:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005992:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	021a      	lsls	r2, r3, #8
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059a8:	e002      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
      break;
 80059ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop

080059c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_TIM_ConfigClockSource+0x1c>
 80059dc:	2302      	movs	r3, #2
 80059de:	e0f6      	b.n	8005bce <HAL_TIM_ConfigClockSource+0x20a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80059fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a6f      	ldr	r2, [pc, #444]	@ (8005bd8 <HAL_TIM_ConfigClockSource+0x214>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	f000 80c1 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005a20:	4a6d      	ldr	r2, [pc, #436]	@ (8005bd8 <HAL_TIM_ConfigClockSource+0x214>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	f200 80c6 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a28:	4a6c      	ldr	r2, [pc, #432]	@ (8005bdc <HAL_TIM_ConfigClockSource+0x218>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	f000 80b9 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005a30:	4a6a      	ldr	r2, [pc, #424]	@ (8005bdc <HAL_TIM_ConfigClockSource+0x218>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	f200 80be 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a38:	4a69      	ldr	r2, [pc, #420]	@ (8005be0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	f000 80b1 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005a40:	4a67      	ldr	r2, [pc, #412]	@ (8005be0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	f200 80b6 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a48:	4a66      	ldr	r2, [pc, #408]	@ (8005be4 <HAL_TIM_ConfigClockSource+0x220>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	f000 80a9 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005a50:	4a64      	ldr	r2, [pc, #400]	@ (8005be4 <HAL_TIM_ConfigClockSource+0x220>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	f200 80ae 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a58:	4a63      	ldr	r2, [pc, #396]	@ (8005be8 <HAL_TIM_ConfigClockSource+0x224>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	f000 80a1 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005a60:	4a61      	ldr	r2, [pc, #388]	@ (8005be8 <HAL_TIM_ConfigClockSource+0x224>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	f200 80a6 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a68:	4a60      	ldr	r2, [pc, #384]	@ (8005bec <HAL_TIM_ConfigClockSource+0x228>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	f000 8099 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005a70:	4a5e      	ldr	r2, [pc, #376]	@ (8005bec <HAL_TIM_ConfigClockSource+0x228>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	f200 809e 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a7c:	f000 8091 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005a80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a84:	f200 8096 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a8c:	f000 8089 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005a90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a94:	f200 808e 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a9c:	d03e      	beq.n	8005b1c <HAL_TIM_ConfigClockSource+0x158>
 8005a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa2:	f200 8087 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aaa:	f000 8086 	beq.w	8005bba <HAL_TIM_ConfigClockSource+0x1f6>
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab2:	d87f      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ab4:	2b70      	cmp	r3, #112	@ 0x70
 8005ab6:	d01a      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x12a>
 8005ab8:	2b70      	cmp	r3, #112	@ 0x70
 8005aba:	d87b      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005abc:	2b60      	cmp	r3, #96	@ 0x60
 8005abe:	d050      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x19e>
 8005ac0:	2b60      	cmp	r3, #96	@ 0x60
 8005ac2:	d877      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ac4:	2b50      	cmp	r3, #80	@ 0x50
 8005ac6:	d03c      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x17e>
 8005ac8:	2b50      	cmp	r3, #80	@ 0x50
 8005aca:	d873      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005acc:	2b40      	cmp	r3, #64	@ 0x40
 8005ace:	d058      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x1be>
 8005ad0:	2b40      	cmp	r3, #64	@ 0x40
 8005ad2:	d86f      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ad4:	2b30      	cmp	r3, #48	@ 0x30
 8005ad6:	d064      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005ad8:	2b30      	cmp	r3, #48	@ 0x30
 8005ada:	d86b      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d060      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d867      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d05c      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d05a      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x1de>
 8005aec:	e062      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005afe:	f000 fcd1 	bl	80064a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	609a      	str	r2, [r3, #8]
      break;
 8005b1a:	e04f      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b2c:	f000 fcba 	bl	80064a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b3e:	609a      	str	r2, [r3, #8]
      break;
 8005b40:	e03c      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f000 fc2c 	bl	80063ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2150      	movs	r1, #80	@ 0x50
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fc85 	bl	800646a <TIM_ITRx_SetConfig>
      break;
 8005b60:	e02c      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f000 fc4b 	bl	800640a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2160      	movs	r1, #96	@ 0x60
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fc75 	bl	800646a <TIM_ITRx_SetConfig>
      break;
 8005b80:	e01c      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f000 fc0c 	bl	80063ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2140      	movs	r1, #64	@ 0x40
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fc65 	bl	800646a <TIM_ITRx_SetConfig>
      break;
 8005ba0:	e00c      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f000 fc5c 	bl	800646a <TIM_ITRx_SetConfig>
      break;
 8005bb2:	e003      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb8:	e000      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005bba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	00100070 	.word	0x00100070
 8005bdc:	00100060 	.word	0x00100060
 8005be0:	00100050 	.word	0x00100050
 8005be4:	00100040 	.word	0x00100040
 8005be8:	00100030 	.word	0x00100030
 8005bec:	00100020 	.word	0x00100020

08005bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a4c      	ldr	r2, [pc, #304]	@ (8005d34 <TIM_Base_SetConfig+0x144>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d017      	beq.n	8005c38 <TIM_Base_SetConfig+0x48>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0e:	d013      	beq.n	8005c38 <TIM_Base_SetConfig+0x48>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a49      	ldr	r2, [pc, #292]	@ (8005d38 <TIM_Base_SetConfig+0x148>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00f      	beq.n	8005c38 <TIM_Base_SetConfig+0x48>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a48      	ldr	r2, [pc, #288]	@ (8005d3c <TIM_Base_SetConfig+0x14c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <TIM_Base_SetConfig+0x48>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a47      	ldr	r2, [pc, #284]	@ (8005d40 <TIM_Base_SetConfig+0x150>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_Base_SetConfig+0x48>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a46      	ldr	r2, [pc, #280]	@ (8005d44 <TIM_Base_SetConfig+0x154>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_Base_SetConfig+0x48>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a45      	ldr	r2, [pc, #276]	@ (8005d48 <TIM_Base_SetConfig+0x158>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d108      	bne.n	8005c4a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a39      	ldr	r2, [pc, #228]	@ (8005d34 <TIM_Base_SetConfig+0x144>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d023      	beq.n	8005c9a <TIM_Base_SetConfig+0xaa>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c58:	d01f      	beq.n	8005c9a <TIM_Base_SetConfig+0xaa>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a36      	ldr	r2, [pc, #216]	@ (8005d38 <TIM_Base_SetConfig+0x148>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01b      	beq.n	8005c9a <TIM_Base_SetConfig+0xaa>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a35      	ldr	r2, [pc, #212]	@ (8005d3c <TIM_Base_SetConfig+0x14c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d017      	beq.n	8005c9a <TIM_Base_SetConfig+0xaa>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a34      	ldr	r2, [pc, #208]	@ (8005d40 <TIM_Base_SetConfig+0x150>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <TIM_Base_SetConfig+0xaa>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a33      	ldr	r2, [pc, #204]	@ (8005d44 <TIM_Base_SetConfig+0x154>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <TIM_Base_SetConfig+0xaa>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a33      	ldr	r2, [pc, #204]	@ (8005d4c <TIM_Base_SetConfig+0x15c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00b      	beq.n	8005c9a <TIM_Base_SetConfig+0xaa>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a32      	ldr	r2, [pc, #200]	@ (8005d50 <TIM_Base_SetConfig+0x160>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d007      	beq.n	8005c9a <TIM_Base_SetConfig+0xaa>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a31      	ldr	r2, [pc, #196]	@ (8005d54 <TIM_Base_SetConfig+0x164>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_Base_SetConfig+0xaa>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2c      	ldr	r2, [pc, #176]	@ (8005d48 <TIM_Base_SetConfig+0x158>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d108      	bne.n	8005cac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a18      	ldr	r2, [pc, #96]	@ (8005d34 <TIM_Base_SetConfig+0x144>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d013      	beq.n	8005d00 <TIM_Base_SetConfig+0x110>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a1a      	ldr	r2, [pc, #104]	@ (8005d44 <TIM_Base_SetConfig+0x154>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00f      	beq.n	8005d00 <TIM_Base_SetConfig+0x110>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d4c <TIM_Base_SetConfig+0x15c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <TIM_Base_SetConfig+0x110>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a19      	ldr	r2, [pc, #100]	@ (8005d50 <TIM_Base_SetConfig+0x160>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <TIM_Base_SetConfig+0x110>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a18      	ldr	r2, [pc, #96]	@ (8005d54 <TIM_Base_SetConfig+0x164>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_Base_SetConfig+0x110>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a13      	ldr	r2, [pc, #76]	@ (8005d48 <TIM_Base_SetConfig+0x158>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d103      	bne.n	8005d08 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d105      	bne.n	8005d26 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f023 0201 	bic.w	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	611a      	str	r2, [r3, #16]
  }
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40013400 	.word	0x40013400
 8005d48:	40015000 	.word	0x40015000
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800

08005d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f023 0201 	bic.w	r2, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 0302 	bic.w	r3, r3, #2
 8005da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a30      	ldr	r2, [pc, #192]	@ (8005e74 <TIM_OC1_SetConfig+0x11c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d013      	beq.n	8005de0 <TIM_OC1_SetConfig+0x88>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a2f      	ldr	r2, [pc, #188]	@ (8005e78 <TIM_OC1_SetConfig+0x120>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00f      	beq.n	8005de0 <TIM_OC1_SetConfig+0x88>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8005e7c <TIM_OC1_SetConfig+0x124>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00b      	beq.n	8005de0 <TIM_OC1_SetConfig+0x88>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a2d      	ldr	r2, [pc, #180]	@ (8005e80 <TIM_OC1_SetConfig+0x128>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d007      	beq.n	8005de0 <TIM_OC1_SetConfig+0x88>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e84 <TIM_OC1_SetConfig+0x12c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_OC1_SetConfig+0x88>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a2b      	ldr	r2, [pc, #172]	@ (8005e88 <TIM_OC1_SetConfig+0x130>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10c      	bne.n	8005dfa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0308 	bic.w	r3, r3, #8
 8005de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f023 0304 	bic.w	r3, r3, #4
 8005df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e74 <TIM_OC1_SetConfig+0x11c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <TIM_OC1_SetConfig+0xd2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1c      	ldr	r2, [pc, #112]	@ (8005e78 <TIM_OC1_SetConfig+0x120>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00f      	beq.n	8005e2a <TIM_OC1_SetConfig+0xd2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e7c <TIM_OC1_SetConfig+0x124>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00b      	beq.n	8005e2a <TIM_OC1_SetConfig+0xd2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1a      	ldr	r2, [pc, #104]	@ (8005e80 <TIM_OC1_SetConfig+0x128>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d007      	beq.n	8005e2a <TIM_OC1_SetConfig+0xd2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a19      	ldr	r2, [pc, #100]	@ (8005e84 <TIM_OC1_SetConfig+0x12c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_OC1_SetConfig+0xd2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a18      	ldr	r2, [pc, #96]	@ (8005e88 <TIM_OC1_SetConfig+0x130>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d111      	bne.n	8005e4e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	621a      	str	r2, [r3, #32]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800
 8005e88:	40015000 	.word	0x40015000

08005e8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f023 0210 	bic.w	r2, r3, #16
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0320 	bic.w	r3, r3, #32
 8005eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a2c      	ldr	r2, [pc, #176]	@ (8005f9c <TIM_OC2_SetConfig+0x110>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d007      	beq.n	8005f00 <TIM_OC2_SetConfig+0x74>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a2b      	ldr	r2, [pc, #172]	@ (8005fa0 <TIM_OC2_SetConfig+0x114>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC2_SetConfig+0x74>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa4 <TIM_OC2_SetConfig+0x118>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10d      	bne.n	8005f1c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f9c <TIM_OC2_SetConfig+0x110>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <TIM_OC2_SetConfig+0xc0>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa0 <TIM_OC2_SetConfig+0x114>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00f      	beq.n	8005f4c <TIM_OC2_SetConfig+0xc0>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa8 <TIM_OC2_SetConfig+0x11c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00b      	beq.n	8005f4c <TIM_OC2_SetConfig+0xc0>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a1d      	ldr	r2, [pc, #116]	@ (8005fac <TIM_OC2_SetConfig+0x120>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d007      	beq.n	8005f4c <TIM_OC2_SetConfig+0xc0>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb0 <TIM_OC2_SetConfig+0x124>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_OC2_SetConfig+0xc0>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a17      	ldr	r2, [pc, #92]	@ (8005fa4 <TIM_OC2_SetConfig+0x118>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d113      	bne.n	8005f74 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40013400 	.word	0x40013400
 8005fa4:	40015000 	.word	0x40015000
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800

08005fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2b      	ldr	r2, [pc, #172]	@ (80060c0 <TIM_OC3_SetConfig+0x10c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d007      	beq.n	8006026 <TIM_OC3_SetConfig+0x72>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2a      	ldr	r2, [pc, #168]	@ (80060c4 <TIM_OC3_SetConfig+0x110>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d003      	beq.n	8006026 <TIM_OC3_SetConfig+0x72>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a29      	ldr	r2, [pc, #164]	@ (80060c8 <TIM_OC3_SetConfig+0x114>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d10d      	bne.n	8006042 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800602c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1e      	ldr	r2, [pc, #120]	@ (80060c0 <TIM_OC3_SetConfig+0x10c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <TIM_OC3_SetConfig+0xbe>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1d      	ldr	r2, [pc, #116]	@ (80060c4 <TIM_OC3_SetConfig+0x110>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00f      	beq.n	8006072 <TIM_OC3_SetConfig+0xbe>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1d      	ldr	r2, [pc, #116]	@ (80060cc <TIM_OC3_SetConfig+0x118>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00b      	beq.n	8006072 <TIM_OC3_SetConfig+0xbe>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1c      	ldr	r2, [pc, #112]	@ (80060d0 <TIM_OC3_SetConfig+0x11c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <TIM_OC3_SetConfig+0xbe>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <TIM_OC3_SetConfig+0x120>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC3_SetConfig+0xbe>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a16      	ldr	r2, [pc, #88]	@ (80060c8 <TIM_OC3_SetConfig+0x114>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d113      	bne.n	800609a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	621a      	str	r2, [r3, #32]
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40015000 	.word	0x40015000
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800

080060d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	031b      	lsls	r3, r3, #12
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a2c      	ldr	r2, [pc, #176]	@ (80061e8 <TIM_OC4_SetConfig+0x110>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d007      	beq.n	800614c <TIM_OC4_SetConfig+0x74>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a2b      	ldr	r2, [pc, #172]	@ (80061ec <TIM_OC4_SetConfig+0x114>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_OC4_SetConfig+0x74>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a2a      	ldr	r2, [pc, #168]	@ (80061f0 <TIM_OC4_SetConfig+0x118>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10d      	bne.n	8006168 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	031b      	lsls	r3, r3, #12
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006166:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a1f      	ldr	r2, [pc, #124]	@ (80061e8 <TIM_OC4_SetConfig+0x110>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d013      	beq.n	8006198 <TIM_OC4_SetConfig+0xc0>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a1e      	ldr	r2, [pc, #120]	@ (80061ec <TIM_OC4_SetConfig+0x114>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00f      	beq.n	8006198 <TIM_OC4_SetConfig+0xc0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a1e      	ldr	r2, [pc, #120]	@ (80061f4 <TIM_OC4_SetConfig+0x11c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00b      	beq.n	8006198 <TIM_OC4_SetConfig+0xc0>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a1d      	ldr	r2, [pc, #116]	@ (80061f8 <TIM_OC4_SetConfig+0x120>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <TIM_OC4_SetConfig+0xc0>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a1c      	ldr	r2, [pc, #112]	@ (80061fc <TIM_OC4_SetConfig+0x124>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC4_SetConfig+0xc0>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a17      	ldr	r2, [pc, #92]	@ (80061f0 <TIM_OC4_SetConfig+0x118>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d113      	bne.n	80061c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800619e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	019b      	lsls	r3, r3, #6
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	019b      	lsls	r3, r3, #6
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40013400 	.word	0x40013400
 80061f0:	40015000 	.word	0x40015000
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800622e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006244:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	041b      	lsls	r3, r3, #16
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a19      	ldr	r2, [pc, #100]	@ (80062bc <TIM_OC5_SetConfig+0xbc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <TIM_OC5_SetConfig+0x82>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a18      	ldr	r2, [pc, #96]	@ (80062c0 <TIM_OC5_SetConfig+0xc0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_OC5_SetConfig+0x82>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a17      	ldr	r2, [pc, #92]	@ (80062c4 <TIM_OC5_SetConfig+0xc4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_OC5_SetConfig+0x82>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a16      	ldr	r2, [pc, #88]	@ (80062c8 <TIM_OC5_SetConfig+0xc8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_OC5_SetConfig+0x82>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a15      	ldr	r2, [pc, #84]	@ (80062cc <TIM_OC5_SetConfig+0xcc>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_OC5_SetConfig+0x82>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a14      	ldr	r2, [pc, #80]	@ (80062d0 <TIM_OC5_SetConfig+0xd0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d109      	bne.n	8006296 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006288:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	621a      	str	r2, [r3, #32]
}
 80062b0:	bf00      	nop
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	40012c00 	.word	0x40012c00
 80062c0:	40013400 	.word	0x40013400
 80062c4:	40014000 	.word	0x40014000
 80062c8:	40014400 	.word	0x40014400
 80062cc:	40014800 	.word	0x40014800
 80062d0:	40015000 	.word	0x40015000

080062d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800631a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	051b      	lsls	r3, r3, #20
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a1a      	ldr	r2, [pc, #104]	@ (8006394 <TIM_OC6_SetConfig+0xc0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <TIM_OC6_SetConfig+0x84>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a19      	ldr	r2, [pc, #100]	@ (8006398 <TIM_OC6_SetConfig+0xc4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00f      	beq.n	8006358 <TIM_OC6_SetConfig+0x84>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a18      	ldr	r2, [pc, #96]	@ (800639c <TIM_OC6_SetConfig+0xc8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_OC6_SetConfig+0x84>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a17      	ldr	r2, [pc, #92]	@ (80063a0 <TIM_OC6_SetConfig+0xcc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_OC6_SetConfig+0x84>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a16      	ldr	r2, [pc, #88]	@ (80063a4 <TIM_OC6_SetConfig+0xd0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC6_SetConfig+0x84>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a15      	ldr	r2, [pc, #84]	@ (80063a8 <TIM_OC6_SetConfig+0xd4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d109      	bne.n	800636c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800635e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	029b      	lsls	r3, r3, #10
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40013400 	.word	0x40013400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800
 80063a8:	40015000 	.word	0x40015000

080063ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f023 0201 	bic.w	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f023 030a 	bic.w	r3, r3, #10
 80063e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	621a      	str	r2, [r3, #32]
}
 80063fe:	bf00      	nop
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800640a:	b480      	push	{r7}
 800640c:	b087      	sub	sp, #28
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	f023 0210 	bic.w	r2, r3, #16
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	031b      	lsls	r3, r3, #12
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006446:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	4313      	orrs	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	f043 0307 	orr.w	r3, r3, #7
 8006490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	609a      	str	r2, [r3, #8]
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	021a      	lsls	r2, r3, #8
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	431a      	orrs	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	609a      	str	r2, [r3, #8]
}
 80064d8:	bf00      	nop
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2201      	movs	r2, #1
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1a      	ldr	r2, [r3, #32]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	43db      	mvns	r3, r3
 8006506:	401a      	ands	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1a      	ldr	r2, [r3, #32]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	fa01 f303 	lsl.w	r3, r1, r3
 800651c:	431a      	orrs	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	621a      	str	r2, [r3, #32]
}
 8006522:	bf00      	nop
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
	...

08006530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006544:	2302      	movs	r3, #2
 8006546:	e074      	b.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a34      	ldr	r2, [pc, #208]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a33      	ldr	r2, [pc, #204]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a31      	ldr	r2, [pc, #196]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800658c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800659e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a21      	ldr	r2, [pc, #132]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d022      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c8:	d01d      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1f      	ldr	r2, [pc, #124]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d018      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00e      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a15      	ldr	r2, [pc, #84]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a18      	ldr	r2, [pc, #96]	@ (8006658 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a11      	ldr	r2, [pc, #68]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10c      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800660c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4313      	orrs	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40013400 	.word	0x40013400
 8006648:	40015000 	.word	0x40015000
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40000c00 	.word	0x40000c00
 8006658:	40014000 	.word	0x40014000

0800665c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e042      	b.n	80066f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fb fb97 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2224      	movs	r2, #36	@ 0x24
 800668a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fc7a 	bl	8006fa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f97b 	bl	80069a8 <UART_SetConfig>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e01b      	b.n	80066f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fcf9 	bl	80070e4 <UART_CheckIdleState>
 80066f2:	4603      	mov	r3, r0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	@ 0x28
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006712:	2b20      	cmp	r3, #32
 8006714:	d17b      	bne.n	800680e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_UART_Transmit+0x26>
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e074      	b.n	8006810 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2221      	movs	r2, #33	@ 0x21
 8006732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006736:	f7fb fdab 	bl	8002290 <HAL_GetTick>
 800673a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006754:	d108      	bne.n	8006768 <HAL_UART_Transmit+0x6c>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e003      	b.n	8006770 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006770:	e030      	b.n	80067d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2200      	movs	r2, #0
 800677a:	2180      	movs	r1, #128	@ 0x80
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fd5b 	bl	8007238 <UART_WaitOnFlagUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e03d      	b.n	8006810 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	3302      	adds	r3, #2
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	e007      	b.n	80067c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1c8      	bne.n	8006772 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2200      	movs	r2, #0
 80067e8:	2140      	movs	r1, #64	@ 0x40
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fd24 	bl	8007238 <UART_WaitOnFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e006      	b.n	8006810 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	e000      	b.n	8006810 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800680e:	2302      	movs	r3, #2
  }
}
 8006810:	4618      	mov	r0, r3
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	@ 0x28
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800682e:	2b20      	cmp	r3, #32
 8006830:	f040 80b5 	bne.w	800699e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <HAL_UART_Receive+0x28>
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e0ad      	b.n	80069a0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2222      	movs	r2, #34	@ 0x22
 8006850:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800685a:	f7fb fd19 	bl	8002290 <HAL_GetTick>
 800685e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	88fa      	ldrh	r2, [r7, #6]
 8006864:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	88fa      	ldrh	r2, [r7, #6]
 800686c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006878:	d10e      	bne.n	8006898 <HAL_UART_Receive+0x80>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d105      	bne.n	800688e <HAL_UART_Receive+0x76>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006888:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800688c:	e02d      	b.n	80068ea <HAL_UART_Receive+0xd2>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	22ff      	movs	r2, #255	@ 0xff
 8006892:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006896:	e028      	b.n	80068ea <HAL_UART_Receive+0xd2>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10d      	bne.n	80068bc <HAL_UART_Receive+0xa4>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d104      	bne.n	80068b2 <HAL_UART_Receive+0x9a>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	22ff      	movs	r2, #255	@ 0xff
 80068ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068b0:	e01b      	b.n	80068ea <HAL_UART_Receive+0xd2>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	227f      	movs	r2, #127	@ 0x7f
 80068b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068ba:	e016      	b.n	80068ea <HAL_UART_Receive+0xd2>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068c4:	d10d      	bne.n	80068e2 <HAL_UART_Receive+0xca>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d104      	bne.n	80068d8 <HAL_UART_Receive+0xc0>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	227f      	movs	r2, #127	@ 0x7f
 80068d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068d6:	e008      	b.n	80068ea <HAL_UART_Receive+0xd2>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	223f      	movs	r2, #63	@ 0x3f
 80068dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068e0:	e003      	b.n	80068ea <HAL_UART_Receive+0xd2>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80068f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068fa:	d108      	bne.n	800690e <HAL_UART_Receive+0xf6>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006904:	2300      	movs	r3, #0
 8006906:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	61bb      	str	r3, [r7, #24]
 800690c:	e003      	b.n	8006916 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006916:	e036      	b.n	8006986 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2200      	movs	r2, #0
 8006920:	2120      	movs	r1, #32
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 fc88 	bl	8007238 <UART_WaitOnFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e032      	b.n	80069a0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10c      	bne.n	800695a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	b29a      	uxth	r2, r3
 8006948:	8a7b      	ldrh	r3, [r7, #18]
 800694a:	4013      	ands	r3, r2
 800694c:	b29a      	uxth	r2, r3
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	3302      	adds	r3, #2
 8006956:	61bb      	str	r3, [r7, #24]
 8006958:	e00c      	b.n	8006974 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	b2da      	uxtb	r2, r3
 8006962:	8a7b      	ldrh	r3, [r7, #18]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	4013      	ands	r3, r2
 8006968:	b2da      	uxtb	r2, r3
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	3301      	adds	r3, #1
 8006972:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1c2      	bne.n	8006918 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e000      	b.n	80069a0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800699e:	2302      	movs	r3, #2
  }
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3720      	adds	r7, #32
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069ac:	b08c      	sub	sp, #48	@ 0x30
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	431a      	orrs	r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4baa      	ldr	r3, [pc, #680]	@ (8006c80 <UART_SetConfig+0x2d8>)
 80069d8:	4013      	ands	r3, r2
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a9f      	ldr	r2, [pc, #636]	@ (8006c84 <UART_SetConfig+0x2dc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a10:	4313      	orrs	r3, r2
 8006a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a32:	f023 010f 	bic.w	r1, r3, #15
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a90      	ldr	r2, [pc, #576]	@ (8006c88 <UART_SetConfig+0x2e0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d125      	bne.n	8006a98 <UART_SetConfig+0xf0>
 8006a4c:	4b8f      	ldr	r3, [pc, #572]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d81a      	bhi.n	8006a90 <UART_SetConfig+0xe8>
 8006a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <UART_SetConfig+0xb8>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a89 	.word	0x08006a89
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a76:	e116      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7e:	e112      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a86:	e10e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8e:	e10a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	e106      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a7c      	ldr	r2, [pc, #496]	@ (8006c90 <UART_SetConfig+0x2e8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d138      	bne.n	8006b14 <UART_SetConfig+0x16c>
 8006aa2:	4b7a      	ldr	r3, [pc, #488]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	f003 030c 	and.w	r3, r3, #12
 8006aac:	2b0c      	cmp	r3, #12
 8006aae:	d82d      	bhi.n	8006b0c <UART_SetConfig+0x164>
 8006ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab8 <UART_SetConfig+0x110>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006b0d 	.word	0x08006b0d
 8006ac0:	08006b0d 	.word	0x08006b0d
 8006ac4:	08006b0d 	.word	0x08006b0d
 8006ac8:	08006afd 	.word	0x08006afd
 8006acc:	08006b0d 	.word	0x08006b0d
 8006ad0:	08006b0d 	.word	0x08006b0d
 8006ad4:	08006b0d 	.word	0x08006b0d
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	08006b0d 	.word	0x08006b0d
 8006ae0:	08006b0d 	.word	0x08006b0d
 8006ae4:	08006b0d 	.word	0x08006b0d
 8006ae8:	08006b05 	.word	0x08006b05
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af2:	e0d8      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006afa:	e0d4      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b02:	e0d0      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0a:	e0cc      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b12:	e0c8      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a5e      	ldr	r2, [pc, #376]	@ (8006c94 <UART_SetConfig+0x2ec>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d125      	bne.n	8006b6a <UART_SetConfig+0x1c2>
 8006b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b28:	2b30      	cmp	r3, #48	@ 0x30
 8006b2a:	d016      	beq.n	8006b5a <UART_SetConfig+0x1b2>
 8006b2c:	2b30      	cmp	r3, #48	@ 0x30
 8006b2e:	d818      	bhi.n	8006b62 <UART_SetConfig+0x1ba>
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d00a      	beq.n	8006b4a <UART_SetConfig+0x1a2>
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d814      	bhi.n	8006b62 <UART_SetConfig+0x1ba>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <UART_SetConfig+0x19a>
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d008      	beq.n	8006b52 <UART_SetConfig+0x1aa>
 8006b40:	e00f      	b.n	8006b62 <UART_SetConfig+0x1ba>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b48:	e0ad      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b50:	e0a9      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b52:	2304      	movs	r3, #4
 8006b54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b58:	e0a5      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b60:	e0a1      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b62:	2310      	movs	r3, #16
 8006b64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b68:	e09d      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c98 <UART_SetConfig+0x2f0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d125      	bne.n	8006bc0 <UART_SetConfig+0x218>
 8006b74:	4b45      	ldr	r3, [pc, #276]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b80:	d016      	beq.n	8006bb0 <UART_SetConfig+0x208>
 8006b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b84:	d818      	bhi.n	8006bb8 <UART_SetConfig+0x210>
 8006b86:	2b80      	cmp	r3, #128	@ 0x80
 8006b88:	d00a      	beq.n	8006ba0 <UART_SetConfig+0x1f8>
 8006b8a:	2b80      	cmp	r3, #128	@ 0x80
 8006b8c:	d814      	bhi.n	8006bb8 <UART_SetConfig+0x210>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <UART_SetConfig+0x1f0>
 8006b92:	2b40      	cmp	r3, #64	@ 0x40
 8006b94:	d008      	beq.n	8006ba8 <UART_SetConfig+0x200>
 8006b96:	e00f      	b.n	8006bb8 <UART_SetConfig+0x210>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9e:	e082      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	e07e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e07a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	e076      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e072      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a35      	ldr	r2, [pc, #212]	@ (8006c9c <UART_SetConfig+0x2f4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d12a      	bne.n	8006c20 <UART_SetConfig+0x278>
 8006bca:	4b30      	ldr	r3, [pc, #192]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd8:	d01a      	beq.n	8006c10 <UART_SetConfig+0x268>
 8006bda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bde:	d81b      	bhi.n	8006c18 <UART_SetConfig+0x270>
 8006be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be4:	d00c      	beq.n	8006c00 <UART_SetConfig+0x258>
 8006be6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bea:	d815      	bhi.n	8006c18 <UART_SetConfig+0x270>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <UART_SetConfig+0x250>
 8006bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bf4:	d008      	beq.n	8006c08 <UART_SetConfig+0x260>
 8006bf6:	e00f      	b.n	8006c18 <UART_SetConfig+0x270>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfe:	e052      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c00:	2302      	movs	r3, #2
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c06:	e04e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c08:	2304      	movs	r3, #4
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0e:	e04a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c10:	2308      	movs	r3, #8
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	e046      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1e:	e042      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a17      	ldr	r2, [pc, #92]	@ (8006c84 <UART_SetConfig+0x2dc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d13a      	bne.n	8006ca0 <UART_SetConfig+0x2f8>
 8006c2a:	4b18      	ldr	r3, [pc, #96]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c38:	d01a      	beq.n	8006c70 <UART_SetConfig+0x2c8>
 8006c3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c3e:	d81b      	bhi.n	8006c78 <UART_SetConfig+0x2d0>
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c44:	d00c      	beq.n	8006c60 <UART_SetConfig+0x2b8>
 8006c46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c4a:	d815      	bhi.n	8006c78 <UART_SetConfig+0x2d0>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <UART_SetConfig+0x2b0>
 8006c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c54:	d008      	beq.n	8006c68 <UART_SetConfig+0x2c0>
 8006c56:	e00f      	b.n	8006c78 <UART_SetConfig+0x2d0>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5e:	e022      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c66:	e01e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6e:	e01a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c76:	e016      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7e:	e012      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c80:	cfff69f3 	.word	0xcfff69f3
 8006c84:	40008000 	.word	0x40008000
 8006c88:	40013800 	.word	0x40013800
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	40004400 	.word	0x40004400
 8006c94:	40004800 	.word	0x40004800
 8006c98:	40004c00 	.word	0x40004c00
 8006c9c:	40005000 	.word	0x40005000
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4aae      	ldr	r2, [pc, #696]	@ (8006f64 <UART_SetConfig+0x5bc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	f040 8097 	bne.w	8006de0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d823      	bhi.n	8006d02 <UART_SetConfig+0x35a>
 8006cba:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc0 <UART_SetConfig+0x318>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006cf3 	.word	0x08006cf3
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006d03 	.word	0x08006d03
 8006cdc:	08006d03 	.word	0x08006d03
 8006ce0:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce4:	f7fd ffd4 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 8006ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cea:	e010      	b.n	8006d0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b9e      	ldr	r3, [pc, #632]	@ (8006f68 <UART_SetConfig+0x5c0>)
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cf0:	e00d      	b.n	8006d0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fd ff5f 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8006cf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cf8:	e009      	b.n	8006d0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d00:	e005      	b.n	8006d0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 8130 	beq.w	8006f76 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	4a94      	ldr	r2, [pc, #592]	@ (8006f6c <UART_SetConfig+0x5c4>)
 8006d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d20:	461a      	mov	r2, r3
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d305      	bcc.n	8006d46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d903      	bls.n	8006d4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d4c:	e113      	b.n	8006f76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	2200      	movs	r2, #0
 8006d52:	60bb      	str	r3, [r7, #8]
 8006d54:	60fa      	str	r2, [r7, #12]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	4a84      	ldr	r2, [pc, #528]	@ (8006f6c <UART_SetConfig+0x5c4>)
 8006d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2200      	movs	r2, #0
 8006d64:	603b      	str	r3, [r7, #0]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d70:	f7f9 ff42 	bl	8000bf8 <__aeabi_uldivmod>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	020b      	lsls	r3, r1, #8
 8006d86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d8a:	0202      	lsls	r2, r0, #8
 8006d8c:	6979      	ldr	r1, [r7, #20]
 8006d8e:	6849      	ldr	r1, [r1, #4]
 8006d90:	0849      	lsrs	r1, r1, #1
 8006d92:	2000      	movs	r0, #0
 8006d94:	460c      	mov	r4, r1
 8006d96:	4605      	mov	r5, r0
 8006d98:	eb12 0804 	adds.w	r8, r2, r4
 8006d9c:	eb43 0905 	adc.w	r9, r3, r5
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	469a      	mov	sl, r3
 8006da8:	4693      	mov	fp, r2
 8006daa:	4652      	mov	r2, sl
 8006dac:	465b      	mov	r3, fp
 8006dae:	4640      	mov	r0, r8
 8006db0:	4649      	mov	r1, r9
 8006db2:	f7f9 ff21 	bl	8000bf8 <__aeabi_uldivmod>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4613      	mov	r3, r2
 8006dbc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc4:	d308      	bcc.n	8006dd8 <UART_SetConfig+0x430>
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dcc:	d204      	bcs.n	8006dd8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6a3a      	ldr	r2, [r7, #32]
 8006dd4:	60da      	str	r2, [r3, #12]
 8006dd6:	e0ce      	b.n	8006f76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006dde:	e0ca      	b.n	8006f76 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006de8:	d166      	bne.n	8006eb8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006dea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d827      	bhi.n	8006e42 <UART_SetConfig+0x49a>
 8006df2:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <UART_SetConfig+0x450>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	08006e43 	.word	0x08006e43
 8006e08:	08006e33 	.word	0x08006e33
 8006e0c:	08006e43 	.word	0x08006e43
 8006e10:	08006e43 	.word	0x08006e43
 8006e14:	08006e43 	.word	0x08006e43
 8006e18:	08006e3b 	.word	0x08006e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e1c:	f7fd ff38 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 8006e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e22:	e014      	b.n	8006e4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e24:	f7fd ff4a 	bl	8004cbc <HAL_RCC_GetPCLK2Freq>
 8006e28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e2a:	e010      	b.n	8006e4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8006f68 <UART_SetConfig+0x5c0>)
 8006e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e30:	e00d      	b.n	8006e4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e32:	f7fd febf 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8006e36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e38:	e009      	b.n	8006e4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e40:	e005      	b.n	8006e4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8090 	beq.w	8006f76 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	4a44      	ldr	r2, [pc, #272]	@ (8006f6c <UART_SetConfig+0x5c4>)
 8006e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e60:	461a      	mov	r2, r3
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e68:	005a      	lsls	r2, r3, #1
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	441a      	add	r2, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	2b0f      	cmp	r3, #15
 8006e80:	d916      	bls.n	8006eb0 <UART_SetConfig+0x508>
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e88:	d212      	bcs.n	8006eb0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f023 030f 	bic.w	r3, r3, #15
 8006e92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	8bfb      	ldrh	r3, [r7, #30]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	8bfa      	ldrh	r2, [r7, #30]
 8006eac:	60da      	str	r2, [r3, #12]
 8006eae:	e062      	b.n	8006f76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006eb6:	e05e      	b.n	8006f76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d828      	bhi.n	8006f12 <UART_SetConfig+0x56a>
 8006ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec8 <UART_SetConfig+0x520>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006ef5 	.word	0x08006ef5
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	08006f13 	.word	0x08006f13
 8006ed8:	08006f03 	.word	0x08006f03
 8006edc:	08006f13 	.word	0x08006f13
 8006ee0:	08006f13 	.word	0x08006f13
 8006ee4:	08006f13 	.word	0x08006f13
 8006ee8:	08006f0b 	.word	0x08006f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7fd fed0 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 8006ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ef2:	e014      	b.n	8006f1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef4:	f7fd fee2 	bl	8004cbc <HAL_RCC_GetPCLK2Freq>
 8006ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006efa:	e010      	b.n	8006f1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006efc:	4b1a      	ldr	r3, [pc, #104]	@ (8006f68 <UART_SetConfig+0x5c0>)
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f00:	e00d      	b.n	8006f1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f02:	f7fd fe57 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8006f06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f08:	e009      	b.n	8006f1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f10:	e005      	b.n	8006f1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d028      	beq.n	8006f76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	4a10      	ldr	r2, [pc, #64]	@ (8006f6c <UART_SetConfig+0x5c4>)
 8006f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	085b      	lsrs	r3, r3, #1
 8006f3c:	441a      	add	r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	2b0f      	cmp	r3, #15
 8006f4c:	d910      	bls.n	8006f70 <UART_SetConfig+0x5c8>
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f54:	d20c      	bcs.n	8006f70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60da      	str	r2, [r3, #12]
 8006f60:	e009      	b.n	8006f76 <UART_SetConfig+0x5ce>
 8006f62:	bf00      	nop
 8006f64:	40008000 	.word	0x40008000
 8006f68:	00f42400 	.word	0x00f42400
 8006f6c:	0800a034 	.word	0x0800a034
      }
      else
      {
        ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f92:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3730      	adds	r7, #48	@ 0x30
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01a      	beq.n	80070b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800709e:	d10a      	bne.n	80070b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	605a      	str	r2, [r3, #4]
  }
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b098      	sub	sp, #96	@ 0x60
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070f4:	f7fb f8cc 	bl	8002290 <HAL_GetTick>
 80070f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b08      	cmp	r3, #8
 8007106:	d12f      	bne.n	8007168 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007108:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007110:	2200      	movs	r2, #0
 8007112:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f88e 	bl	8007238 <UART_WaitOnFlagUntilTimeout>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d022      	beq.n	8007168 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007136:	653b      	str	r3, [r7, #80]	@ 0x50
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007140:	647b      	str	r3, [r7, #68]	@ 0x44
 8007142:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007146:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800714e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e6      	bne.n	8007122 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e063      	b.n	8007230 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b04      	cmp	r3, #4
 8007174:	d149      	bne.n	800720a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007176:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800717e:	2200      	movs	r2, #0
 8007180:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f857 	bl	8007238 <UART_WaitOnFlagUntilTimeout>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d03c      	beq.n	800720a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	623b      	str	r3, [r7, #32]
   return(result);
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80071b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e6      	bne.n	8007190 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3308      	adds	r3, #8
 80071c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071e2:	61fa      	str	r2, [r7, #28]
 80071e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	69b9      	ldr	r1, [r7, #24]
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	617b      	str	r3, [r7, #20]
   return(result);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e5      	bne.n	80071c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e012      	b.n	8007230 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3758      	adds	r7, #88	@ 0x58
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	4613      	mov	r3, r2
 8007246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007248:	e04f      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d04b      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007252:	f7fb f81d 	bl	8002290 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <UART_WaitOnFlagUntilTimeout+0x30>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e04e      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	2b00      	cmp	r3, #0
 8007278:	d037      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b80      	cmp	r3, #128	@ 0x80
 800727e:	d034      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b40      	cmp	r3, #64	@ 0x40
 8007284:	d031      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b08      	cmp	r3, #8
 8007292:	d110      	bne.n	80072b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2208      	movs	r2, #8
 800729a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f838 	bl	8007312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2208      	movs	r2, #8
 80072a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e029      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072c4:	d111      	bne.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f81e 	bl	8007312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2220      	movs	r2, #32
 80072da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e00f      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4013      	ands	r3, r2
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	bf0c      	ite	eq
 80072fa:	2301      	moveq	r3, #1
 80072fc:	2300      	movne	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	429a      	cmp	r2, r3
 8007306:	d0a0      	beq.n	800724a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007312:	b480      	push	{r7}
 8007314:	b095      	sub	sp, #84	@ 0x54
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800732e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007338:	643b      	str	r3, [r7, #64]	@ 0x40
 800733a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800733e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e6      	bne.n	800731a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	61fb      	str	r3, [r7, #28]
   return(result);
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007362:	f023 0301 	bic.w	r3, r3, #1
 8007366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007370:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e3      	bne.n	800734c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007388:	2b01      	cmp	r3, #1
 800738a:	d118      	bne.n	80073be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	60bb      	str	r3, [r7, #8]
   return(result);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 0310 	bic.w	r3, r3, #16
 80073a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6979      	ldr	r1, [r7, #20]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	613b      	str	r3, [r7, #16]
   return(result);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e6      	bne.n	800738c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073d2:	bf00      	nop
 80073d4:	3754      	adds	r7, #84	@ 0x54
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e027      	b.n	8007444 <HAL_UARTEx_DisableFifoMode+0x66>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2224      	movs	r2, #36	@ 0x24
 8007400:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0201 	bic.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007422:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007464:	2302      	movs	r3, #2
 8007466:	e02d      	b.n	80074c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2224      	movs	r2, #36	@ 0x24
 8007474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0201 	bic.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f84f 	bl	8007548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e02d      	b.n	8007540 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2224      	movs	r2, #36	@ 0x24
 80074f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f811 	bl	8007548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007554:	2b00      	cmp	r3, #0
 8007556:	d108      	bne.n	800756a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007568:	e031      	b.n	80075ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800756a:	2308      	movs	r3, #8
 800756c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800756e:	2308      	movs	r3, #8
 8007570:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	0e5b      	lsrs	r3, r3, #25
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	0f5b      	lsrs	r3, r3, #29
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	7b3a      	ldrb	r2, [r7, #12]
 8007596:	4911      	ldr	r1, [pc, #68]	@ (80075dc <UARTEx_SetNbDataToProcess+0x94>)
 8007598:	5c8a      	ldrb	r2, [r1, r2]
 800759a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800759e:	7b3a      	ldrb	r2, [r7, #12]
 80075a0:	490f      	ldr	r1, [pc, #60]	@ (80075e0 <UARTEx_SetNbDataToProcess+0x98>)
 80075a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	7b7a      	ldrb	r2, [r7, #13]
 80075b4:	4909      	ldr	r1, [pc, #36]	@ (80075dc <UARTEx_SetNbDataToProcess+0x94>)
 80075b6:	5c8a      	ldrb	r2, [r1, r2]
 80075b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075bc:	7b7a      	ldrb	r2, [r7, #13]
 80075be:	4908      	ldr	r1, [pc, #32]	@ (80075e0 <UARTEx_SetNbDataToProcess+0x98>)
 80075c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	0800a04c 	.word	0x0800a04c
 80075e0:	0800a054 	.word	0x0800a054

080075e4 <__cvt>:
 80075e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	ec57 6b10 	vmov	r6, r7, d0
 80075ec:	2f00      	cmp	r7, #0
 80075ee:	460c      	mov	r4, r1
 80075f0:	4619      	mov	r1, r3
 80075f2:	463b      	mov	r3, r7
 80075f4:	bfbb      	ittet	lt
 80075f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80075fa:	461f      	movlt	r7, r3
 80075fc:	2300      	movge	r3, #0
 80075fe:	232d      	movlt	r3, #45	@ 0x2d
 8007600:	700b      	strb	r3, [r1, #0]
 8007602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007604:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007608:	4691      	mov	r9, r2
 800760a:	f023 0820 	bic.w	r8, r3, #32
 800760e:	bfbc      	itt	lt
 8007610:	4632      	movlt	r2, r6
 8007612:	4616      	movlt	r6, r2
 8007614:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007618:	d005      	beq.n	8007626 <__cvt+0x42>
 800761a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800761e:	d100      	bne.n	8007622 <__cvt+0x3e>
 8007620:	3401      	adds	r4, #1
 8007622:	2102      	movs	r1, #2
 8007624:	e000      	b.n	8007628 <__cvt+0x44>
 8007626:	2103      	movs	r1, #3
 8007628:	ab03      	add	r3, sp, #12
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	ab02      	add	r3, sp, #8
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	ec47 6b10 	vmov	d0, r6, r7
 8007634:	4653      	mov	r3, sl
 8007636:	4622      	mov	r2, r4
 8007638:	f000 ff3e 	bl	80084b8 <_dtoa_r>
 800763c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007640:	4605      	mov	r5, r0
 8007642:	d119      	bne.n	8007678 <__cvt+0x94>
 8007644:	f019 0f01 	tst.w	r9, #1
 8007648:	d00e      	beq.n	8007668 <__cvt+0x84>
 800764a:	eb00 0904 	add.w	r9, r0, r4
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	4630      	mov	r0, r6
 8007654:	4639      	mov	r1, r7
 8007656:	f7f9 fa5f 	bl	8000b18 <__aeabi_dcmpeq>
 800765a:	b108      	cbz	r0, 8007660 <__cvt+0x7c>
 800765c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007660:	2230      	movs	r2, #48	@ 0x30
 8007662:	9b03      	ldr	r3, [sp, #12]
 8007664:	454b      	cmp	r3, r9
 8007666:	d31e      	bcc.n	80076a6 <__cvt+0xc2>
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800766c:	1b5b      	subs	r3, r3, r5
 800766e:	4628      	mov	r0, r5
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	b004      	add	sp, #16
 8007674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007678:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800767c:	eb00 0904 	add.w	r9, r0, r4
 8007680:	d1e5      	bne.n	800764e <__cvt+0x6a>
 8007682:	7803      	ldrb	r3, [r0, #0]
 8007684:	2b30      	cmp	r3, #48	@ 0x30
 8007686:	d10a      	bne.n	800769e <__cvt+0xba>
 8007688:	2200      	movs	r2, #0
 800768a:	2300      	movs	r3, #0
 800768c:	4630      	mov	r0, r6
 800768e:	4639      	mov	r1, r7
 8007690:	f7f9 fa42 	bl	8000b18 <__aeabi_dcmpeq>
 8007694:	b918      	cbnz	r0, 800769e <__cvt+0xba>
 8007696:	f1c4 0401 	rsb	r4, r4, #1
 800769a:	f8ca 4000 	str.w	r4, [sl]
 800769e:	f8da 3000 	ldr.w	r3, [sl]
 80076a2:	4499      	add	r9, r3
 80076a4:	e7d3      	b.n	800764e <__cvt+0x6a>
 80076a6:	1c59      	adds	r1, r3, #1
 80076a8:	9103      	str	r1, [sp, #12]
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	e7d9      	b.n	8007662 <__cvt+0x7e>

080076ae <__exponent>:
 80076ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076b0:	2900      	cmp	r1, #0
 80076b2:	bfba      	itte	lt
 80076b4:	4249      	neglt	r1, r1
 80076b6:	232d      	movlt	r3, #45	@ 0x2d
 80076b8:	232b      	movge	r3, #43	@ 0x2b
 80076ba:	2909      	cmp	r1, #9
 80076bc:	7002      	strb	r2, [r0, #0]
 80076be:	7043      	strb	r3, [r0, #1]
 80076c0:	dd29      	ble.n	8007716 <__exponent+0x68>
 80076c2:	f10d 0307 	add.w	r3, sp, #7
 80076c6:	461d      	mov	r5, r3
 80076c8:	270a      	movs	r7, #10
 80076ca:	461a      	mov	r2, r3
 80076cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80076d0:	fb07 1416 	mls	r4, r7, r6, r1
 80076d4:	3430      	adds	r4, #48	@ 0x30
 80076d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80076da:	460c      	mov	r4, r1
 80076dc:	2c63      	cmp	r4, #99	@ 0x63
 80076de:	f103 33ff 	add.w	r3, r3, #4294967295
 80076e2:	4631      	mov	r1, r6
 80076e4:	dcf1      	bgt.n	80076ca <__exponent+0x1c>
 80076e6:	3130      	adds	r1, #48	@ 0x30
 80076e8:	1e94      	subs	r4, r2, #2
 80076ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80076ee:	1c41      	adds	r1, r0, #1
 80076f0:	4623      	mov	r3, r4
 80076f2:	42ab      	cmp	r3, r5
 80076f4:	d30a      	bcc.n	800770c <__exponent+0x5e>
 80076f6:	f10d 0309 	add.w	r3, sp, #9
 80076fa:	1a9b      	subs	r3, r3, r2
 80076fc:	42ac      	cmp	r4, r5
 80076fe:	bf88      	it	hi
 8007700:	2300      	movhi	r3, #0
 8007702:	3302      	adds	r3, #2
 8007704:	4403      	add	r3, r0
 8007706:	1a18      	subs	r0, r3, r0
 8007708:	b003      	add	sp, #12
 800770a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800770c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007710:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007714:	e7ed      	b.n	80076f2 <__exponent+0x44>
 8007716:	2330      	movs	r3, #48	@ 0x30
 8007718:	3130      	adds	r1, #48	@ 0x30
 800771a:	7083      	strb	r3, [r0, #2]
 800771c:	70c1      	strb	r1, [r0, #3]
 800771e:	1d03      	adds	r3, r0, #4
 8007720:	e7f1      	b.n	8007706 <__exponent+0x58>
	...

08007724 <_printf_float>:
 8007724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007728:	b08d      	sub	sp, #52	@ 0x34
 800772a:	460c      	mov	r4, r1
 800772c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007730:	4616      	mov	r6, r2
 8007732:	461f      	mov	r7, r3
 8007734:	4605      	mov	r5, r0
 8007736:	f000 fdbf 	bl	80082b8 <_localeconv_r>
 800773a:	6803      	ldr	r3, [r0, #0]
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	4618      	mov	r0, r3
 8007740:	f7f8 fdbe 	bl	80002c0 <strlen>
 8007744:	2300      	movs	r3, #0
 8007746:	930a      	str	r3, [sp, #40]	@ 0x28
 8007748:	f8d8 3000 	ldr.w	r3, [r8]
 800774c:	9005      	str	r0, [sp, #20]
 800774e:	3307      	adds	r3, #7
 8007750:	f023 0307 	bic.w	r3, r3, #7
 8007754:	f103 0208 	add.w	r2, r3, #8
 8007758:	f894 a018 	ldrb.w	sl, [r4, #24]
 800775c:	f8d4 b000 	ldr.w	fp, [r4]
 8007760:	f8c8 2000 	str.w	r2, [r8]
 8007764:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007768:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800776c:	9307      	str	r3, [sp, #28]
 800776e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007772:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800777a:	4b9c      	ldr	r3, [pc, #624]	@ (80079ec <_printf_float+0x2c8>)
 800777c:	f04f 32ff 	mov.w	r2, #4294967295
 8007780:	f7f9 f9fc 	bl	8000b7c <__aeabi_dcmpun>
 8007784:	bb70      	cbnz	r0, 80077e4 <_printf_float+0xc0>
 8007786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800778a:	4b98      	ldr	r3, [pc, #608]	@ (80079ec <_printf_float+0x2c8>)
 800778c:	f04f 32ff 	mov.w	r2, #4294967295
 8007790:	f7f9 f9d6 	bl	8000b40 <__aeabi_dcmple>
 8007794:	bb30      	cbnz	r0, 80077e4 <_printf_float+0xc0>
 8007796:	2200      	movs	r2, #0
 8007798:	2300      	movs	r3, #0
 800779a:	4640      	mov	r0, r8
 800779c:	4649      	mov	r1, r9
 800779e:	f7f9 f9c5 	bl	8000b2c <__aeabi_dcmplt>
 80077a2:	b110      	cbz	r0, 80077aa <_printf_float+0x86>
 80077a4:	232d      	movs	r3, #45	@ 0x2d
 80077a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077aa:	4a91      	ldr	r2, [pc, #580]	@ (80079f0 <_printf_float+0x2cc>)
 80077ac:	4b91      	ldr	r3, [pc, #580]	@ (80079f4 <_printf_float+0x2d0>)
 80077ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80077b2:	bf94      	ite	ls
 80077b4:	4690      	movls	r8, r2
 80077b6:	4698      	movhi	r8, r3
 80077b8:	2303      	movs	r3, #3
 80077ba:	6123      	str	r3, [r4, #16]
 80077bc:	f02b 0304 	bic.w	r3, fp, #4
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	f04f 0900 	mov.w	r9, #0
 80077c6:	9700      	str	r7, [sp, #0]
 80077c8:	4633      	mov	r3, r6
 80077ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80077cc:	4621      	mov	r1, r4
 80077ce:	4628      	mov	r0, r5
 80077d0:	f000 f9d2 	bl	8007b78 <_printf_common>
 80077d4:	3001      	adds	r0, #1
 80077d6:	f040 808d 	bne.w	80078f4 <_printf_float+0x1d0>
 80077da:	f04f 30ff 	mov.w	r0, #4294967295
 80077de:	b00d      	add	sp, #52	@ 0x34
 80077e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e4:	4642      	mov	r2, r8
 80077e6:	464b      	mov	r3, r9
 80077e8:	4640      	mov	r0, r8
 80077ea:	4649      	mov	r1, r9
 80077ec:	f7f9 f9c6 	bl	8000b7c <__aeabi_dcmpun>
 80077f0:	b140      	cbz	r0, 8007804 <_printf_float+0xe0>
 80077f2:	464b      	mov	r3, r9
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	bfbc      	itt	lt
 80077f8:	232d      	movlt	r3, #45	@ 0x2d
 80077fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80077fe:	4a7e      	ldr	r2, [pc, #504]	@ (80079f8 <_printf_float+0x2d4>)
 8007800:	4b7e      	ldr	r3, [pc, #504]	@ (80079fc <_printf_float+0x2d8>)
 8007802:	e7d4      	b.n	80077ae <_printf_float+0x8a>
 8007804:	6863      	ldr	r3, [r4, #4]
 8007806:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800780a:	9206      	str	r2, [sp, #24]
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	d13b      	bne.n	8007888 <_printf_float+0x164>
 8007810:	2306      	movs	r3, #6
 8007812:	6063      	str	r3, [r4, #4]
 8007814:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007818:	2300      	movs	r3, #0
 800781a:	6022      	str	r2, [r4, #0]
 800781c:	9303      	str	r3, [sp, #12]
 800781e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007820:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007824:	ab09      	add	r3, sp, #36	@ 0x24
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	6861      	ldr	r1, [r4, #4]
 800782a:	ec49 8b10 	vmov	d0, r8, r9
 800782e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007832:	4628      	mov	r0, r5
 8007834:	f7ff fed6 	bl	80075e4 <__cvt>
 8007838:	9b06      	ldr	r3, [sp, #24]
 800783a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800783c:	2b47      	cmp	r3, #71	@ 0x47
 800783e:	4680      	mov	r8, r0
 8007840:	d129      	bne.n	8007896 <_printf_float+0x172>
 8007842:	1cc8      	adds	r0, r1, #3
 8007844:	db02      	blt.n	800784c <_printf_float+0x128>
 8007846:	6863      	ldr	r3, [r4, #4]
 8007848:	4299      	cmp	r1, r3
 800784a:	dd41      	ble.n	80078d0 <_printf_float+0x1ac>
 800784c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007850:	fa5f fa8a 	uxtb.w	sl, sl
 8007854:	3901      	subs	r1, #1
 8007856:	4652      	mov	r2, sl
 8007858:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800785c:	9109      	str	r1, [sp, #36]	@ 0x24
 800785e:	f7ff ff26 	bl	80076ae <__exponent>
 8007862:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007864:	1813      	adds	r3, r2, r0
 8007866:	2a01      	cmp	r2, #1
 8007868:	4681      	mov	r9, r0
 800786a:	6123      	str	r3, [r4, #16]
 800786c:	dc02      	bgt.n	8007874 <_printf_float+0x150>
 800786e:	6822      	ldr	r2, [r4, #0]
 8007870:	07d2      	lsls	r2, r2, #31
 8007872:	d501      	bpl.n	8007878 <_printf_float+0x154>
 8007874:	3301      	adds	r3, #1
 8007876:	6123      	str	r3, [r4, #16]
 8007878:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0a2      	beq.n	80077c6 <_printf_float+0xa2>
 8007880:	232d      	movs	r3, #45	@ 0x2d
 8007882:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007886:	e79e      	b.n	80077c6 <_printf_float+0xa2>
 8007888:	9a06      	ldr	r2, [sp, #24]
 800788a:	2a47      	cmp	r2, #71	@ 0x47
 800788c:	d1c2      	bne.n	8007814 <_printf_float+0xf0>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1c0      	bne.n	8007814 <_printf_float+0xf0>
 8007892:	2301      	movs	r3, #1
 8007894:	e7bd      	b.n	8007812 <_printf_float+0xee>
 8007896:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800789a:	d9db      	bls.n	8007854 <_printf_float+0x130>
 800789c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80078a0:	d118      	bne.n	80078d4 <_printf_float+0x1b0>
 80078a2:	2900      	cmp	r1, #0
 80078a4:	6863      	ldr	r3, [r4, #4]
 80078a6:	dd0b      	ble.n	80078c0 <_printf_float+0x19c>
 80078a8:	6121      	str	r1, [r4, #16]
 80078aa:	b913      	cbnz	r3, 80078b2 <_printf_float+0x18e>
 80078ac:	6822      	ldr	r2, [r4, #0]
 80078ae:	07d0      	lsls	r0, r2, #31
 80078b0:	d502      	bpl.n	80078b8 <_printf_float+0x194>
 80078b2:	3301      	adds	r3, #1
 80078b4:	440b      	add	r3, r1
 80078b6:	6123      	str	r3, [r4, #16]
 80078b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80078ba:	f04f 0900 	mov.w	r9, #0
 80078be:	e7db      	b.n	8007878 <_printf_float+0x154>
 80078c0:	b913      	cbnz	r3, 80078c8 <_printf_float+0x1a4>
 80078c2:	6822      	ldr	r2, [r4, #0]
 80078c4:	07d2      	lsls	r2, r2, #31
 80078c6:	d501      	bpl.n	80078cc <_printf_float+0x1a8>
 80078c8:	3302      	adds	r3, #2
 80078ca:	e7f4      	b.n	80078b6 <_printf_float+0x192>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e7f2      	b.n	80078b6 <_printf_float+0x192>
 80078d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80078d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078d6:	4299      	cmp	r1, r3
 80078d8:	db05      	blt.n	80078e6 <_printf_float+0x1c2>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	6121      	str	r1, [r4, #16]
 80078de:	07d8      	lsls	r0, r3, #31
 80078e0:	d5ea      	bpl.n	80078b8 <_printf_float+0x194>
 80078e2:	1c4b      	adds	r3, r1, #1
 80078e4:	e7e7      	b.n	80078b6 <_printf_float+0x192>
 80078e6:	2900      	cmp	r1, #0
 80078e8:	bfd4      	ite	le
 80078ea:	f1c1 0202 	rsble	r2, r1, #2
 80078ee:	2201      	movgt	r2, #1
 80078f0:	4413      	add	r3, r2
 80078f2:	e7e0      	b.n	80078b6 <_printf_float+0x192>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	055a      	lsls	r2, r3, #21
 80078f8:	d407      	bmi.n	800790a <_printf_float+0x1e6>
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	4642      	mov	r2, r8
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	d12b      	bne.n	8007960 <_printf_float+0x23c>
 8007908:	e767      	b.n	80077da <_printf_float+0xb6>
 800790a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800790e:	f240 80dd 	bls.w	8007acc <_printf_float+0x3a8>
 8007912:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007916:	2200      	movs	r2, #0
 8007918:	2300      	movs	r3, #0
 800791a:	f7f9 f8fd 	bl	8000b18 <__aeabi_dcmpeq>
 800791e:	2800      	cmp	r0, #0
 8007920:	d033      	beq.n	800798a <_printf_float+0x266>
 8007922:	4a37      	ldr	r2, [pc, #220]	@ (8007a00 <_printf_float+0x2dc>)
 8007924:	2301      	movs	r3, #1
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	47b8      	blx	r7
 800792c:	3001      	adds	r0, #1
 800792e:	f43f af54 	beq.w	80077da <_printf_float+0xb6>
 8007932:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007936:	4543      	cmp	r3, r8
 8007938:	db02      	blt.n	8007940 <_printf_float+0x21c>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	07d8      	lsls	r0, r3, #31
 800793e:	d50f      	bpl.n	8007960 <_printf_float+0x23c>
 8007940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007944:	4631      	mov	r1, r6
 8007946:	4628      	mov	r0, r5
 8007948:	47b8      	blx	r7
 800794a:	3001      	adds	r0, #1
 800794c:	f43f af45 	beq.w	80077da <_printf_float+0xb6>
 8007950:	f04f 0900 	mov.w	r9, #0
 8007954:	f108 38ff 	add.w	r8, r8, #4294967295
 8007958:	f104 0a1a 	add.w	sl, r4, #26
 800795c:	45c8      	cmp	r8, r9
 800795e:	dc09      	bgt.n	8007974 <_printf_float+0x250>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	079b      	lsls	r3, r3, #30
 8007964:	f100 8103 	bmi.w	8007b6e <_printf_float+0x44a>
 8007968:	68e0      	ldr	r0, [r4, #12]
 800796a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800796c:	4298      	cmp	r0, r3
 800796e:	bfb8      	it	lt
 8007970:	4618      	movlt	r0, r3
 8007972:	e734      	b.n	80077de <_printf_float+0xba>
 8007974:	2301      	movs	r3, #1
 8007976:	4652      	mov	r2, sl
 8007978:	4631      	mov	r1, r6
 800797a:	4628      	mov	r0, r5
 800797c:	47b8      	blx	r7
 800797e:	3001      	adds	r0, #1
 8007980:	f43f af2b 	beq.w	80077da <_printf_float+0xb6>
 8007984:	f109 0901 	add.w	r9, r9, #1
 8007988:	e7e8      	b.n	800795c <_printf_float+0x238>
 800798a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	dc39      	bgt.n	8007a04 <_printf_float+0x2e0>
 8007990:	4a1b      	ldr	r2, [pc, #108]	@ (8007a00 <_printf_float+0x2dc>)
 8007992:	2301      	movs	r3, #1
 8007994:	4631      	mov	r1, r6
 8007996:	4628      	mov	r0, r5
 8007998:	47b8      	blx	r7
 800799a:	3001      	adds	r0, #1
 800799c:	f43f af1d 	beq.w	80077da <_printf_float+0xb6>
 80079a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80079a4:	ea59 0303 	orrs.w	r3, r9, r3
 80079a8:	d102      	bne.n	80079b0 <_printf_float+0x28c>
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	07d9      	lsls	r1, r3, #31
 80079ae:	d5d7      	bpl.n	8007960 <_printf_float+0x23c>
 80079b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079b4:	4631      	mov	r1, r6
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	f43f af0d 	beq.w	80077da <_printf_float+0xb6>
 80079c0:	f04f 0a00 	mov.w	sl, #0
 80079c4:	f104 0b1a 	add.w	fp, r4, #26
 80079c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ca:	425b      	negs	r3, r3
 80079cc:	4553      	cmp	r3, sl
 80079ce:	dc01      	bgt.n	80079d4 <_printf_float+0x2b0>
 80079d0:	464b      	mov	r3, r9
 80079d2:	e793      	b.n	80078fc <_printf_float+0x1d8>
 80079d4:	2301      	movs	r3, #1
 80079d6:	465a      	mov	r2, fp
 80079d8:	4631      	mov	r1, r6
 80079da:	4628      	mov	r0, r5
 80079dc:	47b8      	blx	r7
 80079de:	3001      	adds	r0, #1
 80079e0:	f43f aefb 	beq.w	80077da <_printf_float+0xb6>
 80079e4:	f10a 0a01 	add.w	sl, sl, #1
 80079e8:	e7ee      	b.n	80079c8 <_printf_float+0x2a4>
 80079ea:	bf00      	nop
 80079ec:	7fefffff 	.word	0x7fefffff
 80079f0:	0800a05c 	.word	0x0800a05c
 80079f4:	0800a060 	.word	0x0800a060
 80079f8:	0800a064 	.word	0x0800a064
 80079fc:	0800a068 	.word	0x0800a068
 8007a00:	0800a06c 	.word	0x0800a06c
 8007a04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a0a:	4553      	cmp	r3, sl
 8007a0c:	bfa8      	it	ge
 8007a0e:	4653      	movge	r3, sl
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	4699      	mov	r9, r3
 8007a14:	dc36      	bgt.n	8007a84 <_printf_float+0x360>
 8007a16:	f04f 0b00 	mov.w	fp, #0
 8007a1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a1e:	f104 021a 	add.w	r2, r4, #26
 8007a22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a24:	9306      	str	r3, [sp, #24]
 8007a26:	eba3 0309 	sub.w	r3, r3, r9
 8007a2a:	455b      	cmp	r3, fp
 8007a2c:	dc31      	bgt.n	8007a92 <_printf_float+0x36e>
 8007a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a30:	459a      	cmp	sl, r3
 8007a32:	dc3a      	bgt.n	8007aaa <_printf_float+0x386>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	07da      	lsls	r2, r3, #31
 8007a38:	d437      	bmi.n	8007aaa <_printf_float+0x386>
 8007a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3c:	ebaa 0903 	sub.w	r9, sl, r3
 8007a40:	9b06      	ldr	r3, [sp, #24]
 8007a42:	ebaa 0303 	sub.w	r3, sl, r3
 8007a46:	4599      	cmp	r9, r3
 8007a48:	bfa8      	it	ge
 8007a4a:	4699      	movge	r9, r3
 8007a4c:	f1b9 0f00 	cmp.w	r9, #0
 8007a50:	dc33      	bgt.n	8007aba <_printf_float+0x396>
 8007a52:	f04f 0800 	mov.w	r8, #0
 8007a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a5a:	f104 0b1a 	add.w	fp, r4, #26
 8007a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a60:	ebaa 0303 	sub.w	r3, sl, r3
 8007a64:	eba3 0309 	sub.w	r3, r3, r9
 8007a68:	4543      	cmp	r3, r8
 8007a6a:	f77f af79 	ble.w	8007960 <_printf_float+0x23c>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	465a      	mov	r2, fp
 8007a72:	4631      	mov	r1, r6
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f43f aeae 	beq.w	80077da <_printf_float+0xb6>
 8007a7e:	f108 0801 	add.w	r8, r8, #1
 8007a82:	e7ec      	b.n	8007a5e <_printf_float+0x33a>
 8007a84:	4642      	mov	r2, r8
 8007a86:	4631      	mov	r1, r6
 8007a88:	4628      	mov	r0, r5
 8007a8a:	47b8      	blx	r7
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d1c2      	bne.n	8007a16 <_printf_float+0x2f2>
 8007a90:	e6a3      	b.n	80077da <_printf_float+0xb6>
 8007a92:	2301      	movs	r3, #1
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	9206      	str	r2, [sp, #24]
 8007a9a:	47b8      	blx	r7
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	f43f ae9c 	beq.w	80077da <_printf_float+0xb6>
 8007aa2:	9a06      	ldr	r2, [sp, #24]
 8007aa4:	f10b 0b01 	add.w	fp, fp, #1
 8007aa8:	e7bb      	b.n	8007a22 <_printf_float+0x2fe>
 8007aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aae:	4631      	mov	r1, r6
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b8      	blx	r7
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d1c0      	bne.n	8007a3a <_printf_float+0x316>
 8007ab8:	e68f      	b.n	80077da <_printf_float+0xb6>
 8007aba:	9a06      	ldr	r2, [sp, #24]
 8007abc:	464b      	mov	r3, r9
 8007abe:	4442      	add	r2, r8
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	47b8      	blx	r7
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d1c3      	bne.n	8007a52 <_printf_float+0x32e>
 8007aca:	e686      	b.n	80077da <_printf_float+0xb6>
 8007acc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ad0:	f1ba 0f01 	cmp.w	sl, #1
 8007ad4:	dc01      	bgt.n	8007ada <_printf_float+0x3b6>
 8007ad6:	07db      	lsls	r3, r3, #31
 8007ad8:	d536      	bpl.n	8007b48 <_printf_float+0x424>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4642      	mov	r2, r8
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b8      	blx	r7
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	f43f ae78 	beq.w	80077da <_printf_float+0xb6>
 8007aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aee:	4631      	mov	r1, r6
 8007af0:	4628      	mov	r0, r5
 8007af2:	47b8      	blx	r7
 8007af4:	3001      	adds	r0, #1
 8007af6:	f43f ae70 	beq.w	80077da <_printf_float+0xb6>
 8007afa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007afe:	2200      	movs	r2, #0
 8007b00:	2300      	movs	r3, #0
 8007b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b06:	f7f9 f807 	bl	8000b18 <__aeabi_dcmpeq>
 8007b0a:	b9c0      	cbnz	r0, 8007b3e <_printf_float+0x41a>
 8007b0c:	4653      	mov	r3, sl
 8007b0e:	f108 0201 	add.w	r2, r8, #1
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d10c      	bne.n	8007b36 <_printf_float+0x412>
 8007b1c:	e65d      	b.n	80077da <_printf_float+0xb6>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	465a      	mov	r2, fp
 8007b22:	4631      	mov	r1, r6
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b8      	blx	r7
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f43f ae56 	beq.w	80077da <_printf_float+0xb6>
 8007b2e:	f108 0801 	add.w	r8, r8, #1
 8007b32:	45d0      	cmp	r8, sl
 8007b34:	dbf3      	blt.n	8007b1e <_printf_float+0x3fa>
 8007b36:	464b      	mov	r3, r9
 8007b38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b3c:	e6df      	b.n	80078fe <_printf_float+0x1da>
 8007b3e:	f04f 0800 	mov.w	r8, #0
 8007b42:	f104 0b1a 	add.w	fp, r4, #26
 8007b46:	e7f4      	b.n	8007b32 <_printf_float+0x40e>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4642      	mov	r2, r8
 8007b4c:	e7e1      	b.n	8007b12 <_printf_float+0x3ee>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	464a      	mov	r2, r9
 8007b52:	4631      	mov	r1, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	f43f ae3e 	beq.w	80077da <_printf_float+0xb6>
 8007b5e:	f108 0801 	add.w	r8, r8, #1
 8007b62:	68e3      	ldr	r3, [r4, #12]
 8007b64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b66:	1a5b      	subs	r3, r3, r1
 8007b68:	4543      	cmp	r3, r8
 8007b6a:	dcf0      	bgt.n	8007b4e <_printf_float+0x42a>
 8007b6c:	e6fc      	b.n	8007968 <_printf_float+0x244>
 8007b6e:	f04f 0800 	mov.w	r8, #0
 8007b72:	f104 0919 	add.w	r9, r4, #25
 8007b76:	e7f4      	b.n	8007b62 <_printf_float+0x43e>

08007b78 <_printf_common>:
 8007b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b7c:	4616      	mov	r6, r2
 8007b7e:	4698      	mov	r8, r3
 8007b80:	688a      	ldr	r2, [r1, #8]
 8007b82:	690b      	ldr	r3, [r1, #16]
 8007b84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	bfb8      	it	lt
 8007b8c:	4613      	movlt	r3, r2
 8007b8e:	6033      	str	r3, [r6, #0]
 8007b90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b94:	4607      	mov	r7, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	b10a      	cbz	r2, 8007b9e <_printf_common+0x26>
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	6033      	str	r3, [r6, #0]
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	0699      	lsls	r1, r3, #26
 8007ba2:	bf42      	ittt	mi
 8007ba4:	6833      	ldrmi	r3, [r6, #0]
 8007ba6:	3302      	addmi	r3, #2
 8007ba8:	6033      	strmi	r3, [r6, #0]
 8007baa:	6825      	ldr	r5, [r4, #0]
 8007bac:	f015 0506 	ands.w	r5, r5, #6
 8007bb0:	d106      	bne.n	8007bc0 <_printf_common+0x48>
 8007bb2:	f104 0a19 	add.w	sl, r4, #25
 8007bb6:	68e3      	ldr	r3, [r4, #12]
 8007bb8:	6832      	ldr	r2, [r6, #0]
 8007bba:	1a9b      	subs	r3, r3, r2
 8007bbc:	42ab      	cmp	r3, r5
 8007bbe:	dc26      	bgt.n	8007c0e <_printf_common+0x96>
 8007bc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007bc4:	6822      	ldr	r2, [r4, #0]
 8007bc6:	3b00      	subs	r3, #0
 8007bc8:	bf18      	it	ne
 8007bca:	2301      	movne	r3, #1
 8007bcc:	0692      	lsls	r2, r2, #26
 8007bce:	d42b      	bmi.n	8007c28 <_printf_common+0xb0>
 8007bd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bd4:	4641      	mov	r1, r8
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	47c8      	blx	r9
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d01e      	beq.n	8007c1c <_printf_common+0xa4>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	6922      	ldr	r2, [r4, #16]
 8007be2:	f003 0306 	and.w	r3, r3, #6
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	bf02      	ittt	eq
 8007bea:	68e5      	ldreq	r5, [r4, #12]
 8007bec:	6833      	ldreq	r3, [r6, #0]
 8007bee:	1aed      	subeq	r5, r5, r3
 8007bf0:	68a3      	ldr	r3, [r4, #8]
 8007bf2:	bf0c      	ite	eq
 8007bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bf8:	2500      	movne	r5, #0
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	bfc4      	itt	gt
 8007bfe:	1a9b      	subgt	r3, r3, r2
 8007c00:	18ed      	addgt	r5, r5, r3
 8007c02:	2600      	movs	r6, #0
 8007c04:	341a      	adds	r4, #26
 8007c06:	42b5      	cmp	r5, r6
 8007c08:	d11a      	bne.n	8007c40 <_printf_common+0xc8>
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	e008      	b.n	8007c20 <_printf_common+0xa8>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	4652      	mov	r2, sl
 8007c12:	4641      	mov	r1, r8
 8007c14:	4638      	mov	r0, r7
 8007c16:	47c8      	blx	r9
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d103      	bne.n	8007c24 <_printf_common+0xac>
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c24:	3501      	adds	r5, #1
 8007c26:	e7c6      	b.n	8007bb6 <_printf_common+0x3e>
 8007c28:	18e1      	adds	r1, r4, r3
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	2030      	movs	r0, #48	@ 0x30
 8007c2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c32:	4422      	add	r2, r4
 8007c34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c3c:	3302      	adds	r3, #2
 8007c3e:	e7c7      	b.n	8007bd0 <_printf_common+0x58>
 8007c40:	2301      	movs	r3, #1
 8007c42:	4622      	mov	r2, r4
 8007c44:	4641      	mov	r1, r8
 8007c46:	4638      	mov	r0, r7
 8007c48:	47c8      	blx	r9
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d0e6      	beq.n	8007c1c <_printf_common+0xa4>
 8007c4e:	3601      	adds	r6, #1
 8007c50:	e7d9      	b.n	8007c06 <_printf_common+0x8e>
	...

08007c54 <_printf_i>:
 8007c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	7e0f      	ldrb	r7, [r1, #24]
 8007c5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c5c:	2f78      	cmp	r7, #120	@ 0x78
 8007c5e:	4691      	mov	r9, r2
 8007c60:	4680      	mov	r8, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	469a      	mov	sl, r3
 8007c66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c6a:	d807      	bhi.n	8007c7c <_printf_i+0x28>
 8007c6c:	2f62      	cmp	r7, #98	@ 0x62
 8007c6e:	d80a      	bhi.n	8007c86 <_printf_i+0x32>
 8007c70:	2f00      	cmp	r7, #0
 8007c72:	f000 80d2 	beq.w	8007e1a <_printf_i+0x1c6>
 8007c76:	2f58      	cmp	r7, #88	@ 0x58
 8007c78:	f000 80b9 	beq.w	8007dee <_printf_i+0x19a>
 8007c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c84:	e03a      	b.n	8007cfc <_printf_i+0xa8>
 8007c86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c8a:	2b15      	cmp	r3, #21
 8007c8c:	d8f6      	bhi.n	8007c7c <_printf_i+0x28>
 8007c8e:	a101      	add	r1, pc, #4	@ (adr r1, 8007c94 <_printf_i+0x40>)
 8007c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c94:	08007ced 	.word	0x08007ced
 8007c98:	08007d01 	.word	0x08007d01
 8007c9c:	08007c7d 	.word	0x08007c7d
 8007ca0:	08007c7d 	.word	0x08007c7d
 8007ca4:	08007c7d 	.word	0x08007c7d
 8007ca8:	08007c7d 	.word	0x08007c7d
 8007cac:	08007d01 	.word	0x08007d01
 8007cb0:	08007c7d 	.word	0x08007c7d
 8007cb4:	08007c7d 	.word	0x08007c7d
 8007cb8:	08007c7d 	.word	0x08007c7d
 8007cbc:	08007c7d 	.word	0x08007c7d
 8007cc0:	08007e01 	.word	0x08007e01
 8007cc4:	08007d2b 	.word	0x08007d2b
 8007cc8:	08007dbb 	.word	0x08007dbb
 8007ccc:	08007c7d 	.word	0x08007c7d
 8007cd0:	08007c7d 	.word	0x08007c7d
 8007cd4:	08007e23 	.word	0x08007e23
 8007cd8:	08007c7d 	.word	0x08007c7d
 8007cdc:	08007d2b 	.word	0x08007d2b
 8007ce0:	08007c7d 	.word	0x08007c7d
 8007ce4:	08007c7d 	.word	0x08007c7d
 8007ce8:	08007dc3 	.word	0x08007dc3
 8007cec:	6833      	ldr	r3, [r6, #0]
 8007cee:	1d1a      	adds	r2, r3, #4
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6032      	str	r2, [r6, #0]
 8007cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e09d      	b.n	8007e3c <_printf_i+0x1e8>
 8007d00:	6833      	ldr	r3, [r6, #0]
 8007d02:	6820      	ldr	r0, [r4, #0]
 8007d04:	1d19      	adds	r1, r3, #4
 8007d06:	6031      	str	r1, [r6, #0]
 8007d08:	0606      	lsls	r6, r0, #24
 8007d0a:	d501      	bpl.n	8007d10 <_printf_i+0xbc>
 8007d0c:	681d      	ldr	r5, [r3, #0]
 8007d0e:	e003      	b.n	8007d18 <_printf_i+0xc4>
 8007d10:	0645      	lsls	r5, r0, #25
 8007d12:	d5fb      	bpl.n	8007d0c <_printf_i+0xb8>
 8007d14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	da03      	bge.n	8007d24 <_printf_i+0xd0>
 8007d1c:	232d      	movs	r3, #45	@ 0x2d
 8007d1e:	426d      	negs	r5, r5
 8007d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d24:	4859      	ldr	r0, [pc, #356]	@ (8007e8c <_printf_i+0x238>)
 8007d26:	230a      	movs	r3, #10
 8007d28:	e011      	b.n	8007d4e <_printf_i+0xfa>
 8007d2a:	6821      	ldr	r1, [r4, #0]
 8007d2c:	6833      	ldr	r3, [r6, #0]
 8007d2e:	0608      	lsls	r0, r1, #24
 8007d30:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d34:	d402      	bmi.n	8007d3c <_printf_i+0xe8>
 8007d36:	0649      	lsls	r1, r1, #25
 8007d38:	bf48      	it	mi
 8007d3a:	b2ad      	uxthmi	r5, r5
 8007d3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d3e:	4853      	ldr	r0, [pc, #332]	@ (8007e8c <_printf_i+0x238>)
 8007d40:	6033      	str	r3, [r6, #0]
 8007d42:	bf14      	ite	ne
 8007d44:	230a      	movne	r3, #10
 8007d46:	2308      	moveq	r3, #8
 8007d48:	2100      	movs	r1, #0
 8007d4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d4e:	6866      	ldr	r6, [r4, #4]
 8007d50:	60a6      	str	r6, [r4, #8]
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	bfa2      	ittt	ge
 8007d56:	6821      	ldrge	r1, [r4, #0]
 8007d58:	f021 0104 	bicge.w	r1, r1, #4
 8007d5c:	6021      	strge	r1, [r4, #0]
 8007d5e:	b90d      	cbnz	r5, 8007d64 <_printf_i+0x110>
 8007d60:	2e00      	cmp	r6, #0
 8007d62:	d04b      	beq.n	8007dfc <_printf_i+0x1a8>
 8007d64:	4616      	mov	r6, r2
 8007d66:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d6a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d6e:	5dc7      	ldrb	r7, [r0, r7]
 8007d70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d74:	462f      	mov	r7, r5
 8007d76:	42bb      	cmp	r3, r7
 8007d78:	460d      	mov	r5, r1
 8007d7a:	d9f4      	bls.n	8007d66 <_printf_i+0x112>
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d10b      	bne.n	8007d98 <_printf_i+0x144>
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	07df      	lsls	r7, r3, #31
 8007d84:	d508      	bpl.n	8007d98 <_printf_i+0x144>
 8007d86:	6923      	ldr	r3, [r4, #16]
 8007d88:	6861      	ldr	r1, [r4, #4]
 8007d8a:	4299      	cmp	r1, r3
 8007d8c:	bfde      	ittt	le
 8007d8e:	2330      	movle	r3, #48	@ 0x30
 8007d90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d98:	1b92      	subs	r2, r2, r6
 8007d9a:	6122      	str	r2, [r4, #16]
 8007d9c:	f8cd a000 	str.w	sl, [sp]
 8007da0:	464b      	mov	r3, r9
 8007da2:	aa03      	add	r2, sp, #12
 8007da4:	4621      	mov	r1, r4
 8007da6:	4640      	mov	r0, r8
 8007da8:	f7ff fee6 	bl	8007b78 <_printf_common>
 8007dac:	3001      	adds	r0, #1
 8007dae:	d14a      	bne.n	8007e46 <_printf_i+0x1f2>
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295
 8007db4:	b004      	add	sp, #16
 8007db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	f043 0320 	orr.w	r3, r3, #32
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	4833      	ldr	r0, [pc, #204]	@ (8007e90 <_printf_i+0x23c>)
 8007dc4:	2778      	movs	r7, #120	@ 0x78
 8007dc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	6831      	ldr	r1, [r6, #0]
 8007dce:	061f      	lsls	r7, r3, #24
 8007dd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007dd4:	d402      	bmi.n	8007ddc <_printf_i+0x188>
 8007dd6:	065f      	lsls	r7, r3, #25
 8007dd8:	bf48      	it	mi
 8007dda:	b2ad      	uxthmi	r5, r5
 8007ddc:	6031      	str	r1, [r6, #0]
 8007dde:	07d9      	lsls	r1, r3, #31
 8007de0:	bf44      	itt	mi
 8007de2:	f043 0320 	orrmi.w	r3, r3, #32
 8007de6:	6023      	strmi	r3, [r4, #0]
 8007de8:	b11d      	cbz	r5, 8007df2 <_printf_i+0x19e>
 8007dea:	2310      	movs	r3, #16
 8007dec:	e7ac      	b.n	8007d48 <_printf_i+0xf4>
 8007dee:	4827      	ldr	r0, [pc, #156]	@ (8007e8c <_printf_i+0x238>)
 8007df0:	e7e9      	b.n	8007dc6 <_printf_i+0x172>
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	f023 0320 	bic.w	r3, r3, #32
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	e7f6      	b.n	8007dea <_printf_i+0x196>
 8007dfc:	4616      	mov	r6, r2
 8007dfe:	e7bd      	b.n	8007d7c <_printf_i+0x128>
 8007e00:	6833      	ldr	r3, [r6, #0]
 8007e02:	6825      	ldr	r5, [r4, #0]
 8007e04:	6961      	ldr	r1, [r4, #20]
 8007e06:	1d18      	adds	r0, r3, #4
 8007e08:	6030      	str	r0, [r6, #0]
 8007e0a:	062e      	lsls	r6, r5, #24
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	d501      	bpl.n	8007e14 <_printf_i+0x1c0>
 8007e10:	6019      	str	r1, [r3, #0]
 8007e12:	e002      	b.n	8007e1a <_printf_i+0x1c6>
 8007e14:	0668      	lsls	r0, r5, #25
 8007e16:	d5fb      	bpl.n	8007e10 <_printf_i+0x1bc>
 8007e18:	8019      	strh	r1, [r3, #0]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	6123      	str	r3, [r4, #16]
 8007e1e:	4616      	mov	r6, r2
 8007e20:	e7bc      	b.n	8007d9c <_printf_i+0x148>
 8007e22:	6833      	ldr	r3, [r6, #0]
 8007e24:	1d1a      	adds	r2, r3, #4
 8007e26:	6032      	str	r2, [r6, #0]
 8007e28:	681e      	ldr	r6, [r3, #0]
 8007e2a:	6862      	ldr	r2, [r4, #4]
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f7f8 f9f6 	bl	8000220 <memchr>
 8007e34:	b108      	cbz	r0, 8007e3a <_printf_i+0x1e6>
 8007e36:	1b80      	subs	r0, r0, r6
 8007e38:	6060      	str	r0, [r4, #4]
 8007e3a:	6863      	ldr	r3, [r4, #4]
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e44:	e7aa      	b.n	8007d9c <_printf_i+0x148>
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	4632      	mov	r2, r6
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	47d0      	blx	sl
 8007e50:	3001      	adds	r0, #1
 8007e52:	d0ad      	beq.n	8007db0 <_printf_i+0x15c>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	079b      	lsls	r3, r3, #30
 8007e58:	d413      	bmi.n	8007e82 <_printf_i+0x22e>
 8007e5a:	68e0      	ldr	r0, [r4, #12]
 8007e5c:	9b03      	ldr	r3, [sp, #12]
 8007e5e:	4298      	cmp	r0, r3
 8007e60:	bfb8      	it	lt
 8007e62:	4618      	movlt	r0, r3
 8007e64:	e7a6      	b.n	8007db4 <_printf_i+0x160>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4632      	mov	r2, r6
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	47d0      	blx	sl
 8007e70:	3001      	adds	r0, #1
 8007e72:	d09d      	beq.n	8007db0 <_printf_i+0x15c>
 8007e74:	3501      	adds	r5, #1
 8007e76:	68e3      	ldr	r3, [r4, #12]
 8007e78:	9903      	ldr	r1, [sp, #12]
 8007e7a:	1a5b      	subs	r3, r3, r1
 8007e7c:	42ab      	cmp	r3, r5
 8007e7e:	dcf2      	bgt.n	8007e66 <_printf_i+0x212>
 8007e80:	e7eb      	b.n	8007e5a <_printf_i+0x206>
 8007e82:	2500      	movs	r5, #0
 8007e84:	f104 0619 	add.w	r6, r4, #25
 8007e88:	e7f5      	b.n	8007e76 <_printf_i+0x222>
 8007e8a:	bf00      	nop
 8007e8c:	0800a06e 	.word	0x0800a06e
 8007e90:	0800a07f 	.word	0x0800a07f

08007e94 <std>:
 8007e94:	2300      	movs	r3, #0
 8007e96:	b510      	push	{r4, lr}
 8007e98:	4604      	mov	r4, r0
 8007e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ea2:	6083      	str	r3, [r0, #8]
 8007ea4:	8181      	strh	r1, [r0, #12]
 8007ea6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ea8:	81c2      	strh	r2, [r0, #14]
 8007eaa:	6183      	str	r3, [r0, #24]
 8007eac:	4619      	mov	r1, r3
 8007eae:	2208      	movs	r2, #8
 8007eb0:	305c      	adds	r0, #92	@ 0x5c
 8007eb2:	f000 f9f9 	bl	80082a8 <memset>
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007eec <std+0x58>)
 8007eb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007eba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef0 <std+0x5c>)
 8007ebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef4 <std+0x60>)
 8007ec0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef8 <std+0x64>)
 8007ec4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8007efc <std+0x68>)
 8007ec8:	6224      	str	r4, [r4, #32]
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	d006      	beq.n	8007edc <std+0x48>
 8007ece:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ed2:	4294      	cmp	r4, r2
 8007ed4:	d002      	beq.n	8007edc <std+0x48>
 8007ed6:	33d0      	adds	r3, #208	@ 0xd0
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	d105      	bne.n	8007ee8 <std+0x54>
 8007edc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee4:	f000 ba5c 	b.w	80083a0 <__retarget_lock_init_recursive>
 8007ee8:	bd10      	pop	{r4, pc}
 8007eea:	bf00      	nop
 8007eec:	080080f9 	.word	0x080080f9
 8007ef0:	0800811b 	.word	0x0800811b
 8007ef4:	08008153 	.word	0x08008153
 8007ef8:	08008177 	.word	0x08008177
 8007efc:	20000498 	.word	0x20000498

08007f00 <stdio_exit_handler>:
 8007f00:	4a02      	ldr	r2, [pc, #8]	@ (8007f0c <stdio_exit_handler+0xc>)
 8007f02:	4903      	ldr	r1, [pc, #12]	@ (8007f10 <stdio_exit_handler+0x10>)
 8007f04:	4803      	ldr	r0, [pc, #12]	@ (8007f14 <stdio_exit_handler+0x14>)
 8007f06:	f000 b869 	b.w	8007fdc <_fwalk_sglue>
 8007f0a:	bf00      	nop
 8007f0c:	2000000c 	.word	0x2000000c
 8007f10:	08009cd1 	.word	0x08009cd1
 8007f14:	2000001c 	.word	0x2000001c

08007f18 <cleanup_stdio>:
 8007f18:	6841      	ldr	r1, [r0, #4]
 8007f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f4c <cleanup_stdio+0x34>)
 8007f1c:	4299      	cmp	r1, r3
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	4604      	mov	r4, r0
 8007f22:	d001      	beq.n	8007f28 <cleanup_stdio+0x10>
 8007f24:	f001 fed4 	bl	8009cd0 <_fflush_r>
 8007f28:	68a1      	ldr	r1, [r4, #8]
 8007f2a:	4b09      	ldr	r3, [pc, #36]	@ (8007f50 <cleanup_stdio+0x38>)
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	d002      	beq.n	8007f36 <cleanup_stdio+0x1e>
 8007f30:	4620      	mov	r0, r4
 8007f32:	f001 fecd 	bl	8009cd0 <_fflush_r>
 8007f36:	68e1      	ldr	r1, [r4, #12]
 8007f38:	4b06      	ldr	r3, [pc, #24]	@ (8007f54 <cleanup_stdio+0x3c>)
 8007f3a:	4299      	cmp	r1, r3
 8007f3c:	d004      	beq.n	8007f48 <cleanup_stdio+0x30>
 8007f3e:	4620      	mov	r0, r4
 8007f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f44:	f001 bec4 	b.w	8009cd0 <_fflush_r>
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000498 	.word	0x20000498
 8007f50:	20000500 	.word	0x20000500
 8007f54:	20000568 	.word	0x20000568

08007f58 <global_stdio_init.part.0>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <global_stdio_init.part.0+0x30>)
 8007f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8007f8c <global_stdio_init.part.0+0x34>)
 8007f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007f90 <global_stdio_init.part.0+0x38>)
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	4620      	mov	r0, r4
 8007f64:	2200      	movs	r2, #0
 8007f66:	2104      	movs	r1, #4
 8007f68:	f7ff ff94 	bl	8007e94 <std>
 8007f6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f70:	2201      	movs	r2, #1
 8007f72:	2109      	movs	r1, #9
 8007f74:	f7ff ff8e 	bl	8007e94 <std>
 8007f78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f82:	2112      	movs	r1, #18
 8007f84:	f7ff bf86 	b.w	8007e94 <std>
 8007f88:	200005d0 	.word	0x200005d0
 8007f8c:	20000498 	.word	0x20000498
 8007f90:	08007f01 	.word	0x08007f01

08007f94 <__sfp_lock_acquire>:
 8007f94:	4801      	ldr	r0, [pc, #4]	@ (8007f9c <__sfp_lock_acquire+0x8>)
 8007f96:	f000 ba04 	b.w	80083a2 <__retarget_lock_acquire_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	200005d9 	.word	0x200005d9

08007fa0 <__sfp_lock_release>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	@ (8007fa8 <__sfp_lock_release+0x8>)
 8007fa2:	f000 b9ff 	b.w	80083a4 <__retarget_lock_release_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	200005d9 	.word	0x200005d9

08007fac <__sinit>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4604      	mov	r4, r0
 8007fb0:	f7ff fff0 	bl	8007f94 <__sfp_lock_acquire>
 8007fb4:	6a23      	ldr	r3, [r4, #32]
 8007fb6:	b11b      	cbz	r3, 8007fc0 <__sinit+0x14>
 8007fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fbc:	f7ff bff0 	b.w	8007fa0 <__sfp_lock_release>
 8007fc0:	4b04      	ldr	r3, [pc, #16]	@ (8007fd4 <__sinit+0x28>)
 8007fc2:	6223      	str	r3, [r4, #32]
 8007fc4:	4b04      	ldr	r3, [pc, #16]	@ (8007fd8 <__sinit+0x2c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f5      	bne.n	8007fb8 <__sinit+0xc>
 8007fcc:	f7ff ffc4 	bl	8007f58 <global_stdio_init.part.0>
 8007fd0:	e7f2      	b.n	8007fb8 <__sinit+0xc>
 8007fd2:	bf00      	nop
 8007fd4:	08007f19 	.word	0x08007f19
 8007fd8:	200005d0 	.word	0x200005d0

08007fdc <_fwalk_sglue>:
 8007fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	4688      	mov	r8, r1
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	2600      	movs	r6, #0
 8007fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fec:	f1b9 0901 	subs.w	r9, r9, #1
 8007ff0:	d505      	bpl.n	8007ffe <_fwalk_sglue+0x22>
 8007ff2:	6824      	ldr	r4, [r4, #0]
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	d1f7      	bne.n	8007fe8 <_fwalk_sglue+0xc>
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d907      	bls.n	8008014 <_fwalk_sglue+0x38>
 8008004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008008:	3301      	adds	r3, #1
 800800a:	d003      	beq.n	8008014 <_fwalk_sglue+0x38>
 800800c:	4629      	mov	r1, r5
 800800e:	4638      	mov	r0, r7
 8008010:	47c0      	blx	r8
 8008012:	4306      	orrs	r6, r0
 8008014:	3568      	adds	r5, #104	@ 0x68
 8008016:	e7e9      	b.n	8007fec <_fwalk_sglue+0x10>

08008018 <iprintf>:
 8008018:	b40f      	push	{r0, r1, r2, r3}
 800801a:	b507      	push	{r0, r1, r2, lr}
 800801c:	4906      	ldr	r1, [pc, #24]	@ (8008038 <iprintf+0x20>)
 800801e:	ab04      	add	r3, sp, #16
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	f853 2b04 	ldr.w	r2, [r3], #4
 8008026:	6881      	ldr	r1, [r0, #8]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	f001 fcb5 	bl	8009998 <_vfiprintf_r>
 800802e:	b003      	add	sp, #12
 8008030:	f85d eb04 	ldr.w	lr, [sp], #4
 8008034:	b004      	add	sp, #16
 8008036:	4770      	bx	lr
 8008038:	20000018 	.word	0x20000018

0800803c <_puts_r>:
 800803c:	6a03      	ldr	r3, [r0, #32]
 800803e:	b570      	push	{r4, r5, r6, lr}
 8008040:	6884      	ldr	r4, [r0, #8]
 8008042:	4605      	mov	r5, r0
 8008044:	460e      	mov	r6, r1
 8008046:	b90b      	cbnz	r3, 800804c <_puts_r+0x10>
 8008048:	f7ff ffb0 	bl	8007fac <__sinit>
 800804c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800804e:	07db      	lsls	r3, r3, #31
 8008050:	d405      	bmi.n	800805e <_puts_r+0x22>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	0598      	lsls	r0, r3, #22
 8008056:	d402      	bmi.n	800805e <_puts_r+0x22>
 8008058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800805a:	f000 f9a2 	bl	80083a2 <__retarget_lock_acquire_recursive>
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	0719      	lsls	r1, r3, #28
 8008062:	d502      	bpl.n	800806a <_puts_r+0x2e>
 8008064:	6923      	ldr	r3, [r4, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d135      	bne.n	80080d6 <_puts_r+0x9a>
 800806a:	4621      	mov	r1, r4
 800806c:	4628      	mov	r0, r5
 800806e:	f000 f8c5 	bl	80081fc <__swsetup_r>
 8008072:	b380      	cbz	r0, 80080d6 <_puts_r+0x9a>
 8008074:	f04f 35ff 	mov.w	r5, #4294967295
 8008078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800807a:	07da      	lsls	r2, r3, #31
 800807c:	d405      	bmi.n	800808a <_puts_r+0x4e>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	059b      	lsls	r3, r3, #22
 8008082:	d402      	bmi.n	800808a <_puts_r+0x4e>
 8008084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008086:	f000 f98d 	bl	80083a4 <__retarget_lock_release_recursive>
 800808a:	4628      	mov	r0, r5
 800808c:	bd70      	pop	{r4, r5, r6, pc}
 800808e:	2b00      	cmp	r3, #0
 8008090:	da04      	bge.n	800809c <_puts_r+0x60>
 8008092:	69a2      	ldr	r2, [r4, #24]
 8008094:	429a      	cmp	r2, r3
 8008096:	dc17      	bgt.n	80080c8 <_puts_r+0x8c>
 8008098:	290a      	cmp	r1, #10
 800809a:	d015      	beq.n	80080c8 <_puts_r+0x8c>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	1c5a      	adds	r2, r3, #1
 80080a0:	6022      	str	r2, [r4, #0]
 80080a2:	7019      	strb	r1, [r3, #0]
 80080a4:	68a3      	ldr	r3, [r4, #8]
 80080a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080aa:	3b01      	subs	r3, #1
 80080ac:	60a3      	str	r3, [r4, #8]
 80080ae:	2900      	cmp	r1, #0
 80080b0:	d1ed      	bne.n	800808e <_puts_r+0x52>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	da11      	bge.n	80080da <_puts_r+0x9e>
 80080b6:	4622      	mov	r2, r4
 80080b8:	210a      	movs	r1, #10
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 f85f 	bl	800817e <__swbuf_r>
 80080c0:	3001      	adds	r0, #1
 80080c2:	d0d7      	beq.n	8008074 <_puts_r+0x38>
 80080c4:	250a      	movs	r5, #10
 80080c6:	e7d7      	b.n	8008078 <_puts_r+0x3c>
 80080c8:	4622      	mov	r2, r4
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 f857 	bl	800817e <__swbuf_r>
 80080d0:	3001      	adds	r0, #1
 80080d2:	d1e7      	bne.n	80080a4 <_puts_r+0x68>
 80080d4:	e7ce      	b.n	8008074 <_puts_r+0x38>
 80080d6:	3e01      	subs	r6, #1
 80080d8:	e7e4      	b.n	80080a4 <_puts_r+0x68>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	6022      	str	r2, [r4, #0]
 80080e0:	220a      	movs	r2, #10
 80080e2:	701a      	strb	r2, [r3, #0]
 80080e4:	e7ee      	b.n	80080c4 <_puts_r+0x88>
	...

080080e8 <puts>:
 80080e8:	4b02      	ldr	r3, [pc, #8]	@ (80080f4 <puts+0xc>)
 80080ea:	4601      	mov	r1, r0
 80080ec:	6818      	ldr	r0, [r3, #0]
 80080ee:	f7ff bfa5 	b.w	800803c <_puts_r>
 80080f2:	bf00      	nop
 80080f4:	20000018 	.word	0x20000018

080080f8 <__sread>:
 80080f8:	b510      	push	{r4, lr}
 80080fa:	460c      	mov	r4, r1
 80080fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008100:	f000 f900 	bl	8008304 <_read_r>
 8008104:	2800      	cmp	r0, #0
 8008106:	bfab      	itete	ge
 8008108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800810a:	89a3      	ldrhlt	r3, [r4, #12]
 800810c:	181b      	addge	r3, r3, r0
 800810e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008112:	bfac      	ite	ge
 8008114:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008116:	81a3      	strhlt	r3, [r4, #12]
 8008118:	bd10      	pop	{r4, pc}

0800811a <__swrite>:
 800811a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811e:	461f      	mov	r7, r3
 8008120:	898b      	ldrh	r3, [r1, #12]
 8008122:	05db      	lsls	r3, r3, #23
 8008124:	4605      	mov	r5, r0
 8008126:	460c      	mov	r4, r1
 8008128:	4616      	mov	r6, r2
 800812a:	d505      	bpl.n	8008138 <__swrite+0x1e>
 800812c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008130:	2302      	movs	r3, #2
 8008132:	2200      	movs	r2, #0
 8008134:	f000 f8d4 	bl	80082e0 <_lseek_r>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800813e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	4632      	mov	r2, r6
 8008146:	463b      	mov	r3, r7
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800814e:	f000 b8eb 	b.w	8008328 <_write_r>

08008152 <__sseek>:
 8008152:	b510      	push	{r4, lr}
 8008154:	460c      	mov	r4, r1
 8008156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815a:	f000 f8c1 	bl	80082e0 <_lseek_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	bf15      	itete	ne
 8008164:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008166:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800816a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800816e:	81a3      	strheq	r3, [r4, #12]
 8008170:	bf18      	it	ne
 8008172:	81a3      	strhne	r3, [r4, #12]
 8008174:	bd10      	pop	{r4, pc}

08008176 <__sclose>:
 8008176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800817a:	f000 b8a1 	b.w	80082c0 <_close_r>

0800817e <__swbuf_r>:
 800817e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008180:	460e      	mov	r6, r1
 8008182:	4614      	mov	r4, r2
 8008184:	4605      	mov	r5, r0
 8008186:	b118      	cbz	r0, 8008190 <__swbuf_r+0x12>
 8008188:	6a03      	ldr	r3, [r0, #32]
 800818a:	b90b      	cbnz	r3, 8008190 <__swbuf_r+0x12>
 800818c:	f7ff ff0e 	bl	8007fac <__sinit>
 8008190:	69a3      	ldr	r3, [r4, #24]
 8008192:	60a3      	str	r3, [r4, #8]
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	071a      	lsls	r2, r3, #28
 8008198:	d501      	bpl.n	800819e <__swbuf_r+0x20>
 800819a:	6923      	ldr	r3, [r4, #16]
 800819c:	b943      	cbnz	r3, 80081b0 <__swbuf_r+0x32>
 800819e:	4621      	mov	r1, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 f82b 	bl	80081fc <__swsetup_r>
 80081a6:	b118      	cbz	r0, 80081b0 <__swbuf_r+0x32>
 80081a8:	f04f 37ff 	mov.w	r7, #4294967295
 80081ac:	4638      	mov	r0, r7
 80081ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	6922      	ldr	r2, [r4, #16]
 80081b4:	1a98      	subs	r0, r3, r2
 80081b6:	6963      	ldr	r3, [r4, #20]
 80081b8:	b2f6      	uxtb	r6, r6
 80081ba:	4283      	cmp	r3, r0
 80081bc:	4637      	mov	r7, r6
 80081be:	dc05      	bgt.n	80081cc <__swbuf_r+0x4e>
 80081c0:	4621      	mov	r1, r4
 80081c2:	4628      	mov	r0, r5
 80081c4:	f001 fd84 	bl	8009cd0 <_fflush_r>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d1ed      	bne.n	80081a8 <__swbuf_r+0x2a>
 80081cc:	68a3      	ldr	r3, [r4, #8]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	60a3      	str	r3, [r4, #8]
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	6022      	str	r2, [r4, #0]
 80081d8:	701e      	strb	r6, [r3, #0]
 80081da:	6962      	ldr	r2, [r4, #20]
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	429a      	cmp	r2, r3
 80081e0:	d004      	beq.n	80081ec <__swbuf_r+0x6e>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	07db      	lsls	r3, r3, #31
 80081e6:	d5e1      	bpl.n	80081ac <__swbuf_r+0x2e>
 80081e8:	2e0a      	cmp	r6, #10
 80081ea:	d1df      	bne.n	80081ac <__swbuf_r+0x2e>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4628      	mov	r0, r5
 80081f0:	f001 fd6e 	bl	8009cd0 <_fflush_r>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d0d9      	beq.n	80081ac <__swbuf_r+0x2e>
 80081f8:	e7d6      	b.n	80081a8 <__swbuf_r+0x2a>
	...

080081fc <__swsetup_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4b29      	ldr	r3, [pc, #164]	@ (80082a4 <__swsetup_r+0xa8>)
 8008200:	4605      	mov	r5, r0
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	460c      	mov	r4, r1
 8008206:	b118      	cbz	r0, 8008210 <__swsetup_r+0x14>
 8008208:	6a03      	ldr	r3, [r0, #32]
 800820a:	b90b      	cbnz	r3, 8008210 <__swsetup_r+0x14>
 800820c:	f7ff fece 	bl	8007fac <__sinit>
 8008210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008214:	0719      	lsls	r1, r3, #28
 8008216:	d422      	bmi.n	800825e <__swsetup_r+0x62>
 8008218:	06da      	lsls	r2, r3, #27
 800821a:	d407      	bmi.n	800822c <__swsetup_r+0x30>
 800821c:	2209      	movs	r2, #9
 800821e:	602a      	str	r2, [r5, #0]
 8008220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008224:	81a3      	strh	r3, [r4, #12]
 8008226:	f04f 30ff 	mov.w	r0, #4294967295
 800822a:	e033      	b.n	8008294 <__swsetup_r+0x98>
 800822c:	0758      	lsls	r0, r3, #29
 800822e:	d512      	bpl.n	8008256 <__swsetup_r+0x5a>
 8008230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008232:	b141      	cbz	r1, 8008246 <__swsetup_r+0x4a>
 8008234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008238:	4299      	cmp	r1, r3
 800823a:	d002      	beq.n	8008242 <__swsetup_r+0x46>
 800823c:	4628      	mov	r0, r5
 800823e:	f000 feff 	bl	8009040 <_free_r>
 8008242:	2300      	movs	r3, #0
 8008244:	6363      	str	r3, [r4, #52]	@ 0x34
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	2300      	movs	r3, #0
 8008250:	6063      	str	r3, [r4, #4]
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	f043 0308 	orr.w	r3, r3, #8
 800825c:	81a3      	strh	r3, [r4, #12]
 800825e:	6923      	ldr	r3, [r4, #16]
 8008260:	b94b      	cbnz	r3, 8008276 <__swsetup_r+0x7a>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800826c:	d003      	beq.n	8008276 <__swsetup_r+0x7a>
 800826e:	4621      	mov	r1, r4
 8008270:	4628      	mov	r0, r5
 8008272:	f001 fd7b 	bl	8009d6c <__smakebuf_r>
 8008276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800827a:	f013 0201 	ands.w	r2, r3, #1
 800827e:	d00a      	beq.n	8008296 <__swsetup_r+0x9a>
 8008280:	2200      	movs	r2, #0
 8008282:	60a2      	str	r2, [r4, #8]
 8008284:	6962      	ldr	r2, [r4, #20]
 8008286:	4252      	negs	r2, r2
 8008288:	61a2      	str	r2, [r4, #24]
 800828a:	6922      	ldr	r2, [r4, #16]
 800828c:	b942      	cbnz	r2, 80082a0 <__swsetup_r+0xa4>
 800828e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008292:	d1c5      	bne.n	8008220 <__swsetup_r+0x24>
 8008294:	bd38      	pop	{r3, r4, r5, pc}
 8008296:	0799      	lsls	r1, r3, #30
 8008298:	bf58      	it	pl
 800829a:	6962      	ldrpl	r2, [r4, #20]
 800829c:	60a2      	str	r2, [r4, #8]
 800829e:	e7f4      	b.n	800828a <__swsetup_r+0x8e>
 80082a0:	2000      	movs	r0, #0
 80082a2:	e7f7      	b.n	8008294 <__swsetup_r+0x98>
 80082a4:	20000018 	.word	0x20000018

080082a8 <memset>:
 80082a8:	4402      	add	r2, r0
 80082aa:	4603      	mov	r3, r0
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d100      	bne.n	80082b2 <memset+0xa>
 80082b0:	4770      	bx	lr
 80082b2:	f803 1b01 	strb.w	r1, [r3], #1
 80082b6:	e7f9      	b.n	80082ac <memset+0x4>

080082b8 <_localeconv_r>:
 80082b8:	4800      	ldr	r0, [pc, #0]	@ (80082bc <_localeconv_r+0x4>)
 80082ba:	4770      	bx	lr
 80082bc:	20000158 	.word	0x20000158

080082c0 <_close_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d06      	ldr	r5, [pc, #24]	@ (80082dc <_close_r+0x1c>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	f7f9 fe55 	bl	8001f7a <_close>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_close_r+0x1a>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_close_r+0x1a>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	200005d4 	.word	0x200005d4

080082e0 <_lseek_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	@ (8008300 <_lseek_r+0x20>)
 80082e4:	4604      	mov	r4, r0
 80082e6:	4608      	mov	r0, r1
 80082e8:	4611      	mov	r1, r2
 80082ea:	2200      	movs	r2, #0
 80082ec:	602a      	str	r2, [r5, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f7f9 fe6a 	bl	8001fc8 <_lseek>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_lseek_r+0x1e>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_lseek_r+0x1e>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	200005d4 	.word	0x200005d4

08008304 <_read_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4d07      	ldr	r5, [pc, #28]	@ (8008324 <_read_r+0x20>)
 8008308:	4604      	mov	r4, r0
 800830a:	4608      	mov	r0, r1
 800830c:	4611      	mov	r1, r2
 800830e:	2200      	movs	r2, #0
 8008310:	602a      	str	r2, [r5, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	f7f9 fdf8 	bl	8001f08 <_read>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_read_r+0x1e>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_read_r+0x1e>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	200005d4 	.word	0x200005d4

08008328 <_write_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4d07      	ldr	r5, [pc, #28]	@ (8008348 <_write_r+0x20>)
 800832c:	4604      	mov	r4, r0
 800832e:	4608      	mov	r0, r1
 8008330:	4611      	mov	r1, r2
 8008332:	2200      	movs	r2, #0
 8008334:	602a      	str	r2, [r5, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	f7f9 fe03 	bl	8001f42 <_write>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_write_r+0x1e>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_write_r+0x1e>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	200005d4 	.word	0x200005d4

0800834c <__errno>:
 800834c:	4b01      	ldr	r3, [pc, #4]	@ (8008354 <__errno+0x8>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000018 	.word	0x20000018

08008358 <__libc_init_array>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	4d0d      	ldr	r5, [pc, #52]	@ (8008390 <__libc_init_array+0x38>)
 800835c:	4c0d      	ldr	r4, [pc, #52]	@ (8008394 <__libc_init_array+0x3c>)
 800835e:	1b64      	subs	r4, r4, r5
 8008360:	10a4      	asrs	r4, r4, #2
 8008362:	2600      	movs	r6, #0
 8008364:	42a6      	cmp	r6, r4
 8008366:	d109      	bne.n	800837c <__libc_init_array+0x24>
 8008368:	4d0b      	ldr	r5, [pc, #44]	@ (8008398 <__libc_init_array+0x40>)
 800836a:	4c0c      	ldr	r4, [pc, #48]	@ (800839c <__libc_init_array+0x44>)
 800836c:	f001 fe2a 	bl	8009fc4 <_init>
 8008370:	1b64      	subs	r4, r4, r5
 8008372:	10a4      	asrs	r4, r4, #2
 8008374:	2600      	movs	r6, #0
 8008376:	42a6      	cmp	r6, r4
 8008378:	d105      	bne.n	8008386 <__libc_init_array+0x2e>
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008380:	4798      	blx	r3
 8008382:	3601      	adds	r6, #1
 8008384:	e7ee      	b.n	8008364 <__libc_init_array+0xc>
 8008386:	f855 3b04 	ldr.w	r3, [r5], #4
 800838a:	4798      	blx	r3
 800838c:	3601      	adds	r6, #1
 800838e:	e7f2      	b.n	8008376 <__libc_init_array+0x1e>
 8008390:	0800a3d8 	.word	0x0800a3d8
 8008394:	0800a3d8 	.word	0x0800a3d8
 8008398:	0800a3d8 	.word	0x0800a3d8
 800839c:	0800a3dc 	.word	0x0800a3dc

080083a0 <__retarget_lock_init_recursive>:
 80083a0:	4770      	bx	lr

080083a2 <__retarget_lock_acquire_recursive>:
 80083a2:	4770      	bx	lr

080083a4 <__retarget_lock_release_recursive>:
 80083a4:	4770      	bx	lr

080083a6 <quorem>:
 80083a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083aa:	6903      	ldr	r3, [r0, #16]
 80083ac:	690c      	ldr	r4, [r1, #16]
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	4607      	mov	r7, r0
 80083b2:	db7e      	blt.n	80084b2 <quorem+0x10c>
 80083b4:	3c01      	subs	r4, #1
 80083b6:	f101 0814 	add.w	r8, r1, #20
 80083ba:	00a3      	lsls	r3, r4, #2
 80083bc:	f100 0514 	add.w	r5, r0, #20
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083d0:	3301      	adds	r3, #1
 80083d2:	429a      	cmp	r2, r3
 80083d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80083dc:	d32e      	bcc.n	800843c <quorem+0x96>
 80083de:	f04f 0a00 	mov.w	sl, #0
 80083e2:	46c4      	mov	ip, r8
 80083e4:	46ae      	mov	lr, r5
 80083e6:	46d3      	mov	fp, sl
 80083e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083ec:	b298      	uxth	r0, r3
 80083ee:	fb06 a000 	mla	r0, r6, r0, sl
 80083f2:	0c02      	lsrs	r2, r0, #16
 80083f4:	0c1b      	lsrs	r3, r3, #16
 80083f6:	fb06 2303 	mla	r3, r6, r3, r2
 80083fa:	f8de 2000 	ldr.w	r2, [lr]
 80083fe:	b280      	uxth	r0, r0
 8008400:	b292      	uxth	r2, r2
 8008402:	1a12      	subs	r2, r2, r0
 8008404:	445a      	add	r2, fp
 8008406:	f8de 0000 	ldr.w	r0, [lr]
 800840a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800840e:	b29b      	uxth	r3, r3
 8008410:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008414:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008418:	b292      	uxth	r2, r2
 800841a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800841e:	45e1      	cmp	r9, ip
 8008420:	f84e 2b04 	str.w	r2, [lr], #4
 8008424:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008428:	d2de      	bcs.n	80083e8 <quorem+0x42>
 800842a:	9b00      	ldr	r3, [sp, #0]
 800842c:	58eb      	ldr	r3, [r5, r3]
 800842e:	b92b      	cbnz	r3, 800843c <quorem+0x96>
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	3b04      	subs	r3, #4
 8008434:	429d      	cmp	r5, r3
 8008436:	461a      	mov	r2, r3
 8008438:	d32f      	bcc.n	800849a <quorem+0xf4>
 800843a:	613c      	str	r4, [r7, #16]
 800843c:	4638      	mov	r0, r7
 800843e:	f001 f979 	bl	8009734 <__mcmp>
 8008442:	2800      	cmp	r0, #0
 8008444:	db25      	blt.n	8008492 <quorem+0xec>
 8008446:	4629      	mov	r1, r5
 8008448:	2000      	movs	r0, #0
 800844a:	f858 2b04 	ldr.w	r2, [r8], #4
 800844e:	f8d1 c000 	ldr.w	ip, [r1]
 8008452:	fa1f fe82 	uxth.w	lr, r2
 8008456:	fa1f f38c 	uxth.w	r3, ip
 800845a:	eba3 030e 	sub.w	r3, r3, lr
 800845e:	4403      	add	r3, r0
 8008460:	0c12      	lsrs	r2, r2, #16
 8008462:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008466:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800846a:	b29b      	uxth	r3, r3
 800846c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008470:	45c1      	cmp	r9, r8
 8008472:	f841 3b04 	str.w	r3, [r1], #4
 8008476:	ea4f 4022 	mov.w	r0, r2, asr #16
 800847a:	d2e6      	bcs.n	800844a <quorem+0xa4>
 800847c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008480:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008484:	b922      	cbnz	r2, 8008490 <quorem+0xea>
 8008486:	3b04      	subs	r3, #4
 8008488:	429d      	cmp	r5, r3
 800848a:	461a      	mov	r2, r3
 800848c:	d30b      	bcc.n	80084a6 <quorem+0x100>
 800848e:	613c      	str	r4, [r7, #16]
 8008490:	3601      	adds	r6, #1
 8008492:	4630      	mov	r0, r6
 8008494:	b003      	add	sp, #12
 8008496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	3b04      	subs	r3, #4
 800849e:	2a00      	cmp	r2, #0
 80084a0:	d1cb      	bne.n	800843a <quorem+0x94>
 80084a2:	3c01      	subs	r4, #1
 80084a4:	e7c6      	b.n	8008434 <quorem+0x8e>
 80084a6:	6812      	ldr	r2, [r2, #0]
 80084a8:	3b04      	subs	r3, #4
 80084aa:	2a00      	cmp	r2, #0
 80084ac:	d1ef      	bne.n	800848e <quorem+0xe8>
 80084ae:	3c01      	subs	r4, #1
 80084b0:	e7ea      	b.n	8008488 <quorem+0xe2>
 80084b2:	2000      	movs	r0, #0
 80084b4:	e7ee      	b.n	8008494 <quorem+0xee>
	...

080084b8 <_dtoa_r>:
 80084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084bc:	69c7      	ldr	r7, [r0, #28]
 80084be:	b099      	sub	sp, #100	@ 0x64
 80084c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80084c4:	ec55 4b10 	vmov	r4, r5, d0
 80084c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80084ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80084cc:	4683      	mov	fp, r0
 80084ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80084d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084d2:	b97f      	cbnz	r7, 80084f4 <_dtoa_r+0x3c>
 80084d4:	2010      	movs	r0, #16
 80084d6:	f000 fdfd 	bl	80090d4 <malloc>
 80084da:	4602      	mov	r2, r0
 80084dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80084e0:	b920      	cbnz	r0, 80084ec <_dtoa_r+0x34>
 80084e2:	4ba7      	ldr	r3, [pc, #668]	@ (8008780 <_dtoa_r+0x2c8>)
 80084e4:	21ef      	movs	r1, #239	@ 0xef
 80084e6:	48a7      	ldr	r0, [pc, #668]	@ (8008784 <_dtoa_r+0x2cc>)
 80084e8:	f001 fcbc 	bl	8009e64 <__assert_func>
 80084ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80084f0:	6007      	str	r7, [r0, #0]
 80084f2:	60c7      	str	r7, [r0, #12]
 80084f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80084f8:	6819      	ldr	r1, [r3, #0]
 80084fa:	b159      	cbz	r1, 8008514 <_dtoa_r+0x5c>
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	604a      	str	r2, [r1, #4]
 8008500:	2301      	movs	r3, #1
 8008502:	4093      	lsls	r3, r2
 8008504:	608b      	str	r3, [r1, #8]
 8008506:	4658      	mov	r0, fp
 8008508:	f000 feda 	bl	80092c0 <_Bfree>
 800850c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008510:	2200      	movs	r2, #0
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	1e2b      	subs	r3, r5, #0
 8008516:	bfb9      	ittee	lt
 8008518:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800851c:	9303      	strlt	r3, [sp, #12]
 800851e:	2300      	movge	r3, #0
 8008520:	6033      	strge	r3, [r6, #0]
 8008522:	9f03      	ldr	r7, [sp, #12]
 8008524:	4b98      	ldr	r3, [pc, #608]	@ (8008788 <_dtoa_r+0x2d0>)
 8008526:	bfbc      	itt	lt
 8008528:	2201      	movlt	r2, #1
 800852a:	6032      	strlt	r2, [r6, #0]
 800852c:	43bb      	bics	r3, r7
 800852e:	d112      	bne.n	8008556 <_dtoa_r+0x9e>
 8008530:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008532:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008536:	6013      	str	r3, [r2, #0]
 8008538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800853c:	4323      	orrs	r3, r4
 800853e:	f000 854d 	beq.w	8008fdc <_dtoa_r+0xb24>
 8008542:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008544:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800879c <_dtoa_r+0x2e4>
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 854f 	beq.w	8008fec <_dtoa_r+0xb34>
 800854e:	f10a 0303 	add.w	r3, sl, #3
 8008552:	f000 bd49 	b.w	8008fe8 <_dtoa_r+0xb30>
 8008556:	ed9d 7b02 	vldr	d7, [sp, #8]
 800855a:	2200      	movs	r2, #0
 800855c:	ec51 0b17 	vmov	r0, r1, d7
 8008560:	2300      	movs	r3, #0
 8008562:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008566:	f7f8 fad7 	bl	8000b18 <__aeabi_dcmpeq>
 800856a:	4680      	mov	r8, r0
 800856c:	b158      	cbz	r0, 8008586 <_dtoa_r+0xce>
 800856e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008570:	2301      	movs	r3, #1
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008576:	b113      	cbz	r3, 800857e <_dtoa_r+0xc6>
 8008578:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800857a:	4b84      	ldr	r3, [pc, #528]	@ (800878c <_dtoa_r+0x2d4>)
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80087a0 <_dtoa_r+0x2e8>
 8008582:	f000 bd33 	b.w	8008fec <_dtoa_r+0xb34>
 8008586:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800858a:	aa16      	add	r2, sp, #88	@ 0x58
 800858c:	a917      	add	r1, sp, #92	@ 0x5c
 800858e:	4658      	mov	r0, fp
 8008590:	f001 f980 	bl	8009894 <__d2b>
 8008594:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008598:	4681      	mov	r9, r0
 800859a:	2e00      	cmp	r6, #0
 800859c:	d077      	beq.n	800868e <_dtoa_r+0x1d6>
 800859e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80085a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80085b8:	4619      	mov	r1, r3
 80085ba:	2200      	movs	r2, #0
 80085bc:	4b74      	ldr	r3, [pc, #464]	@ (8008790 <_dtoa_r+0x2d8>)
 80085be:	f7f7 fe8b 	bl	80002d8 <__aeabi_dsub>
 80085c2:	a369      	add	r3, pc, #420	@ (adr r3, 8008768 <_dtoa_r+0x2b0>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f8 f83e 	bl	8000648 <__aeabi_dmul>
 80085cc:	a368      	add	r3, pc, #416	@ (adr r3, 8008770 <_dtoa_r+0x2b8>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f7 fe83 	bl	80002dc <__adddf3>
 80085d6:	4604      	mov	r4, r0
 80085d8:	4630      	mov	r0, r6
 80085da:	460d      	mov	r5, r1
 80085dc:	f7f7 ffca 	bl	8000574 <__aeabi_i2d>
 80085e0:	a365      	add	r3, pc, #404	@ (adr r3, 8008778 <_dtoa_r+0x2c0>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f7f8 f82f 	bl	8000648 <__aeabi_dmul>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4620      	mov	r0, r4
 80085f0:	4629      	mov	r1, r5
 80085f2:	f7f7 fe73 	bl	80002dc <__adddf3>
 80085f6:	4604      	mov	r4, r0
 80085f8:	460d      	mov	r5, r1
 80085fa:	f7f8 fad5 	bl	8000ba8 <__aeabi_d2iz>
 80085fe:	2200      	movs	r2, #0
 8008600:	4607      	mov	r7, r0
 8008602:	2300      	movs	r3, #0
 8008604:	4620      	mov	r0, r4
 8008606:	4629      	mov	r1, r5
 8008608:	f7f8 fa90 	bl	8000b2c <__aeabi_dcmplt>
 800860c:	b140      	cbz	r0, 8008620 <_dtoa_r+0x168>
 800860e:	4638      	mov	r0, r7
 8008610:	f7f7 ffb0 	bl	8000574 <__aeabi_i2d>
 8008614:	4622      	mov	r2, r4
 8008616:	462b      	mov	r3, r5
 8008618:	f7f8 fa7e 	bl	8000b18 <__aeabi_dcmpeq>
 800861c:	b900      	cbnz	r0, 8008620 <_dtoa_r+0x168>
 800861e:	3f01      	subs	r7, #1
 8008620:	2f16      	cmp	r7, #22
 8008622:	d851      	bhi.n	80086c8 <_dtoa_r+0x210>
 8008624:	4b5b      	ldr	r3, [pc, #364]	@ (8008794 <_dtoa_r+0x2dc>)
 8008626:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008632:	f7f8 fa7b 	bl	8000b2c <__aeabi_dcmplt>
 8008636:	2800      	cmp	r0, #0
 8008638:	d048      	beq.n	80086cc <_dtoa_r+0x214>
 800863a:	3f01      	subs	r7, #1
 800863c:	2300      	movs	r3, #0
 800863e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008640:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008642:	1b9b      	subs	r3, r3, r6
 8008644:	1e5a      	subs	r2, r3, #1
 8008646:	bf44      	itt	mi
 8008648:	f1c3 0801 	rsbmi	r8, r3, #1
 800864c:	2300      	movmi	r3, #0
 800864e:	9208      	str	r2, [sp, #32]
 8008650:	bf54      	ite	pl
 8008652:	f04f 0800 	movpl.w	r8, #0
 8008656:	9308      	strmi	r3, [sp, #32]
 8008658:	2f00      	cmp	r7, #0
 800865a:	db39      	blt.n	80086d0 <_dtoa_r+0x218>
 800865c:	9b08      	ldr	r3, [sp, #32]
 800865e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008660:	443b      	add	r3, r7
 8008662:	9308      	str	r3, [sp, #32]
 8008664:	2300      	movs	r3, #0
 8008666:	930a      	str	r3, [sp, #40]	@ 0x28
 8008668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800866a:	2b09      	cmp	r3, #9
 800866c:	d864      	bhi.n	8008738 <_dtoa_r+0x280>
 800866e:	2b05      	cmp	r3, #5
 8008670:	bfc4      	itt	gt
 8008672:	3b04      	subgt	r3, #4
 8008674:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008678:	f1a3 0302 	sub.w	r3, r3, #2
 800867c:	bfcc      	ite	gt
 800867e:	2400      	movgt	r4, #0
 8008680:	2401      	movle	r4, #1
 8008682:	2b03      	cmp	r3, #3
 8008684:	d863      	bhi.n	800874e <_dtoa_r+0x296>
 8008686:	e8df f003 	tbb	[pc, r3]
 800868a:	372a      	.short	0x372a
 800868c:	5535      	.short	0x5535
 800868e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008692:	441e      	add	r6, r3
 8008694:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008698:	2b20      	cmp	r3, #32
 800869a:	bfc1      	itttt	gt
 800869c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80086a0:	409f      	lslgt	r7, r3
 80086a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80086a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086aa:	bfd6      	itet	le
 80086ac:	f1c3 0320 	rsble	r3, r3, #32
 80086b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80086b4:	fa04 f003 	lslle.w	r0, r4, r3
 80086b8:	f7f7 ff4c 	bl	8000554 <__aeabi_ui2d>
 80086bc:	2201      	movs	r2, #1
 80086be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80086c2:	3e01      	subs	r6, #1
 80086c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80086c6:	e777      	b.n	80085b8 <_dtoa_r+0x100>
 80086c8:	2301      	movs	r3, #1
 80086ca:	e7b8      	b.n	800863e <_dtoa_r+0x186>
 80086cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80086ce:	e7b7      	b.n	8008640 <_dtoa_r+0x188>
 80086d0:	427b      	negs	r3, r7
 80086d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80086d4:	2300      	movs	r3, #0
 80086d6:	eba8 0807 	sub.w	r8, r8, r7
 80086da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086dc:	e7c4      	b.n	8008668 <_dtoa_r+0x1b0>
 80086de:	2300      	movs	r3, #0
 80086e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	dc35      	bgt.n	8008754 <_dtoa_r+0x29c>
 80086e8:	2301      	movs	r3, #1
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	9307      	str	r3, [sp, #28]
 80086ee:	461a      	mov	r2, r3
 80086f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80086f2:	e00b      	b.n	800870c <_dtoa_r+0x254>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e7f3      	b.n	80086e0 <_dtoa_r+0x228>
 80086f8:	2300      	movs	r3, #0
 80086fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086fe:	18fb      	adds	r3, r7, r3
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	3301      	adds	r3, #1
 8008704:	2b01      	cmp	r3, #1
 8008706:	9307      	str	r3, [sp, #28]
 8008708:	bfb8      	it	lt
 800870a:	2301      	movlt	r3, #1
 800870c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008710:	2100      	movs	r1, #0
 8008712:	2204      	movs	r2, #4
 8008714:	f102 0514 	add.w	r5, r2, #20
 8008718:	429d      	cmp	r5, r3
 800871a:	d91f      	bls.n	800875c <_dtoa_r+0x2a4>
 800871c:	6041      	str	r1, [r0, #4]
 800871e:	4658      	mov	r0, fp
 8008720:	f000 fd8e 	bl	8009240 <_Balloc>
 8008724:	4682      	mov	sl, r0
 8008726:	2800      	cmp	r0, #0
 8008728:	d13c      	bne.n	80087a4 <_dtoa_r+0x2ec>
 800872a:	4b1b      	ldr	r3, [pc, #108]	@ (8008798 <_dtoa_r+0x2e0>)
 800872c:	4602      	mov	r2, r0
 800872e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008732:	e6d8      	b.n	80084e6 <_dtoa_r+0x2e>
 8008734:	2301      	movs	r3, #1
 8008736:	e7e0      	b.n	80086fa <_dtoa_r+0x242>
 8008738:	2401      	movs	r4, #1
 800873a:	2300      	movs	r3, #0
 800873c:	9309      	str	r3, [sp, #36]	@ 0x24
 800873e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008740:	f04f 33ff 	mov.w	r3, #4294967295
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	9307      	str	r3, [sp, #28]
 8008748:	2200      	movs	r2, #0
 800874a:	2312      	movs	r3, #18
 800874c:	e7d0      	b.n	80086f0 <_dtoa_r+0x238>
 800874e:	2301      	movs	r3, #1
 8008750:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008752:	e7f5      	b.n	8008740 <_dtoa_r+0x288>
 8008754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	9307      	str	r3, [sp, #28]
 800875a:	e7d7      	b.n	800870c <_dtoa_r+0x254>
 800875c:	3101      	adds	r1, #1
 800875e:	0052      	lsls	r2, r2, #1
 8008760:	e7d8      	b.n	8008714 <_dtoa_r+0x25c>
 8008762:	bf00      	nop
 8008764:	f3af 8000 	nop.w
 8008768:	636f4361 	.word	0x636f4361
 800876c:	3fd287a7 	.word	0x3fd287a7
 8008770:	8b60c8b3 	.word	0x8b60c8b3
 8008774:	3fc68a28 	.word	0x3fc68a28
 8008778:	509f79fb 	.word	0x509f79fb
 800877c:	3fd34413 	.word	0x3fd34413
 8008780:	0800a09d 	.word	0x0800a09d
 8008784:	0800a0b4 	.word	0x0800a0b4
 8008788:	7ff00000 	.word	0x7ff00000
 800878c:	0800a06d 	.word	0x0800a06d
 8008790:	3ff80000 	.word	0x3ff80000
 8008794:	0800a1b0 	.word	0x0800a1b0
 8008798:	0800a10c 	.word	0x0800a10c
 800879c:	0800a099 	.word	0x0800a099
 80087a0:	0800a06c 	.word	0x0800a06c
 80087a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80087a8:	6018      	str	r0, [r3, #0]
 80087aa:	9b07      	ldr	r3, [sp, #28]
 80087ac:	2b0e      	cmp	r3, #14
 80087ae:	f200 80a4 	bhi.w	80088fa <_dtoa_r+0x442>
 80087b2:	2c00      	cmp	r4, #0
 80087b4:	f000 80a1 	beq.w	80088fa <_dtoa_r+0x442>
 80087b8:	2f00      	cmp	r7, #0
 80087ba:	dd33      	ble.n	8008824 <_dtoa_r+0x36c>
 80087bc:	4bad      	ldr	r3, [pc, #692]	@ (8008a74 <_dtoa_r+0x5bc>)
 80087be:	f007 020f 	and.w	r2, r7, #15
 80087c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087c6:	ed93 7b00 	vldr	d7, [r3]
 80087ca:	05f8      	lsls	r0, r7, #23
 80087cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80087d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087d4:	d516      	bpl.n	8008804 <_dtoa_r+0x34c>
 80087d6:	4ba8      	ldr	r3, [pc, #672]	@ (8008a78 <_dtoa_r+0x5c0>)
 80087d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087e0:	f7f8 f85c 	bl	800089c <__aeabi_ddiv>
 80087e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087e8:	f004 040f 	and.w	r4, r4, #15
 80087ec:	2603      	movs	r6, #3
 80087ee:	4da2      	ldr	r5, [pc, #648]	@ (8008a78 <_dtoa_r+0x5c0>)
 80087f0:	b954      	cbnz	r4, 8008808 <_dtoa_r+0x350>
 80087f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087fa:	f7f8 f84f 	bl	800089c <__aeabi_ddiv>
 80087fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008802:	e028      	b.n	8008856 <_dtoa_r+0x39e>
 8008804:	2602      	movs	r6, #2
 8008806:	e7f2      	b.n	80087ee <_dtoa_r+0x336>
 8008808:	07e1      	lsls	r1, r4, #31
 800880a:	d508      	bpl.n	800881e <_dtoa_r+0x366>
 800880c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008810:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008814:	f7f7 ff18 	bl	8000648 <__aeabi_dmul>
 8008818:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800881c:	3601      	adds	r6, #1
 800881e:	1064      	asrs	r4, r4, #1
 8008820:	3508      	adds	r5, #8
 8008822:	e7e5      	b.n	80087f0 <_dtoa_r+0x338>
 8008824:	f000 80d2 	beq.w	80089cc <_dtoa_r+0x514>
 8008828:	427c      	negs	r4, r7
 800882a:	4b92      	ldr	r3, [pc, #584]	@ (8008a74 <_dtoa_r+0x5bc>)
 800882c:	4d92      	ldr	r5, [pc, #584]	@ (8008a78 <_dtoa_r+0x5c0>)
 800882e:	f004 020f 	and.w	r2, r4, #15
 8008832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800883e:	f7f7 ff03 	bl	8000648 <__aeabi_dmul>
 8008842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008846:	1124      	asrs	r4, r4, #4
 8008848:	2300      	movs	r3, #0
 800884a:	2602      	movs	r6, #2
 800884c:	2c00      	cmp	r4, #0
 800884e:	f040 80b2 	bne.w	80089b6 <_dtoa_r+0x4fe>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1d3      	bne.n	80087fe <_dtoa_r+0x346>
 8008856:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008858:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 80b7 	beq.w	80089d0 <_dtoa_r+0x518>
 8008862:	4b86      	ldr	r3, [pc, #536]	@ (8008a7c <_dtoa_r+0x5c4>)
 8008864:	2200      	movs	r2, #0
 8008866:	4620      	mov	r0, r4
 8008868:	4629      	mov	r1, r5
 800886a:	f7f8 f95f 	bl	8000b2c <__aeabi_dcmplt>
 800886e:	2800      	cmp	r0, #0
 8008870:	f000 80ae 	beq.w	80089d0 <_dtoa_r+0x518>
 8008874:	9b07      	ldr	r3, [sp, #28]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 80aa 	beq.w	80089d0 <_dtoa_r+0x518>
 800887c:	9b00      	ldr	r3, [sp, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	dd37      	ble.n	80088f2 <_dtoa_r+0x43a>
 8008882:	1e7b      	subs	r3, r7, #1
 8008884:	9304      	str	r3, [sp, #16]
 8008886:	4620      	mov	r0, r4
 8008888:	4b7d      	ldr	r3, [pc, #500]	@ (8008a80 <_dtoa_r+0x5c8>)
 800888a:	2200      	movs	r2, #0
 800888c:	4629      	mov	r1, r5
 800888e:	f7f7 fedb 	bl	8000648 <__aeabi_dmul>
 8008892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008896:	9c00      	ldr	r4, [sp, #0]
 8008898:	3601      	adds	r6, #1
 800889a:	4630      	mov	r0, r6
 800889c:	f7f7 fe6a 	bl	8000574 <__aeabi_i2d>
 80088a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088a4:	f7f7 fed0 	bl	8000648 <__aeabi_dmul>
 80088a8:	4b76      	ldr	r3, [pc, #472]	@ (8008a84 <_dtoa_r+0x5cc>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	f7f7 fd16 	bl	80002dc <__adddf3>
 80088b0:	4605      	mov	r5, r0
 80088b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088b6:	2c00      	cmp	r4, #0
 80088b8:	f040 808d 	bne.w	80089d6 <_dtoa_r+0x51e>
 80088bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088c0:	4b71      	ldr	r3, [pc, #452]	@ (8008a88 <_dtoa_r+0x5d0>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	f7f7 fd08 	bl	80002d8 <__aeabi_dsub>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088d0:	462a      	mov	r2, r5
 80088d2:	4633      	mov	r3, r6
 80088d4:	f7f8 f948 	bl	8000b68 <__aeabi_dcmpgt>
 80088d8:	2800      	cmp	r0, #0
 80088da:	f040 828b 	bne.w	8008df4 <_dtoa_r+0x93c>
 80088de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e2:	462a      	mov	r2, r5
 80088e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80088e8:	f7f8 f920 	bl	8000b2c <__aeabi_dcmplt>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f040 8128 	bne.w	8008b42 <_dtoa_r+0x68a>
 80088f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80088f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80088fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f2c0 815a 	blt.w	8008bb6 <_dtoa_r+0x6fe>
 8008902:	2f0e      	cmp	r7, #14
 8008904:	f300 8157 	bgt.w	8008bb6 <_dtoa_r+0x6fe>
 8008908:	4b5a      	ldr	r3, [pc, #360]	@ (8008a74 <_dtoa_r+0x5bc>)
 800890a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800890e:	ed93 7b00 	vldr	d7, [r3]
 8008912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008914:	2b00      	cmp	r3, #0
 8008916:	ed8d 7b00 	vstr	d7, [sp]
 800891a:	da03      	bge.n	8008924 <_dtoa_r+0x46c>
 800891c:	9b07      	ldr	r3, [sp, #28]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f340 8101 	ble.w	8008b26 <_dtoa_r+0x66e>
 8008924:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008928:	4656      	mov	r6, sl
 800892a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800892e:	4620      	mov	r0, r4
 8008930:	4629      	mov	r1, r5
 8008932:	f7f7 ffb3 	bl	800089c <__aeabi_ddiv>
 8008936:	f7f8 f937 	bl	8000ba8 <__aeabi_d2iz>
 800893a:	4680      	mov	r8, r0
 800893c:	f7f7 fe1a 	bl	8000574 <__aeabi_i2d>
 8008940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008944:	f7f7 fe80 	bl	8000648 <__aeabi_dmul>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008954:	f7f7 fcc0 	bl	80002d8 <__aeabi_dsub>
 8008958:	f806 4b01 	strb.w	r4, [r6], #1
 800895c:	9d07      	ldr	r5, [sp, #28]
 800895e:	eba6 040a 	sub.w	r4, r6, sl
 8008962:	42a5      	cmp	r5, r4
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	f040 8117 	bne.w	8008b9a <_dtoa_r+0x6e2>
 800896c:	f7f7 fcb6 	bl	80002dc <__adddf3>
 8008970:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008974:	4604      	mov	r4, r0
 8008976:	460d      	mov	r5, r1
 8008978:	f7f8 f8f6 	bl	8000b68 <__aeabi_dcmpgt>
 800897c:	2800      	cmp	r0, #0
 800897e:	f040 80f9 	bne.w	8008b74 <_dtoa_r+0x6bc>
 8008982:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008986:	4620      	mov	r0, r4
 8008988:	4629      	mov	r1, r5
 800898a:	f7f8 f8c5 	bl	8000b18 <__aeabi_dcmpeq>
 800898e:	b118      	cbz	r0, 8008998 <_dtoa_r+0x4e0>
 8008990:	f018 0f01 	tst.w	r8, #1
 8008994:	f040 80ee 	bne.w	8008b74 <_dtoa_r+0x6bc>
 8008998:	4649      	mov	r1, r9
 800899a:	4658      	mov	r0, fp
 800899c:	f000 fc90 	bl	80092c0 <_Bfree>
 80089a0:	2300      	movs	r3, #0
 80089a2:	7033      	strb	r3, [r6, #0]
 80089a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089a6:	3701      	adds	r7, #1
 80089a8:	601f      	str	r7, [r3, #0]
 80089aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 831d 	beq.w	8008fec <_dtoa_r+0xb34>
 80089b2:	601e      	str	r6, [r3, #0]
 80089b4:	e31a      	b.n	8008fec <_dtoa_r+0xb34>
 80089b6:	07e2      	lsls	r2, r4, #31
 80089b8:	d505      	bpl.n	80089c6 <_dtoa_r+0x50e>
 80089ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089be:	f7f7 fe43 	bl	8000648 <__aeabi_dmul>
 80089c2:	3601      	adds	r6, #1
 80089c4:	2301      	movs	r3, #1
 80089c6:	1064      	asrs	r4, r4, #1
 80089c8:	3508      	adds	r5, #8
 80089ca:	e73f      	b.n	800884c <_dtoa_r+0x394>
 80089cc:	2602      	movs	r6, #2
 80089ce:	e742      	b.n	8008856 <_dtoa_r+0x39e>
 80089d0:	9c07      	ldr	r4, [sp, #28]
 80089d2:	9704      	str	r7, [sp, #16]
 80089d4:	e761      	b.n	800889a <_dtoa_r+0x3e2>
 80089d6:	4b27      	ldr	r3, [pc, #156]	@ (8008a74 <_dtoa_r+0x5bc>)
 80089d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089e2:	4454      	add	r4, sl
 80089e4:	2900      	cmp	r1, #0
 80089e6:	d053      	beq.n	8008a90 <_dtoa_r+0x5d8>
 80089e8:	4928      	ldr	r1, [pc, #160]	@ (8008a8c <_dtoa_r+0x5d4>)
 80089ea:	2000      	movs	r0, #0
 80089ec:	f7f7 ff56 	bl	800089c <__aeabi_ddiv>
 80089f0:	4633      	mov	r3, r6
 80089f2:	462a      	mov	r2, r5
 80089f4:	f7f7 fc70 	bl	80002d8 <__aeabi_dsub>
 80089f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80089fc:	4656      	mov	r6, sl
 80089fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a02:	f7f8 f8d1 	bl	8000ba8 <__aeabi_d2iz>
 8008a06:	4605      	mov	r5, r0
 8008a08:	f7f7 fdb4 	bl	8000574 <__aeabi_i2d>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a14:	f7f7 fc60 	bl	80002d8 <__aeabi_dsub>
 8008a18:	3530      	adds	r5, #48	@ 0x30
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a22:	f806 5b01 	strb.w	r5, [r6], #1
 8008a26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a2a:	f7f8 f87f 	bl	8000b2c <__aeabi_dcmplt>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d171      	bne.n	8008b16 <_dtoa_r+0x65e>
 8008a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a36:	4911      	ldr	r1, [pc, #68]	@ (8008a7c <_dtoa_r+0x5c4>)
 8008a38:	2000      	movs	r0, #0
 8008a3a:	f7f7 fc4d 	bl	80002d8 <__aeabi_dsub>
 8008a3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a42:	f7f8 f873 	bl	8000b2c <__aeabi_dcmplt>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f040 8095 	bne.w	8008b76 <_dtoa_r+0x6be>
 8008a4c:	42a6      	cmp	r6, r4
 8008a4e:	f43f af50 	beq.w	80088f2 <_dtoa_r+0x43a>
 8008a52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a56:	4b0a      	ldr	r3, [pc, #40]	@ (8008a80 <_dtoa_r+0x5c8>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f7f7 fdf5 	bl	8000648 <__aeabi_dmul>
 8008a5e:	4b08      	ldr	r3, [pc, #32]	@ (8008a80 <_dtoa_r+0x5c8>)
 8008a60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a64:	2200      	movs	r2, #0
 8008a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a6a:	f7f7 fded 	bl	8000648 <__aeabi_dmul>
 8008a6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a72:	e7c4      	b.n	80089fe <_dtoa_r+0x546>
 8008a74:	0800a1b0 	.word	0x0800a1b0
 8008a78:	0800a188 	.word	0x0800a188
 8008a7c:	3ff00000 	.word	0x3ff00000
 8008a80:	40240000 	.word	0x40240000
 8008a84:	401c0000 	.word	0x401c0000
 8008a88:	40140000 	.word	0x40140000
 8008a8c:	3fe00000 	.word	0x3fe00000
 8008a90:	4631      	mov	r1, r6
 8008a92:	4628      	mov	r0, r5
 8008a94:	f7f7 fdd8 	bl	8000648 <__aeabi_dmul>
 8008a98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008a9e:	4656      	mov	r6, sl
 8008aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa4:	f7f8 f880 	bl	8000ba8 <__aeabi_d2iz>
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	f7f7 fd63 	bl	8000574 <__aeabi_i2d>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ab6:	f7f7 fc0f 	bl	80002d8 <__aeabi_dsub>
 8008aba:	3530      	adds	r5, #48	@ 0x30
 8008abc:	f806 5b01 	strb.w	r5, [r6], #1
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	42a6      	cmp	r6, r4
 8008ac6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008aca:	f04f 0200 	mov.w	r2, #0
 8008ace:	d124      	bne.n	8008b1a <_dtoa_r+0x662>
 8008ad0:	4bac      	ldr	r3, [pc, #688]	@ (8008d84 <_dtoa_r+0x8cc>)
 8008ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ad6:	f7f7 fc01 	bl	80002dc <__adddf3>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ae2:	f7f8 f841 	bl	8000b68 <__aeabi_dcmpgt>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d145      	bne.n	8008b76 <_dtoa_r+0x6be>
 8008aea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008aee:	49a5      	ldr	r1, [pc, #660]	@ (8008d84 <_dtoa_r+0x8cc>)
 8008af0:	2000      	movs	r0, #0
 8008af2:	f7f7 fbf1 	bl	80002d8 <__aeabi_dsub>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008afe:	f7f8 f815 	bl	8000b2c <__aeabi_dcmplt>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	f43f aef5 	beq.w	80088f2 <_dtoa_r+0x43a>
 8008b08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008b0a:	1e73      	subs	r3, r6, #1
 8008b0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b12:	2b30      	cmp	r3, #48	@ 0x30
 8008b14:	d0f8      	beq.n	8008b08 <_dtoa_r+0x650>
 8008b16:	9f04      	ldr	r7, [sp, #16]
 8008b18:	e73e      	b.n	8008998 <_dtoa_r+0x4e0>
 8008b1a:	4b9b      	ldr	r3, [pc, #620]	@ (8008d88 <_dtoa_r+0x8d0>)
 8008b1c:	f7f7 fd94 	bl	8000648 <__aeabi_dmul>
 8008b20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b24:	e7bc      	b.n	8008aa0 <_dtoa_r+0x5e8>
 8008b26:	d10c      	bne.n	8008b42 <_dtoa_r+0x68a>
 8008b28:	4b98      	ldr	r3, [pc, #608]	@ (8008d8c <_dtoa_r+0x8d4>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b30:	f7f7 fd8a 	bl	8000648 <__aeabi_dmul>
 8008b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b38:	f7f8 f80c 	bl	8000b54 <__aeabi_dcmpge>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	f000 8157 	beq.w	8008df0 <_dtoa_r+0x938>
 8008b42:	2400      	movs	r4, #0
 8008b44:	4625      	mov	r5, r4
 8008b46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b48:	43db      	mvns	r3, r3
 8008b4a:	9304      	str	r3, [sp, #16]
 8008b4c:	4656      	mov	r6, sl
 8008b4e:	2700      	movs	r7, #0
 8008b50:	4621      	mov	r1, r4
 8008b52:	4658      	mov	r0, fp
 8008b54:	f000 fbb4 	bl	80092c0 <_Bfree>
 8008b58:	2d00      	cmp	r5, #0
 8008b5a:	d0dc      	beq.n	8008b16 <_dtoa_r+0x65e>
 8008b5c:	b12f      	cbz	r7, 8008b6a <_dtoa_r+0x6b2>
 8008b5e:	42af      	cmp	r7, r5
 8008b60:	d003      	beq.n	8008b6a <_dtoa_r+0x6b2>
 8008b62:	4639      	mov	r1, r7
 8008b64:	4658      	mov	r0, fp
 8008b66:	f000 fbab 	bl	80092c0 <_Bfree>
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	4658      	mov	r0, fp
 8008b6e:	f000 fba7 	bl	80092c0 <_Bfree>
 8008b72:	e7d0      	b.n	8008b16 <_dtoa_r+0x65e>
 8008b74:	9704      	str	r7, [sp, #16]
 8008b76:	4633      	mov	r3, r6
 8008b78:	461e      	mov	r6, r3
 8008b7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b7e:	2a39      	cmp	r2, #57	@ 0x39
 8008b80:	d107      	bne.n	8008b92 <_dtoa_r+0x6da>
 8008b82:	459a      	cmp	sl, r3
 8008b84:	d1f8      	bne.n	8008b78 <_dtoa_r+0x6c0>
 8008b86:	9a04      	ldr	r2, [sp, #16]
 8008b88:	3201      	adds	r2, #1
 8008b8a:	9204      	str	r2, [sp, #16]
 8008b8c:	2230      	movs	r2, #48	@ 0x30
 8008b8e:	f88a 2000 	strb.w	r2, [sl]
 8008b92:	781a      	ldrb	r2, [r3, #0]
 8008b94:	3201      	adds	r2, #1
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	e7bd      	b.n	8008b16 <_dtoa_r+0x65e>
 8008b9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008d88 <_dtoa_r+0x8d0>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f7f7 fd53 	bl	8000648 <__aeabi_dmul>
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	460d      	mov	r5, r1
 8008baa:	f7f7 ffb5 	bl	8000b18 <__aeabi_dcmpeq>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f43f aebb 	beq.w	800892a <_dtoa_r+0x472>
 8008bb4:	e6f0      	b.n	8008998 <_dtoa_r+0x4e0>
 8008bb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	f000 80db 	beq.w	8008d74 <_dtoa_r+0x8bc>
 8008bbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bc0:	2a01      	cmp	r2, #1
 8008bc2:	f300 80bf 	bgt.w	8008d44 <_dtoa_r+0x88c>
 8008bc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008bc8:	2a00      	cmp	r2, #0
 8008bca:	f000 80b7 	beq.w	8008d3c <_dtoa_r+0x884>
 8008bce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008bd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bd4:	4646      	mov	r6, r8
 8008bd6:	9a08      	ldr	r2, [sp, #32]
 8008bd8:	2101      	movs	r1, #1
 8008bda:	441a      	add	r2, r3
 8008bdc:	4658      	mov	r0, fp
 8008bde:	4498      	add	r8, r3
 8008be0:	9208      	str	r2, [sp, #32]
 8008be2:	f000 fc21 	bl	8009428 <__i2b>
 8008be6:	4605      	mov	r5, r0
 8008be8:	b15e      	cbz	r6, 8008c02 <_dtoa_r+0x74a>
 8008bea:	9b08      	ldr	r3, [sp, #32]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dd08      	ble.n	8008c02 <_dtoa_r+0x74a>
 8008bf0:	42b3      	cmp	r3, r6
 8008bf2:	9a08      	ldr	r2, [sp, #32]
 8008bf4:	bfa8      	it	ge
 8008bf6:	4633      	movge	r3, r6
 8008bf8:	eba8 0803 	sub.w	r8, r8, r3
 8008bfc:	1af6      	subs	r6, r6, r3
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	9308      	str	r3, [sp, #32]
 8008c02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c04:	b1f3      	cbz	r3, 8008c44 <_dtoa_r+0x78c>
 8008c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 80b7 	beq.w	8008d7c <_dtoa_r+0x8c4>
 8008c0e:	b18c      	cbz	r4, 8008c34 <_dtoa_r+0x77c>
 8008c10:	4629      	mov	r1, r5
 8008c12:	4622      	mov	r2, r4
 8008c14:	4658      	mov	r0, fp
 8008c16:	f000 fcc7 	bl	80095a8 <__pow5mult>
 8008c1a:	464a      	mov	r2, r9
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	4605      	mov	r5, r0
 8008c20:	4658      	mov	r0, fp
 8008c22:	f000 fc17 	bl	8009454 <__multiply>
 8008c26:	4649      	mov	r1, r9
 8008c28:	9004      	str	r0, [sp, #16]
 8008c2a:	4658      	mov	r0, fp
 8008c2c:	f000 fb48 	bl	80092c0 <_Bfree>
 8008c30:	9b04      	ldr	r3, [sp, #16]
 8008c32:	4699      	mov	r9, r3
 8008c34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c36:	1b1a      	subs	r2, r3, r4
 8008c38:	d004      	beq.n	8008c44 <_dtoa_r+0x78c>
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	4658      	mov	r0, fp
 8008c3e:	f000 fcb3 	bl	80095a8 <__pow5mult>
 8008c42:	4681      	mov	r9, r0
 8008c44:	2101      	movs	r1, #1
 8008c46:	4658      	mov	r0, fp
 8008c48:	f000 fbee 	bl	8009428 <__i2b>
 8008c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c4e:	4604      	mov	r4, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 81cf 	beq.w	8008ff4 <_dtoa_r+0xb3c>
 8008c56:	461a      	mov	r2, r3
 8008c58:	4601      	mov	r1, r0
 8008c5a:	4658      	mov	r0, fp
 8008c5c:	f000 fca4 	bl	80095a8 <__pow5mult>
 8008c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	4604      	mov	r4, r0
 8008c66:	f300 8095 	bgt.w	8008d94 <_dtoa_r+0x8dc>
 8008c6a:	9b02      	ldr	r3, [sp, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 8087 	bne.w	8008d80 <_dtoa_r+0x8c8>
 8008c72:	9b03      	ldr	r3, [sp, #12]
 8008c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f040 8089 	bne.w	8008d90 <_dtoa_r+0x8d8>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c84:	0d1b      	lsrs	r3, r3, #20
 8008c86:	051b      	lsls	r3, r3, #20
 8008c88:	b12b      	cbz	r3, 8008c96 <_dtoa_r+0x7de>
 8008c8a:	9b08      	ldr	r3, [sp, #32]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	9308      	str	r3, [sp, #32]
 8008c90:	f108 0801 	add.w	r8, r8, #1
 8008c94:	2301      	movs	r3, #1
 8008c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 81b0 	beq.w	8009000 <_dtoa_r+0xb48>
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ca6:	6918      	ldr	r0, [r3, #16]
 8008ca8:	f000 fb72 	bl	8009390 <__hi0bits>
 8008cac:	f1c0 0020 	rsb	r0, r0, #32
 8008cb0:	9b08      	ldr	r3, [sp, #32]
 8008cb2:	4418      	add	r0, r3
 8008cb4:	f010 001f 	ands.w	r0, r0, #31
 8008cb8:	d077      	beq.n	8008daa <_dtoa_r+0x8f2>
 8008cba:	f1c0 0320 	rsb	r3, r0, #32
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	dd6b      	ble.n	8008d9a <_dtoa_r+0x8e2>
 8008cc2:	9b08      	ldr	r3, [sp, #32]
 8008cc4:	f1c0 001c 	rsb	r0, r0, #28
 8008cc8:	4403      	add	r3, r0
 8008cca:	4480      	add	r8, r0
 8008ccc:	4406      	add	r6, r0
 8008cce:	9308      	str	r3, [sp, #32]
 8008cd0:	f1b8 0f00 	cmp.w	r8, #0
 8008cd4:	dd05      	ble.n	8008ce2 <_dtoa_r+0x82a>
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	4642      	mov	r2, r8
 8008cda:	4658      	mov	r0, fp
 8008cdc:	f000 fcbe 	bl	800965c <__lshift>
 8008ce0:	4681      	mov	r9, r0
 8008ce2:	9b08      	ldr	r3, [sp, #32]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	dd05      	ble.n	8008cf4 <_dtoa_r+0x83c>
 8008ce8:	4621      	mov	r1, r4
 8008cea:	461a      	mov	r2, r3
 8008cec:	4658      	mov	r0, fp
 8008cee:	f000 fcb5 	bl	800965c <__lshift>
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d059      	beq.n	8008dae <_dtoa_r+0x8f6>
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4648      	mov	r0, r9
 8008cfe:	f000 fd19 	bl	8009734 <__mcmp>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	da53      	bge.n	8008dae <_dtoa_r+0x8f6>
 8008d06:	1e7b      	subs	r3, r7, #1
 8008d08:	9304      	str	r3, [sp, #16]
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	220a      	movs	r2, #10
 8008d10:	4658      	mov	r0, fp
 8008d12:	f000 faf7 	bl	8009304 <__multadd>
 8008d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d18:	4681      	mov	r9, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 8172 	beq.w	8009004 <_dtoa_r+0xb4c>
 8008d20:	2300      	movs	r3, #0
 8008d22:	4629      	mov	r1, r5
 8008d24:	220a      	movs	r2, #10
 8008d26:	4658      	mov	r0, fp
 8008d28:	f000 faec 	bl	8009304 <__multadd>
 8008d2c:	9b00      	ldr	r3, [sp, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	4605      	mov	r5, r0
 8008d32:	dc67      	bgt.n	8008e04 <_dtoa_r+0x94c>
 8008d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	dc41      	bgt.n	8008dbe <_dtoa_r+0x906>
 8008d3a:	e063      	b.n	8008e04 <_dtoa_r+0x94c>
 8008d3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d42:	e746      	b.n	8008bd2 <_dtoa_r+0x71a>
 8008d44:	9b07      	ldr	r3, [sp, #28]
 8008d46:	1e5c      	subs	r4, r3, #1
 8008d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d4a:	42a3      	cmp	r3, r4
 8008d4c:	bfbf      	itttt	lt
 8008d4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008d50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008d52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008d54:	1ae3      	sublt	r3, r4, r3
 8008d56:	bfb4      	ite	lt
 8008d58:	18d2      	addlt	r2, r2, r3
 8008d5a:	1b1c      	subge	r4, r3, r4
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	bfbc      	itt	lt
 8008d60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008d62:	2400      	movlt	r4, #0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bfb5      	itete	lt
 8008d68:	eba8 0603 	sublt.w	r6, r8, r3
 8008d6c:	9b07      	ldrge	r3, [sp, #28]
 8008d6e:	2300      	movlt	r3, #0
 8008d70:	4646      	movge	r6, r8
 8008d72:	e730      	b.n	8008bd6 <_dtoa_r+0x71e>
 8008d74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008d78:	4646      	mov	r6, r8
 8008d7a:	e735      	b.n	8008be8 <_dtoa_r+0x730>
 8008d7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d7e:	e75c      	b.n	8008c3a <_dtoa_r+0x782>
 8008d80:	2300      	movs	r3, #0
 8008d82:	e788      	b.n	8008c96 <_dtoa_r+0x7de>
 8008d84:	3fe00000 	.word	0x3fe00000
 8008d88:	40240000 	.word	0x40240000
 8008d8c:	40140000 	.word	0x40140000
 8008d90:	9b02      	ldr	r3, [sp, #8]
 8008d92:	e780      	b.n	8008c96 <_dtoa_r+0x7de>
 8008d94:	2300      	movs	r3, #0
 8008d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d98:	e782      	b.n	8008ca0 <_dtoa_r+0x7e8>
 8008d9a:	d099      	beq.n	8008cd0 <_dtoa_r+0x818>
 8008d9c:	9a08      	ldr	r2, [sp, #32]
 8008d9e:	331c      	adds	r3, #28
 8008da0:	441a      	add	r2, r3
 8008da2:	4498      	add	r8, r3
 8008da4:	441e      	add	r6, r3
 8008da6:	9208      	str	r2, [sp, #32]
 8008da8:	e792      	b.n	8008cd0 <_dtoa_r+0x818>
 8008daa:	4603      	mov	r3, r0
 8008dac:	e7f6      	b.n	8008d9c <_dtoa_r+0x8e4>
 8008dae:	9b07      	ldr	r3, [sp, #28]
 8008db0:	9704      	str	r7, [sp, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dc20      	bgt.n	8008df8 <_dtoa_r+0x940>
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	dd1e      	ble.n	8008dfc <_dtoa_r+0x944>
 8008dbe:	9b00      	ldr	r3, [sp, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f47f aec0 	bne.w	8008b46 <_dtoa_r+0x68e>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	2205      	movs	r2, #5
 8008dca:	4658      	mov	r0, fp
 8008dcc:	f000 fa9a 	bl	8009304 <__multadd>
 8008dd0:	4601      	mov	r1, r0
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4648      	mov	r0, r9
 8008dd6:	f000 fcad 	bl	8009734 <__mcmp>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	f77f aeb3 	ble.w	8008b46 <_dtoa_r+0x68e>
 8008de0:	4656      	mov	r6, sl
 8008de2:	2331      	movs	r3, #49	@ 0x31
 8008de4:	f806 3b01 	strb.w	r3, [r6], #1
 8008de8:	9b04      	ldr	r3, [sp, #16]
 8008dea:	3301      	adds	r3, #1
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	e6ae      	b.n	8008b4e <_dtoa_r+0x696>
 8008df0:	9c07      	ldr	r4, [sp, #28]
 8008df2:	9704      	str	r7, [sp, #16]
 8008df4:	4625      	mov	r5, r4
 8008df6:	e7f3      	b.n	8008de0 <_dtoa_r+0x928>
 8008df8:	9b07      	ldr	r3, [sp, #28]
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 8104 	beq.w	800900c <_dtoa_r+0xb54>
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	dd05      	ble.n	8008e14 <_dtoa_r+0x95c>
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4632      	mov	r2, r6
 8008e0c:	4658      	mov	r0, fp
 8008e0e:	f000 fc25 	bl	800965c <__lshift>
 8008e12:	4605      	mov	r5, r0
 8008e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d05a      	beq.n	8008ed0 <_dtoa_r+0xa18>
 8008e1a:	6869      	ldr	r1, [r5, #4]
 8008e1c:	4658      	mov	r0, fp
 8008e1e:	f000 fa0f 	bl	8009240 <_Balloc>
 8008e22:	4606      	mov	r6, r0
 8008e24:	b928      	cbnz	r0, 8008e32 <_dtoa_r+0x97a>
 8008e26:	4b84      	ldr	r3, [pc, #528]	@ (8009038 <_dtoa_r+0xb80>)
 8008e28:	4602      	mov	r2, r0
 8008e2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e2e:	f7ff bb5a 	b.w	80084e6 <_dtoa_r+0x2e>
 8008e32:	692a      	ldr	r2, [r5, #16]
 8008e34:	3202      	adds	r2, #2
 8008e36:	0092      	lsls	r2, r2, #2
 8008e38:	f105 010c 	add.w	r1, r5, #12
 8008e3c:	300c      	adds	r0, #12
 8008e3e:	f001 f803 	bl	8009e48 <memcpy>
 8008e42:	2201      	movs	r2, #1
 8008e44:	4631      	mov	r1, r6
 8008e46:	4658      	mov	r0, fp
 8008e48:	f000 fc08 	bl	800965c <__lshift>
 8008e4c:	f10a 0301 	add.w	r3, sl, #1
 8008e50:	9307      	str	r3, [sp, #28]
 8008e52:	9b00      	ldr	r3, [sp, #0]
 8008e54:	4453      	add	r3, sl
 8008e56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e58:	9b02      	ldr	r3, [sp, #8]
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	462f      	mov	r7, r5
 8008e60:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e62:	4605      	mov	r5, r0
 8008e64:	9b07      	ldr	r3, [sp, #28]
 8008e66:	4621      	mov	r1, r4
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	4648      	mov	r0, r9
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	f7ff fa9a 	bl	80083a6 <quorem>
 8008e72:	4639      	mov	r1, r7
 8008e74:	9002      	str	r0, [sp, #8]
 8008e76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e7a:	4648      	mov	r0, r9
 8008e7c:	f000 fc5a 	bl	8009734 <__mcmp>
 8008e80:	462a      	mov	r2, r5
 8008e82:	9008      	str	r0, [sp, #32]
 8008e84:	4621      	mov	r1, r4
 8008e86:	4658      	mov	r0, fp
 8008e88:	f000 fc70 	bl	800976c <__mdiff>
 8008e8c:	68c2      	ldr	r2, [r0, #12]
 8008e8e:	4606      	mov	r6, r0
 8008e90:	bb02      	cbnz	r2, 8008ed4 <_dtoa_r+0xa1c>
 8008e92:	4601      	mov	r1, r0
 8008e94:	4648      	mov	r0, r9
 8008e96:	f000 fc4d 	bl	8009734 <__mcmp>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4658      	mov	r0, fp
 8008ea0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ea2:	f000 fa0d 	bl	80092c0 <_Bfree>
 8008ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008eaa:	9e07      	ldr	r6, [sp, #28]
 8008eac:	ea43 0102 	orr.w	r1, r3, r2
 8008eb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eb2:	4319      	orrs	r1, r3
 8008eb4:	d110      	bne.n	8008ed8 <_dtoa_r+0xa20>
 8008eb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008eba:	d029      	beq.n	8008f10 <_dtoa_r+0xa58>
 8008ebc:	9b08      	ldr	r3, [sp, #32]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	dd02      	ble.n	8008ec8 <_dtoa_r+0xa10>
 8008ec2:	9b02      	ldr	r3, [sp, #8]
 8008ec4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ec8:	9b00      	ldr	r3, [sp, #0]
 8008eca:	f883 8000 	strb.w	r8, [r3]
 8008ece:	e63f      	b.n	8008b50 <_dtoa_r+0x698>
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	e7bb      	b.n	8008e4c <_dtoa_r+0x994>
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	e7e1      	b.n	8008e9c <_dtoa_r+0x9e4>
 8008ed8:	9b08      	ldr	r3, [sp, #32]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	db04      	blt.n	8008ee8 <_dtoa_r+0xa30>
 8008ede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ee0:	430b      	orrs	r3, r1
 8008ee2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	d120      	bne.n	8008f2a <_dtoa_r+0xa72>
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	dded      	ble.n	8008ec8 <_dtoa_r+0xa10>
 8008eec:	4649      	mov	r1, r9
 8008eee:	2201      	movs	r2, #1
 8008ef0:	4658      	mov	r0, fp
 8008ef2:	f000 fbb3 	bl	800965c <__lshift>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4681      	mov	r9, r0
 8008efa:	f000 fc1b 	bl	8009734 <__mcmp>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	dc03      	bgt.n	8008f0a <_dtoa_r+0xa52>
 8008f02:	d1e1      	bne.n	8008ec8 <_dtoa_r+0xa10>
 8008f04:	f018 0f01 	tst.w	r8, #1
 8008f08:	d0de      	beq.n	8008ec8 <_dtoa_r+0xa10>
 8008f0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f0e:	d1d8      	bne.n	8008ec2 <_dtoa_r+0xa0a>
 8008f10:	9a00      	ldr	r2, [sp, #0]
 8008f12:	2339      	movs	r3, #57	@ 0x39
 8008f14:	7013      	strb	r3, [r2, #0]
 8008f16:	4633      	mov	r3, r6
 8008f18:	461e      	mov	r6, r3
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f20:	2a39      	cmp	r2, #57	@ 0x39
 8008f22:	d052      	beq.n	8008fca <_dtoa_r+0xb12>
 8008f24:	3201      	adds	r2, #1
 8008f26:	701a      	strb	r2, [r3, #0]
 8008f28:	e612      	b.n	8008b50 <_dtoa_r+0x698>
 8008f2a:	2a00      	cmp	r2, #0
 8008f2c:	dd07      	ble.n	8008f3e <_dtoa_r+0xa86>
 8008f2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f32:	d0ed      	beq.n	8008f10 <_dtoa_r+0xa58>
 8008f34:	9a00      	ldr	r2, [sp, #0]
 8008f36:	f108 0301 	add.w	r3, r8, #1
 8008f3a:	7013      	strb	r3, [r2, #0]
 8008f3c:	e608      	b.n	8008b50 <_dtoa_r+0x698>
 8008f3e:	9b07      	ldr	r3, [sp, #28]
 8008f40:	9a07      	ldr	r2, [sp, #28]
 8008f42:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d028      	beq.n	8008f9e <_dtoa_r+0xae6>
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	2300      	movs	r3, #0
 8008f50:	220a      	movs	r2, #10
 8008f52:	4658      	mov	r0, fp
 8008f54:	f000 f9d6 	bl	8009304 <__multadd>
 8008f58:	42af      	cmp	r7, r5
 8008f5a:	4681      	mov	r9, r0
 8008f5c:	f04f 0300 	mov.w	r3, #0
 8008f60:	f04f 020a 	mov.w	r2, #10
 8008f64:	4639      	mov	r1, r7
 8008f66:	4658      	mov	r0, fp
 8008f68:	d107      	bne.n	8008f7a <_dtoa_r+0xac2>
 8008f6a:	f000 f9cb 	bl	8009304 <__multadd>
 8008f6e:	4607      	mov	r7, r0
 8008f70:	4605      	mov	r5, r0
 8008f72:	9b07      	ldr	r3, [sp, #28]
 8008f74:	3301      	adds	r3, #1
 8008f76:	9307      	str	r3, [sp, #28]
 8008f78:	e774      	b.n	8008e64 <_dtoa_r+0x9ac>
 8008f7a:	f000 f9c3 	bl	8009304 <__multadd>
 8008f7e:	4629      	mov	r1, r5
 8008f80:	4607      	mov	r7, r0
 8008f82:	2300      	movs	r3, #0
 8008f84:	220a      	movs	r2, #10
 8008f86:	4658      	mov	r0, fp
 8008f88:	f000 f9bc 	bl	8009304 <__multadd>
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	e7f0      	b.n	8008f72 <_dtoa_r+0xaba>
 8008f90:	9b00      	ldr	r3, [sp, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bfcc      	ite	gt
 8008f96:	461e      	movgt	r6, r3
 8008f98:	2601      	movle	r6, #1
 8008f9a:	4456      	add	r6, sl
 8008f9c:	2700      	movs	r7, #0
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	4658      	mov	r0, fp
 8008fa4:	f000 fb5a 	bl	800965c <__lshift>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4681      	mov	r9, r0
 8008fac:	f000 fbc2 	bl	8009734 <__mcmp>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	dcb0      	bgt.n	8008f16 <_dtoa_r+0xa5e>
 8008fb4:	d102      	bne.n	8008fbc <_dtoa_r+0xb04>
 8008fb6:	f018 0f01 	tst.w	r8, #1
 8008fba:	d1ac      	bne.n	8008f16 <_dtoa_r+0xa5e>
 8008fbc:	4633      	mov	r3, r6
 8008fbe:	461e      	mov	r6, r3
 8008fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fc4:	2a30      	cmp	r2, #48	@ 0x30
 8008fc6:	d0fa      	beq.n	8008fbe <_dtoa_r+0xb06>
 8008fc8:	e5c2      	b.n	8008b50 <_dtoa_r+0x698>
 8008fca:	459a      	cmp	sl, r3
 8008fcc:	d1a4      	bne.n	8008f18 <_dtoa_r+0xa60>
 8008fce:	9b04      	ldr	r3, [sp, #16]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	9304      	str	r3, [sp, #16]
 8008fd4:	2331      	movs	r3, #49	@ 0x31
 8008fd6:	f88a 3000 	strb.w	r3, [sl]
 8008fda:	e5b9      	b.n	8008b50 <_dtoa_r+0x698>
 8008fdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800903c <_dtoa_r+0xb84>
 8008fe2:	b11b      	cbz	r3, 8008fec <_dtoa_r+0xb34>
 8008fe4:	f10a 0308 	add.w	r3, sl, #8
 8008fe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	4650      	mov	r0, sl
 8008fee:	b019      	add	sp, #100	@ 0x64
 8008ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	f77f ae37 	ble.w	8008c6a <_dtoa_r+0x7b2>
 8008ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009000:	2001      	movs	r0, #1
 8009002:	e655      	b.n	8008cb0 <_dtoa_r+0x7f8>
 8009004:	9b00      	ldr	r3, [sp, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	f77f aed6 	ble.w	8008db8 <_dtoa_r+0x900>
 800900c:	4656      	mov	r6, sl
 800900e:	4621      	mov	r1, r4
 8009010:	4648      	mov	r0, r9
 8009012:	f7ff f9c8 	bl	80083a6 <quorem>
 8009016:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800901a:	f806 8b01 	strb.w	r8, [r6], #1
 800901e:	9b00      	ldr	r3, [sp, #0]
 8009020:	eba6 020a 	sub.w	r2, r6, sl
 8009024:	4293      	cmp	r3, r2
 8009026:	ddb3      	ble.n	8008f90 <_dtoa_r+0xad8>
 8009028:	4649      	mov	r1, r9
 800902a:	2300      	movs	r3, #0
 800902c:	220a      	movs	r2, #10
 800902e:	4658      	mov	r0, fp
 8009030:	f000 f968 	bl	8009304 <__multadd>
 8009034:	4681      	mov	r9, r0
 8009036:	e7ea      	b.n	800900e <_dtoa_r+0xb56>
 8009038:	0800a10c 	.word	0x0800a10c
 800903c:	0800a090 	.word	0x0800a090

08009040 <_free_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4605      	mov	r5, r0
 8009044:	2900      	cmp	r1, #0
 8009046:	d041      	beq.n	80090cc <_free_r+0x8c>
 8009048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800904c:	1f0c      	subs	r4, r1, #4
 800904e:	2b00      	cmp	r3, #0
 8009050:	bfb8      	it	lt
 8009052:	18e4      	addlt	r4, r4, r3
 8009054:	f000 f8e8 	bl	8009228 <__malloc_lock>
 8009058:	4a1d      	ldr	r2, [pc, #116]	@ (80090d0 <_free_r+0x90>)
 800905a:	6813      	ldr	r3, [r2, #0]
 800905c:	b933      	cbnz	r3, 800906c <_free_r+0x2c>
 800905e:	6063      	str	r3, [r4, #4]
 8009060:	6014      	str	r4, [r2, #0]
 8009062:	4628      	mov	r0, r5
 8009064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009068:	f000 b8e4 	b.w	8009234 <__malloc_unlock>
 800906c:	42a3      	cmp	r3, r4
 800906e:	d908      	bls.n	8009082 <_free_r+0x42>
 8009070:	6820      	ldr	r0, [r4, #0]
 8009072:	1821      	adds	r1, r4, r0
 8009074:	428b      	cmp	r3, r1
 8009076:	bf01      	itttt	eq
 8009078:	6819      	ldreq	r1, [r3, #0]
 800907a:	685b      	ldreq	r3, [r3, #4]
 800907c:	1809      	addeq	r1, r1, r0
 800907e:	6021      	streq	r1, [r4, #0]
 8009080:	e7ed      	b.n	800905e <_free_r+0x1e>
 8009082:	461a      	mov	r2, r3
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	b10b      	cbz	r3, 800908c <_free_r+0x4c>
 8009088:	42a3      	cmp	r3, r4
 800908a:	d9fa      	bls.n	8009082 <_free_r+0x42>
 800908c:	6811      	ldr	r1, [r2, #0]
 800908e:	1850      	adds	r0, r2, r1
 8009090:	42a0      	cmp	r0, r4
 8009092:	d10b      	bne.n	80090ac <_free_r+0x6c>
 8009094:	6820      	ldr	r0, [r4, #0]
 8009096:	4401      	add	r1, r0
 8009098:	1850      	adds	r0, r2, r1
 800909a:	4283      	cmp	r3, r0
 800909c:	6011      	str	r1, [r2, #0]
 800909e:	d1e0      	bne.n	8009062 <_free_r+0x22>
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	6053      	str	r3, [r2, #4]
 80090a6:	4408      	add	r0, r1
 80090a8:	6010      	str	r0, [r2, #0]
 80090aa:	e7da      	b.n	8009062 <_free_r+0x22>
 80090ac:	d902      	bls.n	80090b4 <_free_r+0x74>
 80090ae:	230c      	movs	r3, #12
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	e7d6      	b.n	8009062 <_free_r+0x22>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	1821      	adds	r1, r4, r0
 80090b8:	428b      	cmp	r3, r1
 80090ba:	bf04      	itt	eq
 80090bc:	6819      	ldreq	r1, [r3, #0]
 80090be:	685b      	ldreq	r3, [r3, #4]
 80090c0:	6063      	str	r3, [r4, #4]
 80090c2:	bf04      	itt	eq
 80090c4:	1809      	addeq	r1, r1, r0
 80090c6:	6021      	streq	r1, [r4, #0]
 80090c8:	6054      	str	r4, [r2, #4]
 80090ca:	e7ca      	b.n	8009062 <_free_r+0x22>
 80090cc:	bd38      	pop	{r3, r4, r5, pc}
 80090ce:	bf00      	nop
 80090d0:	200005e0 	.word	0x200005e0

080090d4 <malloc>:
 80090d4:	4b02      	ldr	r3, [pc, #8]	@ (80090e0 <malloc+0xc>)
 80090d6:	4601      	mov	r1, r0
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	f000 b825 	b.w	8009128 <_malloc_r>
 80090de:	bf00      	nop
 80090e0:	20000018 	.word	0x20000018

080090e4 <sbrk_aligned>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009124 <sbrk_aligned+0x40>)
 80090e8:	460c      	mov	r4, r1
 80090ea:	6831      	ldr	r1, [r6, #0]
 80090ec:	4605      	mov	r5, r0
 80090ee:	b911      	cbnz	r1, 80090f6 <sbrk_aligned+0x12>
 80090f0:	f000 fe9a 	bl	8009e28 <_sbrk_r>
 80090f4:	6030      	str	r0, [r6, #0]
 80090f6:	4621      	mov	r1, r4
 80090f8:	4628      	mov	r0, r5
 80090fa:	f000 fe95 	bl	8009e28 <_sbrk_r>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	d103      	bne.n	800910a <sbrk_aligned+0x26>
 8009102:	f04f 34ff 	mov.w	r4, #4294967295
 8009106:	4620      	mov	r0, r4
 8009108:	bd70      	pop	{r4, r5, r6, pc}
 800910a:	1cc4      	adds	r4, r0, #3
 800910c:	f024 0403 	bic.w	r4, r4, #3
 8009110:	42a0      	cmp	r0, r4
 8009112:	d0f8      	beq.n	8009106 <sbrk_aligned+0x22>
 8009114:	1a21      	subs	r1, r4, r0
 8009116:	4628      	mov	r0, r5
 8009118:	f000 fe86 	bl	8009e28 <_sbrk_r>
 800911c:	3001      	adds	r0, #1
 800911e:	d1f2      	bne.n	8009106 <sbrk_aligned+0x22>
 8009120:	e7ef      	b.n	8009102 <sbrk_aligned+0x1e>
 8009122:	bf00      	nop
 8009124:	200005dc 	.word	0x200005dc

08009128 <_malloc_r>:
 8009128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800912c:	1ccd      	adds	r5, r1, #3
 800912e:	f025 0503 	bic.w	r5, r5, #3
 8009132:	3508      	adds	r5, #8
 8009134:	2d0c      	cmp	r5, #12
 8009136:	bf38      	it	cc
 8009138:	250c      	movcc	r5, #12
 800913a:	2d00      	cmp	r5, #0
 800913c:	4606      	mov	r6, r0
 800913e:	db01      	blt.n	8009144 <_malloc_r+0x1c>
 8009140:	42a9      	cmp	r1, r5
 8009142:	d904      	bls.n	800914e <_malloc_r+0x26>
 8009144:	230c      	movs	r3, #12
 8009146:	6033      	str	r3, [r6, #0]
 8009148:	2000      	movs	r0, #0
 800914a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800914e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009224 <_malloc_r+0xfc>
 8009152:	f000 f869 	bl	8009228 <__malloc_lock>
 8009156:	f8d8 3000 	ldr.w	r3, [r8]
 800915a:	461c      	mov	r4, r3
 800915c:	bb44      	cbnz	r4, 80091b0 <_malloc_r+0x88>
 800915e:	4629      	mov	r1, r5
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff ffbf 	bl	80090e4 <sbrk_aligned>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	4604      	mov	r4, r0
 800916a:	d158      	bne.n	800921e <_malloc_r+0xf6>
 800916c:	f8d8 4000 	ldr.w	r4, [r8]
 8009170:	4627      	mov	r7, r4
 8009172:	2f00      	cmp	r7, #0
 8009174:	d143      	bne.n	80091fe <_malloc_r+0xd6>
 8009176:	2c00      	cmp	r4, #0
 8009178:	d04b      	beq.n	8009212 <_malloc_r+0xea>
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	4639      	mov	r1, r7
 800917e:	4630      	mov	r0, r6
 8009180:	eb04 0903 	add.w	r9, r4, r3
 8009184:	f000 fe50 	bl	8009e28 <_sbrk_r>
 8009188:	4581      	cmp	r9, r0
 800918a:	d142      	bne.n	8009212 <_malloc_r+0xea>
 800918c:	6821      	ldr	r1, [r4, #0]
 800918e:	1a6d      	subs	r5, r5, r1
 8009190:	4629      	mov	r1, r5
 8009192:	4630      	mov	r0, r6
 8009194:	f7ff ffa6 	bl	80090e4 <sbrk_aligned>
 8009198:	3001      	adds	r0, #1
 800919a:	d03a      	beq.n	8009212 <_malloc_r+0xea>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	442b      	add	r3, r5
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	f8d8 3000 	ldr.w	r3, [r8]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	bb62      	cbnz	r2, 8009204 <_malloc_r+0xdc>
 80091aa:	f8c8 7000 	str.w	r7, [r8]
 80091ae:	e00f      	b.n	80091d0 <_malloc_r+0xa8>
 80091b0:	6822      	ldr	r2, [r4, #0]
 80091b2:	1b52      	subs	r2, r2, r5
 80091b4:	d420      	bmi.n	80091f8 <_malloc_r+0xd0>
 80091b6:	2a0b      	cmp	r2, #11
 80091b8:	d917      	bls.n	80091ea <_malloc_r+0xc2>
 80091ba:	1961      	adds	r1, r4, r5
 80091bc:	42a3      	cmp	r3, r4
 80091be:	6025      	str	r5, [r4, #0]
 80091c0:	bf18      	it	ne
 80091c2:	6059      	strne	r1, [r3, #4]
 80091c4:	6863      	ldr	r3, [r4, #4]
 80091c6:	bf08      	it	eq
 80091c8:	f8c8 1000 	streq.w	r1, [r8]
 80091cc:	5162      	str	r2, [r4, r5]
 80091ce:	604b      	str	r3, [r1, #4]
 80091d0:	4630      	mov	r0, r6
 80091d2:	f000 f82f 	bl	8009234 <__malloc_unlock>
 80091d6:	f104 000b 	add.w	r0, r4, #11
 80091da:	1d23      	adds	r3, r4, #4
 80091dc:	f020 0007 	bic.w	r0, r0, #7
 80091e0:	1ac2      	subs	r2, r0, r3
 80091e2:	bf1c      	itt	ne
 80091e4:	1a1b      	subne	r3, r3, r0
 80091e6:	50a3      	strne	r3, [r4, r2]
 80091e8:	e7af      	b.n	800914a <_malloc_r+0x22>
 80091ea:	6862      	ldr	r2, [r4, #4]
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	bf0c      	ite	eq
 80091f0:	f8c8 2000 	streq.w	r2, [r8]
 80091f4:	605a      	strne	r2, [r3, #4]
 80091f6:	e7eb      	b.n	80091d0 <_malloc_r+0xa8>
 80091f8:	4623      	mov	r3, r4
 80091fa:	6864      	ldr	r4, [r4, #4]
 80091fc:	e7ae      	b.n	800915c <_malloc_r+0x34>
 80091fe:	463c      	mov	r4, r7
 8009200:	687f      	ldr	r7, [r7, #4]
 8009202:	e7b6      	b.n	8009172 <_malloc_r+0x4a>
 8009204:	461a      	mov	r2, r3
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	42a3      	cmp	r3, r4
 800920a:	d1fb      	bne.n	8009204 <_malloc_r+0xdc>
 800920c:	2300      	movs	r3, #0
 800920e:	6053      	str	r3, [r2, #4]
 8009210:	e7de      	b.n	80091d0 <_malloc_r+0xa8>
 8009212:	230c      	movs	r3, #12
 8009214:	6033      	str	r3, [r6, #0]
 8009216:	4630      	mov	r0, r6
 8009218:	f000 f80c 	bl	8009234 <__malloc_unlock>
 800921c:	e794      	b.n	8009148 <_malloc_r+0x20>
 800921e:	6005      	str	r5, [r0, #0]
 8009220:	e7d6      	b.n	80091d0 <_malloc_r+0xa8>
 8009222:	bf00      	nop
 8009224:	200005e0 	.word	0x200005e0

08009228 <__malloc_lock>:
 8009228:	4801      	ldr	r0, [pc, #4]	@ (8009230 <__malloc_lock+0x8>)
 800922a:	f7ff b8ba 	b.w	80083a2 <__retarget_lock_acquire_recursive>
 800922e:	bf00      	nop
 8009230:	200005d8 	.word	0x200005d8

08009234 <__malloc_unlock>:
 8009234:	4801      	ldr	r0, [pc, #4]	@ (800923c <__malloc_unlock+0x8>)
 8009236:	f7ff b8b5 	b.w	80083a4 <__retarget_lock_release_recursive>
 800923a:	bf00      	nop
 800923c:	200005d8 	.word	0x200005d8

08009240 <_Balloc>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	69c6      	ldr	r6, [r0, #28]
 8009244:	4604      	mov	r4, r0
 8009246:	460d      	mov	r5, r1
 8009248:	b976      	cbnz	r6, 8009268 <_Balloc+0x28>
 800924a:	2010      	movs	r0, #16
 800924c:	f7ff ff42 	bl	80090d4 <malloc>
 8009250:	4602      	mov	r2, r0
 8009252:	61e0      	str	r0, [r4, #28]
 8009254:	b920      	cbnz	r0, 8009260 <_Balloc+0x20>
 8009256:	4b18      	ldr	r3, [pc, #96]	@ (80092b8 <_Balloc+0x78>)
 8009258:	4818      	ldr	r0, [pc, #96]	@ (80092bc <_Balloc+0x7c>)
 800925a:	216b      	movs	r1, #107	@ 0x6b
 800925c:	f000 fe02 	bl	8009e64 <__assert_func>
 8009260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009264:	6006      	str	r6, [r0, #0]
 8009266:	60c6      	str	r6, [r0, #12]
 8009268:	69e6      	ldr	r6, [r4, #28]
 800926a:	68f3      	ldr	r3, [r6, #12]
 800926c:	b183      	cbz	r3, 8009290 <_Balloc+0x50>
 800926e:	69e3      	ldr	r3, [r4, #28]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009276:	b9b8      	cbnz	r0, 80092a8 <_Balloc+0x68>
 8009278:	2101      	movs	r1, #1
 800927a:	fa01 f605 	lsl.w	r6, r1, r5
 800927e:	1d72      	adds	r2, r6, #5
 8009280:	0092      	lsls	r2, r2, #2
 8009282:	4620      	mov	r0, r4
 8009284:	f000 fe0c 	bl	8009ea0 <_calloc_r>
 8009288:	b160      	cbz	r0, 80092a4 <_Balloc+0x64>
 800928a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800928e:	e00e      	b.n	80092ae <_Balloc+0x6e>
 8009290:	2221      	movs	r2, #33	@ 0x21
 8009292:	2104      	movs	r1, #4
 8009294:	4620      	mov	r0, r4
 8009296:	f000 fe03 	bl	8009ea0 <_calloc_r>
 800929a:	69e3      	ldr	r3, [r4, #28]
 800929c:	60f0      	str	r0, [r6, #12]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e4      	bne.n	800926e <_Balloc+0x2e>
 80092a4:	2000      	movs	r0, #0
 80092a6:	bd70      	pop	{r4, r5, r6, pc}
 80092a8:	6802      	ldr	r2, [r0, #0]
 80092aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092ae:	2300      	movs	r3, #0
 80092b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092b4:	e7f7      	b.n	80092a6 <_Balloc+0x66>
 80092b6:	bf00      	nop
 80092b8:	0800a09d 	.word	0x0800a09d
 80092bc:	0800a11d 	.word	0x0800a11d

080092c0 <_Bfree>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	69c6      	ldr	r6, [r0, #28]
 80092c4:	4605      	mov	r5, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	b976      	cbnz	r6, 80092e8 <_Bfree+0x28>
 80092ca:	2010      	movs	r0, #16
 80092cc:	f7ff ff02 	bl	80090d4 <malloc>
 80092d0:	4602      	mov	r2, r0
 80092d2:	61e8      	str	r0, [r5, #28]
 80092d4:	b920      	cbnz	r0, 80092e0 <_Bfree+0x20>
 80092d6:	4b09      	ldr	r3, [pc, #36]	@ (80092fc <_Bfree+0x3c>)
 80092d8:	4809      	ldr	r0, [pc, #36]	@ (8009300 <_Bfree+0x40>)
 80092da:	218f      	movs	r1, #143	@ 0x8f
 80092dc:	f000 fdc2 	bl	8009e64 <__assert_func>
 80092e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092e4:	6006      	str	r6, [r0, #0]
 80092e6:	60c6      	str	r6, [r0, #12]
 80092e8:	b13c      	cbz	r4, 80092fa <_Bfree+0x3a>
 80092ea:	69eb      	ldr	r3, [r5, #28]
 80092ec:	6862      	ldr	r2, [r4, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092f4:	6021      	str	r1, [r4, #0]
 80092f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092fa:	bd70      	pop	{r4, r5, r6, pc}
 80092fc:	0800a09d 	.word	0x0800a09d
 8009300:	0800a11d 	.word	0x0800a11d

08009304 <__multadd>:
 8009304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009308:	690d      	ldr	r5, [r1, #16]
 800930a:	4607      	mov	r7, r0
 800930c:	460c      	mov	r4, r1
 800930e:	461e      	mov	r6, r3
 8009310:	f101 0c14 	add.w	ip, r1, #20
 8009314:	2000      	movs	r0, #0
 8009316:	f8dc 3000 	ldr.w	r3, [ip]
 800931a:	b299      	uxth	r1, r3
 800931c:	fb02 6101 	mla	r1, r2, r1, r6
 8009320:	0c1e      	lsrs	r6, r3, #16
 8009322:	0c0b      	lsrs	r3, r1, #16
 8009324:	fb02 3306 	mla	r3, r2, r6, r3
 8009328:	b289      	uxth	r1, r1
 800932a:	3001      	adds	r0, #1
 800932c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009330:	4285      	cmp	r5, r0
 8009332:	f84c 1b04 	str.w	r1, [ip], #4
 8009336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800933a:	dcec      	bgt.n	8009316 <__multadd+0x12>
 800933c:	b30e      	cbz	r6, 8009382 <__multadd+0x7e>
 800933e:	68a3      	ldr	r3, [r4, #8]
 8009340:	42ab      	cmp	r3, r5
 8009342:	dc19      	bgt.n	8009378 <__multadd+0x74>
 8009344:	6861      	ldr	r1, [r4, #4]
 8009346:	4638      	mov	r0, r7
 8009348:	3101      	adds	r1, #1
 800934a:	f7ff ff79 	bl	8009240 <_Balloc>
 800934e:	4680      	mov	r8, r0
 8009350:	b928      	cbnz	r0, 800935e <__multadd+0x5a>
 8009352:	4602      	mov	r2, r0
 8009354:	4b0c      	ldr	r3, [pc, #48]	@ (8009388 <__multadd+0x84>)
 8009356:	480d      	ldr	r0, [pc, #52]	@ (800938c <__multadd+0x88>)
 8009358:	21ba      	movs	r1, #186	@ 0xba
 800935a:	f000 fd83 	bl	8009e64 <__assert_func>
 800935e:	6922      	ldr	r2, [r4, #16]
 8009360:	3202      	adds	r2, #2
 8009362:	f104 010c 	add.w	r1, r4, #12
 8009366:	0092      	lsls	r2, r2, #2
 8009368:	300c      	adds	r0, #12
 800936a:	f000 fd6d 	bl	8009e48 <memcpy>
 800936e:	4621      	mov	r1, r4
 8009370:	4638      	mov	r0, r7
 8009372:	f7ff ffa5 	bl	80092c0 <_Bfree>
 8009376:	4644      	mov	r4, r8
 8009378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800937c:	3501      	adds	r5, #1
 800937e:	615e      	str	r6, [r3, #20]
 8009380:	6125      	str	r5, [r4, #16]
 8009382:	4620      	mov	r0, r4
 8009384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009388:	0800a10c 	.word	0x0800a10c
 800938c:	0800a11d 	.word	0x0800a11d

08009390 <__hi0bits>:
 8009390:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009394:	4603      	mov	r3, r0
 8009396:	bf36      	itet	cc
 8009398:	0403      	lslcc	r3, r0, #16
 800939a:	2000      	movcs	r0, #0
 800939c:	2010      	movcc	r0, #16
 800939e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093a2:	bf3c      	itt	cc
 80093a4:	021b      	lslcc	r3, r3, #8
 80093a6:	3008      	addcc	r0, #8
 80093a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093ac:	bf3c      	itt	cc
 80093ae:	011b      	lslcc	r3, r3, #4
 80093b0:	3004      	addcc	r0, #4
 80093b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093b6:	bf3c      	itt	cc
 80093b8:	009b      	lslcc	r3, r3, #2
 80093ba:	3002      	addcc	r0, #2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	db05      	blt.n	80093cc <__hi0bits+0x3c>
 80093c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093c4:	f100 0001 	add.w	r0, r0, #1
 80093c8:	bf08      	it	eq
 80093ca:	2020      	moveq	r0, #32
 80093cc:	4770      	bx	lr

080093ce <__lo0bits>:
 80093ce:	6803      	ldr	r3, [r0, #0]
 80093d0:	4602      	mov	r2, r0
 80093d2:	f013 0007 	ands.w	r0, r3, #7
 80093d6:	d00b      	beq.n	80093f0 <__lo0bits+0x22>
 80093d8:	07d9      	lsls	r1, r3, #31
 80093da:	d421      	bmi.n	8009420 <__lo0bits+0x52>
 80093dc:	0798      	lsls	r0, r3, #30
 80093de:	bf49      	itett	mi
 80093e0:	085b      	lsrmi	r3, r3, #1
 80093e2:	089b      	lsrpl	r3, r3, #2
 80093e4:	2001      	movmi	r0, #1
 80093e6:	6013      	strmi	r3, [r2, #0]
 80093e8:	bf5c      	itt	pl
 80093ea:	6013      	strpl	r3, [r2, #0]
 80093ec:	2002      	movpl	r0, #2
 80093ee:	4770      	bx	lr
 80093f0:	b299      	uxth	r1, r3
 80093f2:	b909      	cbnz	r1, 80093f8 <__lo0bits+0x2a>
 80093f4:	0c1b      	lsrs	r3, r3, #16
 80093f6:	2010      	movs	r0, #16
 80093f8:	b2d9      	uxtb	r1, r3
 80093fa:	b909      	cbnz	r1, 8009400 <__lo0bits+0x32>
 80093fc:	3008      	adds	r0, #8
 80093fe:	0a1b      	lsrs	r3, r3, #8
 8009400:	0719      	lsls	r1, r3, #28
 8009402:	bf04      	itt	eq
 8009404:	091b      	lsreq	r3, r3, #4
 8009406:	3004      	addeq	r0, #4
 8009408:	0799      	lsls	r1, r3, #30
 800940a:	bf04      	itt	eq
 800940c:	089b      	lsreq	r3, r3, #2
 800940e:	3002      	addeq	r0, #2
 8009410:	07d9      	lsls	r1, r3, #31
 8009412:	d403      	bmi.n	800941c <__lo0bits+0x4e>
 8009414:	085b      	lsrs	r3, r3, #1
 8009416:	f100 0001 	add.w	r0, r0, #1
 800941a:	d003      	beq.n	8009424 <__lo0bits+0x56>
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	4770      	bx	lr
 8009420:	2000      	movs	r0, #0
 8009422:	4770      	bx	lr
 8009424:	2020      	movs	r0, #32
 8009426:	4770      	bx	lr

08009428 <__i2b>:
 8009428:	b510      	push	{r4, lr}
 800942a:	460c      	mov	r4, r1
 800942c:	2101      	movs	r1, #1
 800942e:	f7ff ff07 	bl	8009240 <_Balloc>
 8009432:	4602      	mov	r2, r0
 8009434:	b928      	cbnz	r0, 8009442 <__i2b+0x1a>
 8009436:	4b05      	ldr	r3, [pc, #20]	@ (800944c <__i2b+0x24>)
 8009438:	4805      	ldr	r0, [pc, #20]	@ (8009450 <__i2b+0x28>)
 800943a:	f240 1145 	movw	r1, #325	@ 0x145
 800943e:	f000 fd11 	bl	8009e64 <__assert_func>
 8009442:	2301      	movs	r3, #1
 8009444:	6144      	str	r4, [r0, #20]
 8009446:	6103      	str	r3, [r0, #16]
 8009448:	bd10      	pop	{r4, pc}
 800944a:	bf00      	nop
 800944c:	0800a10c 	.word	0x0800a10c
 8009450:	0800a11d 	.word	0x0800a11d

08009454 <__multiply>:
 8009454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009458:	4614      	mov	r4, r2
 800945a:	690a      	ldr	r2, [r1, #16]
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	429a      	cmp	r2, r3
 8009460:	bfa8      	it	ge
 8009462:	4623      	movge	r3, r4
 8009464:	460f      	mov	r7, r1
 8009466:	bfa4      	itt	ge
 8009468:	460c      	movge	r4, r1
 800946a:	461f      	movge	r7, r3
 800946c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009470:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009474:	68a3      	ldr	r3, [r4, #8]
 8009476:	6861      	ldr	r1, [r4, #4]
 8009478:	eb0a 0609 	add.w	r6, sl, r9
 800947c:	42b3      	cmp	r3, r6
 800947e:	b085      	sub	sp, #20
 8009480:	bfb8      	it	lt
 8009482:	3101      	addlt	r1, #1
 8009484:	f7ff fedc 	bl	8009240 <_Balloc>
 8009488:	b930      	cbnz	r0, 8009498 <__multiply+0x44>
 800948a:	4602      	mov	r2, r0
 800948c:	4b44      	ldr	r3, [pc, #272]	@ (80095a0 <__multiply+0x14c>)
 800948e:	4845      	ldr	r0, [pc, #276]	@ (80095a4 <__multiply+0x150>)
 8009490:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009494:	f000 fce6 	bl	8009e64 <__assert_func>
 8009498:	f100 0514 	add.w	r5, r0, #20
 800949c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094a0:	462b      	mov	r3, r5
 80094a2:	2200      	movs	r2, #0
 80094a4:	4543      	cmp	r3, r8
 80094a6:	d321      	bcc.n	80094ec <__multiply+0x98>
 80094a8:	f107 0114 	add.w	r1, r7, #20
 80094ac:	f104 0214 	add.w	r2, r4, #20
 80094b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80094b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80094b8:	9302      	str	r3, [sp, #8]
 80094ba:	1b13      	subs	r3, r2, r4
 80094bc:	3b15      	subs	r3, #21
 80094be:	f023 0303 	bic.w	r3, r3, #3
 80094c2:	3304      	adds	r3, #4
 80094c4:	f104 0715 	add.w	r7, r4, #21
 80094c8:	42ba      	cmp	r2, r7
 80094ca:	bf38      	it	cc
 80094cc:	2304      	movcc	r3, #4
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	9b02      	ldr	r3, [sp, #8]
 80094d2:	9103      	str	r1, [sp, #12]
 80094d4:	428b      	cmp	r3, r1
 80094d6:	d80c      	bhi.n	80094f2 <__multiply+0x9e>
 80094d8:	2e00      	cmp	r6, #0
 80094da:	dd03      	ble.n	80094e4 <__multiply+0x90>
 80094dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d05b      	beq.n	800959c <__multiply+0x148>
 80094e4:	6106      	str	r6, [r0, #16]
 80094e6:	b005      	add	sp, #20
 80094e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ec:	f843 2b04 	str.w	r2, [r3], #4
 80094f0:	e7d8      	b.n	80094a4 <__multiply+0x50>
 80094f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80094f6:	f1ba 0f00 	cmp.w	sl, #0
 80094fa:	d024      	beq.n	8009546 <__multiply+0xf2>
 80094fc:	f104 0e14 	add.w	lr, r4, #20
 8009500:	46a9      	mov	r9, r5
 8009502:	f04f 0c00 	mov.w	ip, #0
 8009506:	f85e 7b04 	ldr.w	r7, [lr], #4
 800950a:	f8d9 3000 	ldr.w	r3, [r9]
 800950e:	fa1f fb87 	uxth.w	fp, r7
 8009512:	b29b      	uxth	r3, r3
 8009514:	fb0a 330b 	mla	r3, sl, fp, r3
 8009518:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800951c:	f8d9 7000 	ldr.w	r7, [r9]
 8009520:	4463      	add	r3, ip
 8009522:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009526:	fb0a c70b 	mla	r7, sl, fp, ip
 800952a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800952e:	b29b      	uxth	r3, r3
 8009530:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009534:	4572      	cmp	r2, lr
 8009536:	f849 3b04 	str.w	r3, [r9], #4
 800953a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800953e:	d8e2      	bhi.n	8009506 <__multiply+0xb2>
 8009540:	9b01      	ldr	r3, [sp, #4]
 8009542:	f845 c003 	str.w	ip, [r5, r3]
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800954c:	3104      	adds	r1, #4
 800954e:	f1b9 0f00 	cmp.w	r9, #0
 8009552:	d021      	beq.n	8009598 <__multiply+0x144>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	f104 0c14 	add.w	ip, r4, #20
 800955a:	46ae      	mov	lr, r5
 800955c:	f04f 0a00 	mov.w	sl, #0
 8009560:	f8bc b000 	ldrh.w	fp, [ip]
 8009564:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009568:	fb09 770b 	mla	r7, r9, fp, r7
 800956c:	4457      	add	r7, sl
 800956e:	b29b      	uxth	r3, r3
 8009570:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009574:	f84e 3b04 	str.w	r3, [lr], #4
 8009578:	f85c 3b04 	ldr.w	r3, [ip], #4
 800957c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009580:	f8be 3000 	ldrh.w	r3, [lr]
 8009584:	fb09 330a 	mla	r3, r9, sl, r3
 8009588:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800958c:	4562      	cmp	r2, ip
 800958e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009592:	d8e5      	bhi.n	8009560 <__multiply+0x10c>
 8009594:	9f01      	ldr	r7, [sp, #4]
 8009596:	51eb      	str	r3, [r5, r7]
 8009598:	3504      	adds	r5, #4
 800959a:	e799      	b.n	80094d0 <__multiply+0x7c>
 800959c:	3e01      	subs	r6, #1
 800959e:	e79b      	b.n	80094d8 <__multiply+0x84>
 80095a0:	0800a10c 	.word	0x0800a10c
 80095a4:	0800a11d 	.word	0x0800a11d

080095a8 <__pow5mult>:
 80095a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095ac:	4615      	mov	r5, r2
 80095ae:	f012 0203 	ands.w	r2, r2, #3
 80095b2:	4607      	mov	r7, r0
 80095b4:	460e      	mov	r6, r1
 80095b6:	d007      	beq.n	80095c8 <__pow5mult+0x20>
 80095b8:	4c25      	ldr	r4, [pc, #148]	@ (8009650 <__pow5mult+0xa8>)
 80095ba:	3a01      	subs	r2, #1
 80095bc:	2300      	movs	r3, #0
 80095be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095c2:	f7ff fe9f 	bl	8009304 <__multadd>
 80095c6:	4606      	mov	r6, r0
 80095c8:	10ad      	asrs	r5, r5, #2
 80095ca:	d03d      	beq.n	8009648 <__pow5mult+0xa0>
 80095cc:	69fc      	ldr	r4, [r7, #28]
 80095ce:	b97c      	cbnz	r4, 80095f0 <__pow5mult+0x48>
 80095d0:	2010      	movs	r0, #16
 80095d2:	f7ff fd7f 	bl	80090d4 <malloc>
 80095d6:	4602      	mov	r2, r0
 80095d8:	61f8      	str	r0, [r7, #28]
 80095da:	b928      	cbnz	r0, 80095e8 <__pow5mult+0x40>
 80095dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009654 <__pow5mult+0xac>)
 80095de:	481e      	ldr	r0, [pc, #120]	@ (8009658 <__pow5mult+0xb0>)
 80095e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80095e4:	f000 fc3e 	bl	8009e64 <__assert_func>
 80095e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095ec:	6004      	str	r4, [r0, #0]
 80095ee:	60c4      	str	r4, [r0, #12]
 80095f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80095f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095f8:	b94c      	cbnz	r4, 800960e <__pow5mult+0x66>
 80095fa:	f240 2171 	movw	r1, #625	@ 0x271
 80095fe:	4638      	mov	r0, r7
 8009600:	f7ff ff12 	bl	8009428 <__i2b>
 8009604:	2300      	movs	r3, #0
 8009606:	f8c8 0008 	str.w	r0, [r8, #8]
 800960a:	4604      	mov	r4, r0
 800960c:	6003      	str	r3, [r0, #0]
 800960e:	f04f 0900 	mov.w	r9, #0
 8009612:	07eb      	lsls	r3, r5, #31
 8009614:	d50a      	bpl.n	800962c <__pow5mult+0x84>
 8009616:	4631      	mov	r1, r6
 8009618:	4622      	mov	r2, r4
 800961a:	4638      	mov	r0, r7
 800961c:	f7ff ff1a 	bl	8009454 <__multiply>
 8009620:	4631      	mov	r1, r6
 8009622:	4680      	mov	r8, r0
 8009624:	4638      	mov	r0, r7
 8009626:	f7ff fe4b 	bl	80092c0 <_Bfree>
 800962a:	4646      	mov	r6, r8
 800962c:	106d      	asrs	r5, r5, #1
 800962e:	d00b      	beq.n	8009648 <__pow5mult+0xa0>
 8009630:	6820      	ldr	r0, [r4, #0]
 8009632:	b938      	cbnz	r0, 8009644 <__pow5mult+0x9c>
 8009634:	4622      	mov	r2, r4
 8009636:	4621      	mov	r1, r4
 8009638:	4638      	mov	r0, r7
 800963a:	f7ff ff0b 	bl	8009454 <__multiply>
 800963e:	6020      	str	r0, [r4, #0]
 8009640:	f8c0 9000 	str.w	r9, [r0]
 8009644:	4604      	mov	r4, r0
 8009646:	e7e4      	b.n	8009612 <__pow5mult+0x6a>
 8009648:	4630      	mov	r0, r6
 800964a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800964e:	bf00      	nop
 8009650:	0800a178 	.word	0x0800a178
 8009654:	0800a09d 	.word	0x0800a09d
 8009658:	0800a11d 	.word	0x0800a11d

0800965c <__lshift>:
 800965c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009660:	460c      	mov	r4, r1
 8009662:	6849      	ldr	r1, [r1, #4]
 8009664:	6923      	ldr	r3, [r4, #16]
 8009666:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800966a:	68a3      	ldr	r3, [r4, #8]
 800966c:	4607      	mov	r7, r0
 800966e:	4691      	mov	r9, r2
 8009670:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009674:	f108 0601 	add.w	r6, r8, #1
 8009678:	42b3      	cmp	r3, r6
 800967a:	db0b      	blt.n	8009694 <__lshift+0x38>
 800967c:	4638      	mov	r0, r7
 800967e:	f7ff fddf 	bl	8009240 <_Balloc>
 8009682:	4605      	mov	r5, r0
 8009684:	b948      	cbnz	r0, 800969a <__lshift+0x3e>
 8009686:	4602      	mov	r2, r0
 8009688:	4b28      	ldr	r3, [pc, #160]	@ (800972c <__lshift+0xd0>)
 800968a:	4829      	ldr	r0, [pc, #164]	@ (8009730 <__lshift+0xd4>)
 800968c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009690:	f000 fbe8 	bl	8009e64 <__assert_func>
 8009694:	3101      	adds	r1, #1
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	e7ee      	b.n	8009678 <__lshift+0x1c>
 800969a:	2300      	movs	r3, #0
 800969c:	f100 0114 	add.w	r1, r0, #20
 80096a0:	f100 0210 	add.w	r2, r0, #16
 80096a4:	4618      	mov	r0, r3
 80096a6:	4553      	cmp	r3, sl
 80096a8:	db33      	blt.n	8009712 <__lshift+0xb6>
 80096aa:	6920      	ldr	r0, [r4, #16]
 80096ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096b0:	f104 0314 	add.w	r3, r4, #20
 80096b4:	f019 091f 	ands.w	r9, r9, #31
 80096b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096c0:	d02b      	beq.n	800971a <__lshift+0xbe>
 80096c2:	f1c9 0e20 	rsb	lr, r9, #32
 80096c6:	468a      	mov	sl, r1
 80096c8:	2200      	movs	r2, #0
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	fa00 f009 	lsl.w	r0, r0, r9
 80096d0:	4310      	orrs	r0, r2
 80096d2:	f84a 0b04 	str.w	r0, [sl], #4
 80096d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096da:	459c      	cmp	ip, r3
 80096dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80096e0:	d8f3      	bhi.n	80096ca <__lshift+0x6e>
 80096e2:	ebac 0304 	sub.w	r3, ip, r4
 80096e6:	3b15      	subs	r3, #21
 80096e8:	f023 0303 	bic.w	r3, r3, #3
 80096ec:	3304      	adds	r3, #4
 80096ee:	f104 0015 	add.w	r0, r4, #21
 80096f2:	4584      	cmp	ip, r0
 80096f4:	bf38      	it	cc
 80096f6:	2304      	movcc	r3, #4
 80096f8:	50ca      	str	r2, [r1, r3]
 80096fa:	b10a      	cbz	r2, 8009700 <__lshift+0xa4>
 80096fc:	f108 0602 	add.w	r6, r8, #2
 8009700:	3e01      	subs	r6, #1
 8009702:	4638      	mov	r0, r7
 8009704:	612e      	str	r6, [r5, #16]
 8009706:	4621      	mov	r1, r4
 8009708:	f7ff fdda 	bl	80092c0 <_Bfree>
 800970c:	4628      	mov	r0, r5
 800970e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009712:	f842 0f04 	str.w	r0, [r2, #4]!
 8009716:	3301      	adds	r3, #1
 8009718:	e7c5      	b.n	80096a6 <__lshift+0x4a>
 800971a:	3904      	subs	r1, #4
 800971c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009720:	f841 2f04 	str.w	r2, [r1, #4]!
 8009724:	459c      	cmp	ip, r3
 8009726:	d8f9      	bhi.n	800971c <__lshift+0xc0>
 8009728:	e7ea      	b.n	8009700 <__lshift+0xa4>
 800972a:	bf00      	nop
 800972c:	0800a10c 	.word	0x0800a10c
 8009730:	0800a11d 	.word	0x0800a11d

08009734 <__mcmp>:
 8009734:	690a      	ldr	r2, [r1, #16]
 8009736:	4603      	mov	r3, r0
 8009738:	6900      	ldr	r0, [r0, #16]
 800973a:	1a80      	subs	r0, r0, r2
 800973c:	b530      	push	{r4, r5, lr}
 800973e:	d10e      	bne.n	800975e <__mcmp+0x2a>
 8009740:	3314      	adds	r3, #20
 8009742:	3114      	adds	r1, #20
 8009744:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009748:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800974c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009750:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009754:	4295      	cmp	r5, r2
 8009756:	d003      	beq.n	8009760 <__mcmp+0x2c>
 8009758:	d205      	bcs.n	8009766 <__mcmp+0x32>
 800975a:	f04f 30ff 	mov.w	r0, #4294967295
 800975e:	bd30      	pop	{r4, r5, pc}
 8009760:	42a3      	cmp	r3, r4
 8009762:	d3f3      	bcc.n	800974c <__mcmp+0x18>
 8009764:	e7fb      	b.n	800975e <__mcmp+0x2a>
 8009766:	2001      	movs	r0, #1
 8009768:	e7f9      	b.n	800975e <__mcmp+0x2a>
	...

0800976c <__mdiff>:
 800976c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	4689      	mov	r9, r1
 8009772:	4606      	mov	r6, r0
 8009774:	4611      	mov	r1, r2
 8009776:	4648      	mov	r0, r9
 8009778:	4614      	mov	r4, r2
 800977a:	f7ff ffdb 	bl	8009734 <__mcmp>
 800977e:	1e05      	subs	r5, r0, #0
 8009780:	d112      	bne.n	80097a8 <__mdiff+0x3c>
 8009782:	4629      	mov	r1, r5
 8009784:	4630      	mov	r0, r6
 8009786:	f7ff fd5b 	bl	8009240 <_Balloc>
 800978a:	4602      	mov	r2, r0
 800978c:	b928      	cbnz	r0, 800979a <__mdiff+0x2e>
 800978e:	4b3f      	ldr	r3, [pc, #252]	@ (800988c <__mdiff+0x120>)
 8009790:	f240 2137 	movw	r1, #567	@ 0x237
 8009794:	483e      	ldr	r0, [pc, #248]	@ (8009890 <__mdiff+0x124>)
 8009796:	f000 fb65 	bl	8009e64 <__assert_func>
 800979a:	2301      	movs	r3, #1
 800979c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097a0:	4610      	mov	r0, r2
 80097a2:	b003      	add	sp, #12
 80097a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a8:	bfbc      	itt	lt
 80097aa:	464b      	movlt	r3, r9
 80097ac:	46a1      	movlt	r9, r4
 80097ae:	4630      	mov	r0, r6
 80097b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097b4:	bfba      	itte	lt
 80097b6:	461c      	movlt	r4, r3
 80097b8:	2501      	movlt	r5, #1
 80097ba:	2500      	movge	r5, #0
 80097bc:	f7ff fd40 	bl	8009240 <_Balloc>
 80097c0:	4602      	mov	r2, r0
 80097c2:	b918      	cbnz	r0, 80097cc <__mdiff+0x60>
 80097c4:	4b31      	ldr	r3, [pc, #196]	@ (800988c <__mdiff+0x120>)
 80097c6:	f240 2145 	movw	r1, #581	@ 0x245
 80097ca:	e7e3      	b.n	8009794 <__mdiff+0x28>
 80097cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80097d0:	6926      	ldr	r6, [r4, #16]
 80097d2:	60c5      	str	r5, [r0, #12]
 80097d4:	f109 0310 	add.w	r3, r9, #16
 80097d8:	f109 0514 	add.w	r5, r9, #20
 80097dc:	f104 0e14 	add.w	lr, r4, #20
 80097e0:	f100 0b14 	add.w	fp, r0, #20
 80097e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80097e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	46d9      	mov	r9, fp
 80097f0:	f04f 0c00 	mov.w	ip, #0
 80097f4:	9b01      	ldr	r3, [sp, #4]
 80097f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80097fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	fa1f f38a 	uxth.w	r3, sl
 8009804:	4619      	mov	r1, r3
 8009806:	b283      	uxth	r3, r0
 8009808:	1acb      	subs	r3, r1, r3
 800980a:	0c00      	lsrs	r0, r0, #16
 800980c:	4463      	add	r3, ip
 800980e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009812:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009816:	b29b      	uxth	r3, r3
 8009818:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800981c:	4576      	cmp	r6, lr
 800981e:	f849 3b04 	str.w	r3, [r9], #4
 8009822:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009826:	d8e5      	bhi.n	80097f4 <__mdiff+0x88>
 8009828:	1b33      	subs	r3, r6, r4
 800982a:	3b15      	subs	r3, #21
 800982c:	f023 0303 	bic.w	r3, r3, #3
 8009830:	3415      	adds	r4, #21
 8009832:	3304      	adds	r3, #4
 8009834:	42a6      	cmp	r6, r4
 8009836:	bf38      	it	cc
 8009838:	2304      	movcc	r3, #4
 800983a:	441d      	add	r5, r3
 800983c:	445b      	add	r3, fp
 800983e:	461e      	mov	r6, r3
 8009840:	462c      	mov	r4, r5
 8009842:	4544      	cmp	r4, r8
 8009844:	d30e      	bcc.n	8009864 <__mdiff+0xf8>
 8009846:	f108 0103 	add.w	r1, r8, #3
 800984a:	1b49      	subs	r1, r1, r5
 800984c:	f021 0103 	bic.w	r1, r1, #3
 8009850:	3d03      	subs	r5, #3
 8009852:	45a8      	cmp	r8, r5
 8009854:	bf38      	it	cc
 8009856:	2100      	movcc	r1, #0
 8009858:	440b      	add	r3, r1
 800985a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800985e:	b191      	cbz	r1, 8009886 <__mdiff+0x11a>
 8009860:	6117      	str	r7, [r2, #16]
 8009862:	e79d      	b.n	80097a0 <__mdiff+0x34>
 8009864:	f854 1b04 	ldr.w	r1, [r4], #4
 8009868:	46e6      	mov	lr, ip
 800986a:	0c08      	lsrs	r0, r1, #16
 800986c:	fa1c fc81 	uxtah	ip, ip, r1
 8009870:	4471      	add	r1, lr
 8009872:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009876:	b289      	uxth	r1, r1
 8009878:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800987c:	f846 1b04 	str.w	r1, [r6], #4
 8009880:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009884:	e7dd      	b.n	8009842 <__mdiff+0xd6>
 8009886:	3f01      	subs	r7, #1
 8009888:	e7e7      	b.n	800985a <__mdiff+0xee>
 800988a:	bf00      	nop
 800988c:	0800a10c 	.word	0x0800a10c
 8009890:	0800a11d 	.word	0x0800a11d

08009894 <__d2b>:
 8009894:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009898:	460f      	mov	r7, r1
 800989a:	2101      	movs	r1, #1
 800989c:	ec59 8b10 	vmov	r8, r9, d0
 80098a0:	4616      	mov	r6, r2
 80098a2:	f7ff fccd 	bl	8009240 <_Balloc>
 80098a6:	4604      	mov	r4, r0
 80098a8:	b930      	cbnz	r0, 80098b8 <__d2b+0x24>
 80098aa:	4602      	mov	r2, r0
 80098ac:	4b23      	ldr	r3, [pc, #140]	@ (800993c <__d2b+0xa8>)
 80098ae:	4824      	ldr	r0, [pc, #144]	@ (8009940 <__d2b+0xac>)
 80098b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80098b4:	f000 fad6 	bl	8009e64 <__assert_func>
 80098b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098c0:	b10d      	cbz	r5, 80098c6 <__d2b+0x32>
 80098c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	f1b8 0300 	subs.w	r3, r8, #0
 80098cc:	d023      	beq.n	8009916 <__d2b+0x82>
 80098ce:	4668      	mov	r0, sp
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	f7ff fd7c 	bl	80093ce <__lo0bits>
 80098d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098da:	b1d0      	cbz	r0, 8009912 <__d2b+0x7e>
 80098dc:	f1c0 0320 	rsb	r3, r0, #32
 80098e0:	fa02 f303 	lsl.w	r3, r2, r3
 80098e4:	430b      	orrs	r3, r1
 80098e6:	40c2      	lsrs	r2, r0
 80098e8:	6163      	str	r3, [r4, #20]
 80098ea:	9201      	str	r2, [sp, #4]
 80098ec:	9b01      	ldr	r3, [sp, #4]
 80098ee:	61a3      	str	r3, [r4, #24]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	bf0c      	ite	eq
 80098f4:	2201      	moveq	r2, #1
 80098f6:	2202      	movne	r2, #2
 80098f8:	6122      	str	r2, [r4, #16]
 80098fa:	b1a5      	cbz	r5, 8009926 <__d2b+0x92>
 80098fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009900:	4405      	add	r5, r0
 8009902:	603d      	str	r5, [r7, #0]
 8009904:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009908:	6030      	str	r0, [r6, #0]
 800990a:	4620      	mov	r0, r4
 800990c:	b003      	add	sp, #12
 800990e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009912:	6161      	str	r1, [r4, #20]
 8009914:	e7ea      	b.n	80098ec <__d2b+0x58>
 8009916:	a801      	add	r0, sp, #4
 8009918:	f7ff fd59 	bl	80093ce <__lo0bits>
 800991c:	9b01      	ldr	r3, [sp, #4]
 800991e:	6163      	str	r3, [r4, #20]
 8009920:	3020      	adds	r0, #32
 8009922:	2201      	movs	r2, #1
 8009924:	e7e8      	b.n	80098f8 <__d2b+0x64>
 8009926:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800992a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800992e:	6038      	str	r0, [r7, #0]
 8009930:	6918      	ldr	r0, [r3, #16]
 8009932:	f7ff fd2d 	bl	8009390 <__hi0bits>
 8009936:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800993a:	e7e5      	b.n	8009908 <__d2b+0x74>
 800993c:	0800a10c 	.word	0x0800a10c
 8009940:	0800a11d 	.word	0x0800a11d

08009944 <__sfputc_r>:
 8009944:	6893      	ldr	r3, [r2, #8]
 8009946:	3b01      	subs	r3, #1
 8009948:	2b00      	cmp	r3, #0
 800994a:	b410      	push	{r4}
 800994c:	6093      	str	r3, [r2, #8]
 800994e:	da08      	bge.n	8009962 <__sfputc_r+0x1e>
 8009950:	6994      	ldr	r4, [r2, #24]
 8009952:	42a3      	cmp	r3, r4
 8009954:	db01      	blt.n	800995a <__sfputc_r+0x16>
 8009956:	290a      	cmp	r1, #10
 8009958:	d103      	bne.n	8009962 <__sfputc_r+0x1e>
 800995a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800995e:	f7fe bc0e 	b.w	800817e <__swbuf_r>
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	1c58      	adds	r0, r3, #1
 8009966:	6010      	str	r0, [r2, #0]
 8009968:	7019      	strb	r1, [r3, #0]
 800996a:	4608      	mov	r0, r1
 800996c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009970:	4770      	bx	lr

08009972 <__sfputs_r>:
 8009972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009974:	4606      	mov	r6, r0
 8009976:	460f      	mov	r7, r1
 8009978:	4614      	mov	r4, r2
 800997a:	18d5      	adds	r5, r2, r3
 800997c:	42ac      	cmp	r4, r5
 800997e:	d101      	bne.n	8009984 <__sfputs_r+0x12>
 8009980:	2000      	movs	r0, #0
 8009982:	e007      	b.n	8009994 <__sfputs_r+0x22>
 8009984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009988:	463a      	mov	r2, r7
 800998a:	4630      	mov	r0, r6
 800998c:	f7ff ffda 	bl	8009944 <__sfputc_r>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d1f3      	bne.n	800997c <__sfputs_r+0xa>
 8009994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009998 <_vfiprintf_r>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	460d      	mov	r5, r1
 800999e:	b09d      	sub	sp, #116	@ 0x74
 80099a0:	4614      	mov	r4, r2
 80099a2:	4698      	mov	r8, r3
 80099a4:	4606      	mov	r6, r0
 80099a6:	b118      	cbz	r0, 80099b0 <_vfiprintf_r+0x18>
 80099a8:	6a03      	ldr	r3, [r0, #32]
 80099aa:	b90b      	cbnz	r3, 80099b0 <_vfiprintf_r+0x18>
 80099ac:	f7fe fafe 	bl	8007fac <__sinit>
 80099b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099b2:	07d9      	lsls	r1, r3, #31
 80099b4:	d405      	bmi.n	80099c2 <_vfiprintf_r+0x2a>
 80099b6:	89ab      	ldrh	r3, [r5, #12]
 80099b8:	059a      	lsls	r2, r3, #22
 80099ba:	d402      	bmi.n	80099c2 <_vfiprintf_r+0x2a>
 80099bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099be:	f7fe fcf0 	bl	80083a2 <__retarget_lock_acquire_recursive>
 80099c2:	89ab      	ldrh	r3, [r5, #12]
 80099c4:	071b      	lsls	r3, r3, #28
 80099c6:	d501      	bpl.n	80099cc <_vfiprintf_r+0x34>
 80099c8:	692b      	ldr	r3, [r5, #16]
 80099ca:	b99b      	cbnz	r3, 80099f4 <_vfiprintf_r+0x5c>
 80099cc:	4629      	mov	r1, r5
 80099ce:	4630      	mov	r0, r6
 80099d0:	f7fe fc14 	bl	80081fc <__swsetup_r>
 80099d4:	b170      	cbz	r0, 80099f4 <_vfiprintf_r+0x5c>
 80099d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099d8:	07dc      	lsls	r4, r3, #31
 80099da:	d504      	bpl.n	80099e6 <_vfiprintf_r+0x4e>
 80099dc:	f04f 30ff 	mov.w	r0, #4294967295
 80099e0:	b01d      	add	sp, #116	@ 0x74
 80099e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e6:	89ab      	ldrh	r3, [r5, #12]
 80099e8:	0598      	lsls	r0, r3, #22
 80099ea:	d4f7      	bmi.n	80099dc <_vfiprintf_r+0x44>
 80099ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099ee:	f7fe fcd9 	bl	80083a4 <__retarget_lock_release_recursive>
 80099f2:	e7f3      	b.n	80099dc <_vfiprintf_r+0x44>
 80099f4:	2300      	movs	r3, #0
 80099f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80099f8:	2320      	movs	r3, #32
 80099fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a02:	2330      	movs	r3, #48	@ 0x30
 8009a04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009bb4 <_vfiprintf_r+0x21c>
 8009a08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a0c:	f04f 0901 	mov.w	r9, #1
 8009a10:	4623      	mov	r3, r4
 8009a12:	469a      	mov	sl, r3
 8009a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a18:	b10a      	cbz	r2, 8009a1e <_vfiprintf_r+0x86>
 8009a1a:	2a25      	cmp	r2, #37	@ 0x25
 8009a1c:	d1f9      	bne.n	8009a12 <_vfiprintf_r+0x7a>
 8009a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a22:	d00b      	beq.n	8009a3c <_vfiprintf_r+0xa4>
 8009a24:	465b      	mov	r3, fp
 8009a26:	4622      	mov	r2, r4
 8009a28:	4629      	mov	r1, r5
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f7ff ffa1 	bl	8009972 <__sfputs_r>
 8009a30:	3001      	adds	r0, #1
 8009a32:	f000 80a7 	beq.w	8009b84 <_vfiprintf_r+0x1ec>
 8009a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a38:	445a      	add	r2, fp
 8009a3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 809f 	beq.w	8009b84 <_vfiprintf_r+0x1ec>
 8009a46:	2300      	movs	r3, #0
 8009a48:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a50:	f10a 0a01 	add.w	sl, sl, #1
 8009a54:	9304      	str	r3, [sp, #16]
 8009a56:	9307      	str	r3, [sp, #28]
 8009a58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a5e:	4654      	mov	r4, sl
 8009a60:	2205      	movs	r2, #5
 8009a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a66:	4853      	ldr	r0, [pc, #332]	@ (8009bb4 <_vfiprintf_r+0x21c>)
 8009a68:	f7f6 fbda 	bl	8000220 <memchr>
 8009a6c:	9a04      	ldr	r2, [sp, #16]
 8009a6e:	b9d8      	cbnz	r0, 8009aa8 <_vfiprintf_r+0x110>
 8009a70:	06d1      	lsls	r1, r2, #27
 8009a72:	bf44      	itt	mi
 8009a74:	2320      	movmi	r3, #32
 8009a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a7a:	0713      	lsls	r3, r2, #28
 8009a7c:	bf44      	itt	mi
 8009a7e:	232b      	movmi	r3, #43	@ 0x2b
 8009a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a84:	f89a 3000 	ldrb.w	r3, [sl]
 8009a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a8a:	d015      	beq.n	8009ab8 <_vfiprintf_r+0x120>
 8009a8c:	9a07      	ldr	r2, [sp, #28]
 8009a8e:	4654      	mov	r4, sl
 8009a90:	2000      	movs	r0, #0
 8009a92:	f04f 0c0a 	mov.w	ip, #10
 8009a96:	4621      	mov	r1, r4
 8009a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a9c:	3b30      	subs	r3, #48	@ 0x30
 8009a9e:	2b09      	cmp	r3, #9
 8009aa0:	d94b      	bls.n	8009b3a <_vfiprintf_r+0x1a2>
 8009aa2:	b1b0      	cbz	r0, 8009ad2 <_vfiprintf_r+0x13a>
 8009aa4:	9207      	str	r2, [sp, #28]
 8009aa6:	e014      	b.n	8009ad2 <_vfiprintf_r+0x13a>
 8009aa8:	eba0 0308 	sub.w	r3, r0, r8
 8009aac:	fa09 f303 	lsl.w	r3, r9, r3
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	46a2      	mov	sl, r4
 8009ab6:	e7d2      	b.n	8009a5e <_vfiprintf_r+0xc6>
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	1d19      	adds	r1, r3, #4
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	9103      	str	r1, [sp, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	bfbb      	ittet	lt
 8009ac4:	425b      	neglt	r3, r3
 8009ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8009aca:	9307      	strge	r3, [sp, #28]
 8009acc:	9307      	strlt	r3, [sp, #28]
 8009ace:	bfb8      	it	lt
 8009ad0:	9204      	strlt	r2, [sp, #16]
 8009ad2:	7823      	ldrb	r3, [r4, #0]
 8009ad4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ad6:	d10a      	bne.n	8009aee <_vfiprintf_r+0x156>
 8009ad8:	7863      	ldrb	r3, [r4, #1]
 8009ada:	2b2a      	cmp	r3, #42	@ 0x2a
 8009adc:	d132      	bne.n	8009b44 <_vfiprintf_r+0x1ac>
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	1d1a      	adds	r2, r3, #4
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	9203      	str	r2, [sp, #12]
 8009ae6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009aea:	3402      	adds	r4, #2
 8009aec:	9305      	str	r3, [sp, #20]
 8009aee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009bc4 <_vfiprintf_r+0x22c>
 8009af2:	7821      	ldrb	r1, [r4, #0]
 8009af4:	2203      	movs	r2, #3
 8009af6:	4650      	mov	r0, sl
 8009af8:	f7f6 fb92 	bl	8000220 <memchr>
 8009afc:	b138      	cbz	r0, 8009b0e <_vfiprintf_r+0x176>
 8009afe:	9b04      	ldr	r3, [sp, #16]
 8009b00:	eba0 000a 	sub.w	r0, r0, sl
 8009b04:	2240      	movs	r2, #64	@ 0x40
 8009b06:	4082      	lsls	r2, r0
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	3401      	adds	r4, #1
 8009b0c:	9304      	str	r3, [sp, #16]
 8009b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b12:	4829      	ldr	r0, [pc, #164]	@ (8009bb8 <_vfiprintf_r+0x220>)
 8009b14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b18:	2206      	movs	r2, #6
 8009b1a:	f7f6 fb81 	bl	8000220 <memchr>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d03f      	beq.n	8009ba2 <_vfiprintf_r+0x20a>
 8009b22:	4b26      	ldr	r3, [pc, #152]	@ (8009bbc <_vfiprintf_r+0x224>)
 8009b24:	bb1b      	cbnz	r3, 8009b6e <_vfiprintf_r+0x1d6>
 8009b26:	9b03      	ldr	r3, [sp, #12]
 8009b28:	3307      	adds	r3, #7
 8009b2a:	f023 0307 	bic.w	r3, r3, #7
 8009b2e:	3308      	adds	r3, #8
 8009b30:	9303      	str	r3, [sp, #12]
 8009b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b34:	443b      	add	r3, r7
 8009b36:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b38:	e76a      	b.n	8009a10 <_vfiprintf_r+0x78>
 8009b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b3e:	460c      	mov	r4, r1
 8009b40:	2001      	movs	r0, #1
 8009b42:	e7a8      	b.n	8009a96 <_vfiprintf_r+0xfe>
 8009b44:	2300      	movs	r3, #0
 8009b46:	3401      	adds	r4, #1
 8009b48:	9305      	str	r3, [sp, #20]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f04f 0c0a 	mov.w	ip, #10
 8009b50:	4620      	mov	r0, r4
 8009b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b56:	3a30      	subs	r2, #48	@ 0x30
 8009b58:	2a09      	cmp	r2, #9
 8009b5a:	d903      	bls.n	8009b64 <_vfiprintf_r+0x1cc>
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0c6      	beq.n	8009aee <_vfiprintf_r+0x156>
 8009b60:	9105      	str	r1, [sp, #20]
 8009b62:	e7c4      	b.n	8009aee <_vfiprintf_r+0x156>
 8009b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b68:	4604      	mov	r4, r0
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e7f0      	b.n	8009b50 <_vfiprintf_r+0x1b8>
 8009b6e:	ab03      	add	r3, sp, #12
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	462a      	mov	r2, r5
 8009b74:	4b12      	ldr	r3, [pc, #72]	@ (8009bc0 <_vfiprintf_r+0x228>)
 8009b76:	a904      	add	r1, sp, #16
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7fd fdd3 	bl	8007724 <_printf_float>
 8009b7e:	4607      	mov	r7, r0
 8009b80:	1c78      	adds	r0, r7, #1
 8009b82:	d1d6      	bne.n	8009b32 <_vfiprintf_r+0x19a>
 8009b84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b86:	07d9      	lsls	r1, r3, #31
 8009b88:	d405      	bmi.n	8009b96 <_vfiprintf_r+0x1fe>
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	059a      	lsls	r2, r3, #22
 8009b8e:	d402      	bmi.n	8009b96 <_vfiprintf_r+0x1fe>
 8009b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b92:	f7fe fc07 	bl	80083a4 <__retarget_lock_release_recursive>
 8009b96:	89ab      	ldrh	r3, [r5, #12]
 8009b98:	065b      	lsls	r3, r3, #25
 8009b9a:	f53f af1f 	bmi.w	80099dc <_vfiprintf_r+0x44>
 8009b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ba0:	e71e      	b.n	80099e0 <_vfiprintf_r+0x48>
 8009ba2:	ab03      	add	r3, sp, #12
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	462a      	mov	r2, r5
 8009ba8:	4b05      	ldr	r3, [pc, #20]	@ (8009bc0 <_vfiprintf_r+0x228>)
 8009baa:	a904      	add	r1, sp, #16
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7fe f851 	bl	8007c54 <_printf_i>
 8009bb2:	e7e4      	b.n	8009b7e <_vfiprintf_r+0x1e6>
 8009bb4:	0800a278 	.word	0x0800a278
 8009bb8:	0800a282 	.word	0x0800a282
 8009bbc:	08007725 	.word	0x08007725
 8009bc0:	08009973 	.word	0x08009973
 8009bc4:	0800a27e 	.word	0x0800a27e

08009bc8 <__sflush_r>:
 8009bc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd0:	0716      	lsls	r6, r2, #28
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	d454      	bmi.n	8009c82 <__sflush_r+0xba>
 8009bd8:	684b      	ldr	r3, [r1, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dc02      	bgt.n	8009be4 <__sflush_r+0x1c>
 8009bde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	dd48      	ble.n	8009c76 <__sflush_r+0xae>
 8009be4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009be6:	2e00      	cmp	r6, #0
 8009be8:	d045      	beq.n	8009c76 <__sflush_r+0xae>
 8009bea:	2300      	movs	r3, #0
 8009bec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bf0:	682f      	ldr	r7, [r5, #0]
 8009bf2:	6a21      	ldr	r1, [r4, #32]
 8009bf4:	602b      	str	r3, [r5, #0]
 8009bf6:	d030      	beq.n	8009c5a <__sflush_r+0x92>
 8009bf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	0759      	lsls	r1, r3, #29
 8009bfe:	d505      	bpl.n	8009c0c <__sflush_r+0x44>
 8009c00:	6863      	ldr	r3, [r4, #4]
 8009c02:	1ad2      	subs	r2, r2, r3
 8009c04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c06:	b10b      	cbz	r3, 8009c0c <__sflush_r+0x44>
 8009c08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c0a:	1ad2      	subs	r2, r2, r3
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c10:	6a21      	ldr	r1, [r4, #32]
 8009c12:	4628      	mov	r0, r5
 8009c14:	47b0      	blx	r6
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	d106      	bne.n	8009c2a <__sflush_r+0x62>
 8009c1c:	6829      	ldr	r1, [r5, #0]
 8009c1e:	291d      	cmp	r1, #29
 8009c20:	d82b      	bhi.n	8009c7a <__sflush_r+0xb2>
 8009c22:	4a2a      	ldr	r2, [pc, #168]	@ (8009ccc <__sflush_r+0x104>)
 8009c24:	410a      	asrs	r2, r1
 8009c26:	07d6      	lsls	r6, r2, #31
 8009c28:	d427      	bmi.n	8009c7a <__sflush_r+0xb2>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	6062      	str	r2, [r4, #4]
 8009c2e:	04d9      	lsls	r1, r3, #19
 8009c30:	6922      	ldr	r2, [r4, #16]
 8009c32:	6022      	str	r2, [r4, #0]
 8009c34:	d504      	bpl.n	8009c40 <__sflush_r+0x78>
 8009c36:	1c42      	adds	r2, r0, #1
 8009c38:	d101      	bne.n	8009c3e <__sflush_r+0x76>
 8009c3a:	682b      	ldr	r3, [r5, #0]
 8009c3c:	b903      	cbnz	r3, 8009c40 <__sflush_r+0x78>
 8009c3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c42:	602f      	str	r7, [r5, #0]
 8009c44:	b1b9      	cbz	r1, 8009c76 <__sflush_r+0xae>
 8009c46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c4a:	4299      	cmp	r1, r3
 8009c4c:	d002      	beq.n	8009c54 <__sflush_r+0x8c>
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f7ff f9f6 	bl	8009040 <_free_r>
 8009c54:	2300      	movs	r3, #0
 8009c56:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c58:	e00d      	b.n	8009c76 <__sflush_r+0xae>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b0      	blx	r6
 8009c60:	4602      	mov	r2, r0
 8009c62:	1c50      	adds	r0, r2, #1
 8009c64:	d1c9      	bne.n	8009bfa <__sflush_r+0x32>
 8009c66:	682b      	ldr	r3, [r5, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0c6      	beq.n	8009bfa <__sflush_r+0x32>
 8009c6c:	2b1d      	cmp	r3, #29
 8009c6e:	d001      	beq.n	8009c74 <__sflush_r+0xac>
 8009c70:	2b16      	cmp	r3, #22
 8009c72:	d11e      	bne.n	8009cb2 <__sflush_r+0xea>
 8009c74:	602f      	str	r7, [r5, #0]
 8009c76:	2000      	movs	r0, #0
 8009c78:	e022      	b.n	8009cc0 <__sflush_r+0xf8>
 8009c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c7e:	b21b      	sxth	r3, r3
 8009c80:	e01b      	b.n	8009cba <__sflush_r+0xf2>
 8009c82:	690f      	ldr	r7, [r1, #16]
 8009c84:	2f00      	cmp	r7, #0
 8009c86:	d0f6      	beq.n	8009c76 <__sflush_r+0xae>
 8009c88:	0793      	lsls	r3, r2, #30
 8009c8a:	680e      	ldr	r6, [r1, #0]
 8009c8c:	bf08      	it	eq
 8009c8e:	694b      	ldreq	r3, [r1, #20]
 8009c90:	600f      	str	r7, [r1, #0]
 8009c92:	bf18      	it	ne
 8009c94:	2300      	movne	r3, #0
 8009c96:	eba6 0807 	sub.w	r8, r6, r7
 8009c9a:	608b      	str	r3, [r1, #8]
 8009c9c:	f1b8 0f00 	cmp.w	r8, #0
 8009ca0:	dde9      	ble.n	8009c76 <__sflush_r+0xae>
 8009ca2:	6a21      	ldr	r1, [r4, #32]
 8009ca4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ca6:	4643      	mov	r3, r8
 8009ca8:	463a      	mov	r2, r7
 8009caa:	4628      	mov	r0, r5
 8009cac:	47b0      	blx	r6
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	dc08      	bgt.n	8009cc4 <__sflush_r+0xfc>
 8009cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc4:	4407      	add	r7, r0
 8009cc6:	eba8 0800 	sub.w	r8, r8, r0
 8009cca:	e7e7      	b.n	8009c9c <__sflush_r+0xd4>
 8009ccc:	dfbffffe 	.word	0xdfbffffe

08009cd0 <_fflush_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	690b      	ldr	r3, [r1, #16]
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	b913      	cbnz	r3, 8009ce0 <_fflush_r+0x10>
 8009cda:	2500      	movs	r5, #0
 8009cdc:	4628      	mov	r0, r5
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	b118      	cbz	r0, 8009cea <_fflush_r+0x1a>
 8009ce2:	6a03      	ldr	r3, [r0, #32]
 8009ce4:	b90b      	cbnz	r3, 8009cea <_fflush_r+0x1a>
 8009ce6:	f7fe f961 	bl	8007fac <__sinit>
 8009cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0f3      	beq.n	8009cda <_fflush_r+0xa>
 8009cf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cf4:	07d0      	lsls	r0, r2, #31
 8009cf6:	d404      	bmi.n	8009d02 <_fflush_r+0x32>
 8009cf8:	0599      	lsls	r1, r3, #22
 8009cfa:	d402      	bmi.n	8009d02 <_fflush_r+0x32>
 8009cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cfe:	f7fe fb50 	bl	80083a2 <__retarget_lock_acquire_recursive>
 8009d02:	4628      	mov	r0, r5
 8009d04:	4621      	mov	r1, r4
 8009d06:	f7ff ff5f 	bl	8009bc8 <__sflush_r>
 8009d0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d0c:	07da      	lsls	r2, r3, #31
 8009d0e:	4605      	mov	r5, r0
 8009d10:	d4e4      	bmi.n	8009cdc <_fflush_r+0xc>
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	059b      	lsls	r3, r3, #22
 8009d16:	d4e1      	bmi.n	8009cdc <_fflush_r+0xc>
 8009d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d1a:	f7fe fb43 	bl	80083a4 <__retarget_lock_release_recursive>
 8009d1e:	e7dd      	b.n	8009cdc <_fflush_r+0xc>

08009d20 <__swhatbuf_r>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	460c      	mov	r4, r1
 8009d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	b096      	sub	sp, #88	@ 0x58
 8009d2c:	4615      	mov	r5, r2
 8009d2e:	461e      	mov	r6, r3
 8009d30:	da0d      	bge.n	8009d4e <__swhatbuf_r+0x2e>
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d38:	f04f 0100 	mov.w	r1, #0
 8009d3c:	bf14      	ite	ne
 8009d3e:	2340      	movne	r3, #64	@ 0x40
 8009d40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d44:	2000      	movs	r0, #0
 8009d46:	6031      	str	r1, [r6, #0]
 8009d48:	602b      	str	r3, [r5, #0]
 8009d4a:	b016      	add	sp, #88	@ 0x58
 8009d4c:	bd70      	pop	{r4, r5, r6, pc}
 8009d4e:	466a      	mov	r2, sp
 8009d50:	f000 f848 	bl	8009de4 <_fstat_r>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	dbec      	blt.n	8009d32 <__swhatbuf_r+0x12>
 8009d58:	9901      	ldr	r1, [sp, #4]
 8009d5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d62:	4259      	negs	r1, r3
 8009d64:	4159      	adcs	r1, r3
 8009d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d6a:	e7eb      	b.n	8009d44 <__swhatbuf_r+0x24>

08009d6c <__smakebuf_r>:
 8009d6c:	898b      	ldrh	r3, [r1, #12]
 8009d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d70:	079d      	lsls	r5, r3, #30
 8009d72:	4606      	mov	r6, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	d507      	bpl.n	8009d88 <__smakebuf_r+0x1c>
 8009d78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	6123      	str	r3, [r4, #16]
 8009d80:	2301      	movs	r3, #1
 8009d82:	6163      	str	r3, [r4, #20]
 8009d84:	b003      	add	sp, #12
 8009d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d88:	ab01      	add	r3, sp, #4
 8009d8a:	466a      	mov	r2, sp
 8009d8c:	f7ff ffc8 	bl	8009d20 <__swhatbuf_r>
 8009d90:	9f00      	ldr	r7, [sp, #0]
 8009d92:	4605      	mov	r5, r0
 8009d94:	4639      	mov	r1, r7
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff f9c6 	bl	8009128 <_malloc_r>
 8009d9c:	b948      	cbnz	r0, 8009db2 <__smakebuf_r+0x46>
 8009d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da2:	059a      	lsls	r2, r3, #22
 8009da4:	d4ee      	bmi.n	8009d84 <__smakebuf_r+0x18>
 8009da6:	f023 0303 	bic.w	r3, r3, #3
 8009daa:	f043 0302 	orr.w	r3, r3, #2
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	e7e2      	b.n	8009d78 <__smakebuf_r+0xc>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	6020      	str	r0, [r4, #0]
 8009db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	9b01      	ldr	r3, [sp, #4]
 8009dbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009dc2:	b15b      	cbz	r3, 8009ddc <__smakebuf_r+0x70>
 8009dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f000 f81d 	bl	8009e08 <_isatty_r>
 8009dce:	b128      	cbz	r0, 8009ddc <__smakebuf_r+0x70>
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	f023 0303 	bic.w	r3, r3, #3
 8009dd6:	f043 0301 	orr.w	r3, r3, #1
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	431d      	orrs	r5, r3
 8009de0:	81a5      	strh	r5, [r4, #12]
 8009de2:	e7cf      	b.n	8009d84 <__smakebuf_r+0x18>

08009de4 <_fstat_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d07      	ldr	r5, [pc, #28]	@ (8009e04 <_fstat_r+0x20>)
 8009de8:	2300      	movs	r3, #0
 8009dea:	4604      	mov	r4, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	4611      	mov	r1, r2
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	f7f8 f8ce 	bl	8001f92 <_fstat>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	d102      	bne.n	8009e00 <_fstat_r+0x1c>
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	b103      	cbz	r3, 8009e00 <_fstat_r+0x1c>
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	bd38      	pop	{r3, r4, r5, pc}
 8009e02:	bf00      	nop
 8009e04:	200005d4 	.word	0x200005d4

08009e08 <_isatty_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d06      	ldr	r5, [pc, #24]	@ (8009e24 <_isatty_r+0x1c>)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4604      	mov	r4, r0
 8009e10:	4608      	mov	r0, r1
 8009e12:	602b      	str	r3, [r5, #0]
 8009e14:	f7f8 f8cd 	bl	8001fb2 <_isatty>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_isatty_r+0x1a>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_isatty_r+0x1a>
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	200005d4 	.word	0x200005d4

08009e28 <_sbrk_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d06      	ldr	r5, [pc, #24]	@ (8009e44 <_sbrk_r+0x1c>)
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4608      	mov	r0, r1
 8009e32:	602b      	str	r3, [r5, #0]
 8009e34:	f7f8 f8d6 	bl	8001fe4 <_sbrk>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_sbrk_r+0x1a>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_sbrk_r+0x1a>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	200005d4 	.word	0x200005d4

08009e48 <memcpy>:
 8009e48:	440a      	add	r2, r1
 8009e4a:	4291      	cmp	r1, r2
 8009e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e50:	d100      	bne.n	8009e54 <memcpy+0xc>
 8009e52:	4770      	bx	lr
 8009e54:	b510      	push	{r4, lr}
 8009e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e5e:	4291      	cmp	r1, r2
 8009e60:	d1f9      	bne.n	8009e56 <memcpy+0xe>
 8009e62:	bd10      	pop	{r4, pc}

08009e64 <__assert_func>:
 8009e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e66:	4614      	mov	r4, r2
 8009e68:	461a      	mov	r2, r3
 8009e6a:	4b09      	ldr	r3, [pc, #36]	@ (8009e90 <__assert_func+0x2c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4605      	mov	r5, r0
 8009e70:	68d8      	ldr	r0, [r3, #12]
 8009e72:	b954      	cbnz	r4, 8009e8a <__assert_func+0x26>
 8009e74:	4b07      	ldr	r3, [pc, #28]	@ (8009e94 <__assert_func+0x30>)
 8009e76:	461c      	mov	r4, r3
 8009e78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e7c:	9100      	str	r1, [sp, #0]
 8009e7e:	462b      	mov	r3, r5
 8009e80:	4905      	ldr	r1, [pc, #20]	@ (8009e98 <__assert_func+0x34>)
 8009e82:	f000 f841 	bl	8009f08 <fiprintf>
 8009e86:	f000 f851 	bl	8009f2c <abort>
 8009e8a:	4b04      	ldr	r3, [pc, #16]	@ (8009e9c <__assert_func+0x38>)
 8009e8c:	e7f4      	b.n	8009e78 <__assert_func+0x14>
 8009e8e:	bf00      	nop
 8009e90:	20000018 	.word	0x20000018
 8009e94:	0800a2ce 	.word	0x0800a2ce
 8009e98:	0800a2a0 	.word	0x0800a2a0
 8009e9c:	0800a293 	.word	0x0800a293

08009ea0 <_calloc_r>:
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	fba1 5402 	umull	r5, r4, r1, r2
 8009ea6:	b93c      	cbnz	r4, 8009eb8 <_calloc_r+0x18>
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	f7ff f93d 	bl	8009128 <_malloc_r>
 8009eae:	4606      	mov	r6, r0
 8009eb0:	b928      	cbnz	r0, 8009ebe <_calloc_r+0x1e>
 8009eb2:	2600      	movs	r6, #0
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	220c      	movs	r2, #12
 8009eba:	6002      	str	r2, [r0, #0]
 8009ebc:	e7f9      	b.n	8009eb2 <_calloc_r+0x12>
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	f7fe f9f1 	bl	80082a8 <memset>
 8009ec6:	e7f5      	b.n	8009eb4 <_calloc_r+0x14>

08009ec8 <__ascii_mbtowc>:
 8009ec8:	b082      	sub	sp, #8
 8009eca:	b901      	cbnz	r1, 8009ece <__ascii_mbtowc+0x6>
 8009ecc:	a901      	add	r1, sp, #4
 8009ece:	b142      	cbz	r2, 8009ee2 <__ascii_mbtowc+0x1a>
 8009ed0:	b14b      	cbz	r3, 8009ee6 <__ascii_mbtowc+0x1e>
 8009ed2:	7813      	ldrb	r3, [r2, #0]
 8009ed4:	600b      	str	r3, [r1, #0]
 8009ed6:	7812      	ldrb	r2, [r2, #0]
 8009ed8:	1e10      	subs	r0, r2, #0
 8009eda:	bf18      	it	ne
 8009edc:	2001      	movne	r0, #1
 8009ede:	b002      	add	sp, #8
 8009ee0:	4770      	bx	lr
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	e7fb      	b.n	8009ede <__ascii_mbtowc+0x16>
 8009ee6:	f06f 0001 	mvn.w	r0, #1
 8009eea:	e7f8      	b.n	8009ede <__ascii_mbtowc+0x16>

08009eec <__ascii_wctomb>:
 8009eec:	4603      	mov	r3, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	b141      	cbz	r1, 8009f04 <__ascii_wctomb+0x18>
 8009ef2:	2aff      	cmp	r2, #255	@ 0xff
 8009ef4:	d904      	bls.n	8009f00 <__ascii_wctomb+0x14>
 8009ef6:	228a      	movs	r2, #138	@ 0x8a
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	f04f 30ff 	mov.w	r0, #4294967295
 8009efe:	4770      	bx	lr
 8009f00:	700a      	strb	r2, [r1, #0]
 8009f02:	2001      	movs	r0, #1
 8009f04:	4770      	bx	lr
	...

08009f08 <fiprintf>:
 8009f08:	b40e      	push	{r1, r2, r3}
 8009f0a:	b503      	push	{r0, r1, lr}
 8009f0c:	4601      	mov	r1, r0
 8009f0e:	ab03      	add	r3, sp, #12
 8009f10:	4805      	ldr	r0, [pc, #20]	@ (8009f28 <fiprintf+0x20>)
 8009f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f16:	6800      	ldr	r0, [r0, #0]
 8009f18:	9301      	str	r3, [sp, #4]
 8009f1a:	f7ff fd3d 	bl	8009998 <_vfiprintf_r>
 8009f1e:	b002      	add	sp, #8
 8009f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f24:	b003      	add	sp, #12
 8009f26:	4770      	bx	lr
 8009f28:	20000018 	.word	0x20000018

08009f2c <abort>:
 8009f2c:	b508      	push	{r3, lr}
 8009f2e:	2006      	movs	r0, #6
 8009f30:	f000 f82c 	bl	8009f8c <raise>
 8009f34:	2001      	movs	r0, #1
 8009f36:	f7f7 ffdc 	bl	8001ef2 <_exit>

08009f3a <_raise_r>:
 8009f3a:	291f      	cmp	r1, #31
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4605      	mov	r5, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	d904      	bls.n	8009f4e <_raise_r+0x14>
 8009f44:	2316      	movs	r3, #22
 8009f46:	6003      	str	r3, [r0, #0]
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f50:	b112      	cbz	r2, 8009f58 <_raise_r+0x1e>
 8009f52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f56:	b94b      	cbnz	r3, 8009f6c <_raise_r+0x32>
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f000 f831 	bl	8009fc0 <_getpid_r>
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4601      	mov	r1, r0
 8009f62:	4628      	mov	r0, r5
 8009f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f68:	f000 b818 	b.w	8009f9c <_kill_r>
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d00a      	beq.n	8009f86 <_raise_r+0x4c>
 8009f70:	1c59      	adds	r1, r3, #1
 8009f72:	d103      	bne.n	8009f7c <_raise_r+0x42>
 8009f74:	2316      	movs	r3, #22
 8009f76:	6003      	str	r3, [r0, #0]
 8009f78:	2001      	movs	r0, #1
 8009f7a:	e7e7      	b.n	8009f4c <_raise_r+0x12>
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f82:	4620      	mov	r0, r4
 8009f84:	4798      	blx	r3
 8009f86:	2000      	movs	r0, #0
 8009f88:	e7e0      	b.n	8009f4c <_raise_r+0x12>
	...

08009f8c <raise>:
 8009f8c:	4b02      	ldr	r3, [pc, #8]	@ (8009f98 <raise+0xc>)
 8009f8e:	4601      	mov	r1, r0
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	f7ff bfd2 	b.w	8009f3a <_raise_r>
 8009f96:	bf00      	nop
 8009f98:	20000018 	.word	0x20000018

08009f9c <_kill_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	@ (8009fbc <_kill_r+0x20>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	f7f7 ff92 	bl	8001ed2 <_kill>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d102      	bne.n	8009fb8 <_kill_r+0x1c>
 8009fb2:	682b      	ldr	r3, [r5, #0]
 8009fb4:	b103      	cbz	r3, 8009fb8 <_kill_r+0x1c>
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}
 8009fba:	bf00      	nop
 8009fbc:	200005d4 	.word	0x200005d4

08009fc0 <_getpid_r>:
 8009fc0:	f7f7 bf7f 	b.w	8001ec2 <_getpid>

08009fc4 <_init>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	bf00      	nop
 8009fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fca:	bc08      	pop	{r3}
 8009fcc:	469e      	mov	lr, r3
 8009fce:	4770      	bx	lr

08009fd0 <_fini>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr
